{"version":3,"file":"8422.505a17fb3a3759b94f17.js","mappings":"qVA8EA,MAGMA,EAA2C,CAC/CC,GAAIC,EAAAA,IACJC,WAAY,IACZC,KAAM,kBACNC,OAAO,EACPC,YAAa,IAGTC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GAssDvEG,eAAeC,EACbC,EACAC,EACAC,EACAC,GAGA,IAFAC,EAAgB,UAAH,8CACbC,EAAyB,uCAEzBL,GAASM,EAAAA,EAAAA,MACT,IAAIC,GAA0BC,EAAAA,EAAAA,IAA8BR,IAASS,QACrE,MAAMC,QAAeC,EAAAA,EAAAA,IAAQ,aAAc,CACzCC,MAAOC,EAAAA,IACPV,aACAW,SAAuB,aAAbb,EACVc,WAAYX,EACZG,4BAGF,IAAKG,EACH,OAGF,MAAM,QAAEM,GAAYN,EAUpB,GARIM,EAAQC,OAAS,GAAKD,EAAQ,KAAOd,GACvCc,EAAQE,QAGVlB,GAASM,EAAAA,EAAAA,MAETC,GAA0BC,EAAAA,EAAAA,IAA8BR,IAASS,QAE7DL,GAA8B,WAAbH,EAAuB,CAE1C,IAAKe,EAAQG,SAAS/B,EAAAA,KAAgC,CACpD,MAAMgC,QAAgBT,EAAAA,EAAAA,IAAQ,YAAa,CACzCrB,KAAM,OACN+B,KAAMnC,IAGRc,GAASM,EAAAA,EAAAA,MAET,MAAMgB,EAAoBF,IAAWG,EAAAA,EAAAA,IAAWvB,EAAQoB,EAAQI,QAC5DF,IACFN,EAAQS,QAAQH,EAAkBnC,IAClCuB,EAAOgB,MAAMD,QAAQH,GACjBf,IACFe,EAAkBK,YAAcpB,GAGtC,CAEA,MAAMqB,EAAYC,OAAOC,OAAO9B,EAAO+B,SACjCC,EAAeJ,EAAUK,SAAQ,IAAmB,IAAhB9C,GAAI+C,GAAO,EACnD,MAAMC,GAAcC,EAAAA,EAAAA,IAAkBpC,EAAQkC,GAC9C,OAAOC,EAAc,CAACA,GAAe,EAAE,IAGnCE,EAAeT,EAAUK,SAAQ,IAAmB,IAAhB9C,GAAI+C,GAAO,EACnD,OAAOI,EAAAA,EAAAA,IAAmBtC,EAAQkC,IAAU,EAAE,IAG5ClC,EAAOuC,eAAiBvC,EAAOwC,MAAMC,KAAKzC,EAAOuC,gBACnDF,EAAaK,KAAK1C,EAAOwC,MAAMC,KAAKzC,EAAOuC,gBAG7CvC,GAAS2C,EAAAA,EAAAA,IAAa3C,GAAQ4C,EAAAA,EAAAA,IAAqBP,EAAaQ,OAAOnC,EAAO8B,OAAQ,OACtFxC,GAAS8C,EAAAA,EAAAA,IAAoB9C,EAAQU,EAAOqC,kBAC5C/C,GAASgD,EAAAA,EAAAA,IAAahD,GAAQ4C,EAAAA,EAAAA,IAAqBZ,EAAaa,OAAOnC,EAAOgB,OAAQ,OACtF1B,GAASiD,EAAAA,EAAAA,IAAmBjD,EAAQC,EAAUe,EAChD,MAAO,GAAIZ,GAA8B,aAAbH,EAC1BD,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASmD,EAAAA,EAAAA,IAAgBnD,EAAQU,EAAOqC,kBACxC/C,GAASoD,EAAAA,EAAAA,IAAYpD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,OAChE1B,GAASiD,EAAAA,EAAAA,IAAmBjD,EAAQC,EAAUe,OACzC,CACL,MAAMqC,GAAWT,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,MACpD,GAAIV,EAAQG,SAAS/B,EAAAA,KAAgC,CACnD,MAAMkC,EAAoB+B,EAASjE,EAAAA,KAC/BkC,GAAqBf,IACvB8C,EAASjE,EAAAA,KAAiC,IACrCkC,EACHK,YAAapB,GAGnB,CAEAP,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASmD,EAAAA,EAAAA,IAAgBnD,EAAQU,EAAOqC,kBACxC/C,GAASoD,EAAAA,EAAAA,IAAYpD,EAAQqD,GAC7BrD,GAASsD,EAAAA,EAAAA,IAAkBtD,EAAQC,EAAUe,EAC/C,CAEAhB,GAASuD,EAAAA,EAAAA,IAA4BvD,EAAQC,EAAUS,GAEvD,MAAM8C,EAAmBnD,EAAkBK,EAAOM,QAAUa,OAAO4B,KAAK/C,EAAOgD,YAC/EF,EAAiBG,SAASnC,IACxB,MAAMoC,EAAQlD,EAAOgD,WAAWlC,GAC1BqC,GAASC,EAAAA,EAAAA,IAAa9D,EAAQwB,EAAQuC,EAAAA,KAEvCH,GAAUC,MAEVG,EAAAA,EAAAA,IAAYhE,EAAQwB,EAAQuC,EAAAA,KAAiBE,UAChDjE,GAASkE,EAAAA,EAAAA,IACPlE,EAAQwB,EAAQuC,EAAAA,GAAgB,QAASH,IAE7C,IAGF,MAAMO,EAA0B9D,EAAkBK,EAAOM,QAAUa,OAAO4B,KAAK/C,EAAO0D,gBACtFD,EAAwBR,SAASnC,IAC/B,MAAM4C,EAAiB1D,EAAO0D,eAAe5C,GACvCqC,GAASC,EAAAA,EAAAA,IAAa9D,EAAQwB,EAAQuC,EAAAA,KAEvCK,GAAmBP,KAExB7D,GAASkE,EAAAA,EAAAA,IACPlE,EAAQwB,EAAQuC,EAAAA,GAAgB,eAAgBK,GACjD,IAGoB,IAAnBpD,EAAQC,QAAiBjB,EAAO0B,MAAM2C,cAAcpE,KACtDD,EAAS,IACJA,EACH0B,MAAO,IACF1B,EAAO0B,MACV2C,cAAe,IACVrE,EAAO0B,MAAM2C,cAChB,CAACpE,IAAW,OAMpBqE,EAAAA,EAAAA,IAAUtE,EACZ,CAEOF,eAAeyE,EACpBvE,EAAWwE,EAAgCC,GAE3C,sFADIvC,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMhE,QAAeC,EAAAA,EAAAA,IAAQ,gBAAiB8D,GAC9C,IAAK/D,EACH,OAGF,MAAM,MACJ8B,EAAK,iBAAEO,EAAgB,SAAE4B,EAAQ,UAAEC,EAAS,aAAEC,GAC5CnE,EAWJ,GATAV,GAASM,EAAAA,EAAAA,MACLkC,IACFxC,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBJ,EAAO,QAGpDO,IACF/C,GAASmD,EAAAA,EAAAA,IAAgBnD,EAAQ+C,IAG/B6B,EAAW,CACb,MAAME,GAAoBC,EAAAA,EAAAA,IAAgB/E,EAAQ4E,EAAUzF,IAC5Da,GAASgF,EAAAA,EAAAA,IACPhF,EACA4E,EAAUzF,IACV8F,EAAAA,EAAAA,IAAKL,EAAW,CAAC,yBACjBM,EACAJ,OAAoBI,EAAYN,EAAUO,kBAE9C,CAEAnF,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAI,CACnCwF,cACIE,GAAgB,CAAEA,mBAGxBP,EAAAA,EAAAA,IAAUtE,GAEV,MAAMqF,EAAaV,EAASU,WAW5B,OAVIA,GACFb,EAAQc,aAAa,CACnBC,eAAgB,CACdpG,GAAIkG,EAAWlG,GACfE,WAAYgG,EAAWhG,YAEzB6C,UAIGxB,CACT,CAEOZ,eAAe0F,EACpBxF,EAAWwE,EAAgCC,GAEb,sFAD1BvC,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B,IAGE,aAFyB/D,EAAAA,EAAAA,IAAQ,cAAe8D,EAWlD,CARE,MAAOgB,GAOP,YANoC,sBAA/BA,EAAmBhF,QACtB+D,EAAQkB,sBAAsB,CAAE9E,MAAO,WAAYsB,UAEnDsC,EAAQmB,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ3D,UAI9E,CACF,CAEOpC,eAAegG,EACpB9F,EACA+F,GAEA/F,GAASM,EAAAA,EAAAA,MACT,MAAM0F,GAAYC,EAAAA,EAAAA,IAAqBjG,EAAQ+F,GAC/C,GAAIC,IAAcA,EAAUzG,MAC1B,OAAOyG,EAGT,MAAM,KAAEvB,EAAI,KAAEpD,SAAeV,EAAAA,EAAAA,IAAQ,oBAAqBoF,IAAa,CAAC,EACxE,OAAKtB,GAILzE,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAIsF,GACjCpD,IACFrB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQqB,EAAKlC,GAAIkC,KAGvCiD,EAAAA,EAAAA,IAAUtE,GAEHyE,QAZP,CAaF,CA0BA3E,eAAeqG,EACbnG,EAAWwE,EAAgCuB,GAE3C,sFADI7D,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMD,QAAaqB,EAAoB9F,EAAQ+F,GAC/C,IAAKtB,EAAM,OAEXzE,GAASM,EAAAA,EAAAA,MACT,MAAMe,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQyE,EAAKtF,IACrC,IAAKkC,EAAM,OAEX,MAAMgF,GAAQC,EAAAA,EAAAA,IAAUjF,GACxB,IAAKgF,EAAO,OACZ,MAAM3F,QAAeC,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C4F,IAAKlF,IAIP,GADArB,GAASM,EAAAA,EAAAA,MACJI,EAYL,OAHAV,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,QAC7D8B,EAAAA,EAAAA,IAAUtE,GAEHU,EAAO6F,IAXZ/B,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,0CAChCvE,SAUN,CAmEApC,eAAe4G,EACb1G,EACAwE,EACAhD,EACAmF,EACAC,GAEA,sFADI1E,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B1E,GAASM,EAAAA,EAAAA,MACT,MAAMiG,QAAYJ,EAAqBnG,EAAQwE,EAASmC,EAAQzE,GAC3DqE,GAEL/B,EAAQqC,cAAc,CACpBN,MACA/E,YAC2B,iBAAhBoF,GAA4B,CAAEE,WAAYF,GACrD1E,SAEJ,CAEOpC,eAAeiH,EACpB/G,EACAwE,EACAhD,GAEA,sFADIU,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMD,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,KAASuC,EAAAA,EAAAA,IAAiBvC,GAC7B,OAAOA,EAGT,MAAMwC,QAAgBzB,EAAYxF,EAAQwE,EAASC,EAAMvC,GACzD,OAAK+E,GAILzC,EAAQ0C,SAAS,CAAE/H,GAAI8H,EAAQ9H,GAAI+C,UAE5B+E,QANP,CAOF,EAjlEAE,EAAAA,EAAAA,IAAiB,0BAA0BrH,MAAOE,EAAQwE,KACxD,MAAM4C,EAAmB,IAAIC,IAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAAA,IAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAlBiC,KAoBvCxH,GAASM,EAAAA,EAAAA,MACT,MAAMmH,EAAiB5F,OAAOC,OAAO9B,EAAO+B,SAEzC2F,KAAI,QAAGvI,GAAI+C,GAAO,SAAKyF,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAQV,MAAM,IACtEoG,OAAOC,SAGJC,GADsBC,EAAAA,EAAAA,IAAcC,EAAAA,MACFC,MAAM9I,IAAQsI,EAAetG,SAAShC,KAAQiI,EAAiBc,IAAI/I,KAC3G,IAAK2I,EACH,OAGFV,EAAiBe,IAAIL,GAErBtD,EAAQ4D,qBAAqB,CAAE5G,OAAQsG,EAAYO,SAAUtE,EAAAA,GAAgB7B,OAAOwC,EAAAA,EAAAA,OACtF,MAGFyC,EAAAA,EAAAA,IAAiB,YAAY,CAACnH,EAAQwE,EAAS8D,KAC7C,MAAM,GACJnJ,EAAE,SAAEkJ,EAAWtE,EAAAA,IACbuE,EACJ,IAAKnJ,EACH,OAGF,MAAM,cAAEoD,GAAkBvC,EACpByE,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQb,GAMhC,GAJIsF,GAAM8D,eACR/D,EAAQgE,iBAAiB,CAAErJ,OAGxBsF,GASMgE,EAAAA,EAAAA,IAAkBhE,KAAUA,EAAKlF,OAC1CiF,EAAQkE,kBAAkB,CAAElH,OAAQrC,SATpC,GAAIA,IAAOoD,GACJ5B,EAAAA,EAAAA,IAAQ,YAAa,CAAErB,KAAM,aAC7B,CACL,MAAM+B,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQb,GAC5BkC,IACGV,EAAAA,EAAAA,IAAQ,YAAa,CAAErB,KAAM,OAAQ+B,QAE9C,CAKEgH,IAAatE,EAAAA,IACfS,EAAQmE,wBAAwB,CAAEnH,OAAQrC,EAAIkJ,YAChD,KAGFlB,EAAAA,EAAAA,IAAiB,gBAAgBrH,MAAOE,EAAQwE,EAAS8D,KACvD,MAAM,GACJnJ,EAAE,SAAEkJ,EAAQ,gBAAEO,EAAe,MAAE1G,GAAQwC,EAAAA,EAAAA,OACrC4D,EAEJ,GAAID,IAAatE,EAAAA,GAAgB,CAC/B,MAAM8E,GAAeC,EAAAA,EAAAA,IAAyB9I,EAAQb,EAAIkJ,GAC1D,GAAKQ,EAwBHrE,EAAQ0C,SAAS,CAAE/H,KAAIkJ,SAAUQ,EAAc3G,cAxB9B,CACjB,MAAMuC,GAAOsE,EAAAA,EAAAA,IAAuB/I,EAAQb,EAAIkJ,GAChD,IAAK5D,EACH,OAGFD,EAAQ0C,SAAS,CAAE/H,KAAIkJ,WAAUnG,UAEjC,MAAMxB,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE8D,OAAM4D,WAAUO,oBAC1E,IAAKlI,EAEH,YADA8D,EAAQwE,iBAAiB,CAAE9G,UAG7BlC,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,QAC7D8B,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQ0C,SAAS,CACf/H,KACAkJ,SAAU3H,EAAOmI,aACjB3G,QACA+G,mBAAmB,GAEvB,CAGF,MAGF9B,EAAAA,EAAAA,IAAiB,kBAAkBrH,MAAOE,EAAQwE,EAAS8D,KACzD,MAAM,GAAEnJ,EAAE,MAAE+C,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACpC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQb,GAChC,IAAKsF,EACH,OAGF,MAAMyE,QAAqBvI,EAAAA,EAAAA,IAAQ,gBAAiB8D,GAEhDyE,GAAcvE,UAAUwE,cAC1B3E,EAAQ0C,SAAS,CAAE/H,GAAI+J,EAAavE,SAASwE,aAAcjH,SAC7D,KAGFiF,EAAAA,EAAAA,IAAiB,0BAA0BrH,MAAOE,EAAQwE,EAAS8D,KACjE,MAAM,OACJ9G,EAAM,SAAE6G,EAAQ,UAAEe,EAAS,MAAElH,GAAQwC,EAAAA,EAAAA,OACnC4D,EACE7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGF,MAAM/D,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE8D,OAAM4D,aAC3D3H,IAGLV,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,QAC7D8B,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQ6E,aAAa,CACnB7H,SAAQ6G,WAAUe,YAAWlH,UAC7B,KAGJiF,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,MAAEpG,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAC5C7D,GAAO6E,EAAAA,EAAAA,IAAkBtJ,GAC/B,GAAIyE,EAEF,YADAD,EAAQ0C,SAAS,CAAE/H,GAAIsF,EAAKtF,GAAIoK,sBAAsB,EAAMrH,UAI9DsC,EAAQ0C,SAAS,CAAE/H,GAAIqK,EAAAA,IAAaD,sBAAsB,EAAMrH,UAEhE,MAAMxB,QAAeC,EAAAA,EAAAA,IAAQ,YAAa,CAAErB,KAAM,YAC9CoB,GACF8D,EAAQ0C,SAAS,CAAE/H,GAAIuB,EAAOc,OAAQ+H,sBAAsB,EAAMrH,SACpE,KAGFiF,EAAAA,EAAAA,IAAiB,gBAAgBrH,MAAOE,EAAQwE,EAAS8D,KACvD,MAAMrI,EAAWqI,EAAQrI,UACnB,UAAEwJ,GAAcnB,EACtB,IAAI,cAAElI,GAAkBkI,EACpBhB,EAAI,EAER,MAAMoC,EAAgBjF,GACbA,EAAK9C,aAAagI,MAAQlF,EAAKmF,SAGxC,KAAOxJ,IAAkBJ,EAAO0B,MAAM2C,cAAcpE,IAAW,CAC7D,GAAIqH,KAzKqB,IA+KvB,YALIuC,EAAAA,KAEFC,QAAQrE,MAAM,mDAQlB,GAA+B,0BAF/BzF,GAASM,EAAAA,EAAAA,OAEEyJ,iBAAmE,4BAArB/J,EAAOgK,UAC9D,OAGF,MAAMC,GAAW7J,GAAiBJ,EAAO0B,MAAMuI,QAAQhK,GACjDiK,EAAaD,EACfA,EAECvC,KAAKvI,GAAOa,EAAO0B,MAAMe,KAAKtD,KAC9ByI,QAAQnD,GACPoD,QAAQpD,GAAQiF,EAAajF,KAC1BA,EAAKtF,KAAOC,EAAAA,OACX+K,EAAAA,EAAAA,IAAmBnK,EAAQyE,EAAKtF,MAGrCiL,MAAK,CAACC,EAAOC,IAAUZ,EAAaW,GAAUX,EAAaY,KAAS,QACrEpF,QAEEnF,EAAUC,EACdC,EACAiK,GAAY/K,GACZ+K,EAAaR,EAAaQ,QAAchF,EACxC9E,GACA,GAEEA,IACFqJ,MACArJ,GAAgB,GAGlBJ,GAASM,EAAAA,EAAAA,KACX,MAGF6G,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnH,EAAQwE,EAAS8D,KACjD,MAAM,OAAE9G,EAAM,MAAE+I,EAAK,MAAErI,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC/C7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAID8F,EACFhG,EAAavE,EAAQwE,EAASC,EAAMvC,GAEpCtC,GAA4B,IAAM2E,EAAavE,EAAQwE,EAASC,EAAMvC,KACxE,KAGFiF,EAAAA,EAAAA,IAAiB,gBAAiBnH,IAChCP,GAA4B,IAAMM,EAAUC,EAAQ,WAAU,KAGhEmH,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnH,EAAQwE,EAAS8D,KACtD,MAAM,OAAE9G,GAAW8G,EACb7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAIA9D,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC8D,UACIjD,IAAWpC,EAAAA,KAAiC,CAC9CoL,kBAAkBhK,EAAAA,EAAAA,IAA8BR,IAASS,UAE3D,KAGJ0G,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnH,EAAQwE,EAAS8D,KACzD,MAAM,OAAE9G,EAAM,QAAEiJ,GAAYnC,EACtB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAILzE,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAAEiJ,aACtCnG,EAAAA,EAAAA,IAAUtE,IACLW,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE8D,OAAMgG,YAAU,KAGzDtD,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnH,EAAQwE,EAAS8D,KAC1D,MAAM,OAAE9G,EAAM,QAAEiJ,EAAO,QAAEC,GAAYpC,EAC/B7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAILzE,GAAS2K,EAAAA,EAAAA,IAAY3K,EAAQwB,EAAQkJ,EAAS,CAAED,aAChDnG,EAAAA,EAAAA,IAAUtE,IACLW,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC8D,OAAMiG,UAASD,YACf,KAGJtD,EAAAA,EAAAA,IAAiB,iBAAiBrH,MAAOE,EAAQwE,EAAS8D,KACxD,MAAM,MACJsC,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAE7I,GAAQwC,EAAAA,EAAAA,OACtC4D,EAEE9F,EAASuI,EACZrD,KAAKvI,IAAOiH,EAAAA,EAAAA,IAAWpG,EAAQb,KAC/ByI,OAAOC,SASV,IAAImD,EAPJhL,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEXlJ,IACHoC,EAAAA,EAAAA,IAAUtE,GAIV,IACEgL,QAAuBrK,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEiK,QAAOC,QAAOrI,SAiBlE,CAhBE,MAAOiD,GACPzF,GAASM,EAAAA,EAAAA,MAETN,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,CACZC,SAAUC,EAAAA,GAAAA,QAEXlJ,IAEHoC,EAAAA,EAAAA,IAAUtE,GAE0B,sBAA/ByF,EAAmBhF,QACtB+D,EAAQkB,sBAAsB,CAAE9E,MAAO,WAAYsB,UAEnDsC,EAAQmB,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ3D,SAE9E,CAEA,IAAK8I,EACH,OAGF,MAAQ7L,GAAIkM,EAAS,WAAEhM,GAAe2L,EAEtChL,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQqL,EAAWL,GACvChL,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,KACTI,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOgJ,aACjCC,SAAUH,EAAiBI,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAE5DlJ,IACHoC,EAAAA,EAAAA,IAAUtE,GACVwE,EAAQ0C,SAAS,CAAE/H,GAAIkM,EAAW9B,sBAAsB,EAAMrH,UAE1DmJ,GAAahM,GAAcyL,SACvBnK,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEa,OAAQ6J,EAAWhM,aAAYyL,SAClE,KAGF3D,EAAAA,EAAAA,IAAiB,eAAerH,MAAOE,EAAQwE,EAAS8D,KACtD,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACxC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGF,MAAQtF,GAAIkM,EAAS,WAAEhM,GAAeoF,EAEtC,GAAM4G,GAAahM,EAInB,UACQsB,EAAAA,EAAAA,IAAQ,cAAe,CAAE0K,YAAWhM,cAO5C,CANE,MAAOoG,GAC6B,sBAA/BA,EAAmBhF,QACtB+D,EAAQkB,sBAAsB,CAAE9E,MAAO,WAAYsB,UAEnDsC,EAAQmB,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ3D,SAE9E,MAGFiF,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnH,EAAQwE,EAAS8D,KACnD,MAAM,OAAE9G,EAAM,OAAE+J,EAAM,MAAErJ,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAChD7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC1BH,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQuL,GAC3B9G,GAASpD,IAIdrB,GAASwL,EAAAA,EAAAA,IAAUxL,EAAQwB,IAC3B8C,EAAAA,EAAAA,IAAUtE,IAEN2H,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAQV,SAAWA,GACtDgD,EAAQ0C,SAAS,CAAE/H,QAAI+F,EAAWhD,WAG/BvB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE8D,OAAMpD,SAAO,KAGhD8F,EAAAA,EAAAA,IAAiB,cAAc,CAACnH,EAAQwE,EAAS8D,KAC/C,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACxC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAILzE,GAASwL,EAAAA,EAAAA,IAAUxL,EAAQwB,IAC3B8C,EAAAA,EAAAA,IAAUtE,IAEN2H,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAQV,SAAWA,GACtDgD,EAAQ0C,SAAS,CAAE/H,QAAI+F,EAAWhD,WAG/BvB,EAAAA,EAAAA,IAAQ,aAAc,CAAEa,OAAQiD,EAAKtF,KAAK,KAGjDgI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnH,EAAQwE,EAAS8D,KACjD,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACxC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGFzE,GAASwL,EAAAA,EAAAA,IAAUxL,EAAQwB,IAC3B8C,EAAAA,EAAAA,IAAUtE,IAEN2H,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAQV,SAAWA,GACtDgD,EAAQ0C,SAAS,CAAE/H,QAAI+F,EAAWhD,UAGpC,MAAQ/C,GAAIkM,EAAS,WAAEhM,GAAeoF,EAClC4G,GAAahM,IACVsB,EAAAA,EAAAA,IAAQ,eAAgB,CAAE0K,YAAWhM,cAC5C,KAGF8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnH,EAAQwE,EAAS8D,KAClD,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACxC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGFzE,GAASwL,EAAAA,EAAAA,IAAUxL,EAAQwB,IAC3B8C,EAAAA,EAAAA,IAAUtE,IAEN2H,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAQV,SAAWA,GACtDgD,EAAQ0C,SAAS,CAAE/H,QAAI+F,EAAWhD,UAGpC,MAAQ/C,GAAIkM,EAAS,WAAEhM,GAAeoF,EAClC4G,GAAahM,IACVsB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE0K,YAAWhM,cAC7C,KAGF8H,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,MACJsC,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAE5I,GAAQwC,EAAAA,EAAAA,OAC/B4D,EACE9F,EAASuI,EACZrD,KAAKvI,IAAOiH,EAAAA,EAAAA,IAAWpG,EAAQb,KAC/ByI,OAAOC,SAEV7H,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEXlJ,IACHoC,EAAAA,EAAAA,IAAUtE,GAEV,IACE,MAAMyL,QAAoB9K,EAAAA,EAAAA,IAAQ,kBAAmB,CACnDiK,QACApI,UAGF,IAAKiJ,EACH,OAGF,MAAQtM,GAAIqC,GAAWiK,EAEvBzL,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQiK,GACpCzL,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,KACTI,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOgJ,aACjCC,SAAUM,EAAcL,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAEzDlJ,IACHoC,EAAAA,EAAAA,IAAUtE,GACVwE,EAAQ0C,SAAS,CACf/H,GAAIqC,EACJ+H,sBAAsB,EACtBrH,UAGEV,GAAUsJ,SACNnK,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Ba,SACAsJ,SAeN,CAZE,MAAOY,GACW,kBAAdA,EAAEjL,UACJT,GAASM,EAAAA,EAAAA,MACTN,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BkL,aAAc,KACTI,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOgJ,aACjCC,SAAUC,EAAAA,GAAAA,MACV3F,MAAO,qBAERvD,IACHoC,EAAAA,EAAAA,IAAUtE,GAEd,MAGFmH,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnH,EAAQwE,EAAS8D,KACrD,MAAM,GAAEnJ,EAAE,SAAEwM,EAAQ,MAAEzJ,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC9C7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQb,GAChC,IAAKsF,EACH,OAGF,MAAM7D,GAAQgL,EAAAA,EAAAA,GAAmB5L,EAAQ,sBAEzC,GAAI2L,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,IAAiB9L,EAAQ2L,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkB5B,EAAAA,EAAAA,IAAmBnK,EAAQb,EAAIwM,IAEjD,cAAEK,EAAa,gBAAEC,GAAoBJ,EACrCK,EAAeH,EACjB,CAAC5M,KAAQ6M,GAAiB,KACzBA,GAAiB,IAAIpE,QAAQuE,GAAaA,IAAahN,IAGtDiN,EAAqB,CAACjN,KAAO8M,IAE9BtL,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BxB,GAAIwM,EACJU,aAAc,IACTR,EACHG,cAAeE,EACfD,gBAAiBG,IAGvB,CACF,KAAO,CACL,MAAMnM,GAAWqM,EAAAA,EAAAA,IAAmBtM,EAAQb,GACtCoN,GAAWpC,EAAAA,EAAAA,IAAmBnK,EAAQb,EAAiB,aAAbc,EAA0BuM,EAAAA,SAAqBtH,GAG/F,IADYlF,EAAO0B,MAAM+K,iBAA8B,aAAbxM,EAA0B,WAAa,WACvEgB,QAAU,IAAML,IAAU2L,EAKlC,YAJA/H,EAAQkB,sBAAsB,CAC5B9E,MAAO,qBACPsB,WAICvB,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE8D,OAAMsH,gBAAiBQ,GAC5D,MAGFpF,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnH,EAAQwE,EAAS8D,KACvD,MAAM,GAAEnJ,GAAOmJ,EACT7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQb,GAC5BsF,IACG9D,EAAAA,EAAAA,IAAQ,qBAAsB,CACjC8D,OACAkH,UAAUe,EAAAA,EAAAA,IAAejI,GAAQ,EAAI+H,EAAAA,KAEzC,KAGFrF,EAAAA,EAAAA,IAAiB,mBAAmBrH,UAClC,MAAM6M,QAAoBhM,EAAAA,EAAAA,IAAQ,oBAE9BgM,IACF3M,GAASM,EAAAA,EAAAA,MAETN,EAAS,IACJA,EACH2M,YAAa,IACR3M,EAAO2M,eACPA,KAGPrI,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,8BAA8BrH,UAC7C,MAAM8M,QAA+BjM,EAAAA,EAAAA,IAAQ,+BAEzCiM,IACF5M,GAASM,EAAAA,EAAAA,MAETN,EAAS,IACJA,EACH2M,YAAa,IACR3M,EAAO2M,YACVE,YAAaD,KAGjBtI,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnH,EAAQwE,EAAS8D,KACpD,MAAM,OACJ9G,EAAM,YAAEsL,EAAW,SAAEC,EAAQ,MAAE7K,GAAQwC,EAAAA,EAAAA,OACrC4D,EACE1H,GAAQgL,EAAAA,EAAAA,GAAmB5L,EAAQ,sBAElB+M,EACpBC,MAAM7N,IAAO2M,EAAAA,EAAAA,IAAiB9L,EAAQb,GAAK8M,gBAAgBhL,QAAUL,IAEtE4D,EAAQkB,sBAAsB,CAAE9E,MAAO,qBAAsBsB,WAI/D4K,EAAYnJ,SAAQ7D,UAClB,MAAM+L,GAASC,EAAAA,EAAAA,IAAiB9L,EAAQb,GACpC0M,SACIlL,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BxB,KACAkN,aAAc,IACTR,EACHG,cAAeH,EAAOG,eAAepE,QAAQuE,GAAaA,IAAa3K,IACvEyK,gBAAiBJ,EAAOI,gBAAgBrE,QAAQqF,GAAeA,IAAezL,MAGpF,IAGFuL,EAASpJ,SAAQ7D,UACf,MAAM+L,GAASC,EAAAA,EAAAA,IAAiB9L,EAAQb,GACpC0M,SACIlL,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BxB,KACAkN,aAAc,IACTR,EACHI,gBAAiBJ,EAAOI,gBAAgBpJ,OAAOrB,KAGrD,IACA,KAGJ2F,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnH,EAAQwE,EAAS8D,KACnD,MAAM,GAAEnJ,EAAE,aAAEkN,GAAiB/D,EACvBuD,GAASC,EAAAA,EAAAA,IAAiB9L,EAAQb,GAEpC0M,IACGlL,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BxB,KACAkN,aAAc,CACZlN,KACA+N,SAAUrB,EAAOqB,SACjBlB,cAAeH,EAAOG,iBACnBK,IAGT,KAGFlF,EAAAA,EAAAA,IAAiB,iBAAiBrH,MAAOE,EAAQwE,EAAS8D,KACxD,MAAM,OAAEuD,EAAM,MAAE3J,GAAQwC,EAAAA,EAAAA,OAAsB4D,GACxC,WAAE6E,EAAU,KAAE1K,GAASzC,EAAO2M,YAE9B/L,GAAQgL,EAAAA,EAAAA,GAAmB5L,EAAQ,iBACzC,GAAI6B,OAAO4B,KAAKhB,GAAMxB,QAAUL,EAK9B,YAJA4D,EAAQkB,sBAAsB,CAC5B9E,MAAO,gBACPsB,UAKJ,MAAMkL,EAAQC,KAAKC,OAAQH,GAAc,GAAKX,EAAAA,MAGtCrN,GAAIoO,EAAa,YAAEC,KAAgBC,GAAc5B,EAUzD,SARMlL,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BxB,GAAIiO,EAAQ,EACZf,aAAc,CACZlN,GAAIiO,EAAQ,KACTK,MAIFD,EACH,OAGFxN,GAASM,EAAAA,EAAAA,MACT,MAAM,YAAEuM,GAAgB7M,EAAO2M,YAE3BE,IACF7M,EAAS,IACJA,EACH2M,YAAa,IACR3M,EAAO2M,YACVE,YAAaA,EAAYjF,QAAO,QAAC,GAAEzI,GAAI,SAAKA,IAAOoO,CAAa,OAGpEjJ,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,UAAEoF,GAAcpF,QAED3H,EAAAA,EAAAA,IAAQ,kBAAmB+M,KAE9C1N,GAASM,EAAAA,EAAAA,MACTN,EAAS,IACJA,EACH2M,YAAa,IACR3M,EAAO2M,YACVQ,WAAYO,KAGhBpJ,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,oBAAoBrH,MAAOE,EAAQwE,EAAS8D,KAC3D,MAAM,GAAEnJ,GAAOmJ,GACAwD,EAAAA,EAAAA,IAAiB9L,EAAQb,UAGhCwB,EAAAA,EAAAA,IAAQ,mBAAoBxB,EACpC,KAGFgI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnH,EAAQwE,EAAS8D,KACrD,MAAM,GAAEnJ,GAAOmJ,EACT7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQb,GAC5BsF,IACEA,EAAKkJ,aACFhN,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE8D,OAAM4D,SAAUtE,EAAAA,MAEjDpD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjC8D,OACA8D,eAAgB9D,EAAK8D,gBAG3B,KAGFpB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnH,EAAQwE,EAAS8D,KAClD,MAAM,OAAE9G,EAAM,QAAEkJ,GAAYpC,EACtB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,OAEX,MAAMmJ,EAAqBnJ,EAAKoJ,SAASnD,IAAUoD,cAC9CF,KAEAjN,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC8D,OACA4D,SAAUqC,EACV0C,MAAOQ,IAGT5N,GAASM,EAAAA,EAAAA,MACTN,GAAS2K,EAAAA,EAAAA,IAAY3K,EAAQwB,EAAQkJ,EAAS,CAC5CiD,YAAa,IAEf3N,GAAS+N,EAAAA,EAAAA,IAAiB/N,EAAQwB,EAAQkJ,EAAS,CACjDsD,uBAAwBJ,KAE1BtJ,EAAAA,EAAAA,IAAUtE,GAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,oBAAoBrH,MAAOE,EAAQwE,EAAS8D,KAC3D,MAAM,KAAE2F,EAAI,MAAE/L,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAEtC5H,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoBsN,GAC5CvN,GAIL8D,EAAQ0C,SAAS,CAAE/H,GAAIuB,EAAOc,OAAQU,SAAQ,KAGhDiF,EAAAA,EAAAA,IAAiB,yBAAyBrH,MAAOE,EAAQwE,EAAS8D,KAChE,MAAM,YACJ9I,EAAW,YAAEoH,EAAW,OAAED,EAAM,MAAEzE,GAAQwC,EAAAA,EAAAA,OACxC4D,EAGJ9D,EAAQ0C,SAAS,CAAE/H,GAAIqK,EAAAA,IAAatH,UAEpC,MAAMuC,QAurCD3E,eAA6DE,EAAWR,GAC7EQ,GAASM,EAAAA,EAAAA,MACT,MAAM4N,GAAYC,EAAAA,EAAAA,IAAwBnO,EAAQR,GAClD,GAAI0O,IAAcA,EAAU3O,MAC1B,OAAOgC,EAAAA,EAAAA,IAAWvB,EAAQkO,EAAU/O,IAGtC,MAAM,KAAEsF,EAAI,KAAEpD,SAAeV,EAAAA,EAAAA,IAAQ,uBAAwBnB,IAAgB,CAAC,EAC9E,OAAKiF,GAILzE,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAIsF,IACrCH,EAAAA,EAAAA,IAAUtE,GAENqB,IACFrB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQqB,EAAKlC,GAAIkC,IACrCiD,EAAAA,EAAAA,IAAUtE,IAGLyE,QAbP,CAcF,CA7sCqB2J,CAAuBpO,EAAQR,GAClD,IAAKiF,EAMH,OALAD,EAAQwE,iBAAiB,CAAE9G,eAC3BsC,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,mCAAmC4H,QAAQ,UAAW7O,GACtF0C,UAKJsC,EAAQ0C,SAAS,CAAE/H,GAAIsF,EAAKtF,GAAI+C,UAE5ByE,GAEFD,EADA1G,GAASM,EAAAA,EAAAA,MACsBkE,EAASC,EAAKtF,GAAIwH,EAAQC,EAAa1E,EACxE,KAGFiF,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnH,EAAQwE,EAAS8D,KACrD,MAAM,IACJgG,EAAG,MACHpM,GAAQwC,EAAAA,EAAAA,OACN4D,GAEE,sBACJiG,EAAqB,iBACrBC,EAAgB,eAChBC,EAAc,kBACdC,EAAiB,oBACjBC,EAAmB,iBACnBnI,EAAgB,aAChB6C,EAAY,YACZuF,EAAW,2BACXC,EACAC,mBAAoBC,GAClBvK,EAEJ,GAAI8J,EAAIU,MAAMC,EAAAA,KAEZ,YADAC,EAAAA,EAAAA,IAAgBZ,GAIlB,MAAMa,EAAM,IAAIC,IAAId,EAAIe,cAAcC,WAAW,QAAUhB,EAAO,WAAUA,KAC5E,GAAIiB,EAAAA,IAAAA,IAAoBJ,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADAC,OAAOC,KAAKR,EAAIS,WAAY,SAAU,YAIxC,MACMC,GADWN,EAAAA,IAAAA,IAAoBJ,EAAIK,UAAY,OAASL,EAAIK,UACvCM,MAAM,KACjC,GAAID,EAAU5O,OAAS,EAAG,OAC1B,MAAMwO,EAAgC,IAArBI,EAAU5O,OAAgB,GAAE4O,EAAU,MAAMV,EAAIM,WAAaN,EAAIM,UAC3EM,EAAOC,EAAOC,GAASR,EAASK,MAAM,KAAKlI,OAAOC,SAASH,KAAKwI,GAASC,UAAUD,KACpFE,EAASvO,OAAOwO,YAAYlB,EAAImB,cAEtC,IAAIrC,EACU,aAAV8B,IACF9B,EAAO+B,GAGT,MAAMpJ,KAAcwJ,EAAOG,eAAe,gBAAmBH,EAAOI,cAAqBJ,EAAOI,YAC1FC,GAASC,EAAAA,EAAAA,IAAqBN,EAAOK,QAE3C,GAAIV,EAAMf,MAAM,qBAOd,YANAT,EAAsB,CACpB/O,YAAauQ,EAAMY,OAAO,EAAGZ,EAAM9O,OAAS,GAC5C2F,cACAD,OAAQyJ,EAAOzJ,OACfzE,UASJ,IAJI6N,EAAMT,WAAW,MAAQS,EAAMT,WAAW,QAC5CrB,EAAO8B,EAAMY,OAAO,EAAGZ,EAAM9O,OAAS,IAGpCgN,EAEF,YADAO,EAAiB,CAAEP,OAAM/L,UAI3B,GAAc,gBAAV6N,GAAqC,aAAVA,EAO7B,YANAtB,EAAe,CACblJ,eAAgB,CACdqL,UAAWZ,GAEb9N,UAKJ,MAAM2O,EAAsBb,QAAS9K,EAC/BkE,EAAY6G,EAAQa,OAAOb,QAAS/K,EACpC6L,EAAYX,EAAOY,QAAUF,OAAOV,EAAOY,cAAW9L,EAE5D,GAAc,UAAV6K,EAEFrB,EAAkB,CAAEuC,MADPC,EAAAA,EAAAA,IAAgBd,EAAO9B,IAAK8B,EAAOa,MACtB/O,eACrB,GAAIkO,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cACrE5B,EAAoB,CAClB5I,SAAUgK,EACVoB,WAAYf,EAAOgB,WAAahB,EAAOiB,WACvCnP,eAEG,GAAc,MAAV6N,GAAiBc,GAAuBzH,EAAW,CAC5D,MAAM5H,EAAU,IAAGqP,IAEnB,KADatP,EAAAA,EAAAA,IAAWvB,EAAQwB,GAG9B,YADAgF,EAAiB,CAAE/F,QAAS,sBAAuByB,UAIrDmH,EAAa,CACX7H,SACA4H,YACAlH,SAEJ,MAAW6N,EAAMT,WAAW,KAC1BV,EAAY,CACV0C,KAAMvB,EAAMwB,UAAU,GACtBrP,UAEiB,YAAV6N,EACTnB,EAAY,CACV0C,KAAMtB,EACN9N,UAEO0E,GAAe6J,EACxB5B,EAA2B,CACzB9I,SAAUgK,EACVnI,OAAQ6I,KACmB,iBAAhB7J,GAA4B,CAAEE,WAAYF,GACrD1E,UAGF6M,EAAyB,CACvBhJ,SAAUgK,EACV3G,UAAWA,GAAa0H,OAAOD,GAC/BxI,SAAUe,EAAY0H,OAAOD,QAAuB3L,EACpD6L,YACAjK,WAAYsJ,EAAOoB,MACnB5K,cACAD,OAAQyJ,EAAOzJ,OACfzE,SAEJ,KAGFiF,EAAAA,EAAAA,IAAiB,4BAA4BrH,MAAOE,EAAQwE,EAAS8D,KACnE,MAAM,KAAE2F,EAAI,MAAE/L,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACtC5H,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEsN,SAC9CvN,GAIL8D,EAAQ0C,SAAS,CAAE/H,GAAIuB,EAAOvB,GAAI+C,SAAQ,KAG5CiF,EAAAA,EAAAA,IAAiB,sBAAsBrH,MAAOE,EAAQwE,EAAS8D,KAC7D,MAAM,SACJvC,EAAQ,UAAEqD,EAAS,UAAE2H,EAAS,WAAEjK,EAAU,YAAEF,EAAW,OAAED,EAAM,SAAE0B,EAAQ,MACzEnG,GAAQwC,EAAAA,EAAAA,OACN4D,EAEE7D,GAAOrC,EAAAA,EAAAA,IAAkBpC,EAAQkC,GAEvC,IAAK6O,EACH,OAAKnK,GAAewC,IAActC,GAAcrC,GAAMgN,WAAWzE,MAAM0E,GAAMA,EAAE3L,WAAaA,SAC1FvB,EAAQ6E,aAAa,CACnB7H,OAAQiD,EAAKtF,GAAIkJ,WAAUe,YAAWlH,qBAskC9CpC,eACEE,EACAwE,EACAuB,EACAsC,EACAsJ,EACA7K,EACAF,EACAD,GAEA,sFADIzE,GAAQwC,EAAAA,EAAAA,OAAkB,EAE9B1E,GAASM,EAAAA,EAAAA,MACT,MAAM6B,GAAcC,EAAAA,EAAAA,IAAkBpC,EAAQkC,GAG9C,GAAI0E,IAAgBD,EAAQ,CAC1B,MAAMJ,QAAYJ,EAAqBnG,EAAQwE,EAASuB,EAAU7D,GAElE,IAAKC,IAAgBoE,EAAK,OAS1B,YAPA/B,EAAQqC,cAAc,CACpBN,MACA/E,OAAQW,EAAYhD,MACO,iBAAhByH,GAA4B,CAAEE,WAAYF,GACrD1E,SAIJ,CAEA,MAAM0P,EAAgBzP,GAAasP,WAAWzE,MAAM0E,GAAMA,EAAE3L,WAAaA,IAEpE6L,GAEHpN,EAAQ0C,SAAS,CAAE/H,GAAIqK,EAAAA,IAAatH,UAGtC,MAAMuC,QAAaqB,EAAoB9F,EAAQ+F,GAC1CtB,GASDkN,EACFnN,EAAQ6E,aAAa,CACnB7H,OAAQiD,EAAKtF,GAAIkJ,WAAUe,UAAWuI,EAAezP,UAE7C0P,GACVpN,EAAQ0C,SAAS,CAAE/H,GAAIsF,EAAKtF,GAAIkJ,WAAUnG,UAGxC4E,GACFtC,EAAQqN,SAAS,CAAEC,MAAOrN,EAAKtF,GAAI4S,MAAOjL,IAGxCH,GAEFD,EADA1G,GAASM,EAAAA,EAAAA,MACsBkE,EAASC,EAAKtF,GAAIwH,EAAQC,EAAa1E,IAtBjE0P,IACHpN,EAAQwE,iBAAiB,CAAE9G,UAC3BsC,EAAQgC,iBAAiB,CAAE/F,QAAS,sBAAuByB,UAsBjE,CAjoCU4M,CAAmB9O,EAAQwE,EAASuB,EAAUsC,EAAUe,EAAWtC,EAAYF,EAAaD,EAAQzE,GAI5G,MAAM,OAAEV,EAAM,KAAElC,IAASqI,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAU,CAAC,EAC/D8P,GAAe/L,EAAAA,EAAAA,IAAqBjG,EAAQ+F,GAClD,GAAIvE,GAAU4H,GAAa4I,GAAyB,WAAT1S,EAAmB,CAC5D,MAAM2S,GAAaC,EAAAA,EAAAA,IAAiBlS,EAAQwB,EAAQ4H,GAEpD,GAAI6I,GAAcA,EAAWzQ,SAAWA,EAOtC,YANAgD,EAAQ6E,aAAa,CACnB7H,OAAQyQ,EAAWzQ,OACnB6G,SAAU4J,EAAW5J,SACrBe,UAAW2H,EACX7O,SAIN,CAEA,IAAKkH,EAAW,OAEhB5E,EAAQ0C,SAAS,CAAE/H,GAAIqK,EAAAA,IAAatH,UAEpC,MAAMiQ,QAAuBrM,EAAoB9F,EAAQ+F,GAEzD,IAAKoM,EAAgB,OAErBnS,GAASM,EAAAA,EAAAA,MAET,MAAM2R,GAAaC,EAAAA,EAAAA,IAAiBlS,EAAQmS,EAAehT,GAAIiK,GAC/D,IAAIgJ,EAEJ,GAAKH,EAUHG,EAAmBH,EAAWzQ,WAVf,CACf,MAAMd,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE8D,KAAM0N,EAAgB9J,SAAUe,IAC1F,IAAK1I,EAAQ,OAEbV,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,QAC7D8B,EAAAA,EAAAA,IAAUtE,GAEVoS,EAAmB1R,EAAO0R,gBAC5B,CAIKA,GAEL5N,EAAQ6E,aAAa,CACnB7H,OAAQ4Q,EACR/J,SAAUe,EACVA,UAAW0H,OAAOC,GAClB7O,SACA,KAGJiF,EAAAA,EAAAA,IAAiB,0BAA0BrH,MAAOE,EAAQwE,EAAS8D,KACjE,MAAM,OACJ9G,EAAM,UAAE6Q,EAAS,MACjBnQ,GAAQwC,EAAAA,EAAAA,OACN4D,EAEE7D,QAAasC,EAAmB/G,EAAQwE,EAAShD,EAAQU,GAC1DuC,IAILzE,GAASM,EAAAA,EAAAA,MAETN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAI,CACnCwF,SAAU,IACLF,EAAKE,SACR2N,mBAAoBD,MAGxB/N,EAAAA,EAAAA,IAAUtE,IAELW,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE8D,OAAM4N,cAAY,KAG7DlL,EAAAA,EAAAA,IAAiB,iCAAiC,CAACnH,EAAQwE,EAAS8D,KAClE,MAAM,OAAE9G,EAAM,aAAE+Q,GAAiBjK,EAC3B7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAE3BiD,IAIA9D,EAAAA,EAAAA,IAAQ,gCAAiC,CAAE8D,OAAM8N,gBAAe,KAGvEpL,EAAAA,EAAAA,IAAiB,gCAAgCrH,MAAOE,EAAQwE,EAAS8D,KACvE,MAAM,OACJ9G,EAAM,OAAE+J,EAAM,aAAEgH,EAAY,MAC5BrQ,GAAQwC,EAAAA,EAAAA,OACN4D,EAEEjH,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQuL,GAEhC,IAAKlK,EACH,OAGF,MAAMoD,QAAasC,EAAmB/G,EAAQwE,EAAShD,EAAQU,GAE/D,IAAKuC,EAAM,aAEL9D,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE8D,OAAMpD,OAAMkR,iBAE5DvS,GAASM,EAAAA,EAAAA,MAET,MAAMkS,GAAkBjR,EAAAA,EAAAA,IAAWvB,EAAQwB,GAE3C,IAAKgR,IAAoBA,EAAgB7N,SACvC,OAGF,MAAM,QAAE8N,EAAO,cAAEC,GAAkBF,EAAgB7N,SAE7CgO,EAAW9K,QAAQ0K,EAAaK,cAChCC,GAAehR,OAAO4B,KAAK8O,GAActR,OAE/CjB,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCmD,SAAU,IACL6N,EAAgB7N,YACf8N,GAAWE,GAAY,CACzBF,QAASA,EAAQ7K,QAAQkL,GAAMA,EAAEvH,SAAWA,QAE1CkH,IAAYE,GAAY,CAC1BF,QAASA,EAAQ/K,KAAKoL,GACpBA,EAAEvH,SAAWA,EACT,IAAKuH,EAAGP,gBACRO,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAc9K,QAAQkL,GAAMA,EAAEvH,SAAWA,SAI9DjH,EAAAA,EAAAA,IAAUtE,EAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,OACJ9G,EAAM,OAAE+J,EAAM,YAAEwH,EAAW,YAAEC,EAAW,MACxC9Q,GAAQwC,EAAAA,EAAAA,OACN4D,EAEEjH,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQuL,GAChC,IAAKlK,EACH,OAGF,MAAMoD,QAAasC,EAAmB/G,EAAQwE,EAAShD,EAAQU,GAE/D,IAAKuC,EAAM,aAEL9D,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/B8D,OAAMpD,OAAM0R,cAAaC,gBAG3B,MAAMR,QAAwB7R,EAAAA,EAAAA,IAAQ,gBAAiB8D,GACvD,IAAK+N,GAAiB7N,SACpB,OAGF,MAAM,iBAAEsO,GAAqBT,EAAgB7N,SACvCuO,GAAerR,OAAO4B,KAAKsP,GAAa9R,OAC9C,IAAIkS,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAAC3H,GAAS6H,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAAC1H,GAAS,IACL0H,EAAiB1H,GACpBwH,cACAC,gBAMRhT,GAASM,EAAAA,EAAAA,MAETN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCmD,SAAU,IACL6N,EAAgB7N,YACfwO,GAAuB,CAAEF,iBAAkBE,OAGnD7O,EAAAA,EAAAA,IAAUtE,EAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,cAAcrH,MAAOE,EAAQwE,EAAS8D,KACrD,MAAM,OACJ9G,EAAM,MAAEoJ,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAE5I,GAAQwC,EAAAA,EAAAA,OACnC4D,EAEE7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IAILzE,GAASM,EAAAA,EAAAA,MACTN,GAASsT,EAAAA,EAAAA,IAAyBtT,EAAQuT,EAAAA,GAAAA,WAA+BrR,IACzEoC,EAAAA,EAAAA,IAAUtE,SAEJwT,QAAQC,IAAI,CAChBhP,EAAKmG,QAAUA,GACXjK,EAAAA,EAAAA,IAAQ,kBAAmB8D,EAAMmG,QACjC1F,EACJT,EAAKE,UAAYF,EAAKE,SAASkG,QAAUA,GACrClK,EAAAA,EAAAA,IAAQ,kBAAmB8D,EAAMoG,QACjC3F,EACJ4F,GACInK,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEa,SAAQnC,WAAYoF,EAAKpF,WAAYyL,eAChE5F,IAGNlF,GAASM,EAAAA,EAAAA,MACTN,GAASsT,EAAAA,EAAAA,IAAyBtT,EAAQuT,EAAAA,GAAAA,SAA6BrR,IACvEoC,EAAAA,EAAAA,IAAUtE,GAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,MAAEwC,EAAK,OAAEtJ,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC/C7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,IACLzE,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCkS,gBAAYxO,EACZP,SAAU,IACLF,EAAKE,SACRgP,kBAAczO,MAGlBZ,EAAAA,EAAAA,IAAUtE,SAEJW,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Ba,SACAnC,WAAYoF,EAAKpF,WACjByL,gBAGInK,EAAAA,EAAAA,IAAQ,sBAAuB,CAACmK,IACtCtG,EAAQD,aAAa,CAAE/C,SAAQU,UAC/BsC,EAAQoP,kBAAkB,CAAEC,UAAWrS,IAAS,KAGlD2F,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,MAAEwC,EAAK,OAAEtJ,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC/C7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,OACX,MAAMqP,EAAiB,CAAChJ,GACxB,GAAIrG,EAAKiP,aAAe5I,EAAM3L,GAAI,CAEhC,MAAM4U,EAAYtP,EAAKuP,SAAS,GAC5BD,GACFD,EAAepR,KAAKqR,GAEtB/T,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCkS,gBAAYxO,EACZP,SAAU,IACLF,EAAKE,SACRgP,kBAAczO,MAGlBZ,EAAAA,EAAAA,IAAUtE,SAEJW,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Ba,SACAnC,WAAYoF,EAAKpF,WACjByL,MAAOiJ,GAEX,OAEqBpT,EAAAA,EAAAA,IAAQ,sBAAuBmT,KAEpDtP,EAAQD,aAAa,CAAE/C,SAAQU,UAC/BsC,EAAQoP,kBAAkB,CAAEC,UAAWrS,IAAS,KAGlD2F,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnH,EAAQwE,EAAS8D,KACrD,MAAM,OAAE9G,EAAM,UAAE6Q,GAAc/J,EACxB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAE3BiD,IAIA9D,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE8D,OAAM4N,aAAY,KAGvDlL,EAAAA,EAAAA,IAAiB,2BAA2BrH,UAC1C,MAAMmU,QAAetT,EAAAA,EAAAA,IAAQ,4BAC7B,IAAKsT,EACH,OAGF,MAAMC,EAAYD,EAAOE,QAAO,CAACzT,EAAQ0T,KACnCA,IAAUA,EAAMC,UAClB3T,EAAO0T,EAAMjV,IAAMiV,GAGd1T,IACN,CAAC,GAEJV,GAASM,EAAAA,EAAAA,MACTN,GAASsU,EAAAA,EAAAA,IAAStU,EAAQkU,GAC1BlU,EAAS,IACJA,EACH0B,MAAO,IACF1B,EAAO0B,MACV6S,iBAAkB1S,OAAO4B,KAAKyQ,MAGlC5P,EAAAA,EAAAA,IAAUtE,EAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,uBAAuBrH,MAAOE,EAAQwE,EAAS8D,KAC9D,MAAM,UAAE+C,EAAS,OAAE7J,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAE/DkM,GAAUjT,EAAAA,EAAAA,IAAWvB,EAAQqL,GACnC,IAAKmJ,EACH,OAGF,MAAM/P,QAAasC,EAAmB/G,EAAQwE,EAAShD,EAAQU,GAE/D,IAAKuC,EAAM,OAEX,IAAI,SAAEE,GAAaF,EACnB,IAAKE,EAAU,CACb,MAAM8P,QAAiB9T,EAAAA,EAAAA,IAAQ,gBAAiB8D,GAChD,IAAKgQ,EACH,OAGF9P,EAAW8P,EAAS9P,QACtB,CAEIA,EAAU2N,qBACZtS,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAI,CACnCwF,SAAU,IACLF,EAAKE,SACR2N,oBAAoB,MAGxBhO,EAAAA,EAAAA,IAAUtE,SAEJW,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE8D,OAAM4N,WAAW,MAGxD1R,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE6T,UAAS/P,QAAO,KAGvD0C,EAAAA,EAAAA,IAAiB,yBAAyBrH,MAAOE,EAAQwE,EAAS8D,KAChE,MAAM,UAAE+C,EAAS,MAAEnJ,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAE3CkM,GAAUjT,EAAAA,EAAAA,IAAWvB,EAAQqL,GACnC,IAAKmJ,EACH,OAGF,IAAI/P,EACA+P,EAAQ7P,UAAUwE,eACpB1E,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwU,EAAQ7P,SAASwE,qBAGvCxI,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE6T,YAClC/P,GAEFF,EADAvE,GAASM,EAAAA,EAAAA,MACYkE,EAASC,EAAMvC,EACtC,KAGFiF,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnH,EAAQwE,EAAS8D,KACxD,MAAM,iBAAEoM,EAAgB,MAAExS,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAKxD,KAFkBoM,EAAmB,GAFlB9I,EAAAA,EAAAA,GAAmB5L,EAAQ,kBAY9C,OAAOiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC5B0U,oBACCxS,GATDsC,EAAQkB,sBAAsB,CAC5B9E,MAAO,gBACPsB,SAOK,KAGXiF,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnH,EAAQwE,EAAS8D,KAC3D,MAAM,MAAEpG,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAElD,OAAO2C,EAAAA,EAAAA,GAAejL,EAAQ,CAC5B2U,oBAAgBzP,GACfhD,EAAM,KAGXiF,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,MAAEpG,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,GAC5C,OAAE9G,IAAWmG,EAAAA,EAAAA,IAAyB3H,EAAQkC,IAAU,CAAC,EACzDuC,EAAOjD,GAASD,EAAAA,EAAAA,IAAWvB,EAAQwB,QAAU0D,EACnD,IAAKT,IAAQuC,EAAAA,EAAAA,IAAiBvC,GAC5B,OAGF,MAAMmQ,EAAUnQ,EAAKE,UAAU8N,SAASxR,aAAWiE,EACnD,QAAeA,IAAX0P,QAA8C1P,IAAtBT,EAAKI,cAA8B+P,GAAUnQ,EAAKI,aAAc,OAE5F,MAAMnE,QAAeC,EAAAA,EAAAA,IAAQ,eAAgB8D,EAAKtF,GAAIsF,EAAKpF,WAAa,SAAUuV,GAClF,IAAKlU,EACH,OAGF,MAAM,QAAE+R,EAAO,MAAEjQ,EAAK,iBAAEO,GAAqBrC,EACxC+R,GAAYA,EAAQxR,SAIzBjB,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBJ,EAAO,OACtDxC,GAASmD,EAAAA,EAAAA,IAAgBnD,EAAQ+C,GACjC/C,GAAS6U,EAAAA,EAAAA,IAAe7U,EAAQyE,EAAMgO,IACtCnO,EAAAA,EAAAA,IAAUtE,GAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,kBAAkBrH,MAAOE,EAAQwE,EAAS8D,KACzD,MAAM,OAAE9G,EAAM,UAAEuJ,EAAS,MAAE7I,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACnD7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC1BgB,EAASuI,EAAuBrD,KAAK6D,IAAWnF,EAAAA,EAAAA,IAAWpG,EAAQuL,KAAS3D,OAAOC,SAEpFpD,GAASjC,EAAMvB,SAIpBuD,EAAQsQ,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,QAAgC9S,gBACzFvB,EAAAA,EAAAA,IAAQ,iBAAkB8D,EAAMjC,GACtCgC,EAAQsQ,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,OAA+B9S,UAE9FqC,EADAvE,GAASM,EAAAA,EAAAA,MACYkE,EAASC,EAAMvC,GAAM,KAG5CiF,EAAAA,EAAAA,IAAiB,oBAAoBrH,MAAOE,EAAQwE,EAAS8D,KAC3D,MAAM,OAAE9G,EAAM,OAAE+J,EAAM,MAAErJ,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAChD7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC1BH,GAAO+E,EAAAA,EAAAA,IAAWpG,EAAQuL,GAE3B9G,GAASpD,UAIRV,EAAAA,EAAAA,IAAQ,mBAAoB8D,EAAMpD,GAExCkD,EADAvE,GAASM,EAAAA,EAAAA,MACYkE,EAASC,EAAMvC,GAAM,KAG5CiF,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnH,EAAQwE,EAAS8D,KACtD,MAAM,OAAE9G,EAAM,YAAEyT,GAAgB3M,EAC1B7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAE3BiD,IAIA9D,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE8D,OAAMwQ,eAAc,KAG1D9N,EAAAA,EAAAA,IAAiB,2BAA2BrH,MAAOE,EAAQwE,EAAS8D,KAClE,MAAM,OAAE9G,EAAM,iBAAE0T,EAAgB,MAAEhT,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC1D7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,UAEC9D,EAAAA,EAAAA,IAAQ,0BAA2B,CACvC8D,OACAyQ,qBAIG3Q,EADLvE,GAASM,EAAAA,EAAAA,MACiBkE,EAASC,EAAMvC,GAAM,KAGjDiF,EAAAA,EAAAA,IAAiB,oBAAoBrH,MAAOE,EAAQwE,EAAS8D,KAC3D,MAAM,OAAE9G,GAAW8G,EACb7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,OAEX,MAAM/D,QAAeC,EAAAA,EAAAA,IAAQ,oBAAqB8D,GAClD,IAAK/D,EAAQ,OACb,MAAM,SAAEyU,EAAQ,MAAE3S,GAAU9B,EAC5BV,GAASM,EAAAA,EAAAA,MAETN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBJ,EAAO,OAEtDxC,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQyE,EAAKtF,GAAI,CAAEgW,cACvC7Q,EAAAA,EAAAA,IAAUtE,EAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,oBAAoBrH,MAAOE,EAAQwE,EAAS8D,KAC3D,MAAM,OAAE9G,EAAM,UAAE6Q,GAAc/J,EACxB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,KACA2Q,EAAAA,EAAAA,IAAiB3Q,KAAU4Q,EAAAA,EAAAA,IAAc5Q,WAExC9D,EAAAA,EAAAA,IAAQ,mBAAoB8D,EAAM4N,EAAU,KAGpDlL,EAAAA,EAAAA,IAAiB,qBAAqBrH,MAAOE,EAAQwE,EAAS8D,KAC5D,MAAM,OAAE9G,EAAM,UAAE6Q,GAAc/J,EACxB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,KACA2Q,EAAAA,EAAAA,IAAiB3Q,KAAU4Q,EAAAA,EAAAA,IAAc5Q,WAExC9D,EAAAA,EAAAA,IAAQ,oBAAqB8D,EAAM4N,EAAU,KAGrDlL,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnH,EAAQwE,EAAS8D,KACnD,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAC9C,OAAO2C,EAAAA,EAAAA,GAAejL,EAAQ,CAC5BsV,iBAAkB9T,GACjBU,EAAM,KAGXiF,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnH,EAAQwE,EAAS8D,KACpD,MAAM,MAAEpG,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAClD,OAAO2C,EAAAA,EAAAA,GAAejL,EAAQ,CAC5BsV,sBAAkBpQ,GACjBhD,EAAM,KAGXiF,EAAAA,EAAAA,IAAiB,8BAA8BrH,MAAOE,EAAQwE,EAAS8D,KACrE,MAAM,SACJvC,EAAQ,OAAE6B,EAAM,WAAEd,EAAU,MAAE5E,GAAQwC,EAAAA,EAAAA,OACpC4D,EACE/B,QAAYJ,EAAqBnG,EAAQwE,EAASuB,EAAU7D,GAClE,IAAKqE,EAAK,OAEVvG,GAASM,EAAAA,EAAAA,MACT,MAAQiV,YAAY,KAAEC,IAAWxV,EACjC,IAAKwV,EAAKjP,EAAIpH,IAeZ,OAdAa,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9ByV,0BAA2B,CACzBlP,MACAmP,UAAW,CACTC,OAAQ,yBACRrN,QAAS,CACP/B,MACAqB,SACAd,iBAIL5E,QACHoC,EAAAA,EAAAA,IAAUtE,GAIZwE,EAAQoR,uBAAuB,CAC7BrP,MACAqB,SACAd,aACA5E,SACA,KAGJiF,EAAAA,EAAAA,IAAiB,cAAcrH,MAAOE,EAAQwE,EAAS8D,KACrD,MAAM,OAAE9G,EAAM,MAAE+I,GAAUjC,EACpB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,OAEX,IAAK8F,GAAS9F,EAAKoR,gBAAkBpR,EAAKoR,eAAe5U,SAAWwD,EAAKqR,YACvE,OAGF,MAAMC,GAAexL,GAAS9F,EAAKoR,eAAiBpR,EAAKoR,eAAe1B,QAAO,CAAC6B,EAAKC,KACnF,MAAMC,EAAQzR,EAAKoJ,SAASoI,GACtBE,EAAW1R,EAAKoJ,SAASmI,GAC/B,OAAKE,KACAC,GAAYD,EAAMpI,cAAgBqI,EAASrI,eACvCmI,EAFUD,CAIT,SACP9Q,GAEG/F,GAAIiX,EAAezM,KAAMxJ,EAAY2N,cAAe5N,GAAc6V,GACrEtR,EAAKoJ,SAASkI,IAAiB,CAAC,EAC/BrV,QAAeC,EAAAA,EAAAA,IAAQ,cAAe,CAC1C8D,OAAM2R,gBAAelW,WAAUC,aAAYS,MAAOwV,EAAgBC,EAAAA,IAAeC,EAAAA,MAG9E5V,IAELV,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASsU,EAAAA,EAAAA,IAAStU,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,OAC7D1B,GAASuW,EAAAA,EAAAA,IAAYvW,EAAQU,EAAO8V,UACpCxW,GAASyW,EAAAA,EAAAA,IAAazW,EAAQwB,EAAQd,EAAOgW,MAAOhW,EAAOmN,QAC3D7N,GAAS2W,EAAAA,EAAAA,IAAqB3W,EAAQwB,EAAQd,EAAOmN,OAAOnG,KAAKwO,GAAUA,EAAM/W,MACjF0C,OAAO+U,QAAQlW,EAAOgD,YAAc,CAAC,GAAGC,SAAQ,IAAuB,IAArB0E,EAAUzE,GAAM,EAChE5D,GAASkE,EAAAA,EAAAA,IAAmBlE,EAAQwB,EAAQsP,OAAOzI,GAAW,QAASzE,GAAOiT,eAC9E7W,GAASkE,EAAAA,EAAAA,IAAmBlE,EAAQwB,EAAQsP,OAAOzI,GAAW,eAAgBzE,GAAOkT,aAAa,IAEpGjV,OAAO+U,QAAQlW,EAAOqW,6BAA+B,CAAC,GAAGpT,SAAQ,IAA0B,IAAxB+G,EAAStB,GAAU,EACpFpJ,GAAS+N,EAAAA,EAAAA,IAAiB/N,EAAQwB,EAAQsP,OAAOpG,GAAU,CAAEsD,uBAAwB5E,GAAY,KAGnG9E,EAAAA,EAAAA,IAAUtE,GAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,iBAAiBrH,MAAOE,EAAQwE,EAAS8D,KACxD,MAAM,OAAE9G,EAAM,QAAEkJ,GAAYpC,EAEtB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,OAEX,MAAM/D,QAAeC,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE8D,OAAMiG,YAEvD,GAAKhK,EAQLV,GAASM,EAAAA,EAAAA,MACTN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASsU,EAAAA,EAAAA,IAAStU,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,OAC7D1B,GAASuW,EAAAA,EAAAA,IAAYvW,EAAQU,EAAO8V,UACpCxW,GAAS2K,EAAAA,EAAAA,IAAY3K,EAAQwB,EAAQkJ,EAAShK,EAAOwV,QAErD5R,EAAAA,EAAAA,IAAUtE,QAbR,GAAI,UAAWsI,GAAWA,EAAQ0O,uBAAwB,CACxD,MAAM,MAAE9U,GAAQwC,EAAAA,EAAAA,OAAsB4D,EACtC9D,EAAQ0C,SAAS,CAAE/H,QAAI+F,EAAWhD,SACpC,CAUe,KAGnBiF,EAAAA,EAAAA,IAAiB,eAAerH,MAAOE,EAAQwE,EAAS8D,KACtD,MAAM,OAAE9G,EAAM,UAAE6Q,EAAS,MAAEnQ,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAEnD7D,QAAasC,EAAmB/G,EAAQwE,EAAShD,EAAQU,GAC/D,IAAKuC,EACH,OAGFzE,GAASM,EAAAA,EAAAA,MAET,MAAM2W,EAAcxS,EAAK4P,QAIzB,IAAI3T,EAHJV,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAAE6S,QAAShC,KAC/C/N,EAAAA,EAAAA,IAAUtE,GAGV,IACEU,QAAeC,EAAAA,EAAAA,IAAQ,cAAe,CAAE8D,OAAM4N,aAOhD,CANE,MAAO5M,GACFA,EAAmBhF,QAAQ6O,WAAW,aACzC9K,EAAQgC,iBAAiB,CAAE/F,QAASgG,EAAAA,GAAuB,aAAcvE,UAEzEsC,EAAQmB,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ3D,SAE9E,CAEKxB,IACHV,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAAE6S,QAAS4C,KAC/C3S,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,4BAA4BrH,MAAOE,EAAQwE,EAAS8D,KACnE,MAAM,OAAE9G,EAAM,UAAE6Q,GAAc/J,EACxB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGF,MAAMyS,EAAgBzS,EAAKE,UAAUwS,sBAErCnX,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCmD,SAAU,IACLF,EAAKE,SACRwS,sBAAuB9E,MAG3B/N,EAAAA,EAAAA,IAAUtE,SAEWW,EAAAA,EAAAA,IAAQ,2BAA4B,CAAE8D,OAAM4N,oBAEhCnN,IAAlBgS,IACblX,GAASM,EAAAA,EAAAA,MACTN,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQwB,EAAQ,CAClCmD,SAAU,IACLF,EAAKE,SACRwS,sBAAuBD,MAG3B5S,EAAAA,EAAAA,IAAUtE,GACZ,KAGFmH,EAAAA,EAAAA,IAAiB,eAAerH,MAAOE,EAAQwE,EAAS8D,KACtD,MAAM,OACJ9G,EAAM,MAAEoJ,EAAK,UAAEwM,EAAS,YAAEC,EAAW,MACrCnV,GAAQwC,EAAAA,EAAAA,OACN4D,EACE7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EAAM,QAEP6G,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOoV,mBAChCtX,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9BsX,iBAAkB,CAChB9V,SACA+V,WAAW,IAEZrV,IACHoC,EAAAA,EAAAA,IAAUtE,IAGZ,MAAM0K,QAAgB/J,EAAAA,EAAAA,IAAQ,cAAe,CAC3C8D,OAAMmG,QAAOwM,YAAWC,gBAEtB3M,GACFlG,EAAQ0C,SAAS,CACf/H,GAAIqC,EAAQ6G,SAAUqC,EAASnB,sBAAsB,EAAMrH,UAG/DsC,EAAQgT,sBAAsB,CAAEtV,SAAQ,KAG1CiF,EAAAA,EAAAA,IAAiB,eAAerH,MAAOE,EAAQwE,EAAS8D,KACtD,MAAM,OAAE9G,EAAM,QAAEkJ,GAAYpC,EACtB7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,SAEgB9D,EAAAA,EAAAA,IAAQ,cAAe,CAAE8D,OAAMiG,cAIpD1K,GAASM,EAAAA,EAAAA,MACTN,GAASyX,EAAAA,EAAAA,IAAYzX,EAAQwB,EAAQkJ,IACrCpG,EAAAA,EAAAA,IAAUtE,GAAO,KAGnBmH,EAAAA,EAAAA,IAAiB,aAAarH,MAAOE,EAAQwE,EAAS8D,KACpD,MAAM,OACJ9G,EAAM,QAAEkJ,EAAO,MAAExI,GAAQwC,EAAAA,EAAAA,SAAsB2O,GAC7C/K,EACE7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC1B0U,EAAQzR,GAAMoJ,SAASnD,GACxBjG,GAASyR,KAEV5K,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOwV,iBAChC1X,GAASiL,EAAAA,EAAAA,GAAejL,EAAQ,CAC9B0X,eAAgB,CACdlW,SACAkJ,UACA6M,WAAW,IAEZrV,IACHoC,EAAAA,EAAAA,IAAUtE,UAGSW,EAAAA,EAAAA,IAAQ,YAAa,CAAE8D,OAAMiG,aAAY2I,MAG9DrT,GAASM,EAAAA,EAAAA,MACTN,GAAS2K,EAAAA,EAAAA,IAAY3K,EAAQwB,EAAQkJ,EAAS2I,IAC9C/O,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQmT,oBAAoB,CAAEzV,WAAQ,KAGxCiF,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnH,EAAQwE,EAAS8D,KACtD,MAAM,OACJ9G,EAAM,QAAEkJ,EAAO,SAAE6B,EAAQ,MAAErK,GAAQwC,EAAAA,EAAAA,OACjC4D,GAEE,kBAAEsP,GAAsB5X,EAAO6X,WAAa,CAAC,EAC7CpT,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAC3BiD,GAASA,EAAKoJ,QAAW+J,IAE1BrL,GAAY1K,OAAOC,OAAO2C,EAAKoJ,QAAQjG,QAAQsO,GAAUA,EAAM3J,WAAUtL,QAAU2W,EACrFpT,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,2BAA4BmR,EAAmB,KAC/E1V,WAKCvB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE8D,OAAMiG,UAAS6B,aAAW,G,wPC7vDhE,IAAIuL,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEO1E,QAAQC,IAAI5R,OAAOC,OAAOkW,GAAQtQ,KAAKyQ,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAdU,0oBAehBF,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAM3Q,QACN2Q,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,EAEdK,uBAAsB,KACpBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEAxZ,eAAeka,EAAsCha,EAAW4E,GAC9D,MAAMlE,QAAeC,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CsZ,KAAMrV,IAGR,IAAKlE,EAAQ,OAEbV,GAASM,EAAAA,EAAAA,MAET,MAAMwE,GAAoBC,EAAAA,EAAAA,IAAgB/E,EAAQ4E,EAAUzF,IAc5D,OAZAa,GAASgF,EAAAA,EAAAA,IACPhF,EACA4E,EAAUzF,IACV8F,EAAAA,EAAAA,IAAKvE,EAAOkE,UAAW,CAAC,yBACxBM,EACAJ,GAAmBoV,cAAWhV,EAAYxE,EAAOkE,UAAUO,mBAE7DnF,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASsU,EAAAA,EAAAA,IAAStU,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,QAE7D4C,EAAAA,EAAAA,IAAUtE,GAEHU,EAAOkE,SAChB,CAEA9E,eAAeqa,EACbna,EACA4E,EAAkCwV,GAElC,MAAM1Z,QAAeC,EAAAA,EAAAA,IAAQ,6BAA8B,CACzDsZ,KAAMrV,EACNgQ,OAAQwF,IAGL1Z,IAELV,GAASM,EAAAA,EAAAA,MAETN,GAASkD,EAAAA,EAAAA,IAASlD,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAO8B,MAAO,OAC7DxC,GAASsU,EAAAA,EAAAA,IAAStU,GAAQ4C,EAAAA,EAAAA,IAAqBlC,EAAOgB,MAAO,QAE7D4C,EAAAA,EAAAA,IAAUtE,GACZ,CAmSO,SAASqa,IACd,OAAOvC,CACT,CAEO,SAASwC,IACd,OAAOvC,CACT,CAEO,SAASwC,IACdzC,GAActQ,QACduQ,OAAe7S,EACf4S,OAAe5S,CACjB,CAKO,SAASsV,EACdxa,EACAwE,EAAgCiW,GAEhC,sFADIvY,GAAQwC,EAAAA,EAAAA,OAAkB,EAE1B+V,EACFC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1CpC,MAAMqC,IACkC,IAAnCA,EAAOC,iBAAiB9Z,OAC1BuD,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,qBAChCvE,UAGF8Y,EAA0Bhb,EAAQwE,EAAStC,EAC7C,IAED+Y,OAAM,KACLzW,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,qBAChCvE,SACA,IAGN8Y,EAA0Bhb,EAAQwE,EAAStC,EAE/C,CAEA,SAAS8Y,EACPhb,EAAWwE,GACX,sFAD+CtC,GAAQwC,EAAAA,EAAAA,OAAkB,EAEzEgW,UAAUC,aAAaC,aAAa,CAAEM,OAAO,IAC1CzC,MAAMqC,IACkC,IAAnCA,EAAOK,iBAAiBla,QAC1BuD,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,yCAChCvE,SAEJ,IAED+Y,OAAM,KACLzW,EAAQgC,iBAAiB,CACvB/F,QAASgG,EAAAA,GAAuB,yCAChCvE,SACA,GAER,EAhWAiF,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnH,EAAQwE,EAAS8D,KACzD,MAAM,MAAEiC,EAAK,MAAErI,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EACzD,OAAO2C,EAAAA,EAAAA,GAAejL,EAAQ,CAC5Bob,mBAAoB,UAAY9S,GAAW,CAAC,GAAKiC,IAASe,EAAAA,EAAAA,IAAetL,EAAQkC,GAAOkZ,oBACvFlZ,EAAM,KAGXiF,EAAAA,EAAAA,IAAiB,+BAA+BrH,MAAOE,EAAQwE,EAAS8D,KACtE,MAAM,WAAE+S,EAAU,GAAElc,GAAOmJ,EACrB1D,GAAYG,EAAAA,EAAAA,IAAgB/E,EAAQb,GAErCyF,IAEDyW,UACIrB,EAAeha,EAAQ4E,GAC7B5E,GAASM,EAAAA,EAAAA,YACH6Z,EAA2Bna,EAAQ4E,UAGrCjE,EAAAA,EAAAA,IAAQ,mCAAoC,CAChD0a,aACApB,KAAMrV,IACN,KAGJuC,EAAAA,EAAAA,IAAiB,mBAAmBrH,MAAOE,EAAQwE,EAAS8D,KAC1D,MAAM,OAAE9G,EAAM,MAAEU,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAExC7D,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQwB,GAChC,IAAKiD,EACH,OAGF,MAAM/D,QAAeC,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C2a,KAAM7W,IAGH/D,IAELV,GAASM,EAAAA,EAAAA,MACTN,GAASgF,EAAAA,EAAAA,IAAgBhF,EAAQU,EAAOvB,GAAI,IACvCuB,EACHc,YAEF8C,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQ+W,8BAA8B,CAAEpc,GAAIuB,EAAOvB,GAAIE,WAAYqB,EAAOrB,WAAY6C,UAAQ,KAGhGiF,EAAAA,EAAAA,IAAiB,6BAA6BrH,MAAOE,EAAQwE,EAAS8D,KACpE,MAAM,MAAEpG,GAAQwC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAC5C1D,GAAY4W,EAAAA,EAAAA,IAAsBxb,GAExC,IAAK4E,IAAcA,EAAUpD,OAC3B,OAGF,MAAMiD,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQ4E,EAAUpD,QAC1C,IAAKiD,EACH,OAGF,MAAMgX,EAAoB5T,SAAQ6T,EAAAA,EAAAA,IAAgBjX,IAElD,IAAI,WAAEkX,GAAelX,EAAKE,SACtB8W,IACFE,QAAmBhb,EAAAA,EAAAA,IAAQ,wBAAyB,CAClDsZ,KAAMrV,EACNgX,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpBnX,EAAQgC,iBAAiB,CACvB/F,QAAS,2BACTyB,UACA,KAGJiF,EAAAA,EAAAA,IAAiB,uBAAuBrH,MAAOE,EAAQwE,EAAS8D,KAC9D,MAAM,SAAEvC,EAAQ,WAAEoL,EAAU,MAAEjP,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAEtD7D,QAAaqB,EAAAA,EAAAA,IAAoB9F,EAAQ+F,GAE/C,IAAKtB,EAEH,YADAD,EAAQgC,iBAAiB,CAAE/F,QAASgG,EAAAA,GAAuB,mBAAoBvE,UAIjFlC,GAASM,EAAAA,EAAAA,MACT,MAAMwb,QAAavX,EAAAA,EAAAA,IAAavE,EAAQwE,EAASC,EAAMvC,GAEnD4Z,GAAMlX,WACRJ,EAAQ+W,8BAA8B,CACpCpc,GAAI2c,EAAKlX,UAAUzF,GACnBE,WAAYyc,EAAKlX,UAAUvF,WAC3B8R,aACAjP,SAEJ,KAGFiF,EAAAA,EAAAA,IAAiB,iCAAiC,CAACnH,EAAQwE,EAAS8D,KAClE9D,EAAQuX,2BAA2B,CACjCpG,OAAQ,gBACRrN,UACApG,MAAOoG,EAAQpG,QAASwC,EAAAA,EAAAA,OACxB,KAGJyC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnH,EAAQwE,EAAS8D,KAC/D9D,EAAQuX,2BAA2B,CACjCpG,OAAQ,aACRrN,aAASpD,EACThD,MAAOoG,GAASpG,QAASwC,EAAAA,EAAAA,OACzB,KAGJyC,EAAAA,EAAAA,IAAiB,iBAAiBrH,MAAOE,EAAQwE,EAAS8D,KACxD,MAAM,OACJ9G,EAAM,GAAErC,EAAE,WAAEE,EAAU,WAAE8R,EAAU,MAAEjP,GAAQwC,EAAAA,EAAAA,OAC1C4D,EAEJ,IAAK0T,EAAAA,GAAqB,OAE1B,GAAIhc,EAAOic,UAET,YADAzX,EAAQ0X,qBAAqB,CAAEha,WAuJnC,WACE,MAAMia,EAXE,IAAKzM,OAAO0M,cAAiB1M,OAAe2M,oBAYpDvE,EAAe,IAAIe,MACnBd,EAAeoE,EACfrE,EAAawE,UAXEH,KACf,MAAMI,EAAaJ,EAAIK,mBACjBC,EAAMF,EAAW1C,QAAQsC,EAAIO,gCAEnC,OADAH,EAAW/K,QACJ,IAAImL,YAAY,CAAC9a,OAAO+a,OAAQH,EAAY3B,OAAOK,iBAAiB,GAAI,CAAE0B,SAAS,KAAU,EAO3EC,CAAQX,IACjCY,EAAAA,EAAAA,GAASjF,EACX,CAzJEkF,GAEA9E,IAEKsC,EADLxa,GAASM,EAAAA,EAAAA,MACuCkE,GAAS,EAAMtC,GAE/D,MAAQ+a,YAAY,kBAAEC,IAAwBld,EAC9C,IAAI4E,EAAYzF,GAAK4F,EAAAA,EAAAA,IAAgB/E,EAAQb,IAAMge,EAAAA,EAAAA,IAAoBnd,EAAQwB,GAE3EoD,GAAWzF,KAAO+d,EAKlBA,EACE,mBAAoB1Y,GACtBA,EAAQ4Y,eAAe,CACrBC,OAAQ/U,EACRpG,UAMF0C,GAAasY,IAAsBtY,EAAUzF,GAC/CqF,EAAQ0X,qBAAqB,CAAEha,WAI5B0C,GAAezF,GAAOE,IACzBuF,QAAkBoV,EAAeha,EAAQ,CACvCb,KACAE,gBAICuF,IAEL5E,GAASM,EAAAA,EAAAA,MACTN,GAASgF,EAAAA,EAAAA,IACPhF,EACA4E,EAAUzF,GACV,IACKyF,EACHuM,mBAEFjM,EACAN,EAAUO,kBAAoB,GAEhCnF,EAAS,IACJA,EACHid,WAAY,IACPjd,EAAOid,WACVC,kBAAmBtY,EAAUzF,MAIjCmF,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQ0X,qBAAqB,CAAE3R,OAAO,EAAOrI,YAjD3CsC,EAAQ0X,qBAAqB,CAAEha,SAiDoB,KAGvDiF,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnH,EAAQwE,EAAS8D,KACvD,MAAM,MAAE6P,GAAU7P,EAEb0P,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAWlS,QAEN,aAAV2Q,GACFH,EAAO2B,SAASnS,QAEJ,YAAV2Q,GACFH,EAAO+B,QAAQvS,SAEjBuV,EAAAA,EAAAA,GAAS/E,EAAOG,IAGV,KAGVhR,EAAAA,EAAAA,IAAiB,iCAAkCnH,IACjD,MAAM4E,GAAY4W,EAAAA,EAAAA,IAAsBxb,GACnC4E,GAIAuV,EAA2Bna,EAAQ4E,EAAWA,EAAUwV,WAAW,KAG1EjT,EAAAA,EAAAA,IAAiB,+BAA+B,CAACnH,EAAQwE,EAAS8D,KAChE9D,EAAQuX,2BAA2B,CACjCpG,OAAQ,cACRrN,UACApG,MAAOoG,EAAQpG,QAASwC,EAAAA,EAAAA,OACxB,KAGJyC,EAAAA,EAAAA,IAAiB,eAAerH,MAAOE,EAAQwE,EAAS8D,KACtD,MAAM,OAAEiD,EAAM,QAAEkP,EAAO,MAAEvY,GAAQwC,EAAAA,EAAAA,OAAsB4D,EAEnDtI,EAAOic,UACTzX,EAAQ0X,qBAAqB,CAAEha,WAIpBkE,EAAAA,EAAAA,IAAWpG,EAAQuL,KAMhC2M,IAEKsC,EADLxa,GAASM,EAAAA,EAAAA,MACuCkE,EAASiW,EAASvY,GAElElC,GAASM,EAAAA,EAAAA,MACTN,EAAS,IACJA,EACHic,UAAW,CACT9c,GAAI,GACJme,MAAO,aACPC,cAAehS,EACfkP,UACA+C,QAASxd,EAAOuC,iBAGpB+B,EAAAA,EAAAA,IAAUtE,GAEVwE,EAAQ0X,qBAAqB,CAAE3R,OAAO,EAAOrI,UAAQ,G,+GC3YhD,SAAS8C,EACdhF,EACAyd,EACAC,EACAC,EACAC,GAEA,MAKMC,EALahc,OAAOC,OAAO,IAC5B9B,EAAOid,WAAWxa,KAAKgb,IAAcI,gBACrCH,EAAgBG,eAEOjW,QAAO,QAAC,OAAEkW,GAAQ,SAAMA,CAAM,IAC5B3J,QAAO,CAAC6B,EAA2CC,KAC/ED,EAAIC,EAAG9W,IAAM8W,EACND,IACN,CAAC,GAEJ,MAAO,IACFhW,EACHid,WAAY,IACPjd,EAAOid,WACVxa,KAAM,IACDzC,EAAOid,WAAWxa,KACrB,CAACgb,GAAc,IACVzd,EAAOid,WAAWxa,KAAKgb,OACvBxY,EAAAA,EAAAA,IAAKyY,EAAiB,CAAC,yBACtBC,GAAyB,CAC3BxY,kBAAmBnF,EAAOid,WAAWxa,KAAKgb,GAAatY,kBAAoBwY,WAE/CzY,IAA1B0Y,GAAuC,CACzCzY,kBAAmByY,GAErBC,kBAKV,CAEO,SAASE,EACd/d,EACAyd,GAEA,MAAM7Y,GAAYG,EAAAA,EAAAA,IAAgB/E,EAAQyd,GAC1C,GAAI7Y,GAAaA,EAAUpD,OAAQ,CACjC,MAAMiD,GAAOlD,EAAAA,EAAAA,IAAWvB,EAAQ4E,EAAUpD,QACtCiD,IACFzE,GAASoF,EAAAA,EAAAA,IAAWpF,EAAQ4E,EAAUpD,OAAQ,CAC5CmD,SAAU,IACLF,EAAKE,SACR8Y,iBAAavY,KAIrB,CAEA,MAAO,IACFlF,EACHid,WAAY,IACPjd,EAAOid,WACVxa,KAAM,KACDwC,EAAAA,EAAAA,IAAKjF,EAAOid,WAAWxa,KAAM,CAACgb,EAAY7N,eAIrD,CAEO,SAASoO,EACdhe,EACA0d,EACAE,GAEA,OAAK5d,EAAOid,WAAWC,kBAIhBlY,EAAgBhF,EACrBA,EAAOid,WAAWC,kBAClBQ,OACAxY,EACA0Y,GAPO5d,CAQX,CAEO,SAASie,EACdje,EACAyd,EACAlS,EACA2S,GAEG,IADHC,EAAgB,UAAH,8CAEb,MAAMvZ,GAAYG,EAAAA,EAAAA,IAAgB/E,EAAQyd,GAC1C,OAAK7Y,EAIEI,EAAgBhF,EAAQyd,EAAa,CAC1CI,aAAc,IACTjZ,EAAUiZ,aACb,CAACtS,GAAS,IACL3G,EAAUiZ,aAAatS,MACvB2S,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrBvZ,EAAUiZ,aAAatS,IAAW4S,EAAgB,EAAI,GAblDne,CAcX,C","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThreadOriginChat, selectThread,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id, threadId, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n      });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isBot","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","openChat","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}