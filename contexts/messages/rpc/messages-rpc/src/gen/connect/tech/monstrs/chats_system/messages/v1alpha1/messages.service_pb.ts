// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/messages/v1alpha1/messages.service.proto (package tech.monstrs.chats_system.messages.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Dialog, Message as Message$1, OutboxMessage } from "./messages.types_pb.js";
import { Peer } from "../../core/v1alpha1/peer.types_pb.js";

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty
 */
export class InputPeerEmpty extends Message<InputPeerEmpty> {
  constructor(data?: PartialMessage<InputPeerEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: InputPeerEmpty | PlainMessage<InputPeerEmpty> | undefined, b: InputPeerEmpty | PlainMessage<InputPeerEmpty> | undefined): boolean {
    return proto3.util.equals(InputPeerEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest
 */
export class GetDialogsRequest extends Message<GetDialogsRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: bool exclude_pinned = 2;
   */
  excludePinned = false;

  /**
   * @generated from field: int32 folder_id = 3;
   */
  folderId = 0;

  /**
   * @generated from field: int32 offset_date = 4;
   */
  offsetDate = 0;

  /**
   * @generated from field: int32 offset_id = 5;
   */
  offsetId = 0;

  /**
   * @generated from oneof tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest.offset_peer
   */
  offsetPeer: {
    /**
     * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty empty = 6;
     */
    value: InputPeerEmpty;
    case: "empty";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: int32 limit = 7;
   */
  limit = 0;

  /**
   * @generated from field: int64 hash = 8;
   */
  hash = protoInt64.zero;

  constructor(data?: PartialMessage<GetDialogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "exclude_pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "offset_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "offset_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "empty", kind: "message", T: InputPeerEmpty, oneof: "offset_peer" },
    { no: 7, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDialogsRequest | PlainMessage<GetDialogsRequest> | undefined, b: GetDialogsRequest | PlainMessage<GetDialogsRequest> | undefined): boolean {
    return proto3.util.equals(GetDialogsRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetDialogsResponse
 */
export class GetDialogsResponse extends Message<GetDialogsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.messages.v1alpha1.Dialog dialogs = 1;
   */
  dialogs: Dialog[] = [];

  constructor(data?: PartialMessage<GetDialogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.GetDialogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dialogs", kind: "message", T: Dialog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDialogsResponse {
    return new GetDialogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDialogsResponse {
    return new GetDialogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDialogsResponse {
    return new GetDialogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDialogsResponse | PlainMessage<GetDialogsResponse> | undefined, b: GetDialogsResponse | PlainMessage<GetDialogsResponse> | undefined): boolean {
    return proto3.util.equals(GetDialogsResponse, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.SendMessageRequest
 */
export class SendMessageRequest extends Message<SendMessageRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer peer = 2;
   */
  peer?: Peer;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.OutboxMessage message = 3;
   */
  message?: OutboxMessage;

  constructor(data?: PartialMessage<SendMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.SendMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "peer", kind: "message", T: Peer },
    { no: 3, name: "message", kind: "message", T: OutboxMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined, b: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined): boolean {
    return proto3.util.equals(SendMessageRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.SendMessageResponse
 */
export class SendMessageResponse extends Message<SendMessageResponse> {
  constructor(data?: PartialMessage<SendMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.SendMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined, b: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined): boolean {
    return proto3.util.equals(SendMessageResponse, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetHistoryRequest
 */
export class GetHistoryRequest extends Message<GetHistoryRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer peer = 2;
   */
  peer?: Peer;

  constructor(data?: PartialMessage<GetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.GetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "peer", kind: "message", T: Peer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoryRequest | PlainMessage<GetHistoryRequest> | undefined, b: GetHistoryRequest | PlainMessage<GetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetHistoryRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetHistoryResponse
 */
export class GetHistoryResponse extends Message<GetHistoryResponse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.messages.v1alpha1.Message messages = 1;
   */
  messages: Message$1[] = [];

  constructor(data?: PartialMessage<GetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.GetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Message$1, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoryResponse | PlainMessage<GetHistoryResponse> | undefined, b: GetHistoryResponse | PlainMessage<GetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetHistoryResponse, a, b);
  }
}

