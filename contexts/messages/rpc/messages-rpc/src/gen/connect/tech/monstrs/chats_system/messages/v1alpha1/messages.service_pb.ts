// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/messages/v1alpha1/messages.service.proto (package tech.monstrs.chats_system.messages.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

/**
 * @generated from enum tech.monstrs.chats_system.messages.v1alpha1.PeerType
 */
export enum PeerType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: EMPTY = 1;
   */
  EMPTY = 1,

  /**
   * @generated from enum value: SELF = 2;
   */
  SELF = 2,

  /**
   * @generated from enum value: USER = 3;
   */
  USER = 3,

  /**
   * @generated from enum value: CHAT = 4;
   */
  CHAT = 4,

  /**
   * @generated from enum value: CHANNEL = 5;
   */
  CHANNEL = 5,

  /**
   * @generated from enum value: USERS = 6;
   */
  USERS = 6,

  /**
   * @generated from enum value: CHATS = 7;
   */
  CHATS = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(PeerType)
proto3.util.setEnumType(PeerType, 'tech.monstrs.chats_system.messages.v1alpha1.PeerType', [
  { no: 0, name: 'UNKNOWN' },
  { no: 1, name: 'EMPTY' },
  { no: 2, name: 'SELF' },
  { no: 3, name: 'USER' },
  { no: 4, name: 'CHAT' },
  { no: 5, name: 'CHANNEL' },
  { no: 6, name: 'USERS' },
  { no: 7, name: 'CHATS' },
])

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.SendMessageRequest
 */
export class SendMessageRequest extends Message<SendMessageRequest> {
  /**
   * @generated from field: int64 random_id = 1;
   */
  randomId = protoInt64.zero

  /**
   * @generated from field: int64 from_id = 2;
   */
  fromId = protoInt64.zero

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.PeerType peer_type = 3;
   */
  peerType = PeerType.UNKNOWN

  /**
   * @generated from field: int64 peer_id = 4;
   */
  peerId = protoInt64.zero

  /**
   * @generated from field: string message = 5;
   */
  message = ''

  constructor(data?: PartialMessage<SendMessageRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.messages.v1alpha1.SendMessageRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'random_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'from_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'peer_type', kind: 'enum', T: proto3.getEnumType(PeerType) },
    { no: 4, name: 'peer_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageRequest {
    return new SendMessageRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SendMessageRequest {
    return new SendMessageRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined,
    b: SendMessageRequest | PlainMessage<SendMessageRequest> | undefined
  ): boolean {
    return proto3.util.equals(SendMessageRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.SendMessageResponse
 */
export class SendMessageResponse extends Message<SendMessageResponse> {
  constructor(data?: PartialMessage<SendMessageResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.messages.v1alpha1.SendMessageResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageResponse {
    return new SendMessageResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SendMessageResponse {
    return new SendMessageResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined,
    b: SendMessageResponse | PlainMessage<SendMessageResponse> | undefined
  ): boolean {
    return proto3.util.equals(SendMessageResponse, a, b)
  }
}
