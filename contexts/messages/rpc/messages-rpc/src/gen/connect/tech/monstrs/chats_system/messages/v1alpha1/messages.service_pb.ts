// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/messages/v1alpha1/messages.service.proto (package tech.monstrs.chats_system.messages.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions }                                                                      from '@bufbuild/protobuf'

import type { FieldList }                                                           from '@bufbuild/protobuf'

import type { JsonReadOptions }                                          from '@bufbuild/protobuf'

import type { JsonValue }                               from '@bufbuild/protobuf'

import type { PartialMessage }               from '@bufbuild/protobuf'

import type { PlainMessage } from '@bufbuild/protobuf'

import { Message }                                                                                     from '@bufbuild/protobuf'

import { proto3 }                                                                             from '@bufbuild/protobuf'

import { protoInt64 }                                                                 from '@bufbuild/protobuf'

import { Dialogs }                                                                                     from './messages.types_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty
 */
export class InputPeerEmpty extends Message<InputPeerEmpty> {
  constructor(data?: PartialMessage<InputPeerEmpty>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPeerEmpty {
    return new InputPeerEmpty().fromJsonString(jsonString, options)
  }

  static equals(
    a: InputPeerEmpty | PlainMessage<InputPeerEmpty> | undefined,
    b: InputPeerEmpty | PlainMessage<InputPeerEmpty> | undefined
  ): boolean {
    return proto3.util.equals(InputPeerEmpty, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest
 */
export class GetDialogsRequest extends Message<GetDialogsRequest> {
  /**
   * @generated from field: bool exclude_pinned = 1;
   */
  excludePinned = false

  /**
   * @generated from field: int32 folder_id = 2;
   */
  folderId = 0

  /**
   * @generated from field: int32 offset_date = 3;
   */
  offsetDate = 0

  /**
   * @generated from field: int32 offset_id = 4;
   */
  offsetId = 0

  /**
   * @generated from oneof tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest.offset_peer
   */
  offsetPeer:
    | {
        /**
         * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.InputPeerEmpty empty = 5;
         */
        value: InputPeerEmpty
        case: 'empty'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  /**
   * @generated from field: int32 limit = 6;
   */
  limit = 0

  /**
   * @generated from field: int64 hash = 7;
   */
  hash = protoInt64.zero

  constructor(data?: PartialMessage<GetDialogsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.messages.v1alpha1.GetDialogsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'exclude_pinned', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'folder_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'offset_date', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'offset_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: 'empty', kind: 'message', T: InputPeerEmpty, oneof: 'offset_peer' },
    { no: 6, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'hash', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDialogsRequest {
    return new GetDialogsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetDialogsRequest | PlainMessage<GetDialogsRequest> | undefined,
    b: GetDialogsRequest | PlainMessage<GetDialogsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetDialogsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.GetDialogsResponse
 */
export class GetDialogsResponse extends Message<GetDialogsResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.Dialogs dialogs = 1;
   */
  dialogs?: Dialogs

  constructor(data?: PartialMessage<GetDialogsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.messages.v1alpha1.GetDialogsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'dialogs', kind: 'message', T: Dialogs },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDialogsResponse {
    return new GetDialogsResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDialogsResponse {
    return new GetDialogsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetDialogsResponse {
    return new GetDialogsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetDialogsResponse | PlainMessage<GetDialogsResponse> | undefined,
    b: GetDialogsResponse | PlainMessage<GetDialogsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetDialogsResponse, a, b)
  }
}
