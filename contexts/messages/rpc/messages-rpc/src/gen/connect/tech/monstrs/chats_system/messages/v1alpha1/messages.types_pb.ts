// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/messages/v1alpha1/messages.types.proto (package tech.monstrs.chats_system.messages.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Peer, PeerType } from "../../core/v1alpha1/peer.types_pb.js";

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.Dialog
 */
export class Dialog extends Message$1<Dialog> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 user_id = 2;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.PeerType peer_type = 3;
   */
  peerType = PeerType.UNKNOWN;

  /**
   * @generated from field: int64 peer_id = 4;
   */
  peerId = protoInt64.zero;

  /**
   * @generated from field: int64 peer_dialog_id = 5;
   */
  peerDialogId = protoInt64.zero;

  /**
   * @generated from field: int64 date = 6;
   */
  date = protoInt64.zero;

  /**
   * @generated from field: bool pinned = 7;
   */
  pinned = false;

  /**
   * @generated from field: int64 top_message = 8;
   */
  topMessage = protoInt64.zero;

  /**
   * @generated from field: int32 read_inbox_max_id = 9;
   */
  readInboxMaxId = 0;

  /**
   * @generated from field: int32 read_outbox_max_id = 10;
   */
  readOutboxMaxId = 0;

  /**
   * @generated from field: int32 unread_count = 11;
   */
  unreadCount = 0;

  /**
   * @generated from field: bool unread_mark = 12;
   */
  unreadMark = false;

  /**
   * @generated from field: int32 unread_mentions_count = 13;
   */
  unreadMentionsCount = 0;

  /**
   * @generated from field: int32 unread_reactions_count = 14;
   */
  unreadReactionsCount = 0;

  /**
   * @generated from field: int32 folder_id = 15;
   */
  folderId = 0;

  /**
   * @generated from field: int64 folder_pinned = 16;
   */
  folderPinned = protoInt64.zero;

  constructor(data?: PartialMessage<Dialog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.Dialog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "peer_type", kind: "enum", T: proto3.getEnumType(PeerType) },
    { no: 4, name: "peer_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "peer_dialog_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "top_message", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "read_inbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "read_outbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "unread_mark", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "unread_mentions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "unread_reactions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "folder_pinned", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dialog {
    return new Dialog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dialog {
    return new Dialog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dialog {
    return new Dialog().fromJsonString(jsonString, options);
  }

  static equals(a: Dialog | PlainMessage<Dialog> | undefined, b: Dialog | PlainMessage<Dialog> | undefined): boolean {
    return proto3.util.equals(Dialog, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageFwdHeader
 */
export class MessageFwdHeader extends Message$1<MessageFwdHeader> {
  /**
   * @generated from field: bool imported = 1;
   */
  imported = false;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 2;
   */
  fromId?: Peer;

  /**
   * @generated from field: string from_name = 3;
   */
  fromName = "";

  /**
   * @generated from field: int64 date = 4;
   */
  date = protoInt64.zero;

  /**
   * @generated from field: int32 channel_post = 5;
   */
  channelPost = 0;

  /**
   * @generated from field: string post_author = 6;
   */
  postAuthor = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer saved_from_peer = 7;
   */
  savedFromPeer?: Peer;

  /**
   * @generated from field: int32 saved_from_msg_id = 8;
   */
  savedFromMsgId = 0;

  /**
   * @generated from field: string psa_type = 9;
   */
  psaType = "";

  constructor(data?: PartialMessage<MessageFwdHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageFwdHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "imported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "from_id", kind: "message", T: Peer },
    { no: 3, name: "from_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "channel_post", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "post_author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "saved_from_peer", kind: "message", T: Peer },
    { no: 8, name: "saved_from_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "psa_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromJsonString(jsonString, options);
  }

  static equals(a: MessageFwdHeader | PlainMessage<MessageFwdHeader> | undefined, b: MessageFwdHeader | PlainMessage<MessageFwdHeader> | undefined): boolean {
    return proto3.util.equals(MessageFwdHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageReplyHeader
 */
export class MessageReplyHeader extends Message$1<MessageReplyHeader> {
  /**
   * @generated from field: bool reply_to_scheduled = 1;
   */
  replyToScheduled = false;

  /**
   * @generated from field: bool forum_topic = 2;
   */
  forumTopic = false;

  /**
   * @generated from field: int32 reply_to_msg_id = 3;
   */
  replyToMsgId = 0;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer reply_to_peer_id = 4;
   */
  replyToPeerId?: Peer;

  /**
   * @generated from field: int32 reply_to_top_id = 5;
   */
  replyToTopId = 0;

  /**
   * @generated from field: int64 user_id = 6;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 story_id = 7;
   */
  storyId = 0;

  constructor(data?: PartialMessage<MessageReplyHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageReplyHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reply_to_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "forum_topic", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "reply_to_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "reply_to_peer_id", kind: "message", T: Peer },
    { no: 5, name: "reply_to_top_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "story_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReplyHeader | PlainMessage<MessageReplyHeader> | undefined, b: MessageReplyHeader | PlainMessage<MessageReplyHeader> | undefined): boolean {
    return proto3.util.equals(MessageReplyHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageMedia
 */
export class MessageMedia extends Message$1<MessageMedia> {
  constructor(data?: PartialMessage<MessageMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageMedia {
    return new MessageMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageMedia {
    return new MessageMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageMedia {
    return new MessageMedia().fromJsonString(jsonString, options);
  }

  static equals(a: MessageMedia | PlainMessage<MessageMedia> | undefined, b: MessageMedia | PlainMessage<MessageMedia> | undefined): boolean {
    return proto3.util.equals(MessageMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.ReplyMarkup
 */
export class ReplyMarkup extends Message$1<ReplyMarkup> {
  constructor(data?: PartialMessage<ReplyMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.ReplyMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyMarkup | PlainMessage<ReplyMarkup> | undefined, b: ReplyMarkup | PlainMessage<ReplyMarkup> | undefined): boolean {
    return proto3.util.equals(ReplyMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageEntity
 */
export class MessageEntity extends Message$1<MessageEntity> {
  constructor(data?: PartialMessage<MessageEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageEntity {
    return new MessageEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageEntity {
    return new MessageEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageEntity {
    return new MessageEntity().fromJsonString(jsonString, options);
  }

  static equals(a: MessageEntity | PlainMessage<MessageEntity> | undefined, b: MessageEntity | PlainMessage<MessageEntity> | undefined): boolean {
    return proto3.util.equals(MessageEntity, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageReplies
 */
export class MessageReplies extends Message$1<MessageReplies> {
  constructor(data?: PartialMessage<MessageReplies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageReplies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReplies {
    return new MessageReplies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReplies {
    return new MessageReplies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReplies {
    return new MessageReplies().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReplies | PlainMessage<MessageReplies> | undefined, b: MessageReplies | PlainMessage<MessageReplies> | undefined): boolean {
    return proto3.util.equals(MessageReplies, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageReactions
 */
export class MessageReactions extends Message$1<MessageReactions> {
  constructor(data?: PartialMessage<MessageReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReactions {
    return new MessageReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReactions {
    return new MessageReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReactions {
    return new MessageReactions().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReactions | PlainMessage<MessageReactions> | undefined, b: MessageReactions | PlainMessage<MessageReactions> | undefined): boolean {
    return proto3.util.equals(MessageReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.RestrictionReason
 */
export class RestrictionReason extends Message$1<RestrictionReason> {
  constructor(data?: PartialMessage<RestrictionReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.RestrictionReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestrictionReason {
    return new RestrictionReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJsonString(jsonString, options);
  }

  static equals(a: RestrictionReason | PlainMessage<RestrictionReason> | undefined, b: RestrictionReason | PlainMessage<RestrictionReason> | undefined): boolean {
    return proto3.util.equals(RestrictionReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.MessageAction
 */
export class MessageAction extends Message$1<MessageAction> {
  constructor(data?: PartialMessage<MessageAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.MessageAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageAction {
    return new MessageAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageAction {
    return new MessageAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageAction {
    return new MessageAction().fromJsonString(jsonString, options);
  }

  static equals(a: MessageAction | PlainMessage<MessageAction> | undefined, b: MessageAction | PlainMessage<MessageAction> | undefined): boolean {
    return proto3.util.equals(MessageAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: bool out = 1;
   */
  out = false;

  /**
   * @generated from field: bool mentioned = 2;
   */
  mentioned = false;

  /**
   * @generated from field: bool media_unread = 3;
   */
  mediaUnread = false;

  /**
   * @generated from field: bool silent = 4;
   */
  silent = false;

  /**
   * @generated from field: bool post = 5;
   */
  post = false;

  /**
   * @generated from field: bool from_scheduled = 6;
   */
  fromScheduled = false;

  /**
   * @generated from field: bool legacy = 7;
   */
  legacy = false;

  /**
   * @generated from field: bool edit_hide = 8;
   */
  editHide = false;

  /**
   * @generated from field: bool pinned = 9;
   */
  pinned = false;

  /**
   * @generated from field: bool noforwards = 10;
   */
  noforwards = false;

  /**
   * @generated from field: int64 id = 11;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer from = 12;
   */
  from?: Peer;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.Peer peer = 13;
   */
  peer?: Peer;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageFwdHeader fwd_from = 16;
   */
  fwdFrom?: MessageFwdHeader;

  /**
   * @generated from field: int64 via_bot_id = 17;
   */
  viaBotId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageReplyHeader reply_to = 18;
   */
  replyTo?: MessageReplyHeader;

  /**
   * @generated from field: int64 date = 19;
   */
  date = protoInt64.zero;

  /**
   * @generated from field: string message = 20;
   */
  message = "";

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageMedia media = 21;
   */
  media?: MessageMedia;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.ReplyMarkup reply_markup = 22;
   */
  replyMarkup?: ReplyMarkup;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageEntity entities = 23;
   */
  entities?: MessageEntity;

  /**
   * @generated from field: int32 views = 24;
   */
  views = 0;

  /**
   * @generated from field: int32 forwards = 25;
   */
  forwards = 0;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageReplies replies = 26;
   */
  replies?: MessageReplies;

  /**
   * @generated from field: int32 edit_date = 27;
   */
  editDate = 0;

  /**
   * @generated from field: string post_author = 28;
   */
  postAuthor = "";

  /**
   * @generated from field: int64 grouped_id = 29;
   */
  groupedId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageReactions reactions = 30;
   */
  reactions?: MessageReactions;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.messages.v1alpha1.RestrictionReason restriction_reason = 31;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: int32 ttl_period = 32;
   */
  ttlPeriod = 0;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.MessageAction action = 33;
   */
  action?: MessageAction;

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "out", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "mentioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "media_unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "silent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "post", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "from_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "legacy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "edit_hide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "noforwards", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "from", kind: "message", T: Peer },
    { no: 13, name: "peer", kind: "message", T: Peer },
    { no: 16, name: "fwd_from", kind: "message", T: MessageFwdHeader },
    { no: 17, name: "via_bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "reply_to", kind: "message", T: MessageReplyHeader },
    { no: 19, name: "date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "media", kind: "message", T: MessageMedia },
    { no: 22, name: "reply_markup", kind: "message", T: ReplyMarkup },
    { no: 23, name: "entities", kind: "message", T: MessageEntity },
    { no: 24, name: "views", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "forwards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "replies", kind: "message", T: MessageReplies },
    { no: 27, name: "edit_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 28, name: "post_author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "grouped_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "reactions", kind: "message", T: MessageReactions },
    { no: 31, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 32, name: "ttl_period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 33, name: "action", kind: "message", T: MessageAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.messages.v1alpha1.OutboxMessage
 */
export class OutboxMessage extends Message$1<OutboxMessage> {
  /**
   * @generated from field: bool no_webpage = 1;
   */
  noWebpage = false;

  /**
   * @generated from field: bool background = 2;
   */
  background = false;

  /**
   * @generated from field: int32 schedule_date = 3;
   */
  scheduleDate = 0;

  /**
   * @generated from field: int64 random_id = 4;
   */
  randomId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.messages.v1alpha1.Message message = 5;
   */
  message?: Message;

  constructor(data?: PartialMessage<OutboxMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.messages.v1alpha1.OutboxMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "no_webpage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "background", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "schedule_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "random_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutboxMessage {
    return new OutboxMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutboxMessage {
    return new OutboxMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutboxMessage {
    return new OutboxMessage().fromJsonString(jsonString, options);
  }

  static equals(a: OutboxMessage | PlainMessage<OutboxMessage> | undefined, b: OutboxMessage | PlainMessage<OutboxMessage> | undefined): boolean {
    return proto3.util.equals(OutboxMessage, a, b);
  }
}

