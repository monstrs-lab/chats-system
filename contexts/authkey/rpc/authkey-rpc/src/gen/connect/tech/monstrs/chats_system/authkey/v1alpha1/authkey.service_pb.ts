// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/authkey/v1alpha1/authkey.service.proto (package tech.monstrs.chats_system.authkey.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

import { AuthKey }                from './authkey.types_pb.js'
import { AuthKeyUser }            from './authkey.types_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyRequest
 */
export class CreateAuthKeyRequest extends Message<CreateAuthKeyRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero

  /**
   * @generated from field: bytes key = 2;
   */
  key = new Uint8Array(0)

  constructor(data?: PartialMessage<CreateAuthKeyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'key', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAuthKeyRequest {
    return new CreateAuthKeyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAuthKeyRequest {
    return new CreateAuthKeyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyRequest {
    return new CreateAuthKeyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateAuthKeyRequest | PlainMessage<CreateAuthKeyRequest> | undefined,
    b: CreateAuthKeyRequest | PlainMessage<CreateAuthKeyRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateAuthKeyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyResponse
 */
export class CreateAuthKeyResponse extends Message<CreateAuthKeyResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.authkey.v1alpha1.AuthKey auth_key = 1;
   */
  authKey?: AuthKey

  constructor(data?: PartialMessage<CreateAuthKeyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key', kind: 'message', T: AuthKey },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAuthKeyResponse {
    return new CreateAuthKeyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAuthKeyResponse {
    return new CreateAuthKeyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyResponse {
    return new CreateAuthKeyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateAuthKeyResponse | PlainMessage<CreateAuthKeyResponse> | undefined,
    b: CreateAuthKeyResponse | PlainMessage<CreateAuthKeyResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateAuthKeyResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyUserRequest
 */
export class CreateAuthKeyUserRequest extends Message<CreateAuthKeyUserRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 2;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<CreateAuthKeyUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAuthKeyUserRequest {
    return new CreateAuthKeyUserRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyUserRequest {
    return new CreateAuthKeyUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyUserRequest {
    return new CreateAuthKeyUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateAuthKeyUserRequest | PlainMessage<CreateAuthKeyUserRequest> | undefined,
    b: CreateAuthKeyUserRequest | PlainMessage<CreateAuthKeyUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateAuthKeyUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyUserResponse
 */
export class CreateAuthKeyUserResponse extends Message<CreateAuthKeyUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.authkey.v1alpha1.AuthKeyUser auth_key_user = 1;
   */
  authKeyUser?: AuthKeyUser

  constructor(data?: PartialMessage<CreateAuthKeyUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.CreateAuthKeyUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_user', kind: 'message', T: AuthKeyUser },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAuthKeyUserResponse {
    return new CreateAuthKeyUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyUserResponse {
    return new CreateAuthKeyUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAuthKeyUserResponse {
    return new CreateAuthKeyUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateAuthKeyUserResponse | PlainMessage<CreateAuthKeyUserResponse> | undefined,
    b: CreateAuthKeyUserResponse | PlainMessage<CreateAuthKeyUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateAuthKeyUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyRequest
 */
export class GetAuthKeyRequest extends Message<GetAuthKeyRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetAuthKeyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthKeyRequest {
    return new GetAuthKeyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthKeyRequest {
    return new GetAuthKeyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthKeyRequest {
    return new GetAuthKeyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthKeyRequest | PlainMessage<GetAuthKeyRequest> | undefined,
    b: GetAuthKeyRequest | PlainMessage<GetAuthKeyRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthKeyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyResponse
 */
export class GetAuthKeyResponse extends Message<GetAuthKeyResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.authkey.v1alpha1.AuthKey auth_key = 1;
   */
  authKey?: AuthKey

  constructor(data?: PartialMessage<GetAuthKeyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key', kind: 'message', T: AuthKey },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthKeyResponse {
    return new GetAuthKeyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthKeyResponse {
    return new GetAuthKeyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthKeyResponse {
    return new GetAuthKeyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthKeyResponse | PlainMessage<GetAuthKeyResponse> | undefined,
    b: GetAuthKeyResponse | PlainMessage<GetAuthKeyResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthKeyResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyUserRequest
 */
export class GetAuthKeyUserRequest extends Message<GetAuthKeyUserRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetAuthKeyUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthKeyUserRequest {
    return new GetAuthKeyUserRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthKeyUserRequest {
    return new GetAuthKeyUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthKeyUserRequest {
    return new GetAuthKeyUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthKeyUserRequest | PlainMessage<GetAuthKeyUserRequest> | undefined,
    b: GetAuthKeyUserRequest | PlainMessage<GetAuthKeyUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthKeyUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyUserResponse
 */
export class GetAuthKeyUserResponse extends Message<GetAuthKeyUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.authkey.v1alpha1.AuthKeyUser auth_key_user = 1;
   */
  authKeyUser?: AuthKeyUser

  constructor(data?: PartialMessage<GetAuthKeyUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.authkey.v1alpha1.GetAuthKeyUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_user', kind: 'message', T: AuthKeyUser },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthKeyUserResponse {
    return new GetAuthKeyUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthKeyUserResponse {
    return new GetAuthKeyUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthKeyUserResponse {
    return new GetAuthKeyUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthKeyUserResponse | PlainMessage<GetAuthKeyUserResponse> | undefined,
    b: GetAuthKeyUserResponse | PlainMessage<GetAuthKeyUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthKeyUserResponse, a, b)
  }
}
