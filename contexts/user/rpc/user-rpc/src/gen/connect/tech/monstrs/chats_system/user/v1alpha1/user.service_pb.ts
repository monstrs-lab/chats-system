// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/user/v1alpha1/user.service.proto (package tech.monstrs.chats_system.user.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

import { ImportedContacts }       from './user.types_pb.js'
import { InputContact }           from './user.types_pb.js'
import { User }                   from './user.types_pb.js'
import { UserContact }            from './user.types_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: int64 secret_key_id = 1;
   */
  secretKeyId = protoInt64.zero

  /**
   * @generated from field: string phone = 2;
   */
  phone = ''

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = ''

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.CreateUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'secret_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'phone', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined,
    b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.User user = 1;
   */
  user?: User

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.CreateUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined,
    b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: optional int64 user_id = 1;
   */
  userId?: bigint

  /**
   * @generated from field: optional string phone = 2;
   */
  phone?: string

  constructor(data?: PartialMessage<GetUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.GetUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: 'phone', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserRequest | PlainMessage<GetUserRequest> | undefined,
    b: GetUserRequest | PlainMessage<GetUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.User user = 1;
   */
  user?: User

  constructor(data?: PartialMessage<GetUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.GetUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserResponse | PlainMessage<GetUserResponse> | undefined,
    b: GetUserResponse | PlainMessage<GetUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.ImportContactsRequest
 */
export class ImportContactsRequest extends Message<ImportContactsRequest> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.InputContact contacts = 1;
   */
  contacts: InputContact[] = []

  constructor(data?: PartialMessage<ImportContactsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.ImportContactsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'contacts', kind: 'message', T: InputContact, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ImportContactsRequest {
    return new ImportContactsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportContactsRequest {
    return new ImportContactsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ImportContactsRequest {
    return new ImportContactsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ImportContactsRequest | PlainMessage<ImportContactsRequest> | undefined,
    b: ImportContactsRequest | PlainMessage<ImportContactsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ImportContactsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.ImportContactsResponse
 */
export class ImportContactsResponse extends Message<ImportContactsResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.ImportedContacts imported_contacts = 1;
   */
  importedContacts?: ImportedContacts

  constructor(data?: PartialMessage<ImportContactsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.ImportContactsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'imported_contacts', kind: 'message', T: ImportedContacts },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ImportContactsResponse {
    return new ImportContactsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ImportContactsResponse {
    return new ImportContactsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ImportContactsResponse {
    return new ImportContactsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ImportContactsResponse | PlainMessage<ImportContactsResponse> | undefined,
    b: ImportContactsResponse | PlainMessage<ImportContactsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ImportContactsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetUserContactsRequest
 */
export class GetUserContactsRequest extends Message<GetUserContactsRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<GetUserContactsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.GetUserContactsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetUserContactsRequest {
    return new GetUserContactsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetUserContactsRequest {
    return new GetUserContactsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetUserContactsRequest {
    return new GetUserContactsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserContactsRequest | PlainMessage<GetUserContactsRequest> | undefined,
    b: GetUserContactsRequest | PlainMessage<GetUserContactsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetUserContactsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetUserContactsResponse
 */
export class GetUserContactsResponse extends Message<GetUserContactsResponse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.UserContact user_contacts = 1;
   */
  userContacts: UserContact[] = []

  constructor(data?: PartialMessage<GetUserContactsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.user.v1alpha1.GetUserContactsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_contacts', kind: 'message', T: UserContact, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetUserContactsResponse {
    return new GetUserContactsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetUserContactsResponse {
    return new GetUserContactsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetUserContactsResponse {
    return new GetUserContactsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserContactsResponse | PlainMessage<GetUserContactsResponse> | undefined,
    b: GetUserContactsResponse | PlainMessage<GetUserContactsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetUserContactsResponse, a, b)
  }
}
