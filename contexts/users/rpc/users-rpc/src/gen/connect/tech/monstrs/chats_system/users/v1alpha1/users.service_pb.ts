// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/users/v1alpha1/users.service.proto (package tech.monstrs.chats_system.users.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

import { Query_ID }               from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Int64 }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero

  /**
   * @generated from field: string external_id = 2;
   */
  externalId = ''

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = ''

  constructor(data?: PartialMessage<User>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.User'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'external_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options)
  }

  static equals(
    a: User | PlainMessage<User> | undefined,
    b: User | PlainMessage<User> | undefined
  ): boolean {
    return proto3.util.equals(User, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: string external_id = 1;
   */
  externalId = ''

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = ''

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.CreateUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'external_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined,
    b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.users.v1alpha1.User user = 1;
   */
  user?: User

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.CreateUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined,
    b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.chats_system.users.v1alpha1.ListUsersRequest.UsersQuery query = 3;
   */
  query?: ListUsersRequest_UsersQuery

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.ListUsersRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'query', kind: 'message', T: ListUsersRequest_UsersQuery },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined,
    b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListUsersRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.ListUsersRequest.UsersQuery
 */
export class ListUsersRequest_UsersQuery extends Message<ListUsersRequest_UsersQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Int64 id = 1;
   */
  id?: Query_Int64

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID external_id = 2;
   */
  externalId?: Query_ID

  constructor(data?: PartialMessage<ListUsersRequest_UsersQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.ListUsersRequest.UsersQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_Int64 },
    { no: 2, name: 'external_id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListUsersRequest_UsersQuery {
    return new ListUsersRequest_UsersQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListUsersRequest_UsersQuery {
    return new ListUsersRequest_UsersQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListUsersRequest_UsersQuery {
    return new ListUsersRequest_UsersQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListUsersRequest_UsersQuery | PlainMessage<ListUsersRequest_UsersQuery> | undefined,
    b: ListUsersRequest_UsersQuery | PlainMessage<ListUsersRequest_UsersQuery> | undefined
  ): boolean {
    return proto3.util.equals(ListUsersRequest_UsersQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.users.v1alpha1.ListUsersResponse
 */
export class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.users.v1alpha1.User users = 1;
   */
  users: User[] = []

  constructor(data?: PartialMessage<ListUsersResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.users.v1alpha1.ListUsersResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'users', kind: 'message', T: User, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined,
    b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListUsersResponse, a, b)
  }
}
