// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/help/v1alpha1/help.service.proto (package tech.monstrs.chats_system.help.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.CountryCode
 */
export class CountryCode extends Message<CountryCode> {
  /**
   * @generated from field: string country_code = 1;
   */
  countryCode = ''

  /**
   * @generated from field: repeated string prefixes = 2;
   */
  prefixes: string[] = []

  /**
   * @generated from field: repeated string patterns = 3;
   */
  patterns: string[] = []

  constructor(data?: PartialMessage<CountryCode>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.CountryCode'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'country_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'prefixes', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: 'patterns', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryCode {
    return new CountryCode().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryCode {
    return new CountryCode().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryCode {
    return new CountryCode().fromJsonString(jsonString, options)
  }

  static equals(
    a: CountryCode | PlainMessage<CountryCode> | undefined,
    b: CountryCode | PlainMessage<CountryCode> | undefined
  ): boolean {
    return proto3.util.equals(CountryCode, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.Country
 */
export class Country extends Message<Country> {
  /**
   * @generated from field: string iso2 = 1;
   */
  iso2 = ''

  /**
   * @generated from field: string default_name = 2;
   */
  defaultName = ''

  /**
   * @generated from field: repeated tech.monstrs.chats_system.help.v1alpha1.CountryCode country_codes = 3;
   */
  countryCodes: CountryCode[] = []

  /**
   * @generated from field: optional string name = 4;
   */
  name?: string

  /**
   * @generated from field: optional bool hidden = 5;
   */
  hidden?: boolean

  constructor(data?: PartialMessage<Country>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.Country'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'iso2', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'default_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'country_codes', kind: 'message', T: CountryCode, repeated: true },
    { no: 4, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'hidden', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Country {
    return new Country().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJsonString(jsonString, options)
  }

  static equals(
    a: Country | PlainMessage<Country> | undefined,
    b: Country | PlainMessage<Country> | undefined
  ): boolean {
    return proto3.util.equals(Country, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.NearestDc
 */
export class NearestDc extends Message<NearestDc> {
  /**
   * @generated from field: string country = 1;
   */
  country = ''

  /**
   * @generated from field: int32 this_dc = 2;
   */
  thisDc = 0

  /**
   * @generated from field: int32 nearest_dc = 3;
   */
  nearestDc = 0

  constructor(data?: PartialMessage<NearestDc>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.NearestDc'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'country', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'this_dc', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'nearest_dc', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NearestDc {
    return new NearestDc().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NearestDc {
    return new NearestDc().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NearestDc {
    return new NearestDc().fromJsonString(jsonString, options)
  }

  static equals(
    a: NearestDc | PlainMessage<NearestDc> | undefined,
    b: NearestDc | PlainMessage<NearestDc> | undefined
  ): boolean {
    return proto3.util.equals(NearestDc, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.DcOption
 */
export class DcOption extends Message<DcOption> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0

  /**
   * @generated from field: string ipAddress = 2;
   */
  ipAddress = ''

  /**
   * @generated from field: int32 port = 3;
   */
  port = 0

  /**
   * @generated from field: optional bool ipv6 = 4;
   */
  ipv6?: boolean

  /**
   * @generated from field: optional bool mediaOnly = 5;
   */
  mediaOnly?: boolean

  /**
   * @generated from field: optional bool tcpoOnly = 6;
   */
  tcpoOnly?: boolean

  /**
   * @generated from field: optional bool cdn = 7;
   */
  cdn?: boolean

  /**
   * @generated from field: optional bool static = 8;
   */
  static?: boolean

  /**
   * @generated from field: optional bool thisPortOnly = 9;
   */
  thisPortOnly?: boolean

  /**
   * @generated from field: optional bytes secret = 10;
   */
  secret?: Uint8Array

  constructor(data?: PartialMessage<DcOption>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.DcOption'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'ipAddress', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'port', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'ipv6', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: 'mediaOnly', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: 'tcpoOnly', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: 'cdn', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: 'static', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: 'thisPortOnly', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 10, name: 'secret', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DcOption {
    return new DcOption().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DcOption {
    return new DcOption().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DcOption {
    return new DcOption().fromJsonString(jsonString, options)
  }

  static equals(
    a: DcOption | PlainMessage<DcOption> | undefined,
    b: DcOption | PlainMessage<DcOption> | undefined
  ): boolean {
    return proto3.util.equals(DcOption, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.Reaction
 */
export class Reaction extends Message<Reaction> {
  constructor(data?: PartialMessage<Reaction>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.Reaction'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reaction {
    return new Reaction().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJsonString(jsonString, options)
  }

  static equals(
    a: Reaction | PlainMessage<Reaction> | undefined,
    b: Reaction | PlainMessage<Reaction> | undefined
  ): boolean {
    return proto3.util.equals(Reaction, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from field: int32 date = 1;
   */
  date = 0

  /**
   * @generated from field: int32 expires = 2;
   */
  expires = 0

  /**
   * @generated from field: bool test_mode = 3;
   */
  testMode = false

  /**
   * @generated from field: int32 this_dc = 4;
   */
  thisDc = 0

  /**
   * @generated from field: repeated tech.monstrs.chats_system.help.v1alpha1.DcOption dc_options = 5;
   */
  dcOptions: DcOption[] = []

  /**
   * @generated from field: string dc_txt_domain_name = 6;
   */
  dcTxtDomainName = ''

  /**
   * @generated from field: int32 chat_size_max = 7;
   */
  chatSizeMax = 0

  /**
   * @generated from field: int32 megagroup_size_max = 8;
   */
  megagroupSizeMax = 0

  /**
   * @generated from field: int32 forwarded_count_max = 9;
   */
  forwardedCountMax = 0

  /**
   * @generated from field: int32 online_update_period_ms = 10;
   */
  onlineUpdatePeriodMs = 0

  /**
   * @generated from field: int32 offline_blur_timeout_ms = 11;
   */
  offlineBlurTimeoutMs = 0

  /**
   * @generated from field: int32 offline_idle_timeout_ms = 12;
   */
  offlineIdleTimeoutMs = 0

  /**
   * @generated from field: int32 online_cloud_timeout_ms = 13;
   */
  onlineCloudTimeoutMs = 0

  /**
   * @generated from field: int32 notify_cloud_delay_ms = 14;
   */
  notifyCloudDelayMs = 0

  /**
   * @generated from field: int32 notify_default_delay_ms = 15;
   */
  notifyDefaultDelayMs = 0

  /**
   * @generated from field: int32 push_chat_period_ms = 16;
   */
  pushChatPeriodMs = 0

  /**
   * @generated from field: int32 push_chat_limit = 17;
   */
  pushChatLimit = 0

  /**
   * @generated from field: int32 edit_time_limit = 18;
   */
  editTimeLimit = 0

  /**
   * @generated from field: int32 revoke_time_limit = 19;
   */
  revokeTimeLimit = 0

  /**
   * @generated from field: int32 revoke_pm_time_limit = 20;
   */
  revokePmTimeLimit = 0

  /**
   * @generated from field: int32 rating_e_decay = 21;
   */
  ratingEDecay = 0

  /**
   * @generated from field: int32 stickers_recent_limit = 22;
   */
  stickersRecentLimit = 0

  /**
   * @generated from field: int32 channels_read_media_period = 23;
   */
  channelsReadMediaPeriod = 0

  /**
   * @generated from field: int32 call_receive_timeout_ms = 24;
   */
  callReceiveTimeoutMs = 0

  /**
   * @generated from field: int32 call_ring_timeout_ms = 25;
   */
  callRingTimeoutMs = 0

  /**
   * @generated from field: int32 call_connect_timeout_ms = 26;
   */
  callConnectTimeoutMs = 0

  /**
   * @generated from field: int32 call_packet_timeout_ms = 27;
   */
  callPacketTimeoutMs = 0

  /**
   * @generated from field: string me_url_prefix = 28;
   */
  meUrlPrefix = ''

  /**
   * @generated from field: int32 caption_length_max = 29;
   */
  captionLengthMax = 0

  /**
   * @generated from field: int32 message_length_max = 30;
   */
  messageLengthMax = 0

  /**
   * @generated from field: int32 webfile_dc_id = 31;
   */
  webfileDcId = 0

  /**
   * @generated from field: int32 tmp_sessions = 32;
   */
  tmpSessions = 0

  /**
   * @generated from field: optional bool default_p2p_contacts = 33;
   */
  defaultP2pContacts?: boolean

  /**
   * @generated from field: optional bool preload_featured_stickers = 34;
   */
  preloadFeaturedStickers?: boolean

  /**
   * @generated from field: optional bool revoke_pm_inbox = 35;
   */
  revokePmInbox?: boolean

  /**
   * @generated from field: optional bool blocked_mode = 36;
   */
  blockedMode?: boolean

  /**
   * @generated from field: optional string gif_search_username = 37;
   */
  gifSearchUsername?: string

  /**
   * @generated from field: optional string venue_search_username = 38;
   */
  venueSearchUsername?: string

  /**
   * @generated from field: optional string img_search_username = 39;
   */
  imgSearchUsername?: string

  /**
   * @generated from field: optional string static_maps_provider = 40;
   */
  staticMapsProvider?: string

  /**
   * @generated from field: optional string suggested_lang_code = 41;
   */
  suggestedLangCode?: string

  /**
   * @generated from field: optional int32 lang_pack_version = 42;
   */
  langPackVersion?: number

  /**
   * @generated from field: optional int32 base_lang_pack_version = 43;
   */
  baseLangPackVersion?: number

  /**
   * @generated from field: optional bool force_try_ipv6 = 44;
   */
  forceTryIpv6?: boolean

  /**
   * @generated from field: optional string autoupdate_url_prefix = 45;
   */
  autoupdateUrlPrefix?: string

  /**
   * @generated from field: optional string autologin_token = 46;
   */
  autologinToken?: string

  /**
   * @generated from field: optional tech.monstrs.chats_system.help.v1alpha1.Reaction reactions_default = 47;
   */
  reactionsDefault?: Reaction

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'date', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'expires', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'test_mode', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'this_dc', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: 'dc_options', kind: 'message', T: DcOption, repeated: true },
    { no: 6, name: 'dc_txt_domain_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'chat_size_max', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: 'megagroup_size_max', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: 'forwarded_count_max', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: 'online_update_period_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: 'offline_blur_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: 'offline_idle_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: 'online_cloud_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: 'notify_cloud_delay_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: 'notify_default_delay_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: 'push_chat_period_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: 'push_chat_limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: 'edit_time_limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: 'revoke_time_limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: 'revoke_pm_time_limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: 'rating_e_decay', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: 'stickers_recent_limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: 'channels_read_media_period', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: 'call_receive_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: 'call_ring_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: 'call_connect_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 27, name: 'call_packet_timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 28, name: 'me_url_prefix', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 29, name: 'caption_length_max', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 30, name: 'message_length_max', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 31, name: 'webfile_dc_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 32, name: 'tmp_sessions', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 33, name: 'default_p2p_contacts', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    {
      no: 34,
      name: 'preload_featured_stickers',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      opt: true,
    },
    { no: 35, name: 'revoke_pm_inbox', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 36, name: 'blocked_mode', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    {
      no: 37,
      name: 'gif_search_username',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 38,
      name: 'venue_search_username',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 39,
      name: 'img_search_username',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 40,
      name: 'static_maps_provider',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 41,
      name: 'suggested_lang_code',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    { no: 42, name: 'lang_pack_version', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true },
    {
      no: 43,
      name: 'base_lang_pack_version',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
      opt: true,
    },
    { no: 44, name: 'force_try_ipv6', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    {
      no: 45,
      name: 'autoupdate_url_prefix',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    { no: 46, name: 'autologin_token', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 47, name: 'reactions_default', kind: 'message', T: Reaction, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetConfigRequest
 */
export class GetConfigRequest extends Message<GetConfigRequest> {
  constructor(data?: PartialMessage<GetConfigRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetConfigRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined,
    b: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetConfigRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetConfigResponse
 */
export class GetConfigResponse extends Message<GetConfigResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.help.v1alpha1.Config config = 1;
   */
  config?: Config

  constructor(data?: PartialMessage<GetConfigResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetConfigResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'config', kind: 'message', T: Config },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined,
    b: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetConfigResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetNearestDcRequest
 */
export class GetNearestDcRequest extends Message<GetNearestDcRequest> {
  constructor(data?: PartialMessage<GetNearestDcRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetNearestDcRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNearestDcRequest {
    return new GetNearestDcRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNearestDcRequest {
    return new GetNearestDcRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetNearestDcRequest {
    return new GetNearestDcRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetNearestDcRequest | PlainMessage<GetNearestDcRequest> | undefined,
    b: GetNearestDcRequest | PlainMessage<GetNearestDcRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetNearestDcRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetNearestDcResponse
 */
export class GetNearestDcResponse extends Message<GetNearestDcResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.help.v1alpha1.NearestDc nearest_dc = 1;
   */
  nearestDc?: NearestDc

  constructor(data?: PartialMessage<GetNearestDcResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetNearestDcResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'nearest_dc', kind: 'message', T: NearestDc },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNearestDcResponse {
    return new GetNearestDcResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNearestDcResponse {
    return new GetNearestDcResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetNearestDcResponse {
    return new GetNearestDcResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetNearestDcResponse | PlainMessage<GetNearestDcResponse> | undefined,
    b: GetNearestDcResponse | PlainMessage<GetNearestDcResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetNearestDcResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetCountriesListRequest
 */
export class GetCountriesListRequest extends Message<GetCountriesListRequest> {
  /**
   * @generated from field: string lang_code = 1;
   */
  langCode = ''

  /**
   * @generated from field: int32 hash = 2;
   */
  hash = 0

  constructor(data?: PartialMessage<GetCountriesListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetCountriesListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'hash', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCountriesListRequest {
    return new GetCountriesListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCountriesListRequest {
    return new GetCountriesListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCountriesListRequest {
    return new GetCountriesListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetCountriesListRequest | PlainMessage<GetCountriesListRequest> | undefined,
    b: GetCountriesListRequest | PlainMessage<GetCountriesListRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetCountriesListRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.help.v1alpha1.GetCountriesListResponse
 */
export class GetCountriesListResponse extends Message<GetCountriesListResponse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.help.v1alpha1.Country countries = 1;
   */
  countries: Country[] = []

  /**
   * @generated from field: int32 hash = 2;
   */
  hash = 0

  constructor(data?: PartialMessage<GetCountriesListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.help.v1alpha1.GetCountriesListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'countries', kind: 'message', T: Country, repeated: true },
    { no: 2, name: 'hash', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetCountriesListResponse {
    return new GetCountriesListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetCountriesListResponse {
    return new GetCountriesListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetCountriesListResponse {
    return new GetCountriesListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetCountriesListResponse | PlainMessage<GetCountriesListResponse> | undefined,
    b: GetCountriesListResponse | PlainMessage<GetCountriesListResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetCountriesListResponse, a, b)
  }
}
