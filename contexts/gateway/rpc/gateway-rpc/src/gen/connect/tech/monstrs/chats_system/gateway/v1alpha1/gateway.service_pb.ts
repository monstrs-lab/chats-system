// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/gateway/v1alpha1/gateway.service.proto (package tech.monstrs.chats_system.gateway.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.chats_system.gateway.v1alpha1.SendDataRequest
 */
export class SendDataRequest extends Message<SendDataRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero

  /**
   * @generated from field: bytes payload = 3;
   */
  payload = new Uint8Array(0)

  constructor(data?: PartialMessage<SendDataRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.gateway.v1alpha1.SendDataRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'session_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'payload', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendDataRequest {
    return new SendDataRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendDataRequest {
    return new SendDataRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendDataRequest {
    return new SendDataRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendDataRequest | PlainMessage<SendDataRequest> | undefined,
    b: SendDataRequest | PlainMessage<SendDataRequest> | undefined
  ): boolean {
    return proto3.util.equals(SendDataRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.gateway.v1alpha1.SendDataResponse
 */
export class SendDataResponse extends Message<SendDataResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SendDataResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.gateway.v1alpha1.SendDataResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendDataResponse {
    return new SendDataResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendDataResponse {
    return new SendDataResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendDataResponse {
    return new SendDataResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendDataResponse | PlainMessage<SendDataResponse> | undefined,
    b: SendDataResponse | PlainMessage<SendDataResponse> | undefined
  ): boolean {
    return proto3.util.equals(SendDataResponse, a, b)
  }
}
