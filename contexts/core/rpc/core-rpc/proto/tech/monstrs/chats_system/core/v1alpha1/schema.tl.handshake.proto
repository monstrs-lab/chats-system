syntax = "proto3";

package tech.monstrs.chats_system.core.v1alpha1;

import "tech/monstrs/chats_system/core/v1alpha1/schema.tl.crc32.proto";

message BindAuthKeyInner {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional int64 nonce = 3;
  optional int64 temp_auth_key_id = 4;
  optional int64 perm_auth_key_id = 5;
  optional int64 temp_session_id = 6;
  optional int32 expires_at = 7;
}

message TLBindAuthKeyInner {
  optional BindAuthKeyInner data2 = 1;
}

message ClientDHInnerData {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional bytes nonce = 3;
  optional bytes server_nonce = 4;
  optional int64 retry_id = 5;
  optional string g_b = 6;
}

message TLClientDHInnerData {
  optional ClientDHInnerData data2 = 1;
}

message DestroyAuthKeyRes {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
}

message TLDestroyAuthKeyOk {
  optional DestroyAuthKeyRes data2 = 1;
}

message TLDestroyAuthKeyNone {
  optional DestroyAuthKeyRes data2 = 1;
}

message TLDestroyAuthKeyFail {
  optional DestroyAuthKeyRes data2 = 1;
}

message PQInnerData {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional string pq = 3;
  optional string p = 4;
  optional string q = 5;
  optional bytes nonce = 6;
  optional bytes server_nonce = 7;
  optional bytes new_nonce = 8;
  optional int32 dc = 9;
  optional int32 expires_in = 10;
}

message TLPQInnerData {
  optional PQInnerData data2 = 1;
}

message TLPQInnerDataDc {
  optional PQInnerData data2 = 1;
}

message TLPQInnerDataTemp {
  optional PQInnerData data2 = 1;
}

message TLPQInnerDataTempDc {
  optional PQInnerData data2 = 1;
}

message ResPQ {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional bytes nonce = 3;
  optional bytes server_nonce = 4;
  optional string pq = 5;
  repeated int64 server_public_key_fingerprints = 6;
}

message TLResPQ {
  optional ResPQ data2 = 1;
}

message ServerDHParams {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional bytes nonce = 3;
  optional bytes server_nonce = 4;
  optional bytes new_nonce_hash = 5;
  optional string encrypted_answer = 6;
}

message TLServerDHParamsFail {
  optional ServerDHParams data2 = 1;
}

message TLServerDHParamsOk {
  optional ServerDHParams data2 = 1;
}

message ServerDHInnerData {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional bytes nonce = 3;
  optional bytes server_nonce = 4;
  optional int32 g = 5;
  optional string dh_prime = 6;
  optional string g_a = 7;
  optional int32 server_time = 8;
}

message TLServerDHInnerData {
  optional ServerDHInnerData data2 = 1;
}

message SetClientDHParamsAnswer {
  optional string predicate_name = 1;
  optional TLConstructor constructor = 2;
  optional bytes nonce = 3;
  optional bytes server_nonce = 4;
  optional bytes new_nonce_hash1 = 5;
  optional bytes new_nonce_hash2 = 6;
  optional bytes new_nonce_hash3 = 7;
}

message TLDhGenOk {
  optional SetClientDHParamsAnswer data2 = 1;
}

message TLDhGenRetry {
  optional SetClientDHParamsAnswer data2 = 1;
}

message TLDhGenFail {
  optional SetClientDHParamsAnswer data2 = 1;
}
