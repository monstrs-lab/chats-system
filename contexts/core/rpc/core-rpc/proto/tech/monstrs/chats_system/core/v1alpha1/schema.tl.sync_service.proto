syntax = "proto3";

package tech.monstrs.chats_system.core.v1alpha1;

import "google/protobuf/wrappers.proto";
import "tech/monstrs/chats_system/core/v1alpha1/schema.tl.core_types.proto";
import "tech/monstrs/chats_system/core/v1alpha1/schema.tl.crc32.proto";
import "tech/monstrs/chats_system/core/v1alpha1/schema.tl.sync.proto";

service RPCAccount {
  rpc account_updateProfile (TLAccountUpdateProfile) returns (User) {}
  rpc account_updateStatus (TLAccountUpdateStatus) returns (Bool) {}
  rpc account_getPrivacy (TLAccountGetPrivacy) returns (AccountPrivacyRules) {}
  rpc account_setPrivacy (TLAccountSetPrivacy) returns (AccountPrivacyRules) {}
  rpc account_deleteAccount (TLAccountDeleteAccount) returns (Bool) {}
  rpc account_getAccountTTL (TLAccountGetAccountTTL) returns (AccountDaysTTL) {}
  rpc account_setAccountTTL (TLAccountSetAccountTTL) returns (Bool) {}
  rpc account_sendChangePhoneCode (TLAccountSendChangePhoneCode) returns (AuthSentCode) {}
  rpc account_changePhone (TLAccountChangePhone) returns (User) {}
  rpc account_resetAuthorization (TLAccountResetAuthorization) returns (Bool) {}
  rpc account_sendConfirmPhoneCode (TLAccountSendConfirmPhoneCode) returns (AuthSentCode) {}
  rpc account_confirmPhone (TLAccountConfirmPhone) returns (Bool) {}
  rpc account_getGlobalPrivacySettings (TLAccountGetGlobalPrivacySettings) returns (GlobalPrivacySettings) {}
  rpc account_setGlobalPrivacySettings (TLAccountSetGlobalPrivacySettings) returns (GlobalPrivacySettings) {}
  rpc messages_setDefaultHistoryTTL (TLMessagesSetDefaultHistoryTTL) returns (Bool) {}
  rpc messages_getDefaultHistoryTTL (TLMessagesGetDefaultHistoryTTL) returns (DefaultHistoryTTL) {}
  rpc account_updateVerified (TLAccountUpdateVerified) returns (User) {}
}

service RPCAntiSpam {
  rpc channels_toggleAntiSpam (TLChannelsToggleAntiSpam) returns (Updates) {}
  rpc channels_reportAntiSpamFalsePositive (TLChannelsReportAntiSpamFalsePositive) returns (Bool) {}
}

service RPCAuthorization {
  rpc auth_sendCode (TLAuthSendCode) returns (AuthSentCode) {}
  rpc auth_signUp (TLAuthSignUp) returns (AuthAuthorization) {}
  rpc auth_signIn (TLAuthSignIn) returns (AuthAuthorization) {}
  rpc auth_logOut (TLAuthLogOut) returns (AuthLoggedOut) {}
  rpc auth_resetAuthorizations (TLAuthResetAuthorizations) returns (Bool) {}
  rpc auth_exportAuthorization (TLAuthExportAuthorization) returns (AuthExportedAuthorization) {}
  rpc auth_importAuthorization (TLAuthImportAuthorization) returns (AuthAuthorization) {}
  rpc auth_bindTempAuthKey (TLAuthBindTempAuthKey) returns (Bool) {}
  rpc auth_importBotAuthorization (TLAuthImportBotAuthorization) returns (AuthAuthorization) {}
  rpc auth_checkPassword (TLAuthCheckPassword) returns (AuthAuthorization) {}
  rpc auth_requestPasswordRecovery (TLAuthRequestPasswordRecovery) returns (AuthPasswordRecovery) {}
  rpc auth_recoverPassword (TLAuthRecoverPassword) returns (AuthAuthorization) {}
  rpc auth_resendCode (TLAuthResendCode) returns (AuthSentCode) {}
  rpc auth_cancelCode (TLAuthCancelCode) returns (Bool) {}
  rpc auth_dropTempAuthKeys (TLAuthDropTempAuthKeys) returns (Bool) {}
  rpc auth_checkRecoveryPassword (TLAuthCheckRecoveryPassword) returns (Bool) {}
  rpc auth_importWebTokenAuthorization (TLAuthImportWebTokenAuthorization) returns (AuthAuthorization) {}
  rpc auth_requestFirebaseSms (TLAuthRequestFirebaseSms) returns (Bool) {}
  rpc auth_resetLoginEmail (TLAuthResetLoginEmail) returns (AuthSentCode) {}
  rpc account_sendVerifyEmailCode (TLAccountSendVerifyEmailCode) returns (AccountSentEmailCode) {}
  rpc account_verifyEmail32DA4CF (TLAccountVerifyEmail32DA4CF) returns (AccountEmailVerified) {}
  rpc account_resetPassword (TLAccountResetPassword) returns (AccountResetPasswordResult) {}
  rpc account_setAuthorizationTTL (TLAccountSetAuthorizationTTL) returns (Bool) {}
  rpc account_changeAuthorizationSettings (TLAccountChangeAuthorizationSettings) returns (Bool) {}
  rpc account_invalidateSignInCodes (TLAccountInvalidateSignInCodes) returns (Bool) {}
  rpc account_verifyEmailECBA39DB (TLAccountVerifyEmailECBA39DB) returns (Bool) {}
  rpc auth_toggleBan (TLAuthToggleBan) returns (PredefinedUser) {}
}

service RPCAutoDownload {
  rpc account_getAutoDownloadSettings (TLAccountGetAutoDownloadSettings) returns (AccountAutoDownloadSettings) {}
  rpc account_saveAutoDownloadSettings (TLAccountSaveAutoDownloadSettings) returns (Bool) {}
}

service RPCAutosave {
  rpc account_getAutoSaveSettings (TLAccountGetAutoSaveSettings) returns (AccountAutoSaveSettings) {}
  rpc account_saveAutoSaveSettings (TLAccountSaveAutoSaveSettings) returns (Bool) {}
  rpc account_deleteAutoSaveExceptions (TLAccountDeleteAutoSaveExceptions) returns (Bool) {}
}

service RPCBotAdminRight {
  rpc bots_setBotBroadcastDefaultAdminRights (TLBotsSetBotBroadcastDefaultAdminRights) returns (Bool) {}
  rpc bots_setBotGroupDefaultAdminRights (TLBotsSetBotGroupDefaultAdminRights) returns (Bool) {}
}

service RPCBotMenu {
  rpc messages_getAttachMenuBots (TLMessagesGetAttachMenuBots) returns (AttachMenuBots) {}
  rpc messages_getAttachMenuBot (TLMessagesGetAttachMenuBot) returns (AttachMenuBotsBot) {}
  rpc messages_toggleBotInAttachMenu (TLMessagesToggleBotInAttachMenu) returns (Bool) {}
}

service RPCBotMenuButton {
  rpc bots_setBotMenuButton (TLBotsSetBotMenuButton) returns (Bool) {}
  rpc bots_getBotMenuButton (TLBotsGetBotMenuButton) returns (BotMenuButton) {}
}

service RPCBots {
  rpc bots_setBotCommands (TLBotsSetBotCommands) returns (Bool) {}
  rpc bots_resetBotCommands (TLBotsResetBotCommands) returns (Bool) {}
  rpc bots_getBotCommands (TLBotsGetBotCommands) returns (VectorBotCommand) {}
  rpc bots_setBotInfo (TLBotsSetBotInfo) returns (Bool) {}
  rpc bots_getBotInfoDCD914FD (TLBotsGetBotInfoDCD914FD) returns (BotsBotInfo) {}
  rpc bots_canSendMessage (TLBotsCanSendMessage) returns (Bool) {}
  rpc bots_allowSendMessage (TLBotsAllowSendMessage) returns (Updates) {}
  rpc bots_getBotInfo75EC12E6 (TLBotsGetBotInfo75EC12E6) returns (VectorString) {}
}

service RPCChannels {
  rpc channels_readHistory (TLChannelsReadHistory) returns (Bool) {}
  rpc channels_deleteMessages (TLChannelsDeleteMessages) returns (MessagesAffectedMessages) {}
  rpc channels_getMessages (TLChannelsGetMessages) returns (MessagesMessages) {}
  rpc channels_getParticipants (TLChannelsGetParticipants) returns (ChannelsChannelParticipants) {}
  rpc channels_getParticipant (TLChannelsGetParticipant) returns (ChannelsChannelParticipant) {}
  rpc channels_getChannels (TLChannelsGetChannels) returns (MessagesChats) {}
  rpc channels_getFullChannel (TLChannelsGetFullChannel) returns (MessagesChatFull) {}
  rpc channels_createChannel (TLChannelsCreateChannel) returns (Updates) {}
  rpc channels_editAdmin (TLChannelsEditAdmin) returns (Updates) {}
  rpc channels_editTitle (TLChannelsEditTitle) returns (Updates) {}
  rpc channels_editPhoto (TLChannelsEditPhoto) returns (Updates) {}
  rpc channels_joinChannel (TLChannelsJoinChannel) returns (Updates) {}
  rpc channels_leaveChannel (TLChannelsLeaveChannel) returns (Updates) {}
  rpc channels_inviteToChannel (TLChannelsInviteToChannel) returns (Updates) {}
  rpc channels_deleteChannel (TLChannelsDeleteChannel) returns (Updates) {}
  rpc channels_exportMessageLink (TLChannelsExportMessageLink) returns (ExportedMessageLink) {}
  rpc channels_toggleSignatures (TLChannelsToggleSignatures) returns (Updates) {}
  rpc channels_getAdminedPublicChannels (TLChannelsGetAdminedPublicChannels) returns (MessagesChats) {}
  rpc channels_editBanned (TLChannelsEditBanned) returns (Updates) {}
  rpc channels_getAdminLog (TLChannelsGetAdminLog) returns (ChannelsAdminLogResults) {}
  rpc channels_setStickers (TLChannelsSetStickers) returns (Bool) {}
  rpc channels_readMessageContents (TLChannelsReadMessageContents) returns (Bool) {}
  rpc channels_deleteHistory9BAA9647 (TLChannelsDeleteHistory9BAA9647) returns (Updates) {}
  rpc channels_togglePreHistoryHidden (TLChannelsTogglePreHistoryHidden) returns (Updates) {}
  rpc channels_getGroupsForDiscussion (TLChannelsGetGroupsForDiscussion) returns (MessagesChats) {}
  rpc channels_setDiscussionGroup (TLChannelsSetDiscussionGroup) returns (Bool) {}
  rpc channels_editCreator (TLChannelsEditCreator) returns (Updates) {}
  rpc channels_editLocation (TLChannelsEditLocation) returns (Bool) {}
  rpc channels_toggleSlowMode (TLChannelsToggleSlowMode) returns (Updates) {}
  rpc channels_getInactiveChannels (TLChannelsGetInactiveChannels) returns (MessagesInactiveChats) {}
  rpc channels_deleteParticipantHistory (TLChannelsDeleteParticipantHistory) returns (MessagesAffectedHistory) {}
  rpc channels_toggleParticipantsHidden (TLChannelsToggleParticipantsHidden) returns (Updates) {}
  rpc channels_deleteHistoryAF369D42 (TLChannelsDeleteHistoryAF369D42) returns (Bool) {}
}

service RPCChatInvites {
  rpc messages_exportChatInvite (TLMessagesExportChatInvite) returns (ExportedChatInvite) {}
  rpc messages_checkChatInvite (TLMessagesCheckChatInvite) returns (ChatInvite) {}
  rpc messages_importChatInvite (TLMessagesImportChatInvite) returns (Updates) {}
  rpc messages_getExportedChatInvites (TLMessagesGetExportedChatInvites) returns (MessagesExportedChatInvites) {}
  rpc messages_getExportedChatInvite (TLMessagesGetExportedChatInvite) returns (MessagesExportedChatInvite) {}
  rpc messages_editExportedChatInvite (TLMessagesEditExportedChatInvite) returns (MessagesExportedChatInvite) {}
  rpc messages_deleteRevokedExportedChatInvites (TLMessagesDeleteRevokedExportedChatInvites) returns (Bool) {}
  rpc messages_deleteExportedChatInvite (TLMessagesDeleteExportedChatInvite) returns (Bool) {}
  rpc messages_getAdminsWithInvites (TLMessagesGetAdminsWithInvites) returns (MessagesChatAdminsWithInvites) {}
  rpc messages_getChatInviteImporters (TLMessagesGetChatInviteImporters) returns (MessagesChatInviteImporters) {}
  rpc messages_hideChatJoinRequest (TLMessagesHideChatJoinRequest) returns (Updates) {}
  rpc messages_hideAllChatJoinRequests (TLMessagesHideAllChatJoinRequests) returns (Updates) {}
  rpc channels_toggleJoinToSend (TLChannelsToggleJoinToSend) returns (Updates) {}
  rpc channels_toggleJoinRequest (TLChannelsToggleJoinRequest) returns (Updates) {}
}

service RPCChats {
  rpc messages_getChats (TLMessagesGetChats) returns (MessagesChats) {}
  rpc messages_getFullChat (TLMessagesGetFullChat) returns (MessagesChatFull) {}
  rpc messages_editChatTitle (TLMessagesEditChatTitle) returns (Updates) {}
  rpc messages_editChatPhoto (TLMessagesEditChatPhoto) returns (Updates) {}
  rpc messages_addChatUser (TLMessagesAddChatUser) returns (Updates) {}
  rpc messages_deleteChatUser (TLMessagesDeleteChatUser) returns (Updates) {}
  rpc messages_createChat (TLMessagesCreateChat) returns (Updates) {}
  rpc messages_editChatAdmin (TLMessagesEditChatAdmin) returns (Bool) {}
  rpc messages_migrateChat (TLMessagesMigrateChat) returns (Updates) {}
  rpc messages_getCommonChats (TLMessagesGetCommonChats) returns (MessagesChats) {}
  rpc messages_editChatAbout (TLMessagesEditChatAbout) returns (Bool) {}
  rpc messages_editChatDefaultBannedRights (TLMessagesEditChatDefaultBannedRights) returns (Updates) {}
  rpc messages_deleteChat (TLMessagesDeleteChat) returns (Bool) {}
  rpc messages_getMessageReadParticipants31C1C44F (TLMessagesGetMessageReadParticipants31C1C44F) returns (VectorReadParticipantDate) {}
  rpc channels_convertToGigagroup (TLChannelsConvertToGigagroup) returns (Updates) {}
  rpc messages_getAllChats (TLMessagesGetAllChats) returns (MessagesChats) {}
  rpc messages_getMessageReadParticipants2C6F97B7 (TLMessagesGetMessageReadParticipants2C6F97B7) returns (VectorLong) {}
}

service RPCConfiguration {
  rpc help_getConfig (TLHelpGetConfig) returns (Config) {}
  rpc help_getNearestDc (TLHelpGetNearestDc) returns (NearestDc) {}
  rpc help_getAppUpdate (TLHelpGetAppUpdate) returns (HelpAppUpdate) {}
  rpc help_getInviteText (TLHelpGetInviteText) returns (HelpInviteText) {}
  rpc help_getSupport (TLHelpGetSupport) returns (HelpSupport) {}
  rpc help_getAppChangelog (TLHelpGetAppChangelog) returns (Updates) {}
  rpc help_getAppConfig61E3F854 (TLHelpGetAppConfig61E3F854) returns (HelpAppConfig) {}
  rpc help_getSupportName (TLHelpGetSupportName) returns (HelpSupportName) {}
  rpc help_dismissSuggestion (TLHelpDismissSuggestion) returns (Bool) {}
  rpc help_getCountriesList (TLHelpGetCountriesList) returns (HelpCountriesList) {}
  rpc help_getAppConfig98914110 (TLHelpGetAppConfig98914110) returns (JSONValue) {}
}

service RPCContacts {
  rpc account_getContactSignUpNotification (TLAccountGetContactSignUpNotification) returns (Bool) {}
  rpc account_setContactSignUpNotification (TLAccountSetContactSignUpNotification) returns (Bool) {}
  rpc contacts_getContactIDs (TLContactsGetContactIDs) returns (VectorInt) {}
  rpc contacts_getStatuses (TLContactsGetStatuses) returns (VectorContactStatus) {}
  rpc contacts_getContacts (TLContactsGetContacts) returns (ContactsContacts) {}
  rpc contacts_importContacts (TLContactsImportContacts) returns (ContactsImportedContacts) {}
  rpc contacts_deleteContacts (TLContactsDeleteContacts) returns (Updates) {}
  rpc contacts_deleteByPhones (TLContactsDeleteByPhones) returns (Bool) {}
  rpc contacts_block (TLContactsBlock) returns (Bool) {}
  rpc contacts_unblock (TLContactsUnblock) returns (Bool) {}
  rpc contacts_getBlocked (TLContactsGetBlocked) returns (ContactsBlocked) {}
  rpc contacts_search (TLContactsSearch) returns (ContactsFound) {}
  rpc contacts_getTopPeers (TLContactsGetTopPeers) returns (ContactsTopPeers) {}
  rpc contacts_resetTopPeerRating (TLContactsResetTopPeerRating) returns (Bool) {}
  rpc contacts_resetSaved (TLContactsResetSaved) returns (Bool) {}
  rpc contacts_getSaved (TLContactsGetSaved) returns (VectorSavedContact) {}
  rpc contacts_toggleTopPeers (TLContactsToggleTopPeers) returns (Bool) {}
  rpc contacts_addContact (TLContactsAddContact) returns (Updates) {}
  rpc contacts_acceptContact (TLContactsAcceptContact) returns (Updates) {}
  rpc contacts_getLocated (TLContactsGetLocated) returns (Updates) {}
  rpc contacts_editCloseFriends (TLContactsEditCloseFriends) returns (Bool) {}
  rpc contacts_setBlocked (TLContactsSetBlocked) returns (Bool) {}
}

service RPCCreditCards {
  rpc payments_getBankCardData (TLPaymentsGetBankCardData) returns (PaymentsBankCardData) {}
}

service RPCCustomEmojis {
  rpc account_getDefaultProfilePhotoEmojis (TLAccountGetDefaultProfilePhotoEmojis) returns (EmojiList) {}
  rpc account_getDefaultGroupPhotoEmojis (TLAccountGetDefaultGroupPhotoEmojis) returns (EmojiList) {}
  rpc messages_getCustomEmojiDocuments (TLMessagesGetCustomEmojiDocuments) returns (VectorDocument) {}
  rpc messages_getEmojiStickers (TLMessagesGetEmojiStickers) returns (MessagesAllStickers) {}
  rpc messages_getFeaturedEmojiStickers (TLMessagesGetFeaturedEmojiStickers) returns (MessagesFeaturedStickers) {}
  rpc messages_getEmojiGroups (TLMessagesGetEmojiGroups) returns (MessagesEmojiGroups) {}
  rpc messages_getEmojiStatusGroups (TLMessagesGetEmojiStatusGroups) returns (MessagesEmojiGroups) {}
  rpc messages_getEmojiProfilePhotoGroups (TLMessagesGetEmojiProfilePhotoGroups) returns (MessagesEmojiGroups) {}
  rpc messages_searchCustomEmoji (TLMessagesSearchCustomEmoji) returns (EmojiList) {}
}

service RPCDeepLinks {
  rpc messages_startBot (TLMessagesStartBot) returns (Updates) {}
  rpc help_getRecentMeUrls (TLHelpGetRecentMeUrls) returns (HelpRecentMeUrls) {}
  rpc help_getDeepLinkInfo (TLHelpGetDeepLinkInfo) returns (HelpDeepLinkInfo) {}
}

service RPCDialogs {
  rpc messages_getDialogs (TLMessagesGetDialogs) returns (MessagesDialogs) {}
  rpc messages_setTyping (TLMessagesSetTyping) returns (Bool) {}
  rpc messages_getPeerSettings (TLMessagesGetPeerSettings) returns (MessagesPeerSettings) {}
  rpc messages_getPeerDialogs (TLMessagesGetPeerDialogs) returns (MessagesPeerDialogs) {}
  rpc messages_toggleDialogPin (TLMessagesToggleDialogPin) returns (Bool) {}
  rpc messages_reorderPinnedDialogs (TLMessagesReorderPinnedDialogs) returns (Bool) {}
  rpc messages_getPinnedDialogs (TLMessagesGetPinnedDialogs) returns (MessagesPeerDialogs) {}
  rpc messages_sendScreenshotNotification (TLMessagesSendScreenshotNotification) returns (Updates) {}
  rpc messages_markDialogUnread (TLMessagesMarkDialogUnread) returns (Bool) {}
  rpc messages_getDialogUnreadMarks (TLMessagesGetDialogUnreadMarks) returns (VectorDialogPeer) {}
  rpc messages_getOnlines (TLMessagesGetOnlines) returns (ChatOnlines) {}
  rpc messages_hidePeerSettingsBar (TLMessagesHidePeerSettingsBar) returns (Bool) {}
  rpc messages_setHistoryTTL (TLMessagesSetHistoryTTL) returns (Updates) {}
}

service RPCDrafts {
  rpc messages_saveDraft (TLMessagesSaveDraft) returns (Bool) {}
  rpc messages_getAllDrafts (TLMessagesGetAllDrafts) returns (Updates) {}
  rpc messages_clearAllDrafts (TLMessagesClearAllDrafts) returns (Bool) {}
}

service RPCEmoji {
  rpc messages_getEmojiKeywords (TLMessagesGetEmojiKeywords) returns (EmojiKeywordsDifference) {}
  rpc messages_getEmojiKeywordsDifference (TLMessagesGetEmojiKeywordsDifference) returns (EmojiKeywordsDifference) {}
  rpc messages_getEmojiKeywordsLanguages (TLMessagesGetEmojiKeywordsLanguages) returns (VectorEmojiLanguage) {}
  rpc messages_getEmojiURL (TLMessagesGetEmojiURL) returns (EmojiURL) {}
}

service RPCEmojiStatus {
  rpc account_updateEmojiStatus (TLAccountUpdateEmojiStatus) returns (Bool) {}
  rpc account_getDefaultEmojiStatuses (TLAccountGetDefaultEmojiStatuses) returns (AccountEmojiStatuses) {}
  rpc account_getRecentEmojiStatuses (TLAccountGetRecentEmojiStatuses) returns (AccountEmojiStatuses) {}
  rpc account_clearRecentEmojiStatuses (TLAccountClearRecentEmojiStatuses) returns (Bool) {}
}

service RPCFiles {
  rpc messages_getDocumentByHash (TLMessagesGetDocumentByHash) returns (Document) {}
  rpc messages_uploadMedia (TLMessagesUploadMedia) returns (MessageMedia) {}
  rpc messages_uploadEncryptedFile (TLMessagesUploadEncryptedFile) returns (EncryptedFile) {}
  rpc messages_getExtendedMedia (TLMessagesGetExtendedMedia) returns (Updates) {}
  rpc upload_saveFilePart (TLUploadSaveFilePart) returns (Bool) {}
  rpc upload_getFile (TLUploadGetFile) returns (UploadFile) {}
  rpc upload_saveBigFilePart (TLUploadSaveBigFilePart) returns (Bool) {}
  rpc upload_getWebFile (TLUploadGetWebFile) returns (UploadWebFile) {}
  rpc upload_getCdnFile (TLUploadGetCdnFile) returns (UploadCdnFile) {}
  rpc upload_reuploadCdnFile (TLUploadReuploadCdnFile) returns (VectorFileHash) {}
  rpc upload_getCdnFileHashes (TLUploadGetCdnFileHashes) returns (VectorFileHash) {}
  rpc upload_getFileHashes (TLUploadGetFileHashes) returns (VectorFileHash) {}
  rpc help_getCdnConfig (TLHelpGetCdnConfig) returns (CdnConfig) {}
}

service RPCFolders {
  rpc messages_getDialogFilters (TLMessagesGetDialogFilters) returns (VectorDialogFilter) {}
  rpc messages_getSuggestedDialogFilters (TLMessagesGetSuggestedDialogFilters) returns (VectorDialogFilterSuggested) {}
  rpc messages_updateDialogFilter (TLMessagesUpdateDialogFilter) returns (Bool) {}
  rpc messages_updateDialogFiltersOrder (TLMessagesUpdateDialogFiltersOrder) returns (Bool) {}
  rpc folders_editPeerFolders (TLFoldersEditPeerFolders) returns (Updates) {}
  rpc chatlists_exportChatlistInvite (TLChatlistsExportChatlistInvite) returns (ChatlistsExportedChatlistInvite) {}
  rpc chatlists_deleteExportedInvite (TLChatlistsDeleteExportedInvite) returns (Bool) {}
  rpc chatlists_editExportedInvite (TLChatlistsEditExportedInvite) returns (ExportedChatlistInvite) {}
  rpc chatlists_getExportedInvites (TLChatlistsGetExportedInvites) returns (ChatlistsExportedInvites) {}
  rpc chatlists_checkChatlistInvite (TLChatlistsCheckChatlistInvite) returns (ChatlistsChatlistInvite) {}
  rpc chatlists_joinChatlistInvite (TLChatlistsJoinChatlistInvite) returns (Updates) {}
  rpc chatlists_getChatlistUpdates (TLChatlistsGetChatlistUpdates) returns (ChatlistsChatlistUpdates) {}
  rpc chatlists_joinChatlistUpdates (TLChatlistsJoinChatlistUpdates) returns (Updates) {}
  rpc chatlists_hideChatlistUpdates (TLChatlistsHideChatlistUpdates) returns (Bool) {}
  rpc chatlists_getLeaveChatlistSuggestions (TLChatlistsGetLeaveChatlistSuggestions) returns (VectorPeer) {}
  rpc chatlists_leaveChatlist (TLChatlistsLeaveChatlist) returns (Updates) {}
  rpc folders_deleteFolder (TLFoldersDeleteFolder) returns (Updates) {}
}

service RPCForums {
  rpc channels_toggleForum (TLChannelsToggleForum) returns (Updates) {}
  rpc channels_createForumTopic (TLChannelsCreateForumTopic) returns (Updates) {}
  rpc channels_getForumTopics (TLChannelsGetForumTopics) returns (MessagesForumTopics) {}
  rpc channels_getForumTopicsByID (TLChannelsGetForumTopicsByID) returns (MessagesForumTopics) {}
  rpc channels_editForumTopic (TLChannelsEditForumTopic) returns (Updates) {}
  rpc channels_updatePinnedForumTopic (TLChannelsUpdatePinnedForumTopic) returns (Updates) {}
  rpc channels_deleteTopicHistory (TLChannelsDeleteTopicHistory) returns (MessagesAffectedHistory) {}
  rpc channels_reorderPinnedForumTopics (TLChannelsReorderPinnedForumTopics) returns (Updates) {}
}

service RPCFragment {
  rpc account_reorderUsernames (TLAccountReorderUsernames) returns (Bool) {}
  rpc account_toggleUsername (TLAccountToggleUsername) returns (Bool) {}
  rpc channels_reorderUsernames (TLChannelsReorderUsernames) returns (Bool) {}
  rpc channels_toggleUsername (TLChannelsToggleUsername) returns (Bool) {}
  rpc channels_deactivateAllUsernames (TLChannelsDeactivateAllUsernames) returns (Bool) {}
  rpc bots_reorderUsernames (TLBotsReorderUsernames) returns (Bool) {}
  rpc bots_toggleUsername (TLBotsToggleUsername) returns (Bool) {}
}

service RPCGames {
  rpc messages_setGameScore (TLMessagesSetGameScore) returns (Updates) {}
  rpc messages_setInlineGameScore (TLMessagesSetInlineGameScore) returns (Bool) {}
  rpc messages_getGameHighScores (TLMessagesGetGameHighScores) returns (MessagesHighScores) {}
  rpc messages_getInlineGameHighScores (TLMessagesGetInlineGameHighScores) returns (MessagesHighScores) {}
}

service RPCGdpr {
  rpc account_initTakeoutSession (TLAccountInitTakeoutSession) returns (AccountTakeout) {}
  rpc account_finishTakeoutSession (TLAccountFinishTakeoutSession) returns (Bool) {}
  rpc messages_getSplitRanges (TLMessagesGetSplitRanges) returns (VectorMessageRange) {}
  rpc channels_getLeftChannels (TLChannelsGetLeftChannels) returns (MessagesChats) {}
}

service RPCGifs {
  rpc messages_getSavedGifs (TLMessagesGetSavedGifs) returns (MessagesSavedGifs) {}
  rpc messages_saveGif (TLMessagesSaveGif) returns (Bool) {}
}

service RPCGroupCalls {
  rpc phone_createGroupCall (TLPhoneCreateGroupCall) returns (Updates) {}
  rpc phone_joinGroupCall (TLPhoneJoinGroupCall) returns (Updates) {}
  rpc phone_leaveGroupCall (TLPhoneLeaveGroupCall) returns (Updates) {}
  rpc phone_inviteToGroupCall (TLPhoneInviteToGroupCall) returns (Updates) {}
  rpc phone_discardGroupCall (TLPhoneDiscardGroupCall) returns (Updates) {}
  rpc phone_toggleGroupCallSettings (TLPhoneToggleGroupCallSettings) returns (Updates) {}
  rpc phone_getGroupCall (TLPhoneGetGroupCall) returns (PhoneGroupCall) {}
  rpc phone_getGroupParticipants (TLPhoneGetGroupParticipants) returns (PhoneGroupParticipants) {}
  rpc phone_checkGroupCall (TLPhoneCheckGroupCall) returns (VectorInt) {}
  rpc phone_toggleGroupCallRecord (TLPhoneToggleGroupCallRecord) returns (Updates) {}
  rpc phone_editGroupCallParticipant (TLPhoneEditGroupCallParticipant) returns (Updates) {}
  rpc phone_editGroupCallTitle (TLPhoneEditGroupCallTitle) returns (Updates) {}
  rpc phone_getGroupCallJoinAs (TLPhoneGetGroupCallJoinAs) returns (PhoneJoinAsPeers) {}
  rpc phone_exportGroupCallInvite (TLPhoneExportGroupCallInvite) returns (PhoneExportedGroupCallInvite) {}
  rpc phone_toggleGroupCallStartSubscription (TLPhoneToggleGroupCallStartSubscription) returns (Updates) {}
  rpc phone_startScheduledGroupCall (TLPhoneStartScheduledGroupCall) returns (Updates) {}
  rpc phone_saveDefaultGroupCallJoinAs (TLPhoneSaveDefaultGroupCallJoinAs) returns (Bool) {}
  rpc phone_joinGroupCallPresentation (TLPhoneJoinGroupCallPresentation) returns (Updates) {}
  rpc phone_leaveGroupCallPresentation (TLPhoneLeaveGroupCallPresentation) returns (Updates) {}
  rpc phone_getGroupCallStreamChannels (TLPhoneGetGroupCallStreamChannels) returns (PhoneGroupCallStreamChannels) {}
  rpc phone_getGroupCallStreamRtmpUrl (TLPhoneGetGroupCallStreamRtmpUrl) returns (PhoneGroupCallStreamRtmpUrl) {}
}

service RPCImportedChats {
  rpc messages_checkHistoryImport (TLMessagesCheckHistoryImport) returns (MessagesHistoryImportParsed) {}
  rpc messages_initHistoryImport (TLMessagesInitHistoryImport) returns (MessagesHistoryImport) {}
  rpc messages_uploadImportedMedia (TLMessagesUploadImportedMedia) returns (MessageMedia) {}
  rpc messages_startHistoryImport (TLMessagesStartHistoryImport) returns (Bool) {}
  rpc messages_checkHistoryImportPeer (TLMessagesCheckHistoryImportPeer) returns (MessagesCheckedHistoryImportPeer) {}
}

service RPCInlineBot {
  rpc messages_getInlineBotResults (TLMessagesGetInlineBotResults) returns (MessagesBotResults) {}
  rpc messages_setInlineBotResults (TLMessagesSetInlineBotResults) returns (Bool) {}
  rpc messages_sendInlineBotResult (TLMessagesSendInlineBotResult) returns (Updates) {}
  rpc messages_editInlineBotMessage (TLMessagesEditInlineBotMessage) returns (Bool) {}
  rpc messages_getBotCallbackAnswer (TLMessagesGetBotCallbackAnswer) returns (MessagesBotCallbackAnswer) {}
  rpc messages_setBotCallbackAnswer (TLMessagesSetBotCallbackAnswer) returns (Bool) {}
  rpc messages_sendBotRequestedPeer (TLMessagesSendBotRequestedPeer) returns (Updates) {}
}

service RPCInternalBot {
  rpc help_setBotUpdatesStatus (TLHelpSetBotUpdatesStatus) returns (Bool) {}
  rpc bots_sendCustomRequest (TLBotsSendCustomRequest) returns (DataJSON) {}
  rpc bots_answerWebhookJSONQuery (TLBotsAnswerWebhookJSONQuery) returns (Bool) {}
}

service RPCLangpack {
  rpc langpack_getLangPack (TLLangpackGetLangPack) returns (LangPackDifference) {}
  rpc langpack_getStrings (TLLangpackGetStrings) returns (VectorLangPackString) {}
  rpc langpack_getDifference (TLLangpackGetDifference) returns (LangPackDifference) {}
  rpc langpack_getLanguages (TLLangpackGetLanguages) returns (VectorLangPackLanguage) {}
  rpc langpack_getLanguage (TLLangpackGetLanguage) returns (LangPackLanguage) {}
}

service RPCMessageThreads {
  rpc contacts_blockFromReplies (TLContactsBlockFromReplies) returns (Updates) {}
  rpc messages_getReplies (TLMessagesGetReplies) returns (MessagesMessages) {}
  rpc messages_getDiscussionMessage (TLMessagesGetDiscussionMessage) returns (MessagesDiscussionMessage) {}
  rpc messages_readDiscussion (TLMessagesReadDiscussion) returns (Bool) {}
}

service RPCMessages {
  rpc messages_getMessages (TLMessagesGetMessages) returns (MessagesMessages) {}
  rpc messages_getHistory (TLMessagesGetHistory) returns (MessagesMessages) {}
  rpc messages_search (TLMessagesSearch) returns (MessagesMessages) {}
  rpc messages_readHistory (TLMessagesReadHistory) returns (MessagesAffectedMessages) {}
  rpc messages_deleteHistory (TLMessagesDeleteHistory) returns (MessagesAffectedHistory) {}
  rpc messages_deleteMessages (TLMessagesDeleteMessages) returns (MessagesAffectedMessages) {}
  rpc messages_receivedMessages (TLMessagesReceivedMessages) returns (VectorReceivedNotifyMessage) {}
  rpc messages_sendMessage (TLMessagesSendMessage) returns (Updates) {}
  rpc messages_sendMedia (TLMessagesSendMedia) returns (Updates) {}
  rpc messages_forwardMessages (TLMessagesForwardMessages) returns (Updates) {}
  rpc messages_readMessageContents (TLMessagesReadMessageContents) returns (MessagesAffectedMessages) {}
  rpc messages_getMessagesViews (TLMessagesGetMessagesViews) returns (MessagesMessageViews) {}
  rpc messages_searchGlobal (TLMessagesSearchGlobal) returns (MessagesMessages) {}
  rpc messages_getMessageEditData (TLMessagesGetMessageEditData) returns (MessagesMessageEditData) {}
  rpc messages_editMessage (TLMessagesEditMessage) returns (Updates) {}
  rpc messages_getUnreadMentions (TLMessagesGetUnreadMentions) returns (MessagesMessages) {}
  rpc messages_readMentions (TLMessagesReadMentions) returns (MessagesAffectedHistory) {}
  rpc messages_getRecentLocations (TLMessagesGetRecentLocations) returns (MessagesMessages) {}
  rpc messages_sendMultiMedia (TLMessagesSendMultiMedia) returns (Updates) {}
  rpc messages_updatePinnedMessage (TLMessagesUpdatePinnedMessage) returns (Updates) {}
  rpc messages_getSearchCounters (TLMessagesGetSearchCounters) returns (VectorMessagesSearchCounter) {}
  rpc messages_unpinAllMessages (TLMessagesUnpinAllMessages) returns (MessagesAffectedHistory) {}
  rpc messages_getSearchResultsCalendar (TLMessagesGetSearchResultsCalendar) returns (MessagesSearchResultsCalendar) {}
  rpc messages_getSearchResultsPositions (TLMessagesGetSearchResultsPositions) returns (MessagesSearchResultsPositions) {}
  rpc messages_toggleNoForwards (TLMessagesToggleNoForwards) returns (Updates) {}
  rpc messages_saveDefaultSendAs (TLMessagesSaveDefaultSendAs) returns (Bool) {}
  rpc messages_searchSentMedia (TLMessagesSearchSentMedia) returns (MessagesMessages) {}
  rpc channels_getSendAs (TLChannelsGetSendAs) returns (ChannelsSendAsPeers) {}
}

service RPCMiscellaneous {
  rpc help_saveAppLog (TLHelpSaveAppLog) returns (Bool) {}
  rpc help_test (TLHelpTest) returns (Bool) {}
}

service RPCNotification {
  rpc account_registerDevice (TLAccountRegisterDevice) returns (Bool) {}
  rpc account_unregisterDevice (TLAccountUnregisterDevice) returns (Bool) {}
  rpc account_updateNotifySettings (TLAccountUpdateNotifySettings) returns (Bool) {}
  rpc account_getNotifySettings (TLAccountGetNotifySettings) returns (PeerNotifySettings) {}
  rpc account_resetNotifySettings (TLAccountResetNotifySettings) returns (Bool) {}
  rpc account_updateDeviceLocked (TLAccountUpdateDeviceLocked) returns (Bool) {}
  rpc account_getNotifyExceptions (TLAccountGetNotifyExceptions) returns (Updates) {}
}

service RPCNsfw {
  rpc account_setContentSettings (TLAccountSetContentSettings) returns (Bool) {}
  rpc account_getContentSettings (TLAccountGetContentSettings) returns (AccountContentSettings) {}
}

service RPCPassport {
  rpc account_getAuthorizations (TLAccountGetAuthorizations) returns (AccountAuthorizations) {}
  rpc account_getAllSecureValues (TLAccountGetAllSecureValues) returns (VectorSecureValue) {}
  rpc account_getSecureValue (TLAccountGetSecureValue) returns (VectorSecureValue) {}
  rpc account_saveSecureValue (TLAccountSaveSecureValue) returns (SecureValue) {}
  rpc account_deleteSecureValue (TLAccountDeleteSecureValue) returns (Bool) {}
  rpc account_getAuthorizationForm (TLAccountGetAuthorizationForm) returns (AccountAuthorizationForm) {}
  rpc account_acceptAuthorization (TLAccountAcceptAuthorization) returns (Bool) {}
  rpc account_sendVerifyPhoneCode (TLAccountSendVerifyPhoneCode) returns (AuthSentCode) {}
  rpc account_verifyPhone (TLAccountVerifyPhone) returns (Bool) {}
  rpc users_setSecureValueErrors (TLUsersSetSecureValueErrors) returns (Bool) {}
  rpc help_getPassportConfig (TLHelpGetPassportConfig) returns (HelpPassportConfig) {}
}

service RPCPayments {
  rpc account_getTmpPassword (TLAccountGetTmpPassword) returns (AccountTmpPassword) {}
  rpc messages_setBotShippingResults (TLMessagesSetBotShippingResults) returns (Bool) {}
  rpc messages_setBotPrecheckoutResults (TLMessagesSetBotPrecheckoutResults) returns (Bool) {}
  rpc payments_getPaymentForm (TLPaymentsGetPaymentForm) returns (PaymentsPaymentForm) {}
  rpc payments_getPaymentReceipt (TLPaymentsGetPaymentReceipt) returns (PaymentsPaymentReceipt) {}
  rpc payments_validateRequestedInfo (TLPaymentsValidateRequestedInfo) returns (PaymentsValidatedRequestedInfo) {}
  rpc payments_sendPaymentForm (TLPaymentsSendPaymentForm) returns (PaymentsPaymentResult) {}
  rpc payments_getSavedInfo (TLPaymentsGetSavedInfo) returns (PaymentsSavedInfo) {}
  rpc payments_clearSavedInfo (TLPaymentsClearSavedInfo) returns (Bool) {}
  rpc payments_exportInvoice (TLPaymentsExportInvoice) returns (PaymentsExportedInvoice) {}
  rpc payments_requestRecurringPayment (TLPaymentsRequestRecurringPayment) returns (Updates) {}
  rpc payments_restorePlayMarketReceipt (TLPaymentsRestorePlayMarketReceipt) returns (Updates) {}
}

service RPCPhotos {
  rpc photos_updateProfilePhoto (TLPhotosUpdateProfilePhoto) returns (PhotosPhoto) {}
  rpc photos_uploadProfilePhoto (TLPhotosUploadProfilePhoto) returns (PhotosPhoto) {}
  rpc photos_deletePhotos (TLPhotosDeletePhotos) returns (VectorLong) {}
  rpc photos_getUserPhotos (TLPhotosGetUserPhotos) returns (PhotosPhotos) {}
  rpc photos_uploadContactProfilePhoto (TLPhotosUploadContactProfilePhoto) returns (PhotosPhoto) {}
}

service RPCPolls {
  rpc messages_sendVote (TLMessagesSendVote) returns (Updates) {}
  rpc messages_getPollResults (TLMessagesGetPollResults) returns (Updates) {}
  rpc messages_getPollVotes (TLMessagesGetPollVotes) returns (MessagesVotesList) {}
}

service RPCPredefined {
  rpc predefined_createPredefinedUser (TLPredefinedCreatePredefinedUser) returns (PredefinedUser) {}
  rpc predefined_updatePredefinedUsername (TLPredefinedUpdatePredefinedUsername) returns (PredefinedUser) {}
  rpc predefined_updatePredefinedProfile (TLPredefinedUpdatePredefinedProfile) returns (PredefinedUser) {}
  rpc predefined_updatePredefinedVerified (TLPredefinedUpdatePredefinedVerified) returns (PredefinedUser) {}
  rpc predefined_updatePredefinedCode (TLPredefinedUpdatePredefinedCode) returns (PredefinedUser) {}
  rpc predefined_getPredefinedUser (TLPredefinedGetPredefinedUser) returns (PredefinedUser) {}
  rpc predefined_getPredefinedUsers (TLPredefinedGetPredefinedUsers) returns (VectorPredefinedUser) {}
}

service RPCPremium {
  rpc help_getPremiumPromo (TLHelpGetPremiumPromo) returns (HelpPremiumPromo) {}
  rpc payments_assignAppStoreTransaction (TLPaymentsAssignAppStoreTransaction) returns (Updates) {}
  rpc payments_assignPlayMarketTransaction (TLPaymentsAssignPlayMarketTransaction) returns (Updates) {}
  rpc payments_canPurchasePremium (TLPaymentsCanPurchasePremium) returns (Bool) {}
}

service RPCProfileLinks {
  rpc contacts_exportContactToken (TLContactsExportContactToken) returns (ExportedContactToken) {}
  rpc contacts_importContactToken (TLContactsImportContactToken) returns (User) {}
}

service RPCPromoData {
  rpc help_getPromoData (TLHelpGetPromoData) returns (HelpPromoData) {}
  rpc help_hidePromoData (TLHelpHidePromoData) returns (Bool) {}
}

service RPCQrCode {
  rpc auth_exportLoginToken (TLAuthExportLoginToken) returns (AuthLoginToken) {}
  rpc auth_importLoginToken (TLAuthImportLoginToken) returns (AuthLoginToken) {}
  rpc auth_acceptLoginToken (TLAuthAcceptLoginToken) returns (Authorization) {}
}

service RPCReactions {
  rpc messages_sendReaction (TLMessagesSendReaction) returns (Updates) {}
  rpc messages_getMessagesReactions (TLMessagesGetMessagesReactions) returns (Updates) {}
  rpc messages_getMessageReactionsList (TLMessagesGetMessageReactionsList) returns (MessagesMessageReactionsList) {}
  rpc messages_setChatAvailableReactions (TLMessagesSetChatAvailableReactions) returns (Updates) {}
  rpc messages_getAvailableReactions (TLMessagesGetAvailableReactions) returns (MessagesAvailableReactions) {}
  rpc messages_setDefaultReaction (TLMessagesSetDefaultReaction) returns (Bool) {}
  rpc messages_getUnreadReactions (TLMessagesGetUnreadReactions) returns (MessagesMessages) {}
  rpc messages_readReactions (TLMessagesReadReactions) returns (MessagesAffectedHistory) {}
  rpc messages_reportReaction (TLMessagesReportReaction) returns (Bool) {}
  rpc messages_getTopReactions (TLMessagesGetTopReactions) returns (MessagesReactions) {}
  rpc messages_getRecentReactions (TLMessagesGetRecentReactions) returns (MessagesReactions) {}
  rpc messages_clearRecentReactions (TLMessagesClearRecentReactions) returns (Bool) {}
}

service RPCReports {
  rpc account_reportPeer (TLAccountReportPeer) returns (Bool) {}
  rpc account_reportProfilePhoto (TLAccountReportProfilePhoto) returns (Bool) {}
  rpc messages_reportSpam (TLMessagesReportSpam) returns (Bool) {}
  rpc messages_report (TLMessagesReport) returns (Bool) {}
  rpc messages_reportEncryptedSpam (TLMessagesReportEncryptedSpam) returns (Bool) {}
  rpc channels_reportSpam (TLChannelsReportSpam) returns (Bool) {}
}

service RPCRingtone {
  rpc account_getSavedRingtones (TLAccountGetSavedRingtones) returns (AccountSavedRingtones) {}
  rpc account_saveRingtone (TLAccountSaveRingtone) returns (AccountSavedRingtone) {}
  rpc account_uploadRingtone (TLAccountUploadRingtone) returns (Document) {}
}

service RPCScheduledMessages {
  rpc messages_getScheduledHistory (TLMessagesGetScheduledHistory) returns (MessagesMessages) {}
  rpc messages_getScheduledMessages (TLMessagesGetScheduledMessages) returns (MessagesMessages) {}
  rpc messages_sendScheduledMessages (TLMessagesSendScheduledMessages) returns (Updates) {}
  rpc messages_deleteScheduledMessages (TLMessagesDeleteScheduledMessages) returns (Updates) {}
}

service RPCSeamless {
  rpc account_getWebAuthorizations (TLAccountGetWebAuthorizations) returns (AccountWebAuthorizations) {}
  rpc account_resetWebAuthorization (TLAccountResetWebAuthorization) returns (Bool) {}
  rpc account_resetWebAuthorizations (TLAccountResetWebAuthorizations) returns (Bool) {}
  rpc messages_requestUrlAuth (TLMessagesRequestUrlAuth) returns (UrlAuthResult) {}
  rpc messages_acceptUrlAuth (TLMessagesAcceptUrlAuth) returns (UrlAuthResult) {}
}

service RPCSecretChats {
  rpc messages_getDhConfig (TLMessagesGetDhConfig) returns (MessagesDhConfig) {}
  rpc messages_requestEncryption (TLMessagesRequestEncryption) returns (EncryptedChat) {}
  rpc messages_acceptEncryption (TLMessagesAcceptEncryption) returns (EncryptedChat) {}
  rpc messages_discardEncryption (TLMessagesDiscardEncryption) returns (Bool) {}
  rpc messages_setEncryptedTyping (TLMessagesSetEncryptedTyping) returns (Bool) {}
  rpc messages_readEncryptedHistory (TLMessagesReadEncryptedHistory) returns (Bool) {}
  rpc messages_sendEncrypted (TLMessagesSendEncrypted) returns (MessagesSentEncryptedMessage) {}
  rpc messages_sendEncryptedFile (TLMessagesSendEncryptedFile) returns (MessagesSentEncryptedMessage) {}
  rpc messages_sendEncryptedService (TLMessagesSendEncryptedService) returns (MessagesSentEncryptedMessage) {}
  rpc messages_receivedQueue (TLMessagesReceivedQueue) returns (VectorLong) {}
}

service RPCSponsoredMessages {
  rpc channels_viewSponsoredMessage (TLChannelsViewSponsoredMessage) returns (Bool) {}
  rpc channels_getSponsoredMessages (TLChannelsGetSponsoredMessages) returns (MessagesSponsoredMessages) {}
  rpc channels_clickSponsoredMessage (TLChannelsClickSponsoredMessage) returns (Bool) {}
}

service RPCStatistics {
  rpc stats_getBroadcastStats (TLStatsGetBroadcastStats) returns (StatsBroadcastStats) {}
  rpc stats_loadAsyncGraph (TLStatsLoadAsyncGraph) returns (StatsGraph) {}
  rpc stats_getMegagroupStats (TLStatsGetMegagroupStats) returns (StatsMegagroupStats) {}
  rpc stats_getMessagePublicForwards (TLStatsGetMessagePublicForwards) returns (MessagesMessages) {}
  rpc stats_getMessageStats (TLStatsGetMessageStats) returns (StatsMessageStats) {}
}

service RPCStickers {
  rpc messages_getStickers (TLMessagesGetStickers) returns (MessagesStickers) {}
  rpc messages_getAllStickers (TLMessagesGetAllStickers) returns (MessagesAllStickers) {}
  rpc messages_getStickerSet (TLMessagesGetStickerSet) returns (MessagesStickerSet) {}
  rpc messages_installStickerSet (TLMessagesInstallStickerSet) returns (MessagesStickerSetInstallResult) {}
  rpc messages_uninstallStickerSet (TLMessagesUninstallStickerSet) returns (Bool) {}
  rpc messages_reorderStickerSets (TLMessagesReorderStickerSets) returns (Bool) {}
  rpc messages_getFeaturedStickers (TLMessagesGetFeaturedStickers) returns (MessagesFeaturedStickers) {}
  rpc messages_readFeaturedStickers (TLMessagesReadFeaturedStickers) returns (Bool) {}
  rpc messages_getRecentStickers (TLMessagesGetRecentStickers) returns (MessagesRecentStickers) {}
  rpc messages_saveRecentSticker (TLMessagesSaveRecentSticker) returns (Bool) {}
  rpc messages_clearRecentStickers (TLMessagesClearRecentStickers) returns (Bool) {}
  rpc messages_getArchivedStickers (TLMessagesGetArchivedStickers) returns (MessagesArchivedStickers) {}
  rpc messages_getMaskStickers (TLMessagesGetMaskStickers) returns (MessagesAllStickers) {}
  rpc messages_getAttachedStickers (TLMessagesGetAttachedStickers) returns (VectorStickerSetCovered) {}
  rpc messages_getFavedStickers (TLMessagesGetFavedStickers) returns (MessagesFavedStickers) {}
  rpc messages_faveSticker (TLMessagesFaveSticker) returns (Bool) {}
  rpc messages_searchStickerSets (TLMessagesSearchStickerSets) returns (MessagesFoundStickerSets) {}
  rpc messages_toggleStickerSets (TLMessagesToggleStickerSets) returns (Bool) {}
  rpc messages_getOldFeaturedStickers (TLMessagesGetOldFeaturedStickers) returns (MessagesFeaturedStickers) {}
  rpc stickers_createStickerSet (TLStickersCreateStickerSet) returns (MessagesStickerSet) {}
  rpc stickers_removeStickerFromSet (TLStickersRemoveStickerFromSet) returns (MessagesStickerSet) {}
  rpc stickers_changeStickerPosition (TLStickersChangeStickerPosition) returns (MessagesStickerSet) {}
  rpc stickers_addStickerToSet (TLStickersAddStickerToSet) returns (MessagesStickerSet) {}
  rpc stickers_setStickerSetThumb (TLStickersSetStickerSetThumb) returns (MessagesStickerSet) {}
  rpc stickers_checkShortName (TLStickersCheckShortName) returns (Bool) {}
  rpc stickers_suggestShortName (TLStickersSuggestShortName) returns (StickersSuggestedShortName) {}
  rpc stickers_changeSticker (TLStickersChangeSticker) returns (MessagesStickerSet) {}
  rpc stickers_renameStickerSet (TLStickersRenameStickerSet) returns (MessagesStickerSet) {}
  rpc stickers_deleteStickerSet (TLStickersDeleteStickerSet) returns (Bool) {}
}

service RPCStories {
  rpc stories_canSendStory (TLStoriesCanSendStory) returns (Bool) {}
  rpc stories_sendStory (TLStoriesSendStory) returns (Updates) {}
  rpc stories_editStory (TLStoriesEditStory) returns (Updates) {}
  rpc stories_deleteStories (TLStoriesDeleteStories) returns (VectorInt) {}
  rpc stories_togglePinned (TLStoriesTogglePinned) returns (VectorInt) {}
  rpc stories_getAllStories (TLStoriesGetAllStories) returns (StoriesAllStories) {}
  rpc stories_getPinnedStories (TLStoriesGetPinnedStories) returns (StoriesStories) {}
  rpc stories_getStoriesArchive (TLStoriesGetStoriesArchive) returns (StoriesStories) {}
  rpc stories_getStoriesByID (TLStoriesGetStoriesByID) returns (StoriesStories) {}
  rpc stories_toggleAllStoriesHidden (TLStoriesToggleAllStoriesHidden) returns (Bool) {}
  rpc stories_readStories (TLStoriesReadStories) returns (VectorInt) {}
  rpc stories_incrementStoryViews (TLStoriesIncrementStoryViews) returns (Bool) {}
  rpc stories_getStoryViewsList (TLStoriesGetStoryViewsList) returns (StoriesStoryViewsList) {}
  rpc stories_getStoriesViews (TLStoriesGetStoriesViews) returns (StoriesStoryViews) {}
  rpc stories_exportStoryLink (TLStoriesExportStoryLink) returns (ExportedStoryLink) {}
  rpc stories_report (TLStoriesReport) returns (Bool) {}
  rpc stories_activateStealthMode (TLStoriesActivateStealthMode) returns (Updates) {}
  rpc stories_sendReaction (TLStoriesSendReaction) returns (Updates) {}
  rpc stories_getPeerStories (TLStoriesGetPeerStories) returns (StoriesPeerStories) {}
  rpc stories_getAllReadPeerStories (TLStoriesGetAllReadPeerStories) returns (Updates) {}
  rpc stories_getPeerMaxIDs (TLStoriesGetPeerMaxIDs) returns (VectorInt) {}
  rpc stories_getChatsToSend (TLStoriesGetChatsToSend) returns (MessagesChats) {}
  rpc stories_togglePeerStoriesHidden (TLStoriesTogglePeerStoriesHidden) returns (Bool) {}
  rpc stories_getBoostsStatus (TLStoriesGetBoostsStatus) returns (StoriesBoostsStatus) {}
  rpc stories_getBoostersList (TLStoriesGetBoostersList) returns (StoriesBoostersList) {}
  rpc stories_canApplyBoost (TLStoriesCanApplyBoost) returns (StoriesCanApplyBoostResult) {}
  rpc stories_applyBoost (TLStoriesApplyBoost) returns (Bool) {}
  rpc users_getStoriesMaxIDs (TLUsersGetStoriesMaxIDs) returns (VectorInt) {}
  rpc contacts_toggleStoriesHidden (TLContactsToggleStoriesHidden) returns (Bool) {}
  rpc stories_getUserStories (TLStoriesGetUserStories) returns (StoriesUserStories) {}
  rpc stories_getAllReadUserStories (TLStoriesGetAllReadUserStories) returns (Updates) {}
}

service RPCThemes {
  rpc account_uploadTheme (TLAccountUploadTheme) returns (Document) {}
  rpc account_createTheme (TLAccountCreateTheme) returns (Theme) {}
  rpc account_updateTheme (TLAccountUpdateTheme) returns (Theme) {}
  rpc account_saveTheme (TLAccountSaveTheme) returns (Bool) {}
  rpc account_installTheme (TLAccountInstallTheme) returns (Bool) {}
  rpc account_getTheme (TLAccountGetTheme) returns (Theme) {}
  rpc account_getThemes (TLAccountGetThemes) returns (AccountThemes) {}
  rpc account_getChatThemes (TLAccountGetChatThemes) returns (AccountThemes) {}
  rpc messages_setChatTheme (TLMessagesSetChatTheme) returns (Updates) {}
}

service RPCTos {
  rpc help_getTermsOfServiceUpdate (TLHelpGetTermsOfServiceUpdate) returns (HelpTermsOfServiceUpdate) {}
  rpc help_acceptTermsOfService (TLHelpAcceptTermsOfService) returns (Bool) {}
}

service RPCTranscription {
  rpc messages_transcribeAudio (TLMessagesTranscribeAudio) returns (MessagesTranscribedAudio) {}
  rpc messages_rateTranscribedAudio (TLMessagesRateTranscribedAudio) returns (Bool) {}
}

service RPCTranslation {
  rpc messages_translateText (TLMessagesTranslateText) returns (MessagesTranslatedText) {}
  rpc messages_togglePeerTranslations (TLMessagesTogglePeerTranslations) returns (Bool) {}
}

service RPCTsf {
  rpc help_getUserInfo (TLHelpGetUserInfo) returns (HelpUserInfo) {}
  rpc help_editUserInfo (TLHelpEditUserInfo) returns (HelpUserInfo) {}
}

service RPCTwoFa {
  rpc account_getPassword (TLAccountGetPassword) returns (AccountPassword) {}
  rpc account_getPasswordSettings (TLAccountGetPasswordSettings) returns (AccountPasswordSettings) {}
  rpc account_updatePasswordSettings (TLAccountUpdatePasswordSettings) returns (Bool) {}
  rpc account_confirmPasswordEmail (TLAccountConfirmPasswordEmail) returns (Bool) {}
  rpc account_resendPasswordEmail (TLAccountResendPasswordEmail) returns (Bool) {}
  rpc account_cancelPasswordEmail (TLAccountCancelPasswordEmail) returns (Bool) {}
  rpc account_declinePasswordReset (TLAccountDeclinePasswordReset) returns (Bool) {}
}

service RPCUpdates {
  rpc updates_getState (TLUpdatesGetState) returns (UpdatesState) {}
  rpc updates_getDifference (TLUpdatesGetDifference) returns (UpdatesDifference) {}
  rpc updates_getChannelDifference (TLUpdatesGetChannelDifference) returns (UpdatesChannelDifference) {}
}

service RPCUsernames {
  rpc account_checkUsername (TLAccountCheckUsername) returns (Bool) {}
  rpc account_updateUsername (TLAccountUpdateUsername) returns (User) {}
  rpc contacts_resolveUsername (TLContactsResolveUsername) returns (ContactsResolvedPeer) {}
  rpc channels_checkUsername (TLChannelsCheckUsername) returns (Bool) {}
  rpc channels_updateUsername (TLChannelsUpdateUsername) returns (Bool) {}
}

service RPCUsers {
  rpc users_getUsers (TLUsersGetUsers) returns (VectorUser) {}
  rpc users_getFullUser (TLUsersGetFullUser) returns (UsersUserFull) {}
  rpc contacts_resolvePhone (TLContactsResolvePhone) returns (ContactsResolvedPeer) {}
  rpc users_getMe (TLUsersGetMe) returns (User) {}
}

service RPCVoipCalls {
  rpc messages_deletePhoneCallHistory (TLMessagesDeletePhoneCallHistory) returns (MessagesAffectedFoundMessages) {}
  rpc phone_getCallConfig (TLPhoneGetCallConfig) returns (DataJSON) {}
  rpc phone_requestCall (TLPhoneRequestCall) returns (PhonePhoneCall) {}
  rpc phone_acceptCall (TLPhoneAcceptCall) returns (PhonePhoneCall) {}
  rpc phone_confirmCall (TLPhoneConfirmCall) returns (PhonePhoneCall) {}
  rpc phone_receivedCall (TLPhoneReceivedCall) returns (Bool) {}
  rpc phone_discardCall (TLPhoneDiscardCall) returns (Updates) {}
  rpc phone_setCallRating (TLPhoneSetCallRating) returns (Updates) {}
  rpc phone_saveCallDebug (TLPhoneSaveCallDebug) returns (Bool) {}
  rpc phone_sendSignalingData (TLPhoneSendSignalingData) returns (Bool) {}
  rpc phone_saveCallLog (TLPhoneSaveCallLog) returns (Bool) {}
}

service RPCWallpapers {
  rpc account_getWallPapers (TLAccountGetWallPapers) returns (AccountWallPapers) {}
  rpc account_getWallPaper (TLAccountGetWallPaper) returns (WallPaper) {}
  rpc account_uploadWallPaper (TLAccountUploadWallPaper) returns (WallPaper) {}
  rpc account_saveWallPaper (TLAccountSaveWallPaper) returns (Bool) {}
  rpc account_installWallPaper (TLAccountInstallWallPaper) returns (Bool) {}
  rpc account_resetWallPapers (TLAccountResetWallPapers) returns (Bool) {}
  rpc account_getMultiWallPapers (TLAccountGetMultiWallPapers) returns (VectorWallPaper) {}
  rpc messages_setChatWallPaper (TLMessagesSetChatWallPaper) returns (Updates) {}
}

service RPCWebPage {
  rpc messages_getWebPagePreview (TLMessagesGetWebPagePreview) returns (MessageMedia) {}
  rpc messages_getWebPage8D9692A3 (TLMessagesGetWebPage8D9692A3) returns (MessagesWebPage) {}
  rpc messages_getWebPage32CA8F91 (TLMessagesGetWebPage32CA8F91) returns (WebPage) {}
}

service RPCWebview {
  rpc messages_requestWebView (TLMessagesRequestWebView) returns (WebViewResult) {}
  rpc messages_prolongWebView (TLMessagesProlongWebView) returns (Bool) {}
  rpc messages_requestSimpleWebView (TLMessagesRequestSimpleWebView) returns (SimpleWebViewResult) {}
  rpc messages_sendWebViewResultMessage (TLMessagesSendWebViewResultMessage) returns (WebViewMessageSent) {}
  rpc messages_sendWebViewData (TLMessagesSendWebViewData) returns (Updates) {}
  rpc messages_getBotApp (TLMessagesGetBotApp) returns (MessagesBotApp) {}
  rpc messages_requestAppWebView (TLMessagesRequestAppWebView) returns (AppWebViewResult) {}
  rpc bots_invokeWebViewCustomMethod (TLBotsInvokeWebViewCustomMethod) returns (DataJSON) {}
}

service RPCBiz {
  rpc biz_invokeBizDataRaw (TLBizInvokeBizDataRaw) returns (BizDataRaw) {}
}

message TLInvokeAfterMsg {
  optional TLConstructor constructor = 1;
  optional int64 msg_id = 3;
  optional bytes query = 4;
}

message TLInvokeAfterMsgs {
  optional TLConstructor constructor = 1;
  repeated int64 msg_ids = 3;
  optional bytes query = 4;
}

message TLInitConnection {
  optional TLConstructor constructor = 1;
  optional int32 api_id = 3;
  optional string device_model = 4;
  optional string system_version = 5;
  optional string app_version = 6;
  optional string system_lang_code = 7;
  optional string lang_pack = 8;
  optional string lang_code = 9;
  optional InputClientProxy proxy = 10;
  optional JSONValue params = 11;
  optional bytes query = 12;
}

message TLInvokeWithLayer {
  optional TLConstructor constructor = 1;
  optional int32 layer = 3;
  optional bytes query = 4;
}

message TLInvokeWithoutUpdates {
  optional TLConstructor constructor = 1;
  optional bytes query = 3;
}

message TLInvokeWithMessagesRange {
  optional TLConstructor constructor = 1;
  optional MessageRange range = 3;
  optional bytes query = 4;
}

message TLInvokeWithTakeout {
  optional TLConstructor constructor = 1;
  optional int64 takeout_id = 3;
  optional bytes query = 4;
}

message TLAuthSendCode {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional int32 api_id = 4;
  optional string api_hash = 5;
  optional CodeSettings settings = 6;
}

message TLAuthSignUp {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
  optional string first_name = 5;
  optional string last_name = 6;
}

message TLAuthSignIn {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
  optional google.protobuf.StringValue phone_code_FLAGSTRING = 5;
  optional EmailVerification email_verification = 6;
  optional string phone_code_STRING = 7;
}

message TLAuthLogOut {
  optional TLConstructor constructor = 1;
}

message TLAuthResetAuthorizations {
  optional TLConstructor constructor = 1;
}

message TLAuthExportAuthorization {
  optional TLConstructor constructor = 1;
  optional int32 dc_id = 3;
}

message TLAuthImportAuthorization {
  optional TLConstructor constructor = 1;
  optional int64 id = 3;
  optional bytes bytes = 4;
}

message TLAuthBindTempAuthKey {
  optional TLConstructor constructor = 1;
  optional int64 perm_auth_key_id = 3;
  optional int64 nonce = 4;
  optional int32 expires_at = 5;
  optional bytes encrypted_message = 6;
}

message TLAuthImportBotAuthorization {
  optional TLConstructor constructor = 1;
  optional int32 flags = 3;
  optional int32 api_id = 4;
  optional string api_hash = 5;
  optional string bot_auth_token = 6;
}

message TLAuthCheckPassword {
  optional TLConstructor constructor = 1;
  optional InputCheckPasswordSRP password = 3;
}

message TLAuthRequestPasswordRecovery {
  optional TLConstructor constructor = 1;
}

message TLAuthRecoverPassword {
  optional TLConstructor constructor = 1;
  optional string code = 3;
  optional AccountPasswordInputSettings new_settings = 4;
}

message TLAuthResendCode {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
}

message TLAuthCancelCode {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
}

message TLAuthDropTempAuthKeys {
  optional TLConstructor constructor = 1;
  repeated int64 except_auth_keys = 3;
}

message TLAuthExportLoginToken {
  optional TLConstructor constructor = 1;
  optional int32 api_id = 3;
  optional string api_hash = 4;
  repeated int64 except_ids = 5;
}

message TLAuthImportLoginToken {
  optional TLConstructor constructor = 1;
  optional bytes token = 3;
}

message TLAuthAcceptLoginToken {
  optional TLConstructor constructor = 1;
  optional bytes token = 3;
}

message TLAuthCheckRecoveryPassword {
  optional TLConstructor constructor = 1;
  optional string code = 3;
}

message TLAuthImportWebTokenAuthorization {
  optional TLConstructor constructor = 1;
  optional int32 api_id = 3;
  optional string api_hash = 4;
  optional string web_auth_token = 5;
}

message TLAuthRequestFirebaseSms {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
  optional google.protobuf.StringValue safety_net_token = 5;
  optional google.protobuf.StringValue ios_push_secret = 6;
}

message TLAuthResetLoginEmail {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
}

message TLAccountRegisterDevice {
  optional TLConstructor constructor = 1;
  optional bool no_muted = 3;
  optional int32 token_type = 4;
  optional string token = 5;
  optional Bool app_sandbox = 6;
  optional bytes secret = 7;
  repeated int64 other_uids = 8;
}

message TLAccountUnregisterDevice {
  optional TLConstructor constructor = 1;
  optional int32 token_type = 3;
  optional string token = 4;
  repeated int64 other_uids = 5;
}

message TLAccountUpdateNotifySettings {
  optional TLConstructor constructor = 1;
  optional InputNotifyPeer peer = 3;
  optional InputPeerNotifySettings settings = 4;
}

message TLAccountGetNotifySettings {
  optional TLConstructor constructor = 1;
  optional InputNotifyPeer peer = 3;
}

message TLAccountResetNotifySettings {
  optional TLConstructor constructor = 1;
}

message TLAccountUpdateProfile {
  optional TLConstructor constructor = 1;
  optional google.protobuf.StringValue first_name = 3;
  optional google.protobuf.StringValue last_name = 4;
  optional google.protobuf.StringValue about = 5;
}

message TLAccountUpdateStatus {
  optional TLConstructor constructor = 1;
  optional Bool offline = 3;
}

message TLAccountGetWallPapers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountReportPeer {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional ReportReason reason = 4;
  optional string message = 5;
}

message TLAccountCheckUsername {
  optional TLConstructor constructor = 1;
  optional string username = 3;
}

message TLAccountUpdateUsername {
  optional TLConstructor constructor = 1;
  optional string username = 3;
}

message TLAccountGetPrivacy {
  optional TLConstructor constructor = 1;
  optional InputPrivacyKey key = 3;
}

message TLAccountSetPrivacy {
  optional TLConstructor constructor = 1;
  optional InputPrivacyKey key = 3;
  repeated InputPrivacyRule rules = 4;
}

message TLAccountDeleteAccount {
  optional TLConstructor constructor = 1;
  optional string reason = 3;
  optional InputCheckPasswordSRP password = 4;
}

message TLAccountGetAccountTTL {
  optional TLConstructor constructor = 1;
}

message TLAccountSetAccountTTL {
  optional TLConstructor constructor = 1;
  optional AccountDaysTTL ttl = 3;
}

message TLAccountSendChangePhoneCode {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional CodeSettings settings = 4;
}

message TLAccountChangePhone {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
  optional string phone_code = 5;
}

message TLAccountUpdateDeviceLocked {
  optional TLConstructor constructor = 1;
  optional int32 period = 3;
}

message TLAccountGetAuthorizations {
  optional TLConstructor constructor = 1;
}

message TLAccountResetAuthorization {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountGetPassword {
  optional TLConstructor constructor = 1;
}

message TLAccountGetPasswordSettings {
  optional TLConstructor constructor = 1;
  optional InputCheckPasswordSRP password = 3;
}

message TLAccountUpdatePasswordSettings {
  optional TLConstructor constructor = 1;
  optional InputCheckPasswordSRP password = 3;
  optional AccountPasswordInputSettings new_settings = 4;
}

message TLAccountSendConfirmPhoneCode {
  optional TLConstructor constructor = 1;
  optional string hash = 3;
  optional CodeSettings settings = 4;
}

message TLAccountConfirmPhone {
  optional TLConstructor constructor = 1;
  optional string phone_code_hash = 3;
  optional string phone_code = 4;
}

message TLAccountGetTmpPassword {
  optional TLConstructor constructor = 1;
  optional InputCheckPasswordSRP password = 3;
  optional int32 period = 4;
}

message TLAccountGetWebAuthorizations {
  optional TLConstructor constructor = 1;
}

message TLAccountResetWebAuthorization {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountResetWebAuthorizations {
  optional TLConstructor constructor = 1;
}

message TLAccountGetAllSecureValues {
  optional TLConstructor constructor = 1;
}

message TLAccountGetSecureValue {
  optional TLConstructor constructor = 1;
  repeated SecureValueType types = 3;
}

message TLAccountSaveSecureValue {
  optional TLConstructor constructor = 1;
  optional InputSecureValue value = 3;
  optional int64 secure_secret_id = 4;
}

message TLAccountDeleteSecureValue {
  optional TLConstructor constructor = 1;
  repeated SecureValueType types = 3;
}

message TLAccountGetAuthorizationForm {
  optional TLConstructor constructor = 1;
  optional int64 bot_id = 3;
  optional string scope = 4;
  optional string public_key = 5;
}

message TLAccountAcceptAuthorization {
  optional TLConstructor constructor = 1;
  optional int64 bot_id = 3;
  optional string scope = 4;
  optional string public_key = 5;
  repeated SecureValueHash value_hashes = 6;
  optional SecureCredentialsEncrypted credentials = 7;
}

message TLAccountSendVerifyPhoneCode {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional CodeSettings settings = 4;
}

message TLAccountVerifyPhone {
  optional TLConstructor constructor = 1;
  optional string phone_number = 3;
  optional string phone_code_hash = 4;
  optional string phone_code = 5;
}

message TLAccountSendVerifyEmailCode {
  optional TLConstructor constructor = 1;
  optional EmailVerifyPurpose purpose = 3;
  optional string email = 4;
}

message TLAccountVerifyEmail32DA4CF {
  optional TLConstructor constructor = 1;
  optional EmailVerifyPurpose purpose = 3;
  optional EmailVerification verification = 4;
}

message TLAccountInitTakeoutSession {
  optional TLConstructor constructor = 1;
  optional bool contacts = 3;
  optional bool message_users = 4;
  optional bool message_chats = 5;
  optional bool message_megagroups = 6;
  optional bool message_channels = 7;
  optional bool files = 8;
  optional google.protobuf.Int64Value file_max_size_FLAGINT64 = 9;
  optional google.protobuf.Int32Value file_max_size_FLAGINT32 = 10;
}

message TLAccountFinishTakeoutSession {
  optional TLConstructor constructor = 1;
  optional bool success = 3;
}

message TLAccountConfirmPasswordEmail {
  optional TLConstructor constructor = 1;
  optional string code = 3;
}

message TLAccountResendPasswordEmail {
  optional TLConstructor constructor = 1;
}

message TLAccountCancelPasswordEmail {
  optional TLConstructor constructor = 1;
}

message TLAccountGetContactSignUpNotification {
  optional TLConstructor constructor = 1;
}

message TLAccountSetContactSignUpNotification {
  optional TLConstructor constructor = 1;
  optional Bool silent = 3;
}

message TLAccountGetNotifyExceptions {
  optional TLConstructor constructor = 1;
  optional bool compare_sound = 3;
  optional bool compare_stories = 4;
  optional InputNotifyPeer peer = 5;
}

message TLAccountGetWallPaper {
  optional TLConstructor constructor = 1;
  optional InputWallPaper wallpaper = 3;
}

message TLAccountUploadWallPaper {
  optional TLConstructor constructor = 1;
  optional bool for_chat = 3;
  optional InputFile file = 4;
  optional string mime_type = 5;
  optional WallPaperSettings settings = 6;
}

message TLAccountSaveWallPaper {
  optional TLConstructor constructor = 1;
  optional InputWallPaper wallpaper = 3;
  optional Bool unsave = 4;
  optional WallPaperSettings settings = 5;
}

message TLAccountInstallWallPaper {
  optional TLConstructor constructor = 1;
  optional InputWallPaper wallpaper = 3;
  optional WallPaperSettings settings = 4;
}

message TLAccountResetWallPapers {
  optional TLConstructor constructor = 1;
}

message TLAccountGetAutoDownloadSettings {
  optional TLConstructor constructor = 1;
}

message TLAccountSaveAutoDownloadSettings {
  optional TLConstructor constructor = 1;
  optional bool low = 3;
  optional bool high = 4;
  optional AutoDownloadSettings settings = 5;
}

message TLAccountUploadTheme {
  optional TLConstructor constructor = 1;
  optional InputFile file = 3;
  optional InputFile thumb = 4;
  optional string file_name = 5;
  optional string mime_type = 6;
}

message TLAccountCreateTheme {
  optional TLConstructor constructor = 1;
  optional string slug = 3;
  optional string title = 4;
  optional InputDocument document = 5;
  repeated InputThemeSettings settings = 6;
}

message TLAccountUpdateTheme {
  optional TLConstructor constructor = 1;
  optional string format = 3;
  optional InputTheme theme = 4;
  optional google.protobuf.StringValue slug = 5;
  optional google.protobuf.StringValue title = 6;
  optional InputDocument document = 7;
  repeated InputThemeSettings settings = 8;
}

message TLAccountSaveTheme {
  optional TLConstructor constructor = 1;
  optional InputTheme theme = 3;
  optional Bool unsave = 4;
}

message TLAccountInstallTheme {
  optional TLConstructor constructor = 1;
  optional bool dark = 3;
  optional InputTheme theme = 4;
  optional google.protobuf.StringValue format = 5;
  optional BaseTheme base_theme = 6;
}

message TLAccountGetTheme {
  optional TLConstructor constructor = 1;
  optional string format = 3;
  optional InputTheme theme = 4;
  optional int64 document_id = 5;
}

message TLAccountGetThemes {
  optional TLConstructor constructor = 1;
  optional string format = 3;
  optional int64 hash = 4;
}

message TLAccountSetContentSettings {
  optional TLConstructor constructor = 1;
  optional bool sensitive_enabled = 3;
}

message TLAccountGetContentSettings {
  optional TLConstructor constructor = 1;
}

message TLAccountGetMultiWallPapers {
  optional TLConstructor constructor = 1;
  repeated InputWallPaper wallpapers = 3;
}

message TLAccountGetGlobalPrivacySettings {
  optional TLConstructor constructor = 1;
}

message TLAccountSetGlobalPrivacySettings {
  optional TLConstructor constructor = 1;
  optional GlobalPrivacySettings settings = 3;
}

message TLAccountReportProfilePhoto {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputPhoto photo_id = 4;
  optional ReportReason reason = 5;
  optional string message = 6;
}

message TLAccountResetPassword {
  optional TLConstructor constructor = 1;
}

message TLAccountDeclinePasswordReset {
  optional TLConstructor constructor = 1;
}

message TLAccountGetChatThemes {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountSetAuthorizationTTL {
  optional TLConstructor constructor = 1;
  optional int32 authorization_ttl_days = 3;
}

message TLAccountChangeAuthorizationSettings {
  optional TLConstructor constructor = 1;
  optional bool confirmed = 3;
  optional int64 hash = 4;
  optional Bool encrypted_requests_disabled = 5;
  optional Bool call_requests_disabled = 6;
}

message TLAccountGetSavedRingtones {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountSaveRingtone {
  optional TLConstructor constructor = 1;
  optional InputDocument id = 3;
  optional Bool unsave = 4;
}

message TLAccountUploadRingtone {
  optional TLConstructor constructor = 1;
  optional InputFile file = 3;
  optional string file_name = 4;
  optional string mime_type = 5;
}

message TLAccountUpdateEmojiStatus {
  optional TLConstructor constructor = 1;
  optional EmojiStatus emoji_status = 3;
}

message TLAccountGetDefaultEmojiStatuses {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountGetRecentEmojiStatuses {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountClearRecentEmojiStatuses {
  optional TLConstructor constructor = 1;
}

message TLAccountReorderUsernames {
  optional TLConstructor constructor = 1;
  repeated string order = 3;
}

message TLAccountToggleUsername {
  optional TLConstructor constructor = 1;
  optional string username = 3;
  optional Bool active = 4;
}

message TLAccountGetDefaultProfilePhotoEmojis {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountGetDefaultGroupPhotoEmojis {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLAccountGetAutoSaveSettings {
  optional TLConstructor constructor = 1;
}

message TLAccountSaveAutoSaveSettings {
  optional TLConstructor constructor = 1;
  optional bool users = 3;
  optional bool chats = 4;
  optional bool broadcasts = 5;
  optional InputPeer peer = 6;
  optional AutoSaveSettings settings = 7;
}

message TLAccountDeleteAutoSaveExceptions {
  optional TLConstructor constructor = 1;
}

message TLAccountInvalidateSignInCodes {
  optional TLConstructor constructor = 1;
  repeated string codes = 3;
}

message TLUsersGetUsers {
  optional TLConstructor constructor = 1;
  repeated InputUser id = 3;
}

message TLUsersGetFullUser {
  optional TLConstructor constructor = 1;
  optional InputUser id = 3;
}

message TLUsersSetSecureValueErrors {
  optional TLConstructor constructor = 1;
  optional InputUser id = 3;
  repeated SecureValueError errors = 4;
}

message TLContactsGetContactIDs {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLContactsGetStatuses {
  optional TLConstructor constructor = 1;
}

message TLContactsGetContacts {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLContactsImportContacts {
  optional TLConstructor constructor = 1;
  repeated InputContact contacts = 3;
}

message TLContactsDeleteContacts {
  optional TLConstructor constructor = 1;
  repeated InputUser id = 3;
}

message TLContactsDeleteByPhones {
  optional TLConstructor constructor = 1;
  repeated string phones = 3;
}

message TLContactsBlock {
  optional TLConstructor constructor = 1;
  optional bool my_stories_from = 3;
  optional InputPeer id = 4;
}

message TLContactsUnblock {
  optional TLConstructor constructor = 1;
  optional bool my_stories_from = 3;
  optional InputPeer id = 4;
}

message TLContactsGetBlocked {
  optional TLConstructor constructor = 1;
  optional bool my_stories_from = 3;
  optional int32 offset = 4;
  optional int32 limit = 5;
}

message TLContactsSearch {
  optional TLConstructor constructor = 1;
  optional string q = 3;
  optional int32 limit = 4;
}

message TLContactsResolveUsername {
  optional TLConstructor constructor = 1;
  optional string username = 3;
}

message TLContactsGetTopPeers {
  optional TLConstructor constructor = 1;
  optional bool correspondents = 3;
  optional bool bots_pm = 4;
  optional bool bots_inline = 5;
  optional bool phone_calls = 6;
  optional bool forward_users = 7;
  optional bool forward_chats = 8;
  optional bool groups = 9;
  optional bool channels = 10;
  optional int32 offset = 11;
  optional int32 limit = 12;
  optional int64 hash = 13;
}

message TLContactsResetTopPeerRating {
  optional TLConstructor constructor = 1;
  optional TopPeerCategory category = 3;
  optional InputPeer peer = 4;
}

message TLContactsResetSaved {
  optional TLConstructor constructor = 1;
}

message TLContactsGetSaved {
  optional TLConstructor constructor = 1;
}

message TLContactsToggleTopPeers {
  optional TLConstructor constructor = 1;
  optional Bool enabled = 3;
}

message TLContactsAddContact {
  optional TLConstructor constructor = 1;
  optional bool add_phone_privacy_exception = 3;
  optional InputUser id = 4;
  optional string first_name = 5;
  optional string last_name = 6;
  optional string phone = 7;
}

message TLContactsAcceptContact {
  optional TLConstructor constructor = 1;
  optional InputUser id = 3;
}

message TLContactsGetLocated {
  optional TLConstructor constructor = 1;
  optional bool background = 3;
  optional InputGeoPoint geo_point = 4;
  optional google.protobuf.Int32Value self_expires = 5;
}

message TLContactsBlockFromReplies {
  optional TLConstructor constructor = 1;
  optional bool delete_message = 3;
  optional bool delete_history = 4;
  optional bool report_spam = 5;
  optional int32 msg_id = 6;
}

message TLContactsResolvePhone {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
}

message TLContactsExportContactToken {
  optional TLConstructor constructor = 1;
}

message TLContactsImportContactToken {
  optional TLConstructor constructor = 1;
  optional string token = 3;
}

message TLContactsEditCloseFriends {
  optional TLConstructor constructor = 1;
  repeated int64 id = 3;
}

message TLContactsSetBlocked {
  optional TLConstructor constructor = 1;
  optional bool my_stories_from = 3;
  repeated InputPeer id = 4;
  optional int32 limit = 5;
}

message TLMessagesGetMessages {
  optional TLConstructor constructor = 1;
  repeated InputMessage id_VECTORINPUTMESSAGE = 3;
  repeated int32 id_VECTORINT32 = 4;
}

message TLMessagesGetDialogs {
  optional TLConstructor constructor = 1;
  optional bool exclude_pinned = 3;
  optional google.protobuf.Int32Value folder_id = 4;
  optional int32 offset_date = 5;
  optional int32 offset_id = 6;
  optional InputPeer offset_peer = 7;
  optional int32 limit = 8;
  optional int64 hash = 9;
}

message TLMessagesGetHistory {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 offset_id = 4;
  optional int32 offset_date = 5;
  optional int32 add_offset = 6;
  optional int32 limit = 7;
  optional int32 max_id = 8;
  optional int32 min_id = 9;
  optional int64 hash = 10;
}

message TLMessagesSearch {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string q = 4;
  optional InputPeer from_id = 5;
  optional google.protobuf.Int32Value top_msg_id = 6;
  optional MessagesFilter filter = 7;
  optional int32 min_date = 8;
  optional int32 max_date = 9;
  optional int32 offset_id = 10;
  optional int32 add_offset = 11;
  optional int32 limit = 12;
  optional int32 max_id = 13;
  optional int32 min_id = 14;
  optional int64 hash = 15;
}

message TLMessagesReadHistory {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 max_id = 4;
}

message TLMessagesDeleteHistory {
  optional TLConstructor constructor = 1;
  optional bool just_clear = 3;
  optional bool revoke = 4;
  optional InputPeer peer = 5;
  optional int32 max_id = 6;
  optional google.protobuf.Int32Value min_date = 7;
  optional google.protobuf.Int32Value max_date = 8;
}

message TLMessagesDeleteMessages {
  optional TLConstructor constructor = 1;
  optional bool revoke = 3;
  repeated int32 id = 4;
}

message TLMessagesReceivedMessages {
  optional TLConstructor constructor = 1;
  optional int32 max_id = 3;
}

message TLMessagesSetTyping {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
  optional SendMessageAction action = 5;
}

message TLMessagesSendMessage {
  optional TLConstructor constructor = 1;
  optional bool no_webpage = 3;
  optional bool silent = 4;
  optional bool background = 5;
  optional bool clear_draft = 6;
  optional bool noforwards = 7;
  optional bool update_stickersets_order = 8;
  optional InputPeer peer = 9;
  optional InputReplyTo reply_to = 10;
  optional string message = 11;
  optional int64 random_id = 12;
  optional ReplyMarkup reply_markup = 13;
  repeated MessageEntity entities = 14;
  optional google.protobuf.Int32Value schedule_date = 15;
  optional InputPeer send_as = 16;
  optional google.protobuf.Int32Value reply_to_msg_id = 17;
  optional google.protobuf.Int32Value top_msg_id = 18;
}

message TLMessagesSendMedia {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional bool background = 4;
  optional bool clear_draft = 5;
  optional bool noforwards = 6;
  optional bool update_stickersets_order = 7;
  optional InputPeer peer = 8;
  optional InputReplyTo reply_to = 9;
  optional InputMedia media = 10;
  optional string message = 11;
  optional int64 random_id = 12;
  optional ReplyMarkup reply_markup = 13;
  repeated MessageEntity entities = 14;
  optional google.protobuf.Int32Value schedule_date = 15;
  optional InputPeer send_as = 16;
  optional google.protobuf.Int32Value reply_to_msg_id = 17;
  optional google.protobuf.Int32Value top_msg_id = 18;
}

message TLMessagesForwardMessages {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional bool background = 4;
  optional bool with_my_score = 5;
  optional bool drop_author = 6;
  optional bool drop_media_captions = 7;
  optional bool noforwards = 8;
  optional InputPeer from_peer = 9;
  repeated int32 id = 10;
  repeated int64 random_id = 11;
  optional InputPeer to_peer = 12;
  optional google.protobuf.Int32Value top_msg_id = 13;
  optional google.protobuf.Int32Value schedule_date = 14;
  optional InputPeer send_as = 15;
}

message TLMessagesReportSpam {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesGetPeerSettings {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesReport {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional ReportReason reason = 5;
  optional string message = 6;
}

message TLMessagesGetChats {
  optional TLConstructor constructor = 1;
  repeated int64 id = 3;
}

message TLMessagesGetFullChat {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
}

message TLMessagesEditChatTitle {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
  optional string title = 4;
}

message TLMessagesEditChatPhoto {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
  optional InputChatPhoto photo = 4;
}

message TLMessagesAddChatUser {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
  optional InputUser user_id = 4;
  optional int32 fwd_limit = 5;
}

message TLMessagesDeleteChatUser {
  optional TLConstructor constructor = 1;
  optional bool revoke_history = 3;
  optional int64 chat_id = 4;
  optional InputUser user_id = 5;
}

message TLMessagesCreateChat {
  optional TLConstructor constructor = 1;
  repeated InputUser users = 3;
  optional string title = 4;
  optional google.protobuf.Int32Value ttl_period = 5;
}

message TLMessagesGetDhConfig {
  optional TLConstructor constructor = 1;
  optional int32 version = 3;
  optional int32 random_length = 4;
}

message TLMessagesRequestEncryption {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional int32 random_id = 4;
  optional bytes g_a = 5;
}

message TLMessagesAcceptEncryption {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
  optional bytes g_b = 4;
  optional int64 key_fingerprint = 5;
}

message TLMessagesDiscardEncryption {
  optional TLConstructor constructor = 1;
  optional bool delete_history = 3;
  optional int32 chat_id = 4;
}

message TLMessagesSetEncryptedTyping {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
  optional Bool typing = 4;
}

message TLMessagesReadEncryptedHistory {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
  optional int32 max_date = 4;
}

message TLMessagesSendEncrypted {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional InputEncryptedChat peer = 4;
  optional int64 random_id = 5;
  optional bytes data = 6;
}

message TLMessagesSendEncryptedFile {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional InputEncryptedChat peer = 4;
  optional int64 random_id = 5;
  optional bytes data = 6;
  optional InputEncryptedFile file = 7;
}

message TLMessagesSendEncryptedService {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
  optional int64 random_id = 4;
  optional bytes data = 5;
}

message TLMessagesReceivedQueue {
  optional TLConstructor constructor = 1;
  optional int32 max_qts = 3;
}

message TLMessagesReportEncryptedSpam {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
}

message TLMessagesReadMessageContents {
  optional TLConstructor constructor = 1;
  repeated int32 id = 3;
}

message TLMessagesGetStickers {
  optional TLConstructor constructor = 1;
  optional string emoticon = 3;
  optional int64 hash = 4;
}

message TLMessagesGetAllStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesGetWebPagePreview {
  optional TLConstructor constructor = 1;
  optional string message = 3;
  repeated MessageEntity entities = 4;
}

message TLMessagesExportChatInvite {
  optional TLConstructor constructor = 1;
  optional bool legacy_revoke_permanent = 3;
  optional bool request_needed = 4;
  optional InputPeer peer = 5;
  optional google.protobuf.Int32Value expire_date = 6;
  optional google.protobuf.Int32Value usage_limit = 7;
  optional google.protobuf.StringValue title = 8;
}

message TLMessagesCheckChatInvite {
  optional TLConstructor constructor = 1;
  optional string hash = 3;
}

message TLMessagesImportChatInvite {
  optional TLConstructor constructor = 1;
  optional string hash = 3;
}

message TLMessagesGetStickerSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
  optional int32 hash = 4;
}

message TLMessagesInstallStickerSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
  optional Bool archived = 4;
}

message TLMessagesUninstallStickerSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
}

message TLMessagesStartBot {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional InputPeer peer = 4;
  optional int64 random_id = 5;
  optional string start_param = 6;
}

message TLMessagesGetMessagesViews {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional Bool increment = 5;
}

message TLMessagesEditChatAdmin {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
  optional InputUser user_id = 4;
  optional Bool is_admin = 5;
}

message TLMessagesMigrateChat {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
}

message TLMessagesSearchGlobal {
  optional TLConstructor constructor = 1;
  optional google.protobuf.Int32Value folder_id = 3;
  optional string q = 4;
  optional MessagesFilter filter = 5;
  optional int32 min_date = 6;
  optional int32 max_date = 7;
  optional int32 offset_rate = 8;
  optional InputPeer offset_peer = 9;
  optional int32 offset_id = 10;
  optional int32 limit = 11;
}

message TLMessagesReorderStickerSets {
  optional TLConstructor constructor = 1;
  optional bool masks = 3;
  optional bool emojis = 4;
  repeated int64 order = 5;
}

message TLMessagesGetDocumentByHash {
  optional TLConstructor constructor = 1;
  optional bytes sha256 = 3;
  optional int64 size2_INT64 = 4;
  optional string mime_type = 5;
  optional int32 size2_INT32 = 6;
}

message TLMessagesGetSavedGifs {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesSaveGif {
  optional TLConstructor constructor = 1;
  optional InputDocument id = 3;
  optional Bool unsave = 4;
}

message TLMessagesGetInlineBotResults {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional InputPeer peer = 4;
  optional InputGeoPoint geo_point = 5;
  optional string query = 6;
  optional string offset = 7;
}

message TLMessagesSetInlineBotResults {
  optional TLConstructor constructor = 1;
  optional bool gallery = 3;
  optional bool private = 4;
  optional int64 query_id = 5;
  repeated InputBotInlineResult results = 6;
  optional int32 cache_time = 7;
  optional google.protobuf.StringValue next_offset = 8;
  optional InlineBotSwitchPM switch_pm = 9;
  optional InlineBotWebView switch_webview = 10;
}

message TLMessagesSendInlineBotResult {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional bool background = 4;
  optional bool clear_draft = 5;
  optional bool hide_via = 6;
  optional InputPeer peer = 7;
  optional InputReplyTo reply_to = 8;
  optional int64 random_id = 9;
  optional int64 query_id = 10;
  optional string id = 11;
  optional google.protobuf.Int32Value schedule_date = 12;
  optional InputPeer send_as = 13;
  optional google.protobuf.Int32Value reply_to_msg_id = 14;
  optional google.protobuf.Int32Value top_msg_id = 15;
}

message TLMessagesGetMessageEditData {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
}

message TLMessagesEditMessage {
  optional TLConstructor constructor = 1;
  optional bool no_webpage = 3;
  optional InputPeer peer = 4;
  optional int32 id = 5;
  optional google.protobuf.StringValue message = 6;
  optional InputMedia media = 7;
  optional ReplyMarkup reply_markup = 8;
  repeated MessageEntity entities = 9;
  optional google.protobuf.Int32Value schedule_date = 10;
}

message TLMessagesEditInlineBotMessage {
  optional TLConstructor constructor = 1;
  optional bool no_webpage = 3;
  optional InputBotInlineMessageID id = 4;
  optional google.protobuf.StringValue message = 5;
  optional InputMedia media = 6;
  optional ReplyMarkup reply_markup = 7;
  repeated MessageEntity entities = 8;
}

message TLMessagesGetBotCallbackAnswer {
  optional TLConstructor constructor = 1;
  optional bool game = 3;
  optional InputPeer peer = 4;
  optional int32 msg_id = 5;
  optional bytes data = 6;
  optional InputCheckPasswordSRP password = 7;
}

message TLMessagesSetBotCallbackAnswer {
  optional TLConstructor constructor = 1;
  optional bool alert = 3;
  optional int64 query_id = 4;
  optional google.protobuf.StringValue message = 5;
  optional google.protobuf.StringValue url = 6;
  optional int32 cache_time = 7;
}

message TLMessagesGetPeerDialogs {
  optional TLConstructor constructor = 1;
  repeated InputDialogPeer peers = 3;
}

message TLMessagesSaveDraft {
  optional TLConstructor constructor = 1;
  optional bool no_webpage = 3;
  optional google.protobuf.Int32Value reply_to_msg_id = 4;
  optional google.protobuf.Int32Value top_msg_id = 5;
  optional InputPeer peer = 6;
  optional string message = 7;
  repeated MessageEntity entities = 8;
}

message TLMessagesGetAllDrafts {
  optional TLConstructor constructor = 1;
}

message TLMessagesGetFeaturedStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesReadFeaturedStickers {
  optional TLConstructor constructor = 1;
  repeated int64 id = 3;
}

message TLMessagesGetRecentStickers {
  optional TLConstructor constructor = 1;
  optional bool attached = 3;
  optional int64 hash = 4;
}

message TLMessagesSaveRecentSticker {
  optional TLConstructor constructor = 1;
  optional bool attached = 3;
  optional InputDocument id = 4;
  optional Bool unsave = 5;
}

message TLMessagesClearRecentStickers {
  optional TLConstructor constructor = 1;
  optional bool attached = 3;
}

message TLMessagesGetArchivedStickers {
  optional TLConstructor constructor = 1;
  optional bool masks = 3;
  optional bool emojis = 4;
  optional int64 offset_id = 5;
  optional int32 limit = 6;
}

message TLMessagesGetMaskStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesGetAttachedStickers {
  optional TLConstructor constructor = 1;
  optional InputStickeredMedia media = 3;
}

message TLMessagesSetGameScore {
  optional TLConstructor constructor = 1;
  optional bool edit_message = 3;
  optional bool force = 4;
  optional InputPeer peer = 5;
  optional int32 id = 6;
  optional InputUser user_id = 7;
  optional int32 score = 8;
}

message TLMessagesSetInlineGameScore {
  optional TLConstructor constructor = 1;
  optional bool edit_message = 3;
  optional bool force = 4;
  optional InputBotInlineMessageID id = 5;
  optional InputUser user_id = 6;
  optional int32 score = 7;
}

message TLMessagesGetGameHighScores {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional InputUser user_id = 5;
}

message TLMessagesGetInlineGameHighScores {
  optional TLConstructor constructor = 1;
  optional InputBotInlineMessageID id = 3;
  optional InputUser user_id = 4;
}

message TLMessagesGetCommonChats {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional int64 max_id = 4;
  optional int32 limit = 5;
}

message TLMessagesGetWebPage8D9692A3 {
  optional TLConstructor constructor = 1;
  optional string url = 3;
  optional int32 hash = 4;
}

message TLMessagesToggleDialogPin {
  optional TLConstructor constructor = 1;
  optional bool pinned = 3;
  optional InputDialogPeer peer = 4;
}

message TLMessagesReorderPinnedDialogs {
  optional TLConstructor constructor = 1;
  optional bool force = 3;
  optional int32 folder_id = 4;
  repeated InputDialogPeer order = 5;
}

message TLMessagesGetPinnedDialogs {
  optional TLConstructor constructor = 1;
  optional int32 folder_id = 3;
}

message TLMessagesSetBotShippingResults {
  optional TLConstructor constructor = 1;
  optional int64 query_id = 3;
  optional google.protobuf.StringValue error = 4;
  repeated ShippingOption shipping_options = 5;
}

message TLMessagesSetBotPrecheckoutResults {
  optional TLConstructor constructor = 1;
  optional bool success = 3;
  optional int64 query_id = 4;
  optional google.protobuf.StringValue error = 5;
}

message TLMessagesUploadMedia {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputMedia media = 4;
}

message TLMessagesSendScreenshotNotification {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputReplyTo reply_to = 4;
  optional int64 random_id = 5;
  optional int32 reply_to_msg_id = 6;
}

message TLMessagesGetFavedStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesFaveSticker {
  optional TLConstructor constructor = 1;
  optional InputDocument id = 3;
  optional Bool unfave = 4;
}

message TLMessagesGetUnreadMentions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
  optional int32 offset_id = 5;
  optional int32 add_offset = 6;
  optional int32 limit = 7;
  optional int32 max_id = 8;
  optional int32 min_id = 9;
}

message TLMessagesReadMentions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
}

message TLMessagesGetRecentLocations {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 limit = 4;
  optional int64 hash = 5;
}

message TLMessagesSendMultiMedia {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional bool background = 4;
  optional bool clear_draft = 5;
  optional bool noforwards = 6;
  optional bool update_stickersets_order = 7;
  optional InputPeer peer = 8;
  optional InputReplyTo reply_to = 9;
  repeated InputSingleMedia multi_media = 10;
  optional google.protobuf.Int32Value schedule_date = 11;
  optional InputPeer send_as = 12;
  optional google.protobuf.Int32Value reply_to_msg_id = 13;
  optional google.protobuf.Int32Value top_msg_id = 14;
}

message TLMessagesUploadEncryptedFile {
  optional TLConstructor constructor = 1;
  optional InputEncryptedChat peer = 3;
  optional InputEncryptedFile file = 4;
}

message TLMessagesSearchStickerSets {
  optional TLConstructor constructor = 1;
  optional bool exclude_featured = 3;
  optional string q = 4;
  optional int64 hash = 5;
}

message TLMessagesGetSplitRanges {
  optional TLConstructor constructor = 1;
}

message TLMessagesMarkDialogUnread {
  optional TLConstructor constructor = 1;
  optional bool unread = 3;
  optional InputDialogPeer peer = 4;
}

message TLMessagesGetDialogUnreadMarks {
  optional TLConstructor constructor = 1;
}

message TLMessagesClearAllDrafts {
  optional TLConstructor constructor = 1;
}

message TLMessagesUpdatePinnedMessage {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional bool unpin = 4;
  optional bool pm_oneside = 5;
  optional InputPeer peer = 6;
  optional int32 id = 7;
}

message TLMessagesSendVote {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
  repeated bytes options = 5;
}

message TLMessagesGetPollResults {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLMessagesGetOnlines {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesEditChatAbout {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string about = 4;
}

message TLMessagesEditChatDefaultBannedRights {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional ChatBannedRights banned_rights = 4;
}

message TLMessagesGetEmojiKeywords {
  optional TLConstructor constructor = 1;
  optional string lang_code = 3;
}

message TLMessagesGetEmojiKeywordsDifference {
  optional TLConstructor constructor = 1;
  optional string lang_code = 3;
  optional int32 from_version = 4;
}

message TLMessagesGetEmojiKeywordsLanguages {
  optional TLConstructor constructor = 1;
  repeated string lang_codes = 3;
}

message TLMessagesGetEmojiURL {
  optional TLConstructor constructor = 1;
  optional string lang_code = 3;
}

message TLMessagesGetSearchCounters {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
  repeated MessagesFilter filters = 5;
}

message TLMessagesRequestUrlAuth {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value msg_id = 4;
  optional google.protobuf.Int32Value button_id = 5;
  optional google.protobuf.StringValue url = 6;
}

message TLMessagesAcceptUrlAuth {
  optional TLConstructor constructor = 1;
  optional bool write_allowed = 3;
  optional InputPeer peer = 4;
  optional google.protobuf.Int32Value msg_id = 5;
  optional google.protobuf.Int32Value button_id = 6;
  optional google.protobuf.StringValue url = 7;
}

message TLMessagesHidePeerSettingsBar {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesGetScheduledHistory {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int64 hash = 4;
}

message TLMessagesGetScheduledMessages {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLMessagesSendScheduledMessages {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLMessagesDeleteScheduledMessages {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLMessagesGetPollVotes {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional bytes option = 5;
  optional google.protobuf.StringValue offset = 6;
  optional int32 limit = 7;
}

message TLMessagesToggleStickerSets {
  optional TLConstructor constructor = 1;
  optional bool uninstall = 3;
  optional bool archive = 4;
  optional bool unarchive = 5;
  repeated InputStickerSet stickersets = 6;
}

message TLMessagesGetDialogFilters {
  optional TLConstructor constructor = 1;
}

message TLMessagesGetSuggestedDialogFilters {
  optional TLConstructor constructor = 1;
}

message TLMessagesUpdateDialogFilter {
  optional TLConstructor constructor = 1;
  optional int32 id = 3;
  optional DialogFilter filter = 4;
}

message TLMessagesUpdateDialogFiltersOrder {
  optional TLConstructor constructor = 1;
  repeated int32 order = 3;
}

message TLMessagesGetOldFeaturedStickers {
  optional TLConstructor constructor = 1;
  optional int32 offset = 3;
  optional int32 limit = 4;
  optional int64 hash = 5;
}

message TLMessagesGetReplies {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
  optional int32 offset_id = 5;
  optional int32 offset_date = 6;
  optional int32 add_offset = 7;
  optional int32 limit = 8;
  optional int32 max_id = 9;
  optional int32 min_id = 10;
  optional int64 hash = 11;
}

message TLMessagesGetDiscussionMessage {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLMessagesReadDiscussion {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
  optional int32 read_max_id = 5;
}

message TLMessagesUnpinAllMessages {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
}

message TLMessagesDeleteChat {
  optional TLConstructor constructor = 1;
  optional int64 chat_id = 3;
}

message TLMessagesDeletePhoneCallHistory {
  optional TLConstructor constructor = 1;
  optional bool revoke = 3;
}

message TLMessagesCheckHistoryImport {
  optional TLConstructor constructor = 1;
  optional string import_head = 3;
}

message TLMessagesInitHistoryImport {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputFile file = 4;
  optional int32 media_count = 5;
}

message TLMessagesUploadImportedMedia {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int64 import_id = 4;
  optional string file_name = 5;
  optional InputMedia media = 6;
}

message TLMessagesStartHistoryImport {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int64 import_id = 4;
}

message TLMessagesGetExportedChatInvites {
  optional TLConstructor constructor = 1;
  optional bool revoked = 3;
  optional InputPeer peer = 4;
  optional InputUser admin_id = 5;
  optional google.protobuf.Int32Value offset_date = 6;
  optional google.protobuf.StringValue offset_link = 7;
  optional int32 limit = 8;
}

message TLMessagesGetExportedChatInvite {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string link = 4;
}

message TLMessagesEditExportedChatInvite {
  optional TLConstructor constructor = 1;
  optional bool revoked = 3;
  optional InputPeer peer = 4;
  optional string link = 5;
  optional google.protobuf.Int32Value expire_date = 6;
  optional google.protobuf.Int32Value usage_limit = 7;
  optional Bool request_needed = 8;
  optional google.protobuf.StringValue title = 9;
}

message TLMessagesDeleteRevokedExportedChatInvites {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputUser admin_id = 4;
}

message TLMessagesDeleteExportedChatInvite {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string link = 4;
}

message TLMessagesGetAdminsWithInvites {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesGetChatInviteImporters {
  optional TLConstructor constructor = 1;
  optional bool requested = 3;
  optional InputPeer peer = 4;
  optional google.protobuf.StringValue link = 5;
  optional google.protobuf.StringValue q = 6;
  optional int32 offset_date = 7;
  optional InputUser offset_user = 8;
  optional int32 limit = 9;
}

message TLMessagesSetHistoryTTL {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 period = 4;
}

message TLMessagesCheckHistoryImportPeer {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesSetChatTheme {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string emoticon = 4;
}

message TLMessagesGetMessageReadParticipants31C1C44F {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLMessagesGetSearchResultsCalendar {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional MessagesFilter filter = 4;
  optional int32 offset_id = 5;
  optional int32 offset_date = 6;
}

message TLMessagesGetSearchResultsPositions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional MessagesFilter filter = 4;
  optional int32 offset_id = 5;
  optional int32 limit = 6;
}

message TLMessagesHideChatJoinRequest {
  optional TLConstructor constructor = 1;
  optional bool approved = 3;
  optional InputPeer peer = 4;
  optional InputUser user_id = 5;
}

message TLMessagesHideAllChatJoinRequests {
  optional TLConstructor constructor = 1;
  optional bool approved = 3;
  optional InputPeer peer = 4;
  optional google.protobuf.StringValue link = 5;
}

message TLMessagesToggleNoForwards {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional Bool enabled = 4;
}

message TLMessagesSaveDefaultSendAs {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputPeer send_as = 4;
}

message TLMessagesSendReaction {
  optional TLConstructor constructor = 1;
  optional bool big = 3;
  optional bool add_to_recent = 4;
  optional InputPeer peer = 5;
  optional int32 msg_id = 6;
  repeated Reaction reaction_FLAGVECTORREACTION = 7;
  optional google.protobuf.StringValue reaction_FLAGSTRING = 8;
}

message TLMessagesGetMessagesReactions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLMessagesGetMessageReactionsList {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional Reaction reaction_FLAGREACTION = 5;
  optional google.protobuf.StringValue offset = 6;
  optional int32 limit = 7;
  optional google.protobuf.StringValue reaction_FLAGSTRING = 8;
}

message TLMessagesSetChatAvailableReactions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional ChatReactions available_reactions_CHATREACTIONS = 4;
  repeated string available_reactions_VECTORSTRING = 5;
}

message TLMessagesGetAvailableReactions {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLMessagesSetDefaultReaction {
  optional TLConstructor constructor = 1;
  optional Reaction reaction_REACTION = 3;
  optional string reaction_STRING = 4;
}

message TLMessagesTranslateText {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  repeated TextWithEntities text_FLAGVECTORTEXTWITHENTITIES = 5;
  optional string to_lang = 6;
  optional google.protobuf.Int32Value msg_id = 7;
  optional google.protobuf.StringValue text_FLAGSTRING = 8;
  optional google.protobuf.StringValue from_lang = 9;
}

message TLMessagesGetUnreadReactions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
  optional int32 offset_id = 5;
  optional int32 add_offset = 6;
  optional int32 limit = 7;
  optional int32 max_id = 8;
  optional int32 min_id = 9;
}

message TLMessagesReadReactions {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional google.protobuf.Int32Value top_msg_id = 4;
}

message TLMessagesSearchSentMedia {
  optional TLConstructor constructor = 1;
  optional string q = 3;
  optional MessagesFilter filter = 4;
  optional int32 limit = 5;
}

message TLMessagesGetAttachMenuBots {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesGetAttachMenuBot {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
}

message TLMessagesToggleBotInAttachMenu {
  optional TLConstructor constructor = 1;
  optional bool write_allowed = 3;
  optional InputUser bot = 4;
  optional Bool enabled = 5;
}

message TLMessagesRequestWebView {
  optional TLConstructor constructor = 1;
  optional bool from_bot_menu = 3;
  optional bool silent = 4;
  optional InputPeer peer = 5;
  optional InputUser bot = 6;
  optional google.protobuf.StringValue url = 7;
  optional google.protobuf.StringValue start_param = 8;
  optional DataJSON theme_params = 9;
  optional string platform = 10;
  optional InputReplyTo reply_to = 11;
  optional InputPeer send_as = 12;
  optional google.protobuf.Int32Value reply_to_msg_id = 13;
  optional google.protobuf.Int32Value top_msg_id = 14;
}

message TLMessagesProlongWebView {
  optional TLConstructor constructor = 1;
  optional bool silent = 3;
  optional InputPeer peer = 4;
  optional InputUser bot = 5;
  optional int64 query_id = 6;
  optional InputReplyTo reply_to = 7;
  optional InputPeer send_as = 8;
  optional google.protobuf.Int32Value reply_to_msg_id = 9;
  optional google.protobuf.Int32Value top_msg_id = 10;
}

message TLMessagesRequestSimpleWebView {
  optional TLConstructor constructor = 1;
  optional bool from_switch_webview = 3;
  optional bool from_side_menu = 4;
  optional InputUser bot = 5;
  optional google.protobuf.StringValue url_FLAGSTRING = 6;
  optional google.protobuf.StringValue start_param = 7;
  optional DataJSON theme_params = 8;
  optional string platform = 9;
  optional string url_STRING = 10;
}

message TLMessagesSendWebViewResultMessage {
  optional TLConstructor constructor = 1;
  optional string bot_query_id = 3;
  optional InputBotInlineResult result = 4;
}

message TLMessagesSendWebViewData {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional int64 random_id = 4;
  optional string button_text = 5;
  optional string data = 6;
}

message TLMessagesTranscribeAudio {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLMessagesRateTranscribedAudio {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
  optional int64 transcription_id = 5;
  optional Bool good = 6;
}

message TLMessagesGetCustomEmojiDocuments {
  optional TLConstructor constructor = 1;
  repeated int64 document_id = 3;
}

message TLMessagesGetEmojiStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesGetFeaturedEmojiStickers {
  optional TLConstructor constructor = 1;
  optional int64 hash = 3;
}

message TLMessagesReportReaction {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional InputPeer reaction_peer = 5;
}

message TLMessagesGetTopReactions {
  optional TLConstructor constructor = 1;
  optional int32 limit = 3;
  optional int64 hash = 4;
}

message TLMessagesGetRecentReactions {
  optional TLConstructor constructor = 1;
  optional int32 limit = 3;
  optional int64 hash = 4;
}

message TLMessagesClearRecentReactions {
  optional TLConstructor constructor = 1;
}

message TLMessagesGetExtendedMedia {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLMessagesSetDefaultHistoryTTL {
  optional TLConstructor constructor = 1;
  optional int32 period = 3;
}

message TLMessagesGetDefaultHistoryTTL {
  optional TLConstructor constructor = 1;
}

message TLMessagesSendBotRequestedPeer {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
  optional int32 button_id = 5;
  optional InputPeer requested_peer = 6;
}

message TLMessagesGetEmojiGroups {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLMessagesGetEmojiStatusGroups {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLMessagesGetEmojiProfilePhotoGroups {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLMessagesSearchCustomEmoji {
  optional TLConstructor constructor = 1;
  optional string emoticon = 3;
  optional int64 hash = 4;
}

message TLMessagesTogglePeerTranslations {
  optional TLConstructor constructor = 1;
  optional bool disabled = 3;
  optional InputPeer peer = 4;
}

message TLMessagesGetBotApp {
  optional TLConstructor constructor = 1;
  optional InputBotApp app = 3;
  optional int64 hash = 4;
}

message TLMessagesRequestAppWebView {
  optional TLConstructor constructor = 1;
  optional bool write_allowed = 3;
  optional InputPeer peer = 4;
  optional InputBotApp app = 5;
  optional google.protobuf.StringValue start_param = 6;
  optional DataJSON theme_params = 7;
  optional string platform = 8;
}

message TLMessagesSetChatWallPaper {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputWallPaper wallpaper = 4;
  optional WallPaperSettings settings = 5;
  optional google.protobuf.Int32Value id = 6;
}

message TLUpdatesGetState {
  optional TLConstructor constructor = 1;
}

message TLUpdatesGetDifference {
  optional TLConstructor constructor = 1;
  optional int32 pts = 3;
  optional google.protobuf.Int32Value pts_limit = 4;
  optional google.protobuf.Int32Value pts_total_limit = 5;
  optional int32 date = 6;
  optional int32 qts = 7;
  optional google.protobuf.Int32Value qts_limit = 8;
}

message TLUpdatesGetChannelDifference {
  optional TLConstructor constructor = 1;
  optional bool force = 3;
  optional InputChannel channel = 4;
  optional ChannelMessagesFilter filter = 5;
  optional int32 pts = 6;
  optional int32 limit = 7;
}

message TLPhotosUpdateProfilePhoto {
  optional TLConstructor constructor = 1;
  optional bool fallback = 3;
  optional InputUser bot = 4;
  optional InputPhoto id = 5;
}

message TLPhotosUploadProfilePhoto {
  optional TLConstructor constructor = 1;
  optional bool fallback = 3;
  optional InputUser bot = 4;
  optional InputFile file = 5;
  optional InputFile video = 6;
  optional google.protobuf.DoubleValue video_start_ts = 7;
  optional VideoSize video_emoji_markup = 8;
}

message TLPhotosDeletePhotos {
  optional TLConstructor constructor = 1;
  repeated InputPhoto id = 3;
}

message TLPhotosGetUserPhotos {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional int32 offset = 4;
  optional int64 max_id = 5;
  optional int32 limit = 6;
}

message TLPhotosUploadContactProfilePhoto {
  optional TLConstructor constructor = 1;
  optional bool suggest = 3;
  optional bool save = 4;
  optional InputUser user_id = 5;
  optional InputFile file = 6;
  optional InputFile video = 7;
  optional google.protobuf.DoubleValue video_start_ts = 8;
  optional VideoSize video_emoji_markup = 9;
}

message TLUploadSaveFilePart {
  optional TLConstructor constructor = 1;
  optional int64 file_id = 3;
  optional int32 file_part = 4;
  optional bytes bytes = 5;
}

message TLUploadGetFile {
  optional TLConstructor constructor = 1;
  optional bool precise = 3;
  optional bool cdn_supported = 4;
  optional InputFileLocation location = 5;
  optional int64 offset_INT64 = 6;
  optional int32 limit = 7;
  optional int32 offset_INT32 = 8;
}

message TLUploadSaveBigFilePart {
  optional TLConstructor constructor = 1;
  optional int64 file_id = 3;
  optional int32 file_part = 4;
  optional int32 file_total_parts = 5;
  optional bytes bytes = 6;
}

message TLUploadGetWebFile {
  optional TLConstructor constructor = 1;
  optional InputWebFileLocation location = 3;
  optional int32 offset = 4;
  optional int32 limit = 5;
}

message TLUploadGetCdnFile {
  optional TLConstructor constructor = 1;
  optional bytes file_token = 3;
  optional int64 offset_INT64 = 4;
  optional int32 limit = 5;
  optional int32 offset_INT32 = 6;
}

message TLUploadReuploadCdnFile {
  optional TLConstructor constructor = 1;
  optional bytes file_token = 3;
  optional bytes request_token = 4;
}

message TLUploadGetCdnFileHashes {
  optional TLConstructor constructor = 1;
  optional bytes file_token = 3;
  optional int64 offset_INT64 = 4;
  optional int32 offset_INT32 = 5;
}

message TLUploadGetFileHashes {
  optional TLConstructor constructor = 1;
  optional InputFileLocation location = 3;
  optional int64 offset_INT64 = 4;
  optional int32 offset_INT32 = 5;
}

message TLHelpGetConfig {
  optional TLConstructor constructor = 1;
}

message TLHelpGetNearestDc {
  optional TLConstructor constructor = 1;
}

message TLHelpGetAppUpdate {
  optional TLConstructor constructor = 1;
  optional string source = 3;
}

message TLHelpGetInviteText {
  optional TLConstructor constructor = 1;
}

message TLHelpGetSupport {
  optional TLConstructor constructor = 1;
}

message TLHelpGetAppChangelog {
  optional TLConstructor constructor = 1;
  optional string prev_app_version = 3;
}

message TLHelpSetBotUpdatesStatus {
  optional TLConstructor constructor = 1;
  optional int32 pending_updates_count = 3;
  optional string message = 4;
}

message TLHelpGetCdnConfig {
  optional TLConstructor constructor = 1;
}

message TLHelpGetRecentMeUrls {
  optional TLConstructor constructor = 1;
  optional string referer = 3;
}

message TLHelpGetTermsOfServiceUpdate {
  optional TLConstructor constructor = 1;
}

message TLHelpAcceptTermsOfService {
  optional TLConstructor constructor = 1;
  optional DataJSON id = 3;
}

message TLHelpGetDeepLinkInfo {
  optional TLConstructor constructor = 1;
  optional string path = 3;
}

message TLHelpGetAppConfig61E3F854 {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLHelpSaveAppLog {
  optional TLConstructor constructor = 1;
  repeated InputAppEvent events = 3;
}

message TLHelpGetPassportConfig {
  optional TLConstructor constructor = 1;
  optional int32 hash = 3;
}

message TLHelpGetSupportName {
  optional TLConstructor constructor = 1;
}

message TLHelpGetUserInfo {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
}

message TLHelpEditUserInfo {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional string message = 4;
  repeated MessageEntity entities = 5;
}

message TLHelpGetPromoData {
  optional TLConstructor constructor = 1;
}

message TLHelpHidePromoData {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLHelpDismissSuggestion {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string suggestion = 4;
}

message TLHelpGetCountriesList {
  optional TLConstructor constructor = 1;
  optional string lang_code = 3;
  optional int32 hash = 4;
}

message TLHelpGetPremiumPromo {
  optional TLConstructor constructor = 1;
}

message TLChannelsReadHistory {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 max_id = 4;
}

message TLChannelsDeleteMessages {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated int32 id = 4;
}

message TLChannelsReportSpam {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputPeer participant = 4;
  repeated int32 id = 5;
}

message TLChannelsGetMessages {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated InputMessage id_VECTORINPUTMESSAGE = 4;
  repeated int32 id_VECTORINT32 = 5;
}

message TLChannelsGetParticipants {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional ChannelParticipantsFilter filter = 4;
  optional int32 offset = 5;
  optional int32 limit = 6;
  optional int64 hash = 7;
}

message TLChannelsGetParticipant {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputPeer participant = 4;
}

message TLChannelsGetChannels {
  optional TLConstructor constructor = 1;
  repeated InputChannel id = 3;
}

message TLChannelsGetFullChannel {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsCreateChannel {
  optional TLConstructor constructor = 1;
  optional bool broadcast = 3;
  optional bool megagroup = 4;
  optional bool for_import = 5;
  optional bool forum = 6;
  optional string title = 7;
  optional string about = 8;
  optional InputGeoPoint geo_point = 9;
  optional google.protobuf.StringValue address = 10;
  optional google.protobuf.Int32Value ttl_period = 11;
}

message TLChannelsEditAdmin {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputUser user_id = 4;
  optional ChatAdminRights admin_rights = 5;
  optional string rank = 6;
}

message TLChannelsEditTitle {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string title = 4;
}

message TLChannelsEditPhoto {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputChatPhoto photo = 4;
}

message TLChannelsCheckUsername {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string username = 4;
}

message TLChannelsUpdateUsername {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string username = 4;
}

message TLChannelsJoinChannel {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsLeaveChannel {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsInviteToChannel {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated InputUser users = 4;
}

message TLChannelsDeleteChannel {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsExportMessageLink {
  optional TLConstructor constructor = 1;
  optional bool grouped = 3;
  optional bool thread = 4;
  optional InputChannel channel = 5;
  optional int32 id = 6;
}

message TLChannelsToggleSignatures {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsGetAdminedPublicChannels {
  optional TLConstructor constructor = 1;
  optional bool by_location = 3;
  optional bool check_limit = 4;
}

message TLChannelsEditBanned {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputPeer participant = 4;
  optional ChatBannedRights banned_rights = 5;
}

message TLChannelsGetAdminLog {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string q = 4;
  optional ChannelAdminLogEventsFilter events_filter = 5;
  repeated InputUser admins = 6;
  optional int64 max_id = 7;
  optional int64 min_id = 8;
  optional int32 limit = 9;
}

message TLChannelsSetStickers {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputStickerSet stickerset = 4;
}

message TLChannelsReadMessageContents {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated int32 id = 4;
}

message TLChannelsDeleteHistory9BAA9647 {
  optional TLConstructor constructor = 1;
  optional bool for_everyone = 3;
  optional InputChannel channel = 4;
  optional int32 max_id = 5;
}

message TLChannelsTogglePreHistoryHidden {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsGetLeftChannels {
  optional TLConstructor constructor = 1;
  optional int32 offset = 3;
}

message TLChannelsGetGroupsForDiscussion {
  optional TLConstructor constructor = 1;
}

message TLChannelsSetDiscussionGroup {
  optional TLConstructor constructor = 1;
  optional InputChannel broadcast = 3;
  optional InputChannel group = 4;
}

message TLChannelsEditCreator {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputUser user_id = 4;
  optional InputCheckPasswordSRP password = 5;
}

message TLChannelsEditLocation {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputGeoPoint geo_point = 4;
  optional string address = 5;
}

message TLChannelsToggleSlowMode {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 seconds = 4;
}

message TLChannelsGetInactiveChannels {
  optional TLConstructor constructor = 1;
}

message TLChannelsConvertToGigagroup {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsViewSponsoredMessage {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional bytes random_id = 4;
}

message TLChannelsGetSponsoredMessages {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsGetSendAs {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLChannelsDeleteParticipantHistory {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional InputPeer participant = 4;
}

message TLChannelsToggleJoinToSend {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsToggleJoinRequest {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsReorderUsernames {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated string order = 4;
}

message TLChannelsToggleUsername {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string username = 4;
  optional Bool active = 5;
}

message TLChannelsDeactivateAllUsernames {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
}

message TLChannelsToggleForum {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsCreateForumTopic {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional string title = 4;
  optional google.protobuf.Int32Value icon_color = 5;
  optional google.protobuf.Int64Value icon_emoji_id = 6;
  optional int64 random_id = 7;
  optional InputPeer send_as = 8;
}

message TLChannelsGetForumTopics {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional google.protobuf.StringValue q = 4;
  optional int32 offset_date = 5;
  optional int32 offset_id = 6;
  optional int32 offset_topic = 7;
  optional int32 limit = 8;
}

message TLChannelsGetForumTopicsByID {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  repeated int32 topics = 4;
}

message TLChannelsEditForumTopic {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 topic_id = 4;
  optional google.protobuf.StringValue title = 5;
  optional google.protobuf.Int64Value icon_emoji_id = 6;
  optional Bool closed = 7;
  optional Bool hidden = 8;
}

message TLChannelsUpdatePinnedForumTopic {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 topic_id = 4;
  optional Bool pinned = 5;
}

message TLChannelsDeleteTopicHistory {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 top_msg_id = 4;
}

message TLChannelsReorderPinnedForumTopics {
  optional TLConstructor constructor = 1;
  optional bool force = 3;
  optional InputChannel channel = 4;
  repeated int32 order = 5;
}

message TLChannelsToggleAntiSpam {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsReportAntiSpamFalsePositive {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 msg_id = 4;
}

message TLChannelsToggleParticipantsHidden {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional Bool enabled = 4;
}

message TLChannelsClickSponsoredMessage {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional bytes random_id = 4;
}

message TLBotsSendCustomRequest {
  optional TLConstructor constructor = 1;
  optional string custom_method = 3;
  optional DataJSON params = 4;
}

message TLBotsAnswerWebhookJSONQuery {
  optional TLConstructor constructor = 1;
  optional int64 query_id = 3;
  optional DataJSON data = 4;
}

message TLBotsSetBotCommands {
  optional TLConstructor constructor = 1;
  optional BotCommandScope scope = 3;
  optional string lang_code = 4;
  repeated BotCommand commands = 5;
}

message TLBotsResetBotCommands {
  optional TLConstructor constructor = 1;
  optional BotCommandScope scope = 3;
  optional string lang_code = 4;
}

message TLBotsGetBotCommands {
  optional TLConstructor constructor = 1;
  optional BotCommandScope scope = 3;
  optional string lang_code = 4;
}

message TLBotsSetBotMenuButton {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional BotMenuButton button = 4;
}

message TLBotsGetBotMenuButton {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
}

message TLBotsSetBotBroadcastDefaultAdminRights {
  optional TLConstructor constructor = 1;
  optional ChatAdminRights admin_rights = 3;
}

message TLBotsSetBotGroupDefaultAdminRights {
  optional TLConstructor constructor = 1;
  optional ChatAdminRights admin_rights = 3;
}

message TLBotsSetBotInfo {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional string lang_code = 4;
  optional google.protobuf.StringValue name = 5;
  optional google.protobuf.StringValue about = 6;
  optional google.protobuf.StringValue description = 7;
}

message TLBotsGetBotInfoDCD914FD {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional string lang_code = 4;
}

message TLBotsReorderUsernames {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  repeated string order = 4;
}

message TLBotsToggleUsername {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional string username = 4;
  optional Bool active = 5;
}

message TLBotsCanSendMessage {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
}

message TLBotsAllowSendMessage {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
}

message TLBotsInvokeWebViewCustomMethod {
  optional TLConstructor constructor = 1;
  optional InputUser bot = 3;
  optional string custom_method = 4;
  optional DataJSON params = 5;
}

message TLPaymentsGetPaymentForm {
  optional TLConstructor constructor = 1;
  optional InputInvoice invoice = 3;
  optional DataJSON theme_params = 4;
  optional InputPeer peer = 5;
  optional int32 msg_id = 6;
}

message TLPaymentsGetPaymentReceipt {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLPaymentsValidateRequestedInfo {
  optional TLConstructor constructor = 1;
  optional bool save = 3;
  optional InputInvoice invoice = 4;
  optional PaymentRequestedInfo info = 5;
  optional InputPeer peer = 6;
  optional int32 msg_id = 7;
}

message TLPaymentsSendPaymentForm {
  optional TLConstructor constructor = 1;
  optional int64 form_id = 3;
  optional InputInvoice invoice = 4;
  optional google.protobuf.StringValue requested_info_id = 5;
  optional google.protobuf.StringValue shipping_option_id = 6;
  optional InputPaymentCredentials credentials = 7;
  optional google.protobuf.Int64Value tip_amount = 8;
  optional InputPeer peer = 9;
  optional int32 msg_id = 10;
}

message TLPaymentsGetSavedInfo {
  optional TLConstructor constructor = 1;
}

message TLPaymentsClearSavedInfo {
  optional TLConstructor constructor = 1;
  optional bool credentials = 3;
  optional bool info = 4;
}

message TLPaymentsGetBankCardData {
  optional TLConstructor constructor = 1;
  optional string number = 3;
}

message TLPaymentsExportInvoice {
  optional TLConstructor constructor = 1;
  optional InputMedia invoice_media = 3;
  optional InputUser user_id = 4;
}

message TLPaymentsAssignAppStoreTransaction {
  optional TLConstructor constructor = 1;
  optional bytes receipt = 3;
  optional InputStorePaymentPurpose purpose = 4;
  optional bool restore = 5;
  optional string transaction_id = 6;
}

message TLPaymentsAssignPlayMarketTransaction {
  optional TLConstructor constructor = 1;
  optional DataJSON receipt = 3;
  optional InputStorePaymentPurpose purpose = 4;
  optional string purchase_token = 5;
}

message TLPaymentsCanPurchasePremium {
  optional TLConstructor constructor = 1;
  optional InputStorePaymentPurpose purpose = 3;
}

message TLStickersCreateStickerSet {
  optional TLConstructor constructor = 1;
  optional bool masks = 3;
  optional bool animated = 4;
  optional bool videos = 5;
  optional bool emojis = 6;
  optional bool text_color = 7;
  optional InputUser user_id = 8;
  optional string title = 9;
  optional string short_name = 10;
  optional InputDocument thumb = 11;
  repeated InputStickerSetItem stickers = 12;
  optional google.protobuf.StringValue software = 13;
}

message TLStickersRemoveStickerFromSet {
  optional TLConstructor constructor = 1;
  optional InputDocument sticker = 3;
}

message TLStickersChangeStickerPosition {
  optional TLConstructor constructor = 1;
  optional InputDocument sticker = 3;
  optional int32 position = 4;
}

message TLStickersAddStickerToSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
  optional InputStickerSetItem sticker = 4;
}

message TLStickersSetStickerSetThumb {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
  optional InputDocument thumb = 4;
  optional google.protobuf.Int64Value thumb_document_id = 5;
}

message TLStickersCheckShortName {
  optional TLConstructor constructor = 1;
  optional string short_name = 3;
}

message TLStickersSuggestShortName {
  optional TLConstructor constructor = 1;
  optional string title = 3;
}

message TLStickersChangeSticker {
  optional TLConstructor constructor = 1;
  optional InputDocument sticker = 3;
  optional google.protobuf.StringValue emoji = 4;
  optional MaskCoords mask_coords = 5;
  optional google.protobuf.StringValue keywords = 6;
}

message TLStickersRenameStickerSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
  optional string title = 4;
}

message TLStickersDeleteStickerSet {
  optional TLConstructor constructor = 1;
  optional InputStickerSet stickerset = 3;
}

message TLPhoneGetCallConfig {
  optional TLConstructor constructor = 1;
}

message TLPhoneRequestCall {
  optional TLConstructor constructor = 1;
  optional bool video = 3;
  optional InputUser user_id = 4;
  optional int32 random_id = 5;
  optional bytes g_a_hash = 6;
  optional PhoneCallProtocol protocol = 7;
}

message TLPhoneAcceptCall {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
  optional bytes g_b = 4;
  optional PhoneCallProtocol protocol = 5;
}

message TLPhoneConfirmCall {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
  optional bytes g_a = 4;
  optional int64 key_fingerprint = 5;
  optional PhoneCallProtocol protocol = 6;
}

message TLPhoneReceivedCall {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
}

message TLPhoneDiscardCall {
  optional TLConstructor constructor = 1;
  optional bool video = 3;
  optional InputPhoneCall peer = 4;
  optional int32 duration = 5;
  optional PhoneCallDiscardReason reason = 6;
  optional int64 connection_id = 7;
}

message TLPhoneSetCallRating {
  optional TLConstructor constructor = 1;
  optional bool user_initiative = 3;
  optional InputPhoneCall peer = 4;
  optional int32 rating = 5;
  optional string comment = 6;
}

message TLPhoneSaveCallDebug {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
  optional DataJSON debug = 4;
}

message TLPhoneSendSignalingData {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
  optional bytes data = 4;
}

message TLPhoneCreateGroupCall {
  optional TLConstructor constructor = 1;
  optional bool rtmp_stream = 3;
  optional InputPeer peer = 4;
  optional int32 random_id = 5;
  optional google.protobuf.StringValue title = 6;
  optional google.protobuf.Int32Value schedule_date = 7;
}

message TLPhoneJoinGroupCall {
  optional TLConstructor constructor = 1;
  optional bool muted = 3;
  optional bool video_stopped = 4;
  optional InputGroupCall call = 5;
  optional InputPeer join_as = 6;
  optional google.protobuf.StringValue invite_hash = 7;
  optional DataJSON params = 8;
}

message TLPhoneLeaveGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional int32 source = 4;
}

message TLPhoneInviteToGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  repeated InputUser users = 4;
}

message TLPhoneDiscardGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
}

message TLPhoneToggleGroupCallSettings {
  optional TLConstructor constructor = 1;
  optional bool reset_invite_hash = 3;
  optional InputGroupCall call = 4;
  optional Bool join_muted = 5;
}

message TLPhoneGetGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional int32 limit = 4;
}

message TLPhoneGetGroupParticipants {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  repeated InputPeer ids = 4;
  repeated int32 sources = 5;
  optional string offset = 6;
  optional int32 limit = 7;
}

message TLPhoneCheckGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  repeated int32 sources = 4;
}

message TLPhoneToggleGroupCallRecord {
  optional TLConstructor constructor = 1;
  optional bool start = 3;
  optional bool video = 4;
  optional InputGroupCall call = 5;
  optional google.protobuf.StringValue title = 6;
  optional Bool video_portrait = 7;
}

message TLPhoneEditGroupCallParticipant {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional InputPeer participant = 4;
  optional Bool muted = 5;
  optional google.protobuf.Int32Value volume = 6;
  optional Bool raise_hand = 7;
  optional Bool video_stopped = 8;
  optional Bool video_paused = 9;
  optional Bool presentation_paused = 10;
}

message TLPhoneEditGroupCallTitle {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional string title = 4;
}

message TLPhoneGetGroupCallJoinAs {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLPhoneExportGroupCallInvite {
  optional TLConstructor constructor = 1;
  optional bool can_self_unmute = 3;
  optional InputGroupCall call = 4;
}

message TLPhoneToggleGroupCallStartSubscription {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional Bool subscribed = 4;
}

message TLPhoneStartScheduledGroupCall {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
}

message TLPhoneSaveDefaultGroupCallJoinAs {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional InputPeer join_as = 4;
}

message TLPhoneJoinGroupCallPresentation {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
  optional DataJSON params = 4;
}

message TLPhoneLeaveGroupCallPresentation {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
}

message TLPhoneGetGroupCallStreamChannels {
  optional TLConstructor constructor = 1;
  optional InputGroupCall call = 3;
}

message TLPhoneGetGroupCallStreamRtmpUrl {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional Bool revoke = 4;
}

message TLPhoneSaveCallLog {
  optional TLConstructor constructor = 1;
  optional InputPhoneCall peer = 3;
  optional InputFile file = 4;
}

message TLLangpackGetLangPack {
  optional TLConstructor constructor = 1;
  optional string lang_pack = 3;
  optional string lang_code = 4;
}

message TLLangpackGetStrings {
  optional TLConstructor constructor = 1;
  optional string lang_pack = 3;
  optional string lang_code = 4;
  repeated string keys = 5;
}

message TLLangpackGetDifference {
  optional TLConstructor constructor = 1;
  optional string lang_pack = 3;
  optional string lang_code = 4;
  optional int32 from_version = 5;
}

message TLLangpackGetLanguages {
  optional TLConstructor constructor = 1;
  optional string lang_pack = 3;
}

message TLLangpackGetLanguage {
  optional TLConstructor constructor = 1;
  optional string lang_pack = 3;
  optional string lang_code = 4;
}

message TLFoldersEditPeerFolders {
  optional TLConstructor constructor = 1;
  repeated InputFolderPeer folder_peers = 3;
}

message TLStatsGetBroadcastStats {
  optional TLConstructor constructor = 1;
  optional bool dark = 3;
  optional InputChannel channel = 4;
}

message TLStatsLoadAsyncGraph {
  optional TLConstructor constructor = 1;
  optional string token = 3;
  optional google.protobuf.Int64Value x = 4;
}

message TLStatsGetMegagroupStats {
  optional TLConstructor constructor = 1;
  optional bool dark = 3;
  optional InputChannel channel = 4;
}

message TLStatsGetMessagePublicForwards {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 msg_id = 4;
  optional int32 offset_rate = 5;
  optional InputPeer offset_peer = 6;
  optional int32 offset_id = 7;
  optional int32 limit = 8;
}

message TLStatsGetMessageStats {
  optional TLConstructor constructor = 1;
  optional bool dark = 3;
  optional InputChannel channel = 4;
  optional int32 msg_id = 5;
}

message TLChatlistsExportChatlistInvite {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
  optional string title = 4;
  repeated InputPeer peers = 5;
}

message TLChatlistsDeleteExportedInvite {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
  optional string slug = 4;
}

message TLChatlistsEditExportedInvite {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
  optional string slug = 4;
  optional google.protobuf.StringValue title = 5;
  repeated InputPeer peers = 6;
}

message TLChatlistsGetExportedInvites {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
}

message TLChatlistsCheckChatlistInvite {
  optional TLConstructor constructor = 1;
  optional string slug = 3;
}

message TLChatlistsJoinChatlistInvite {
  optional TLConstructor constructor = 1;
  optional string slug = 3;
  repeated InputPeer peers = 4;
}

message TLChatlistsGetChatlistUpdates {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
}

message TLChatlistsJoinChatlistUpdates {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
  repeated InputPeer peers = 4;
}

message TLChatlistsHideChatlistUpdates {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
}

message TLChatlistsGetLeaveChatlistSuggestions {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
}

message TLChatlistsLeaveChatlist {
  optional TLConstructor constructor = 1;
  optional InputChatlist chatlist = 3;
  repeated InputPeer peers = 4;
}

message TLStoriesCanSendStory {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLStoriesSendStory {
  optional TLConstructor constructor = 1;
  optional bool pinned = 3;
  optional bool noforwards = 4;
  optional InputPeer peer = 5;
  optional InputMedia media = 6;
  repeated MediaArea media_areas = 7;
  optional google.protobuf.StringValue caption = 8;
  repeated MessageEntity entities = 9;
  repeated InputPrivacyRule privacy_rules = 10;
  optional int64 random_id = 11;
  optional google.protobuf.Int32Value period = 12;
}

message TLStoriesEditStory {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional InputMedia media = 5;
  repeated MediaArea media_areas = 6;
  optional google.protobuf.StringValue caption = 7;
  repeated MessageEntity entities = 8;
  repeated InputPrivacyRule privacy_rules = 9;
}

message TLStoriesDeleteStories {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLStoriesTogglePinned {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional Bool pinned = 5;
}

message TLStoriesGetAllStories {
  optional TLConstructor constructor = 1;
  optional bool next = 3;
  optional bool hidden = 4;
  optional google.protobuf.StringValue state = 5;
}

message TLStoriesGetPinnedStories {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 offset_id = 4;
  optional int32 limit = 5;
  optional InputUser user_id = 6;
}

message TLStoriesGetStoriesArchive {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 offset_id = 4;
  optional int32 limit = 5;
}

message TLStoriesGetStoriesByID {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional InputUser user_id = 5;
}

message TLStoriesToggleAllStoriesHidden {
  optional TLConstructor constructor = 1;
  optional Bool hidden = 3;
}

message TLStoriesReadStories {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 max_id = 4;
  optional InputUser user_id = 5;
}

message TLStoriesIncrementStoryViews {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional InputUser user_id = 5;
}

message TLStoriesGetStoryViewsList {
  optional TLConstructor constructor = 1;
  optional bool just_contacts = 3;
  optional bool reactions_first = 4;
  optional InputPeer peer = 5;
  optional google.protobuf.StringValue q = 6;
  optional int32 id = 7;
  optional string offset = 8;
  optional int32 limit = 9;
  optional int32 offset_date = 10;
  optional int64 offset_id = 11;
}

message TLStoriesGetStoriesViews {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
}

message TLStoriesExportStoryLink {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 id = 4;
  optional InputUser user_id = 5;
}

message TLStoriesReport {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  repeated int32 id = 4;
  optional ReportReason reason = 5;
  optional string message = 6;
  optional InputUser user_id = 7;
}

message TLStoriesActivateStealthMode {
  optional TLConstructor constructor = 1;
  optional bool past = 3;
  optional bool future = 4;
}

message TLStoriesSendReaction {
  optional TLConstructor constructor = 1;
  optional bool add_to_recent = 3;
  optional InputPeer peer = 4;
  optional int32 story_id = 5;
  optional Reaction reaction = 6;
  optional InputUser user_id = 7;
}

message TLStoriesGetPeerStories {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLStoriesGetAllReadPeerStories {
  optional TLConstructor constructor = 1;
}

message TLStoriesGetPeerMaxIDs {
  optional TLConstructor constructor = 1;
  repeated InputPeer id = 3;
}

message TLStoriesGetChatsToSend {
  optional TLConstructor constructor = 1;
}

message TLStoriesTogglePeerStoriesHidden {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional Bool hidden = 4;
}

message TLStoriesGetBoostsStatus {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLStoriesGetBoostersList {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional string offset = 4;
  optional int32 limit = 5;
}

message TLStoriesCanApplyBoost {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLStoriesApplyBoost {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
}

message TLMessagesGetWebPage32CA8F91 {
  optional TLConstructor constructor = 1;
  optional string url = 3;
  optional int32 hash = 4;
}

message TLUsersGetStoriesMaxIDs {
  optional TLConstructor constructor = 1;
  repeated InputUser id = 3;
}

message TLContactsToggleStoriesHidden {
  optional TLConstructor constructor = 1;
  optional InputUser id = 3;
  optional Bool hidden = 4;
}

message TLStoriesGetUserStories {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
}

message TLStoriesGetAllReadUserStories {
  optional TLConstructor constructor = 1;
}

message TLMessagesGetAllChats {
  optional TLConstructor constructor = 1;
  repeated int64 except_ids = 3;
}

message TLBotsGetBotInfo75EC12E6 {
  optional TLConstructor constructor = 1;
  optional string lang_code = 3;
}

message TLFoldersDeleteFolder {
  optional TLConstructor constructor = 1;
  optional int32 folder_id = 3;
}

message TLMessagesGetMessageReadParticipants2C6F97B7 {
  optional TLConstructor constructor = 1;
  optional InputPeer peer = 3;
  optional int32 msg_id = 4;
}

message TLHelpGetAppConfig98914110 {
  optional TLConstructor constructor = 1;
}

message TLAccountVerifyEmailECBA39DB {
  optional TLConstructor constructor = 1;
  optional string email = 3;
  optional string code = 4;
}

message TLPaymentsRequestRecurringPayment {
  optional TLConstructor constructor = 1;
  optional InputUser user_id = 3;
  optional string recurring_init_charge = 4;
  optional InputMedia invoice_media = 5;
}

message TLPaymentsRestorePlayMarketReceipt {
  optional TLConstructor constructor = 1;
  optional bytes receipt = 3;
}

message TLChannelsDeleteHistoryAF369D42 {
  optional TLConstructor constructor = 1;
  optional InputChannel channel = 3;
  optional int32 max_id = 4;
}

message TLHelpTest {
  optional TLConstructor constructor = 1;
}

message TLPredefinedCreatePredefinedUser {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional google.protobuf.StringValue first_name = 4;
  optional google.protobuf.StringValue last_name = 5;
  optional google.protobuf.StringValue username = 6;
  optional string code = 7;
  optional bool verified = 8;
}

message TLPredefinedUpdatePredefinedUsername {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional string username = 4;
}

message TLPredefinedUpdatePredefinedProfile {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional google.protobuf.StringValue first_name = 4;
  optional google.protobuf.StringValue last_name = 5;
  optional google.protobuf.StringValue about = 6;
}

message TLPredefinedUpdatePredefinedVerified {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional bool verified = 4;
}

message TLPredefinedUpdatePredefinedCode {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional string code = 4;
}

message TLPredefinedGetPredefinedUser {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
}

message TLPredefinedGetPredefinedUsers {
  optional TLConstructor constructor = 1;
}

message TLUsersGetMe {
  optional TLConstructor constructor = 1;
  optional int64 id = 3;
  optional string token = 4;
}

message TLAccountUpdateVerified {
  optional TLConstructor constructor = 1;
  optional int64 id = 3;
  optional bool verified = 4;
}

message TLAuthToggleBan {
  optional TLConstructor constructor = 1;
  optional string phone = 3;
  optional bool predefined = 4;
  optional google.protobuf.Int32Value expires = 5;
  optional google.protobuf.StringValue reason = 6;
}

message TLBizInvokeBizDataRaw {
  optional TLConstructor constructor = 1;
  optional BizDataRaw biz_data = 3;
}

message VectorSecureValue {
  repeated SecureValue datas = 1;
}

message VectorWallPaper {
  repeated WallPaper datas = 1;
}

message VectorUser {
  repeated User datas = 1;
}

message VectorInt {
  repeated int32 datas = 1;
}

message VectorContactStatus {
  repeated ContactStatus datas = 1;
}

message VectorSavedContact {
  repeated SavedContact datas = 1;
}

message VectorReceivedNotifyMessage {
  repeated ReceivedNotifyMessage datas = 1;
}

message VectorLong {
  repeated int64 datas = 1;
}

message VectorStickerSetCovered {
  repeated StickerSetCovered datas = 1;
}

message VectorMessageRange {
  repeated MessageRange datas = 1;
}

message VectorDialogPeer {
  repeated DialogPeer datas = 1;
}

message VectorEmojiLanguage {
  repeated EmojiLanguage datas = 1;
}

message VectorMessagesSearchCounter {
  repeated MessagesSearchCounter datas = 1;
}

message VectorDialogFilter {
  repeated DialogFilter datas = 1;
}

message VectorDialogFilterSuggested {
  repeated DialogFilterSuggested datas = 1;
}

message VectorReadParticipantDate {
  repeated ReadParticipantDate datas = 1;
}

message VectorDocument {
  repeated Document datas = 1;
}

message VectorFileHash {
  repeated FileHash datas = 1;
}

message VectorBotCommand {
  repeated BotCommand datas = 1;
}

message VectorLangPackString {
  repeated LangPackString datas = 1;
}

message VectorLangPackLanguage {
  repeated LangPackLanguage datas = 1;
}

message VectorPeer {
  repeated Peer datas = 1;
}

message VectorString {
  repeated string datas = 1;
}

message VectorPredefinedUser {
  repeated PredefinedUser datas = 1;
}
