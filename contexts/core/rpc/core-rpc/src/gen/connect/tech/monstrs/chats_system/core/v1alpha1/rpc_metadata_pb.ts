// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/core/v1alpha1/rpc_metadata.proto (package metadata, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message metadata.TakeoutMessageRange
 */
export class TakeoutMessageRange extends Message<TakeoutMessageRange> {
  /**
   * @generated from field: int32 min_id = 1;
   */
  minId = 0;

  /**
   * @generated from field: int32 max_id = 2;
   */
  maxId = 0;

  constructor(data?: PartialMessage<TakeoutMessageRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "metadata.TakeoutMessageRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TakeoutMessageRange {
    return new TakeoutMessageRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TakeoutMessageRange {
    return new TakeoutMessageRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TakeoutMessageRange {
    return new TakeoutMessageRange().fromJsonString(jsonString, options);
  }

  static equals(a: TakeoutMessageRange | PlainMessage<TakeoutMessageRange> | undefined, b: TakeoutMessageRange | PlainMessage<TakeoutMessageRange> | undefined): boolean {
    return proto3.util.equals(TakeoutMessageRange, a, b);
  }
}

/**
 * @generated from message metadata.Takeout
 */
export class Takeout extends Message<Takeout> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: repeated metadata.TakeoutMessageRange range = 2;
   */
  range: TakeoutMessageRange[] = [];

  constructor(data?: PartialMessage<Takeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "metadata.Takeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "range", kind: "message", T: TakeoutMessageRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Takeout {
    return new Takeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Takeout {
    return new Takeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Takeout {
    return new Takeout().fromJsonString(jsonString, options);
  }

  static equals(a: Takeout | PlainMessage<Takeout> | undefined, b: Takeout | PlainMessage<Takeout> | undefined): boolean {
    return proto3.util.equals(Takeout, a, b);
  }
}

/**
 * @generated from message metadata.RpcMetadata
 */
export class RpcMetadata extends Message<RpcMetadata> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = "";

  /**
   * @generated from field: string client_addr = 3;
   */
  clientAddr = "";

  /**
   * @generated from field: int64 auth_id = 4;
   */
  authId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 5;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 receive_time = 8;
   */
  receiveTime = protoInt64.zero;

  /**
   * @generated from field: int64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 client_msg_id = 12;
   */
  clientMsgId = protoInt64.zero;

  /**
   * @generated from field: bool is_bot = 13;
   */
  isBot = false;

  /**
   * @generated from field: int32 layer = 14;
   */
  layer = 0;

  /**
   * @generated from field: string client = 15;
   */
  client = "";

  /**
   * @generated from field: bool is_admin = 16;
   */
  isAdmin = false;

  /**
   * @generated from field: repeated metadata.Takeout takeout = 20;
   */
  takeout: Takeout[] = [];

  /**
   * @generated from field: string langpack = 21;
   */
  langpack = "";

  /**
   * @generated from field: int64 perm_auth_key_id = 22;
   */
  permAuthKeyId = protoInt64.zero;

  constructor(data?: PartialMessage<RpcMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "metadata.RpcMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "receive_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "client_msg_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "is_bot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "layer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "client", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "is_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "takeout", kind: "message", T: Takeout, repeated: true },
    { no: 21, name: "langpack", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "perm_auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcMetadata {
    return new RpcMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcMetadata {
    return new RpcMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcMetadata {
    return new RpcMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: RpcMetadata | PlainMessage<RpcMetadata> | undefined, b: RpcMetadata | PlainMessage<RpcMetadata> | undefined): boolean {
    return proto3.util.equals(RpcMetadata, a, b);
  }
}

