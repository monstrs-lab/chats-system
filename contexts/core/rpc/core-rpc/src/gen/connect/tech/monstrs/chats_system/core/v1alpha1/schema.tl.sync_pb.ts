// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/core/v1alpha1/schema.tl.sync.proto (package tech.monstrs.chats_system.core.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DoubleValue, Int32Value, Int64Value, Message as Message$1, proto3, protoInt64, StringValue } from "@bufbuild/protobuf";
import { TLConstructor } from "./schema.tl.crc32_pb.js";
import { Bool } from "./schema.tl.core_types_pb.js";

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountDaysTTL
 */
export class AccountDaysTTL extends Message$1<AccountDaysTTL> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 days = 3;
   */
  days = 0;

  constructor(data?: PartialMessage<AccountDaysTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountDaysTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountDaysTTL {
    return new AccountDaysTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountDaysTTL {
    return new AccountDaysTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountDaysTTL {
    return new AccountDaysTTL().fromJsonString(jsonString, options);
  }

  static equals(a: AccountDaysTTL | PlainMessage<AccountDaysTTL> | undefined, b: AccountDaysTTL | PlainMessage<AccountDaysTTL> | undefined): boolean {
    return proto3.util.equals(AccountDaysTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountDaysTTL
 */
export class TLAccountDaysTTL extends Message$1<TLAccountDaysTTL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountDaysTTL data2 = 1;
   */
  data2: AccountDaysTTL[] = [];

  constructor(data?: PartialMessage<TLAccountDaysTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountDaysTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountDaysTTL, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountDaysTTL {
    return new TLAccountDaysTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountDaysTTL {
    return new TLAccountDaysTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountDaysTTL {
    return new TLAccountDaysTTL().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountDaysTTL | PlainMessage<TLAccountDaysTTL> | undefined, b: TLAccountDaysTTL | PlainMessage<TLAccountDaysTTL> | undefined): boolean {
    return proto3.util.equals(TLAccountDaysTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AppWebViewResult
 */
export class AppWebViewResult extends Message$1<AppWebViewResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<AppWebViewResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AppWebViewResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppWebViewResult {
    return new AppWebViewResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppWebViewResult {
    return new AppWebViewResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppWebViewResult {
    return new AppWebViewResult().fromJsonString(jsonString, options);
  }

  static equals(a: AppWebViewResult | PlainMessage<AppWebViewResult> | undefined, b: AppWebViewResult | PlainMessage<AppWebViewResult> | undefined): boolean {
    return proto3.util.equals(AppWebViewResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAppWebViewResultUrl
 */
export class TLAppWebViewResultUrl extends Message$1<TLAppWebViewResultUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AppWebViewResult data2 = 1;
   */
  data2: AppWebViewResult[] = [];

  constructor(data?: PartialMessage<TLAppWebViewResultUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAppWebViewResultUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AppWebViewResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAppWebViewResultUrl {
    return new TLAppWebViewResultUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAppWebViewResultUrl {
    return new TLAppWebViewResultUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAppWebViewResultUrl {
    return new TLAppWebViewResultUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLAppWebViewResultUrl | PlainMessage<TLAppWebViewResultUrl> | undefined, b: TLAppWebViewResultUrl | PlainMessage<TLAppWebViewResultUrl> | undefined): boolean {
    return proto3.util.equals(TLAppWebViewResultUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuBot
 */
export class AttachMenuBot extends Message$1<AttachMenuBot> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool inactive = 3;
   */
  inactive = false;

  /**
   * @generated from field: bool has_settings = 4;
   */
  hasSettings = false;

  /**
   * @generated from field: bool request_write_access = 5;
   */
  requestWriteAccess = false;

  /**
   * @generated from field: bool show_in_attach_menu = 6;
   */
  showInAttachMenu = false;

  /**
   * @generated from field: bool show_in_side_menu = 7;
   */
  showInSideMenu = false;

  /**
   * @generated from field: bool side_menu_disclaimer_needed = 8;
   */
  sideMenuDisclaimerNeeded = false;

  /**
   * @generated from field: int64 bot_id = 9;
   */
  botId = protoInt64.zero;

  /**
   * @generated from field: string short_name = 10;
   */
  shortName = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType peer_types = 11;
   */
  peerTypes: AttachMenuPeerType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIcon icons = 12;
   */
  icons: AttachMenuBotIcon[] = [];

  constructor(data?: PartialMessage<AttachMenuBot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuBot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_settings", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "request_write_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "show_in_attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "show_in_side_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "side_menu_disclaimer_needed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "peer_types", kind: "message", T: AttachMenuPeerType, repeated: true },
    { no: 12, name: "icons", kind: "message", T: AttachMenuBotIcon, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuBot {
    return new AttachMenuBot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuBot {
    return new AttachMenuBot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuBot {
    return new AttachMenuBot().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuBot | PlainMessage<AttachMenuBot> | undefined, b: AttachMenuBot | PlainMessage<AttachMenuBot> | undefined): boolean {
    return proto3.util.equals(AttachMenuBot, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBot
 */
export class TLAttachMenuBot extends Message$1<TLAttachMenuBot> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBot data2 = 1;
   */
  data2: AttachMenuBot[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBot {
    return new TLAttachMenuBot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBot {
    return new TLAttachMenuBot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBot {
    return new TLAttachMenuBot().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBot | PlainMessage<TLAttachMenuBot> | undefined, b: TLAttachMenuBot | PlainMessage<TLAttachMenuBot> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBot, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIcon
 */
export class AttachMenuBotIcon extends Message$1<AttachMenuBotIcon> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document icon = 4;
   */
  icon: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIconColor colors = 5;
   */
  colors: AttachMenuBotIconColor[] = [];

  constructor(data?: PartialMessage<AttachMenuBotIcon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIcon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "icon", kind: "message", T: Document, repeated: true },
    { no: 5, name: "colors", kind: "message", T: AttachMenuBotIconColor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuBotIcon {
    return new AttachMenuBotIcon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuBotIcon {
    return new AttachMenuBotIcon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuBotIcon {
    return new AttachMenuBotIcon().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuBotIcon | PlainMessage<AttachMenuBotIcon> | undefined, b: AttachMenuBotIcon | PlainMessage<AttachMenuBotIcon> | undefined): boolean {
    return proto3.util.equals(AttachMenuBotIcon, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotIcon
 */
export class TLAttachMenuBotIcon extends Message$1<TLAttachMenuBotIcon> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIcon data2 = 1;
   */
  data2: AttachMenuBotIcon[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBotIcon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotIcon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBotIcon, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBotIcon {
    return new TLAttachMenuBotIcon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBotIcon {
    return new TLAttachMenuBotIcon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBotIcon {
    return new TLAttachMenuBotIcon().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBotIcon | PlainMessage<TLAttachMenuBotIcon> | undefined, b: TLAttachMenuBotIcon | PlainMessage<TLAttachMenuBotIcon> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBotIcon, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIconColor
 */
export class AttachMenuBotIconColor extends Message$1<AttachMenuBotIconColor> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 color = 4;
   */
  color = 0;

  constructor(data?: PartialMessage<AttachMenuBotIconColor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIconColor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "color", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuBotIconColor {
    return new AttachMenuBotIconColor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuBotIconColor {
    return new AttachMenuBotIconColor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuBotIconColor {
    return new AttachMenuBotIconColor().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuBotIconColor | PlainMessage<AttachMenuBotIconColor> | undefined, b: AttachMenuBotIconColor | PlainMessage<AttachMenuBotIconColor> | undefined): boolean {
    return proto3.util.equals(AttachMenuBotIconColor, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotIconColor
 */
export class TLAttachMenuBotIconColor extends Message$1<TLAttachMenuBotIconColor> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotIconColor data2 = 1;
   */
  data2: AttachMenuBotIconColor[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBotIconColor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotIconColor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBotIconColor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBotIconColor {
    return new TLAttachMenuBotIconColor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBotIconColor {
    return new TLAttachMenuBotIconColor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBotIconColor {
    return new TLAttachMenuBotIconColor().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBotIconColor | PlainMessage<TLAttachMenuBotIconColor> | undefined, b: TLAttachMenuBotIconColor | PlainMessage<TLAttachMenuBotIconColor> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBotIconColor, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuBots
 */
export class AttachMenuBots extends Message$1<AttachMenuBots> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBot bots = 4;
   */
  bots: AttachMenuBot[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<AttachMenuBots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuBots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "bots", kind: "message", T: AttachMenuBot, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuBots {
    return new AttachMenuBots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuBots {
    return new AttachMenuBots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuBots {
    return new AttachMenuBots().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuBots | PlainMessage<AttachMenuBots> | undefined, b: AttachMenuBots | PlainMessage<AttachMenuBots> | undefined): boolean {
    return proto3.util.equals(AttachMenuBots, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotsNotModified
 */
export class TLAttachMenuBotsNotModified extends Message$1<TLAttachMenuBotsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBots data2 = 1;
   */
  data2: AttachMenuBots[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBotsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBots, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBotsNotModified {
    return new TLAttachMenuBotsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBotsNotModified {
    return new TLAttachMenuBotsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBotsNotModified {
    return new TLAttachMenuBotsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBotsNotModified | PlainMessage<TLAttachMenuBotsNotModified> | undefined, b: TLAttachMenuBotsNotModified | PlainMessage<TLAttachMenuBotsNotModified> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBotsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBots
 */
export class TLAttachMenuBots extends Message$1<TLAttachMenuBots> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBots data2 = 1;
   */
  data2: AttachMenuBots[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBots, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBots {
    return new TLAttachMenuBots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBots {
    return new TLAttachMenuBots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBots {
    return new TLAttachMenuBots().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBots | PlainMessage<TLAttachMenuBots> | undefined, b: TLAttachMenuBots | PlainMessage<TLAttachMenuBots> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBots, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotsBot
 */
export class AttachMenuBotsBot extends Message$1<AttachMenuBotsBot> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBot bot = 3;
   */
  bot: AttachMenuBot[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<AttachMenuBotsBot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotsBot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "bot", kind: "message", T: AttachMenuBot, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuBotsBot {
    return new AttachMenuBotsBot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuBotsBot {
    return new AttachMenuBotsBot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuBotsBot {
    return new AttachMenuBotsBot().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuBotsBot | PlainMessage<AttachMenuBotsBot> | undefined, b: AttachMenuBotsBot | PlainMessage<AttachMenuBotsBot> | undefined): boolean {
    return proto3.util.equals(AttachMenuBotsBot, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotsBot
 */
export class TLAttachMenuBotsBot extends Message$1<TLAttachMenuBotsBot> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuBotsBot data2 = 1;
   */
  data2: AttachMenuBotsBot[] = [];

  constructor(data?: PartialMessage<TLAttachMenuBotsBot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuBotsBot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuBotsBot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuBotsBot {
    return new TLAttachMenuBotsBot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuBotsBot {
    return new TLAttachMenuBotsBot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuBotsBot {
    return new TLAttachMenuBotsBot().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuBotsBot | PlainMessage<TLAttachMenuBotsBot> | undefined, b: TLAttachMenuBotsBot | PlainMessage<TLAttachMenuBotsBot> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuBotsBot, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType
 */
export class AttachMenuPeerType extends Message$1<AttachMenuPeerType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<AttachMenuPeerType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachMenuPeerType {
    return new AttachMenuPeerType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachMenuPeerType {
    return new AttachMenuPeerType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachMenuPeerType {
    return new AttachMenuPeerType().fromJsonString(jsonString, options);
  }

  static equals(a: AttachMenuPeerType | PlainMessage<AttachMenuPeerType> | undefined, b: AttachMenuPeerType | PlainMessage<AttachMenuPeerType> | undefined): boolean {
    return proto3.util.equals(AttachMenuPeerType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeSameBotPM
 */
export class TLAttachMenuPeerTypeSameBotPM extends Message$1<TLAttachMenuPeerTypeSameBotPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType data2 = 1;
   */
  data2: AttachMenuPeerType[] = [];

  constructor(data?: PartialMessage<TLAttachMenuPeerTypeSameBotPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeSameBotPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuPeerTypeSameBotPM {
    return new TLAttachMenuPeerTypeSameBotPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeSameBotPM {
    return new TLAttachMenuPeerTypeSameBotPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeSameBotPM {
    return new TLAttachMenuPeerTypeSameBotPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuPeerTypeSameBotPM | PlainMessage<TLAttachMenuPeerTypeSameBotPM> | undefined, b: TLAttachMenuPeerTypeSameBotPM | PlainMessage<TLAttachMenuPeerTypeSameBotPM> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuPeerTypeSameBotPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeBotPM
 */
export class TLAttachMenuPeerTypeBotPM extends Message$1<TLAttachMenuPeerTypeBotPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType data2 = 1;
   */
  data2: AttachMenuPeerType[] = [];

  constructor(data?: PartialMessage<TLAttachMenuPeerTypeBotPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeBotPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuPeerTypeBotPM {
    return new TLAttachMenuPeerTypeBotPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeBotPM {
    return new TLAttachMenuPeerTypeBotPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeBotPM {
    return new TLAttachMenuPeerTypeBotPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuPeerTypeBotPM | PlainMessage<TLAttachMenuPeerTypeBotPM> | undefined, b: TLAttachMenuPeerTypeBotPM | PlainMessage<TLAttachMenuPeerTypeBotPM> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuPeerTypeBotPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypePM
 */
export class TLAttachMenuPeerTypePM extends Message$1<TLAttachMenuPeerTypePM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType data2 = 1;
   */
  data2: AttachMenuPeerType[] = [];

  constructor(data?: PartialMessage<TLAttachMenuPeerTypePM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypePM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuPeerTypePM {
    return new TLAttachMenuPeerTypePM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypePM {
    return new TLAttachMenuPeerTypePM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypePM {
    return new TLAttachMenuPeerTypePM().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuPeerTypePM | PlainMessage<TLAttachMenuPeerTypePM> | undefined, b: TLAttachMenuPeerTypePM | PlainMessage<TLAttachMenuPeerTypePM> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuPeerTypePM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeChat
 */
export class TLAttachMenuPeerTypeChat extends Message$1<TLAttachMenuPeerTypeChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType data2 = 1;
   */
  data2: AttachMenuPeerType[] = [];

  constructor(data?: PartialMessage<TLAttachMenuPeerTypeChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuPeerTypeChat {
    return new TLAttachMenuPeerTypeChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeChat {
    return new TLAttachMenuPeerTypeChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeChat {
    return new TLAttachMenuPeerTypeChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuPeerTypeChat | PlainMessage<TLAttachMenuPeerTypeChat> | undefined, b: TLAttachMenuPeerTypeChat | PlainMessage<TLAttachMenuPeerTypeChat> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuPeerTypeChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeBroadcast
 */
export class TLAttachMenuPeerTypeBroadcast extends Message$1<TLAttachMenuPeerTypeBroadcast> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AttachMenuPeerType data2 = 1;
   */
  data2: AttachMenuPeerType[] = [];

  constructor(data?: PartialMessage<TLAttachMenuPeerTypeBroadcast>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAttachMenuPeerTypeBroadcast";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AttachMenuPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAttachMenuPeerTypeBroadcast {
    return new TLAttachMenuPeerTypeBroadcast().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeBroadcast {
    return new TLAttachMenuPeerTypeBroadcast().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAttachMenuPeerTypeBroadcast {
    return new TLAttachMenuPeerTypeBroadcast().fromJsonString(jsonString, options);
  }

  static equals(a: TLAttachMenuPeerTypeBroadcast | PlainMessage<TLAttachMenuPeerTypeBroadcast> | undefined, b: TLAttachMenuPeerTypeBroadcast | PlainMessage<TLAttachMenuPeerTypeBroadcast> | undefined): boolean {
    return proto3.util.equals(TLAttachMenuPeerTypeBroadcast, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthKeyInfo
 */
export class AuthKeyInfo extends Message$1<AuthKeyInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero;

  /**
   * @generated from field: bytes auth_key = 4;
   */
  authKey = new Uint8Array(0);

  /**
   * @generated from field: int32 auth_key_type = 5;
   */
  authKeyType = 0;

  /**
   * @generated from field: int64 perm_auth_key_id = 6;
   */
  permAuthKeyId = protoInt64.zero;

  /**
   * @generated from field: int64 temp_auth_key_id = 7;
   */
  tempAuthKeyId = protoInt64.zero;

  /**
   * @generated from field: int64 media_temp_auth_key_id = 8;
   */
  mediaTempAuthKeyId = protoInt64.zero;

  constructor(data?: PartialMessage<AuthKeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthKeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "auth_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "auth_key_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "perm_auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "temp_auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "media_temp_auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: AuthKeyInfo | PlainMessage<AuthKeyInfo> | undefined, b: AuthKeyInfo | PlainMessage<AuthKeyInfo> | undefined): boolean {
    return proto3.util.equals(AuthKeyInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthKeyInfo
 */
export class TLAuthKeyInfo extends Message$1<TLAuthKeyInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthKeyInfo data2 = 1;
   */
  data2: AuthKeyInfo[] = [];

  constructor(data?: PartialMessage<TLAuthKeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthKeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthKeyInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthKeyInfo {
    return new TLAuthKeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthKeyInfo {
    return new TLAuthKeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthKeyInfo {
    return new TLAuthKeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthKeyInfo | PlainMessage<TLAuthKeyInfo> | undefined, b: TLAuthKeyInfo | PlainMessage<TLAuthKeyInfo> | undefined): boolean {
    return proto3.util.equals(TLAuthKeyInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Authorization
 */
export class Authorization extends Message$1<Authorization> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool current = 3;
   */
  current = false;

  /**
   * @generated from field: bool official_app = 4;
   */
  officialApp = false;

  /**
   * @generated from field: bool password_pending = 5;
   */
  passwordPending = false;

  /**
   * @generated from field: bool encrypted_requests_disabled = 6;
   */
  encryptedRequestsDisabled = false;

  /**
   * @generated from field: bool call_requests_disabled = 7;
   */
  callRequestsDisabled = false;

  /**
   * @generated from field: bool unconfirmed = 8;
   */
  unconfirmed = false;

  /**
   * @generated from field: int64 hash = 9;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: string device_model = 10;
   */
  deviceModel = "";

  /**
   * @generated from field: string platform = 11;
   */
  platform = "";

  /**
   * @generated from field: string system_version = 12;
   */
  systemVersion = "";

  /**
   * @generated from field: int32 api_id = 13;
   */
  apiId = 0;

  /**
   * @generated from field: string app_name = 14;
   */
  appName = "";

  /**
   * @generated from field: string app_version = 15;
   */
  appVersion = "";

  /**
   * @generated from field: int32 date_created = 16;
   */
  dateCreated = 0;

  /**
   * @generated from field: int32 date_active = 17;
   */
  dateActive = 0;

  /**
   * @generated from field: string ip = 18;
   */
  ip = "";

  /**
   * @generated from field: string country = 19;
   */
  country = "";

  /**
   * @generated from field: string region = 20;
   */
  region = "";

  constructor(data?: PartialMessage<Authorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Authorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "current", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "official_app", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "password_pending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "encrypted_requests_disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "call_requests_disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "unconfirmed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "device_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "system_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "api_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "app_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "date_created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "date_active", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authorization {
    return new Authorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJsonString(jsonString, options);
  }

  static equals(a: Authorization | PlainMessage<Authorization> | undefined, b: Authorization | PlainMessage<Authorization> | undefined): boolean {
    return proto3.util.equals(Authorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthorization
 */
export class TLAuthorization extends Message$1<TLAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Authorization data2 = 1;
   */
  data2: Authorization[] = [];

  constructor(data?: PartialMessage<TLAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Authorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthorization {
    return new TLAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthorization {
    return new TLAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthorization {
    return new TLAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthorization | PlainMessage<TLAuthorization> | undefined, b: TLAuthorization | PlainMessage<TLAuthorization> | undefined): boolean {
    return proto3.util.equals(TLAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings
 */
export class AutoDownloadSettings extends Message$1<AutoDownloadSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool disabled = 3;
   */
  disabled = false;

  /**
   * @generated from field: bool video_preload_large = 4;
   */
  videoPreloadLarge = false;

  /**
   * @generated from field: bool audio_preload_next = 5;
   */
  audioPreloadNext = false;

  /**
   * @generated from field: bool phonecalls_less_data = 6;
   */
  phonecallsLessData = false;

  /**
   * @generated from field: bool stories_preload = 7;
   */
  storiesPreload = false;

  /**
   * @generated from field: int32 photo_size_max = 8;
   */
  photoSizeMax = 0;

  /**
   * @generated from field: int64 video_size_max_INT64 = 9;
   */
  videoSizeMaxINT64 = protoInt64.zero;

  /**
   * @generated from field: int64 file_size_max_INT64 = 10;
   */
  fileSizeMaxINT64 = protoInt64.zero;

  /**
   * @generated from field: int32 video_upload_maxbitrate = 11;
   */
  videoUploadMaxbitrate = 0;

  /**
   * @generated from field: int32 small_queue_active_operations_max = 12;
   */
  smallQueueActiveOperationsMax = 0;

  /**
   * @generated from field: int32 large_queue_active_operations_max = 13;
   */
  largeQueueActiveOperationsMax = 0;

  /**
   * @generated from field: int32 video_size_max_INT32 = 14;
   */
  videoSizeMaxINT32 = 0;

  /**
   * @generated from field: int32 file_size_max_INT32 = 15;
   */
  fileSizeMaxINT32 = 0;

  constructor(data?: PartialMessage<AutoDownloadSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "video_preload_large", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "audio_preload_next", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "phonecalls_less_data", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "stories_preload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "photo_size_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "video_size_max_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "file_size_max_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "video_upload_maxbitrate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "small_queue_active_operations_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "large_queue_active_operations_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "video_size_max_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "file_size_max_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoDownloadSettings {
    return new AutoDownloadSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoDownloadSettings {
    return new AutoDownloadSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoDownloadSettings {
    return new AutoDownloadSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AutoDownloadSettings | PlainMessage<AutoDownloadSettings> | undefined, b: AutoDownloadSettings | PlainMessage<AutoDownloadSettings> | undefined): boolean {
    return proto3.util.equals(AutoDownloadSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAutoDownloadSettings
 */
export class TLAutoDownloadSettings extends Message$1<TLAutoDownloadSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings data2 = 1;
   */
  data2: AutoDownloadSettings[] = [];

  constructor(data?: PartialMessage<TLAutoDownloadSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAutoDownloadSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AutoDownloadSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAutoDownloadSettings {
    return new TLAutoDownloadSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAutoDownloadSettings {
    return new TLAutoDownloadSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAutoDownloadSettings {
    return new TLAutoDownloadSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAutoDownloadSettings | PlainMessage<TLAutoDownloadSettings> | undefined, b: TLAutoDownloadSettings | PlainMessage<TLAutoDownloadSettings> | undefined): boolean {
    return proto3.util.equals(TLAutoDownloadSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AutoSaveException
 */
export class AutoSaveException extends Message$1<AutoSaveException> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings settings = 4;
   */
  settings: AutoSaveSettings[] = [];

  constructor(data?: PartialMessage<AutoSaveException>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AutoSaveException";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "settings", kind: "message", T: AutoSaveSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoSaveException {
    return new AutoSaveException().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoSaveException {
    return new AutoSaveException().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoSaveException {
    return new AutoSaveException().fromJsonString(jsonString, options);
  }

  static equals(a: AutoSaveException | PlainMessage<AutoSaveException> | undefined, b: AutoSaveException | PlainMessage<AutoSaveException> | undefined): boolean {
    return proto3.util.equals(AutoSaveException, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAutoSaveException
 */
export class TLAutoSaveException extends Message$1<TLAutoSaveException> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveException data2 = 1;
   */
  data2: AutoSaveException[] = [];

  constructor(data?: PartialMessage<TLAutoSaveException>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAutoSaveException";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AutoSaveException, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAutoSaveException {
    return new TLAutoSaveException().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAutoSaveException {
    return new TLAutoSaveException().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAutoSaveException {
    return new TLAutoSaveException().fromJsonString(jsonString, options);
  }

  static equals(a: TLAutoSaveException | PlainMessage<TLAutoSaveException> | undefined, b: TLAutoSaveException | PlainMessage<TLAutoSaveException> | undefined): boolean {
    return proto3.util.equals(TLAutoSaveException, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings
 */
export class AutoSaveSettings extends Message$1<AutoSaveSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool photos = 3;
   */
  photos = false;

  /**
   * @generated from field: bool videos = 4;
   */
  videos = false;

  /**
   * @generated from field: repeated google.protobuf.Int64Value video_max_size = 5;
   */
  videoMaxSize: Int64Value[] = [];

  constructor(data?: PartialMessage<AutoSaveSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "photos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "videos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "video_max_size", kind: "message", T: Int64Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoSaveSettings {
    return new AutoSaveSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoSaveSettings {
    return new AutoSaveSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoSaveSettings {
    return new AutoSaveSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AutoSaveSettings | PlainMessage<AutoSaveSettings> | undefined, b: AutoSaveSettings | PlainMessage<AutoSaveSettings> | undefined): boolean {
    return proto3.util.equals(AutoSaveSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAutoSaveSettings
 */
export class TLAutoSaveSettings extends Message$1<TLAutoSaveSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings data2 = 1;
   */
  data2: AutoSaveSettings[] = [];

  constructor(data?: PartialMessage<TLAutoSaveSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAutoSaveSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AutoSaveSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAutoSaveSettings {
    return new TLAutoSaveSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAutoSaveSettings {
    return new TLAutoSaveSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAutoSaveSettings {
    return new TLAutoSaveSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAutoSaveSettings | PlainMessage<TLAutoSaveSettings> | undefined, b: TLAutoSaveSettings | PlainMessage<TLAutoSaveSettings> | undefined): boolean {
    return proto3.util.equals(TLAutoSaveSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AvailableReaction
 */
export class AvailableReaction extends Message$1<AvailableReaction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool inactive = 3;
   */
  inactive = false;

  /**
   * @generated from field: bool premium = 4;
   */
  premium = false;

  /**
   * @generated from field: string reaction = 5;
   */
  reaction = "";

  /**
   * @generated from field: string title = 6;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document static_icon = 7;
   */
  staticIcon: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document appear_animation = 8;
   */
  appearAnimation: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document select_animation = 9;
   */
  selectAnimation: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document activate_animation = 10;
   */
  activateAnimation: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document effect_animation = 11;
   */
  effectAnimation: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document around_animation = 12;
   */
  aroundAnimation: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document center_icon = 13;
   */
  centerIcon: Document[] = [];

  constructor(data?: PartialMessage<AvailableReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AvailableReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "static_icon", kind: "message", T: Document, repeated: true },
    { no: 8, name: "appear_animation", kind: "message", T: Document, repeated: true },
    { no: 9, name: "select_animation", kind: "message", T: Document, repeated: true },
    { no: 10, name: "activate_animation", kind: "message", T: Document, repeated: true },
    { no: 11, name: "effect_animation", kind: "message", T: Document, repeated: true },
    { no: 12, name: "around_animation", kind: "message", T: Document, repeated: true },
    { no: 13, name: "center_icon", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableReaction {
    return new AvailableReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableReaction {
    return new AvailableReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableReaction {
    return new AvailableReaction().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableReaction | PlainMessage<AvailableReaction> | undefined, b: AvailableReaction | PlainMessage<AvailableReaction> | undefined): boolean {
    return proto3.util.equals(AvailableReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAvailableReaction
 */
export class TLAvailableReaction extends Message$1<TLAvailableReaction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AvailableReaction data2 = 1;
   */
  data2: AvailableReaction[] = [];

  constructor(data?: PartialMessage<TLAvailableReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAvailableReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AvailableReaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAvailableReaction {
    return new TLAvailableReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAvailableReaction {
    return new TLAvailableReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAvailableReaction {
    return new TLAvailableReaction().fromJsonString(jsonString, options);
  }

  static equals(a: TLAvailableReaction | PlainMessage<TLAvailableReaction> | undefined, b: TLAvailableReaction | PlainMessage<TLAvailableReaction> | undefined): boolean {
    return proto3.util.equals(TLAvailableReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BankCardOpenUrl
 */
export class BankCardOpenUrl extends Message$1<BankCardOpenUrl> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<BankCardOpenUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BankCardOpenUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BankCardOpenUrl {
    return new BankCardOpenUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BankCardOpenUrl {
    return new BankCardOpenUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BankCardOpenUrl {
    return new BankCardOpenUrl().fromJsonString(jsonString, options);
  }

  static equals(a: BankCardOpenUrl | PlainMessage<BankCardOpenUrl> | undefined, b: BankCardOpenUrl | PlainMessage<BankCardOpenUrl> | undefined): boolean {
    return proto3.util.equals(BankCardOpenUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBankCardOpenUrl
 */
export class TLBankCardOpenUrl extends Message$1<TLBankCardOpenUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BankCardOpenUrl data2 = 1;
   */
  data2: BankCardOpenUrl[] = [];

  constructor(data?: PartialMessage<TLBankCardOpenUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBankCardOpenUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BankCardOpenUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBankCardOpenUrl {
    return new TLBankCardOpenUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBankCardOpenUrl {
    return new TLBankCardOpenUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBankCardOpenUrl {
    return new TLBankCardOpenUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLBankCardOpenUrl | PlainMessage<TLBankCardOpenUrl> | undefined, b: TLBankCardOpenUrl | PlainMessage<TLBankCardOpenUrl> | undefined): boolean {
    return proto3.util.equals(TLBankCardOpenUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BaseTheme
 */
export class BaseTheme extends Message$1<BaseTheme> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<BaseTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BaseTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BaseTheme {
    return new BaseTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BaseTheme {
    return new BaseTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BaseTheme {
    return new BaseTheme().fromJsonString(jsonString, options);
  }

  static equals(a: BaseTheme | PlainMessage<BaseTheme> | undefined, b: BaseTheme | PlainMessage<BaseTheme> | undefined): boolean {
    return proto3.util.equals(BaseTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeClassic
 */
export class TLBaseThemeClassic extends Message$1<TLBaseThemeClassic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme data2 = 1;
   */
  data2: BaseTheme[] = [];

  constructor(data?: PartialMessage<TLBaseThemeClassic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeClassic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BaseTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBaseThemeClassic {
    return new TLBaseThemeClassic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBaseThemeClassic {
    return new TLBaseThemeClassic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBaseThemeClassic {
    return new TLBaseThemeClassic().fromJsonString(jsonString, options);
  }

  static equals(a: TLBaseThemeClassic | PlainMessage<TLBaseThemeClassic> | undefined, b: TLBaseThemeClassic | PlainMessage<TLBaseThemeClassic> | undefined): boolean {
    return proto3.util.equals(TLBaseThemeClassic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeDay
 */
export class TLBaseThemeDay extends Message$1<TLBaseThemeDay> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme data2 = 1;
   */
  data2: BaseTheme[] = [];

  constructor(data?: PartialMessage<TLBaseThemeDay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeDay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BaseTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBaseThemeDay {
    return new TLBaseThemeDay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBaseThemeDay {
    return new TLBaseThemeDay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBaseThemeDay {
    return new TLBaseThemeDay().fromJsonString(jsonString, options);
  }

  static equals(a: TLBaseThemeDay | PlainMessage<TLBaseThemeDay> | undefined, b: TLBaseThemeDay | PlainMessage<TLBaseThemeDay> | undefined): boolean {
    return proto3.util.equals(TLBaseThemeDay, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeNight
 */
export class TLBaseThemeNight extends Message$1<TLBaseThemeNight> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme data2 = 1;
   */
  data2: BaseTheme[] = [];

  constructor(data?: PartialMessage<TLBaseThemeNight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeNight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BaseTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBaseThemeNight {
    return new TLBaseThemeNight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBaseThemeNight {
    return new TLBaseThemeNight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBaseThemeNight {
    return new TLBaseThemeNight().fromJsonString(jsonString, options);
  }

  static equals(a: TLBaseThemeNight | PlainMessage<TLBaseThemeNight> | undefined, b: TLBaseThemeNight | PlainMessage<TLBaseThemeNight> | undefined): boolean {
    return proto3.util.equals(TLBaseThemeNight, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeTinted
 */
export class TLBaseThemeTinted extends Message$1<TLBaseThemeTinted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme data2 = 1;
   */
  data2: BaseTheme[] = [];

  constructor(data?: PartialMessage<TLBaseThemeTinted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeTinted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BaseTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBaseThemeTinted {
    return new TLBaseThemeTinted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBaseThemeTinted {
    return new TLBaseThemeTinted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBaseThemeTinted {
    return new TLBaseThemeTinted().fromJsonString(jsonString, options);
  }

  static equals(a: TLBaseThemeTinted | PlainMessage<TLBaseThemeTinted> | undefined, b: TLBaseThemeTinted | PlainMessage<TLBaseThemeTinted> | undefined): boolean {
    return proto3.util.equals(TLBaseThemeTinted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeArctic
 */
export class TLBaseThemeArctic extends Message$1<TLBaseThemeArctic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme data2 = 1;
   */
  data2: BaseTheme[] = [];

  constructor(data?: PartialMessage<TLBaseThemeArctic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBaseThemeArctic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BaseTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBaseThemeArctic {
    return new TLBaseThemeArctic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBaseThemeArctic {
    return new TLBaseThemeArctic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBaseThemeArctic {
    return new TLBaseThemeArctic().fromJsonString(jsonString, options);
  }

  static equals(a: TLBaseThemeArctic | PlainMessage<TLBaseThemeArctic> | undefined, b: TLBaseThemeArctic | PlainMessage<TLBaseThemeArctic> | undefined): boolean {
    return proto3.util.equals(TLBaseThemeArctic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BizDataRaw
 */
export class BizDataRaw extends Message$1<BizDataRaw> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BizDataRaw {
    return new BizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BizDataRaw {
    return new BizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BizDataRaw {
    return new BizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: BizDataRaw | PlainMessage<BizDataRaw> | undefined, b: BizDataRaw | PlainMessage<BizDataRaw> | undefined): boolean {
    return proto3.util.equals(BizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBizDataRaw
 */
export class TLBizDataRaw extends Message$1<TLBizDataRaw> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BizDataRaw data2 = 1;
   */
  data2: BizDataRaw[] = [];

  constructor(data?: PartialMessage<TLBizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BizDataRaw, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBizDataRaw {
    return new TLBizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBizDataRaw {
    return new TLBizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBizDataRaw {
    return new TLBizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: TLBizDataRaw | PlainMessage<TLBizDataRaw> | undefined, b: TLBizDataRaw | PlainMessage<TLBizDataRaw> | undefined): boolean {
    return proto3.util.equals(TLBizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Booster
 */
export class Booster extends Message$1<Booster> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 expires = 4;
   */
  expires = 0;

  constructor(data?: PartialMessage<Booster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Booster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Booster {
    return new Booster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Booster {
    return new Booster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Booster {
    return new Booster().fromJsonString(jsonString, options);
  }

  static equals(a: Booster | PlainMessage<Booster> | undefined, b: Booster | PlainMessage<Booster> | undefined): boolean {
    return proto3.util.equals(Booster, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBooster
 */
export class TLBooster extends Message$1<TLBooster> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Booster data2 = 1;
   */
  data2: Booster[] = [];

  constructor(data?: PartialMessage<TLBooster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBooster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Booster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBooster {
    return new TLBooster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBooster {
    return new TLBooster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBooster {
    return new TLBooster().fromJsonString(jsonString, options);
  }

  static equals(a: TLBooster | PlainMessage<TLBooster> | undefined, b: TLBooster | PlainMessage<TLBooster> | undefined): boolean {
    return proto3.util.equals(TLBooster, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotApp
 */
export class BotApp extends Message$1<BotApp> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string short_name = 5;
   */
  shortName = "";

  /**
   * @generated from field: string title = 6;
   */
  title = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 8;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 9;
   */
  document: Document[] = [];

  /**
   * @generated from field: int64 hash = 10;
   */
  hash = protoInt64.zero;

  constructor(data?: PartialMessage<BotApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 9, name: "document", kind: "message", T: Document, repeated: true },
    { no: 10, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotApp {
    return new BotApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotApp {
    return new BotApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotApp {
    return new BotApp().fromJsonString(jsonString, options);
  }

  static equals(a: BotApp | PlainMessage<BotApp> | undefined, b: BotApp | PlainMessage<BotApp> | undefined): boolean {
    return proto3.util.equals(BotApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotAppNotModified
 */
export class TLBotAppNotModified extends Message$1<TLBotAppNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotApp data2 = 1;
   */
  data2: BotApp[] = [];

  constructor(data?: PartialMessage<TLBotAppNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotAppNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotAppNotModified {
    return new TLBotAppNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotAppNotModified {
    return new TLBotAppNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotAppNotModified {
    return new TLBotAppNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotAppNotModified | PlainMessage<TLBotAppNotModified> | undefined, b: TLBotAppNotModified | PlainMessage<TLBotAppNotModified> | undefined): boolean {
    return proto3.util.equals(TLBotAppNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotApp
 */
export class TLBotApp extends Message$1<TLBotApp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotApp data2 = 1;
   */
  data2: BotApp[] = [];

  constructor(data?: PartialMessage<TLBotApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotApp {
    return new TLBotApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotApp {
    return new TLBotApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotApp {
    return new TLBotApp().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotApp | PlainMessage<TLBotApp> | undefined, b: TLBotApp | PlainMessage<TLBotApp> | undefined): boolean {
    return proto3.util.equals(TLBotApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotCommand
 */
export class BotCommand extends Message$1<BotCommand> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string command = 3;
   */
  command = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<BotCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotCommand {
    return new BotCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotCommand {
    return new BotCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotCommand {
    return new BotCommand().fromJsonString(jsonString, options);
  }

  static equals(a: BotCommand | PlainMessage<BotCommand> | undefined, b: BotCommand | PlainMessage<BotCommand> | undefined): boolean {
    return proto3.util.equals(BotCommand, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommand
 */
export class TLBotCommand extends Message$1<TLBotCommand> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommand data2 = 1;
   */
  data2: BotCommand[] = [];

  constructor(data?: PartialMessage<TLBotCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommand {
    return new TLBotCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommand {
    return new TLBotCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommand {
    return new TLBotCommand().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommand | PlainMessage<TLBotCommand> | undefined, b: TLBotCommand | PlainMessage<TLBotCommand> | undefined): boolean {
    return proto3.util.equals(TLBotCommand, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotCommandScope
 */
export class BotCommandScope extends Message$1<BotCommandScope> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 3;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id = 4;
   */
  userId: InputUser[] = [];

  constructor(data?: PartialMessage<BotCommandScope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotCommandScope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 4, name: "user_id", kind: "message", T: InputUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotCommandScope {
    return new BotCommandScope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotCommandScope {
    return new BotCommandScope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotCommandScope {
    return new BotCommandScope().fromJsonString(jsonString, options);
  }

  static equals(a: BotCommandScope | PlainMessage<BotCommandScope> | undefined, b: BotCommandScope | PlainMessage<BotCommandScope> | undefined): boolean {
    return proto3.util.equals(BotCommandScope, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeDefault
 */
export class TLBotCommandScopeDefault extends Message$1<TLBotCommandScopeDefault> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopeDefault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeDefault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopeDefault {
    return new TLBotCommandScopeDefault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopeDefault {
    return new TLBotCommandScopeDefault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopeDefault {
    return new TLBotCommandScopeDefault().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopeDefault | PlainMessage<TLBotCommandScopeDefault> | undefined, b: TLBotCommandScopeDefault | PlainMessage<TLBotCommandScopeDefault> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopeDefault, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeUsers
 */
export class TLBotCommandScopeUsers extends Message$1<TLBotCommandScopeUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopeUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopeUsers {
    return new TLBotCommandScopeUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopeUsers {
    return new TLBotCommandScopeUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopeUsers {
    return new TLBotCommandScopeUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopeUsers | PlainMessage<TLBotCommandScopeUsers> | undefined, b: TLBotCommandScopeUsers | PlainMessage<TLBotCommandScopeUsers> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopeUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeChats
 */
export class TLBotCommandScopeChats extends Message$1<TLBotCommandScopeChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopeChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopeChats {
    return new TLBotCommandScopeChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopeChats {
    return new TLBotCommandScopeChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopeChats {
    return new TLBotCommandScopeChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopeChats | PlainMessage<TLBotCommandScopeChats> | undefined, b: TLBotCommandScopeChats | PlainMessage<TLBotCommandScopeChats> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopeChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeChatAdmins
 */
export class TLBotCommandScopeChatAdmins extends Message$1<TLBotCommandScopeChatAdmins> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopeChatAdmins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopeChatAdmins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopeChatAdmins {
    return new TLBotCommandScopeChatAdmins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopeChatAdmins {
    return new TLBotCommandScopeChatAdmins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopeChatAdmins {
    return new TLBotCommandScopeChatAdmins().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopeChatAdmins | PlainMessage<TLBotCommandScopeChatAdmins> | undefined, b: TLBotCommandScopeChatAdmins | PlainMessage<TLBotCommandScopeChatAdmins> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopeChatAdmins, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeer
 */
export class TLBotCommandScopePeer extends Message$1<TLBotCommandScopePeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopePeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopePeer {
    return new TLBotCommandScopePeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopePeer {
    return new TLBotCommandScopePeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopePeer {
    return new TLBotCommandScopePeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopePeer | PlainMessage<TLBotCommandScopePeer> | undefined, b: TLBotCommandScopePeer | PlainMessage<TLBotCommandScopePeer> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopePeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeerAdmins
 */
export class TLBotCommandScopePeerAdmins extends Message$1<TLBotCommandScopePeerAdmins> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopePeerAdmins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeerAdmins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopePeerAdmins {
    return new TLBotCommandScopePeerAdmins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopePeerAdmins {
    return new TLBotCommandScopePeerAdmins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopePeerAdmins {
    return new TLBotCommandScopePeerAdmins().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopePeerAdmins | PlainMessage<TLBotCommandScopePeerAdmins> | undefined, b: TLBotCommandScopePeerAdmins | PlainMessage<TLBotCommandScopePeerAdmins> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopePeerAdmins, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeerUser
 */
export class TLBotCommandScopePeerUser extends Message$1<TLBotCommandScopePeerUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommandScope data2 = 1;
   */
  data2: BotCommandScope[] = [];

  constructor(data?: PartialMessage<TLBotCommandScopePeerUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotCommandScopePeerUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotCommandScope, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotCommandScopePeerUser {
    return new TLBotCommandScopePeerUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotCommandScopePeerUser {
    return new TLBotCommandScopePeerUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotCommandScopePeerUser {
    return new TLBotCommandScopePeerUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotCommandScopePeerUser | PlainMessage<TLBotCommandScopePeerUser> | undefined, b: TLBotCommandScopePeerUser | PlainMessage<TLBotCommandScopePeerUser> | undefined): boolean {
    return proto3.util.equals(TLBotCommandScopePeerUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotData
 */
export class BotData extends Message$1<BotData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 bot_type = 4;
   */
  botType = 0;

  /**
   * @generated from field: int64 creator = 5;
   */
  creator = protoInt64.zero;

  /**
   * @generated from field: string token = 6;
   */
  token = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * @generated from field: bool bot_chat_history = 8;
   */
  botChatHistory = false;

  /**
   * @generated from field: bool bot_nochats = 9;
   */
  botNochats = false;

  /**
   * @generated from field: bool bot_inline_geo = 10;
   */
  botInlineGeo = false;

  /**
   * @generated from field: int32 bot_info_version = 11;
   */
  botInfoVersion = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue bot_inline_placeholder = 12;
   */
  botInlinePlaceholder: StringValue[] = [];

  constructor(data?: PartialMessage<BotData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "bot_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "creator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "bot_chat_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "bot_nochats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "bot_inline_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "bot_info_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "bot_inline_placeholder", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotData {
    return new BotData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotData {
    return new BotData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotData {
    return new BotData().fromJsonString(jsonString, options);
  }

  static equals(a: BotData | PlainMessage<BotData> | undefined, b: BotData | PlainMessage<BotData> | undefined): boolean {
    return proto3.util.equals(BotData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotData
 */
export class TLBotData extends Message$1<TLBotData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotData data2 = 1;
   */
  data2: BotData[] = [];

  constructor(data?: PartialMessage<TLBotData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotData {
    return new TLBotData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotData {
    return new TLBotData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotData {
    return new TLBotData().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotData | PlainMessage<TLBotData> | undefined, b: TLBotData | PlainMessage<TLBotData> | undefined): boolean {
    return proto3.util.equals(TLBotData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotInfo
 */
export class BotInfo extends Message$1<BotInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int64Value user_id_FLAGINT64 = 3;
   */
  userIdFLAGINT64: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue description_FLAGSTRING = 4;
   */
  descriptionFLAGSTRING: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo description_photo = 5;
   */
  descriptionPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document description_document = 6;
   */
  descriptionDocument: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommand commands = 7;
   */
  commands: BotCommand[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotMenuButton menu_button = 8;
   */
  menuButton: BotMenuButton[] = [];

  /**
   * @generated from field: int64 user_id_INT64 = 9;
   */
  userIdINT64 = protoInt64.zero;

  /**
   * @generated from field: string description_STRING = 10;
   */
  descriptionSTRING = "";

  constructor(data?: PartialMessage<BotInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id_FLAGINT64", kind: "message", T: Int64Value, repeated: true },
    { no: 4, name: "description_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
    { no: 5, name: "description_photo", kind: "message", T: Photo, repeated: true },
    { no: 6, name: "description_document", kind: "message", T: Document, repeated: true },
    { no: 7, name: "commands", kind: "message", T: BotCommand, repeated: true },
    { no: 8, name: "menu_button", kind: "message", T: BotMenuButton, repeated: true },
    { no: 9, name: "user_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "description_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotInfo {
    return new BotInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotInfo {
    return new BotInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotInfo {
    return new BotInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BotInfo | PlainMessage<BotInfo> | undefined, b: BotInfo | PlainMessage<BotInfo> | undefined): boolean {
    return proto3.util.equals(BotInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInfo
 */
export class TLBotInfo extends Message$1<TLBotInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInfo data2 = 1;
   */
  data2: BotInfo[] = [];

  constructor(data?: PartialMessage<TLBotInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInfo {
    return new TLBotInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInfo {
    return new TLBotInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInfo {
    return new TLBotInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInfo | PlainMessage<TLBotInfo> | undefined, b: TLBotInfo | PlainMessage<TLBotInfo> | undefined): boolean {
    return proto3.util.equals(TLBotInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage
 */
export class BotInlineMessage extends Message$1<BotInlineMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 4;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup reply_markup = 5;
   */
  replyMarkup: ReplyMarkup[] = [];

  /**
   * @generated from field: bool no_webpage = 6;
   */
  noWebpage = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo = 7;
   */
  geo: GeoPoint[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value heading = 8;
   */
  heading: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value period = 9;
   */
  period: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value proximity_notification_radius = 10;
   */
  proximityNotificationRadius: Int32Value[] = [];

  /**
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * @generated from field: string address = 12;
   */
  address = "";

  /**
   * @generated from field: string provider = 13;
   */
  provider = "";

  /**
   * @generated from field: string venue_id = 14;
   */
  venueId = "";

  /**
   * @generated from field: string venue_type = 15;
   */
  venueType = "";

  /**
   * @generated from field: string phone_number = 16;
   */
  phoneNumber = "";

  /**
   * @generated from field: string first_name = 17;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 18;
   */
  lastName = "";

  /**
   * @generated from field: string vcard = 19;
   */
  vcard = "";

  /**
   * @generated from field: bool shipping_address_requested = 20;
   */
  shippingAddressRequested = false;

  /**
   * @generated from field: bool test = 21;
   */
  test = false;

  /**
   * @generated from field: string description = 22;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument photo = 23;
   */
  photo: WebDocument[] = [];

  /**
   * @generated from field: string currency = 24;
   */
  currency = "";

  /**
   * @generated from field: int64 total_amount = 25;
   */
  totalAmount = protoInt64.zero;

  constructor(data?: PartialMessage<BotInlineMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 5, name: "reply_markup", kind: "message", T: ReplyMarkup, repeated: true },
    { no: 6, name: "no_webpage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "geo", kind: "message", T: GeoPoint, repeated: true },
    { no: 8, name: "heading", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "period", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "proximity_notification_radius", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "venue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "vcard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "shipping_address_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "test", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "photo", kind: "message", T: WebDocument, repeated: true },
    { no: 24, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "total_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotInlineMessage {
    return new BotInlineMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotInlineMessage {
    return new BotInlineMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotInlineMessage {
    return new BotInlineMessage().fromJsonString(jsonString, options);
  }

  static equals(a: BotInlineMessage | PlainMessage<BotInlineMessage> | undefined, b: BotInlineMessage | PlainMessage<BotInlineMessage> | undefined): boolean {
    return proto3.util.equals(BotInlineMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaAuto
 */
export class TLBotInlineMessageMediaAuto extends Message$1<TLBotInlineMessageMediaAuto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageMediaAuto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaAuto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageMediaAuto {
    return new TLBotInlineMessageMediaAuto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaAuto {
    return new TLBotInlineMessageMediaAuto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaAuto {
    return new TLBotInlineMessageMediaAuto().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageMediaAuto | PlainMessage<TLBotInlineMessageMediaAuto> | undefined, b: TLBotInlineMessageMediaAuto | PlainMessage<TLBotInlineMessageMediaAuto> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageMediaAuto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageText
 */
export class TLBotInlineMessageText extends Message$1<TLBotInlineMessageText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageText {
    return new TLBotInlineMessageText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageText {
    return new TLBotInlineMessageText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageText {
    return new TLBotInlineMessageText().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageText | PlainMessage<TLBotInlineMessageText> | undefined, b: TLBotInlineMessageText | PlainMessage<TLBotInlineMessageText> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaGeo
 */
export class TLBotInlineMessageMediaGeo extends Message$1<TLBotInlineMessageMediaGeo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageMediaGeo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaGeo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageMediaGeo {
    return new TLBotInlineMessageMediaGeo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaGeo {
    return new TLBotInlineMessageMediaGeo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaGeo {
    return new TLBotInlineMessageMediaGeo().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageMediaGeo | PlainMessage<TLBotInlineMessageMediaGeo> | undefined, b: TLBotInlineMessageMediaGeo | PlainMessage<TLBotInlineMessageMediaGeo> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageMediaGeo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaVenue
 */
export class TLBotInlineMessageMediaVenue extends Message$1<TLBotInlineMessageMediaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageMediaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageMediaVenue {
    return new TLBotInlineMessageMediaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaVenue {
    return new TLBotInlineMessageMediaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaVenue {
    return new TLBotInlineMessageMediaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageMediaVenue | PlainMessage<TLBotInlineMessageMediaVenue> | undefined, b: TLBotInlineMessageMediaVenue | PlainMessage<TLBotInlineMessageMediaVenue> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageMediaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaContact
 */
export class TLBotInlineMessageMediaContact extends Message$1<TLBotInlineMessageMediaContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageMediaContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageMediaContact {
    return new TLBotInlineMessageMediaContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaContact {
    return new TLBotInlineMessageMediaContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaContact {
    return new TLBotInlineMessageMediaContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageMediaContact | PlainMessage<TLBotInlineMessageMediaContact> | undefined, b: TLBotInlineMessageMediaContact | PlainMessage<TLBotInlineMessageMediaContact> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageMediaContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaInvoice
 */
export class TLBotInlineMessageMediaInvoice extends Message$1<TLBotInlineMessageMediaInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage data2 = 1;
   */
  data2: BotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLBotInlineMessageMediaInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMessageMediaInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMessageMediaInvoice {
    return new TLBotInlineMessageMediaInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaInvoice {
    return new TLBotInlineMessageMediaInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMessageMediaInvoice {
    return new TLBotInlineMessageMediaInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMessageMediaInvoice | PlainMessage<TLBotInlineMessageMediaInvoice> | undefined, b: TLBotInlineMessageMediaInvoice | PlainMessage<TLBotInlineMessageMediaInvoice> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMessageMediaInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotInlineResult
 */
export class BotInlineResult extends Message$1<BotInlineResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 5;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue description = 6;
   */
  description: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue url = 7;
   */
  url: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument thumb = 8;
   */
  thumb: WebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument content = 9;
   */
  content: WebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineMessage send_message = 10;
   */
  sendMessage: BotInlineMessage[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 11;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 12;
   */
  document: Document[] = [];

  constructor(data?: PartialMessage<BotInlineResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotInlineResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "description", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "url", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "thumb", kind: "message", T: WebDocument, repeated: true },
    { no: 9, name: "content", kind: "message", T: WebDocument, repeated: true },
    { no: 10, name: "send_message", kind: "message", T: BotInlineMessage, repeated: true },
    { no: 11, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 12, name: "document", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotInlineResult {
    return new BotInlineResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotInlineResult {
    return new BotInlineResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotInlineResult {
    return new BotInlineResult().fromJsonString(jsonString, options);
  }

  static equals(a: BotInlineResult | PlainMessage<BotInlineResult> | undefined, b: BotInlineResult | PlainMessage<BotInlineResult> | undefined): boolean {
    return proto3.util.equals(BotInlineResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineResult
 */
export class TLBotInlineResult extends Message$1<TLBotInlineResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineResult data2 = 1;
   */
  data2: BotInlineResult[] = [];

  constructor(data?: PartialMessage<TLBotInlineResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineResult {
    return new TLBotInlineResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineResult {
    return new TLBotInlineResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineResult {
    return new TLBotInlineResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineResult | PlainMessage<TLBotInlineResult> | undefined, b: TLBotInlineResult | PlainMessage<TLBotInlineResult> | undefined): boolean {
    return proto3.util.equals(TLBotInlineResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMediaResult
 */
export class TLBotInlineMediaResult extends Message$1<TLBotInlineMediaResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineResult data2 = 1;
   */
  data2: BotInlineResult[] = [];

  constructor(data?: PartialMessage<TLBotInlineMediaResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotInlineMediaResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotInlineMediaResult {
    return new TLBotInlineMediaResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotInlineMediaResult {
    return new TLBotInlineMediaResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotInlineMediaResult {
    return new TLBotInlineMediaResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotInlineMediaResult | PlainMessage<TLBotInlineMediaResult> | undefined, b: TLBotInlineMediaResult | PlainMessage<TLBotInlineMediaResult> | undefined): boolean {
    return proto3.util.equals(TLBotInlineMediaResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotMenuButton
 */
export class BotMenuButton extends Message$1<BotMenuButton> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  constructor(data?: PartialMessage<BotMenuButton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotMenuButton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotMenuButton {
    return new BotMenuButton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotMenuButton {
    return new BotMenuButton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotMenuButton {
    return new BotMenuButton().fromJsonString(jsonString, options);
  }

  static equals(a: BotMenuButton | PlainMessage<BotMenuButton> | undefined, b: BotMenuButton | PlainMessage<BotMenuButton> | undefined): boolean {
    return proto3.util.equals(BotMenuButton, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButtonDefault
 */
export class TLBotMenuButtonDefault extends Message$1<TLBotMenuButtonDefault> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotMenuButton data2 = 1;
   */
  data2: BotMenuButton[] = [];

  constructor(data?: PartialMessage<TLBotMenuButtonDefault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButtonDefault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotMenuButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotMenuButtonDefault {
    return new TLBotMenuButtonDefault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotMenuButtonDefault {
    return new TLBotMenuButtonDefault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotMenuButtonDefault {
    return new TLBotMenuButtonDefault().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotMenuButtonDefault | PlainMessage<TLBotMenuButtonDefault> | undefined, b: TLBotMenuButtonDefault | PlainMessage<TLBotMenuButtonDefault> | undefined): boolean {
    return proto3.util.equals(TLBotMenuButtonDefault, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButtonCommands
 */
export class TLBotMenuButtonCommands extends Message$1<TLBotMenuButtonCommands> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotMenuButton data2 = 1;
   */
  data2: BotMenuButton[] = [];

  constructor(data?: PartialMessage<TLBotMenuButtonCommands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButtonCommands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotMenuButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotMenuButtonCommands {
    return new TLBotMenuButtonCommands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotMenuButtonCommands {
    return new TLBotMenuButtonCommands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotMenuButtonCommands {
    return new TLBotMenuButtonCommands().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotMenuButtonCommands | PlainMessage<TLBotMenuButtonCommands> | undefined, b: TLBotMenuButtonCommands | PlainMessage<TLBotMenuButtonCommands> | undefined): boolean {
    return proto3.util.equals(TLBotMenuButtonCommands, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButton
 */
export class TLBotMenuButton extends Message$1<TLBotMenuButton> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotMenuButton data2 = 1;
   */
  data2: BotMenuButton[] = [];

  constructor(data?: PartialMessage<TLBotMenuButton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotMenuButton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotMenuButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotMenuButton {
    return new TLBotMenuButton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotMenuButton {
    return new TLBotMenuButton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotMenuButton {
    return new TLBotMenuButton().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotMenuButton | PlainMessage<TLBotMenuButton> | undefined, b: TLBotMenuButton | PlainMessage<TLBotMenuButton> | undefined): boolean {
    return proto3.util.equals(TLBotMenuButton, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.CdnConfig
 */
export class CdnConfig extends Message$1<CdnConfig> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.CdnPublicKey public_keys = 3;
   */
  publicKeys: CdnPublicKey[] = [];

  constructor(data?: PartialMessage<CdnConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.CdnConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "public_keys", kind: "message", T: CdnPublicKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CdnConfig {
    return new CdnConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CdnConfig {
    return new CdnConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CdnConfig {
    return new CdnConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CdnConfig | PlainMessage<CdnConfig> | undefined, b: CdnConfig | PlainMessage<CdnConfig> | undefined): boolean {
    return proto3.util.equals(CdnConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLCdnConfig
 */
export class TLCdnConfig extends Message$1<TLCdnConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.CdnConfig data2 = 1;
   */
  data2: CdnConfig[] = [];

  constructor(data?: PartialMessage<TLCdnConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLCdnConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: CdnConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLCdnConfig {
    return new TLCdnConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLCdnConfig {
    return new TLCdnConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLCdnConfig {
    return new TLCdnConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLCdnConfig | PlainMessage<TLCdnConfig> | undefined, b: TLCdnConfig | PlainMessage<TLCdnConfig> | undefined): boolean {
    return proto3.util.equals(TLCdnConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.CdnPublicKey
 */
export class CdnPublicKey extends Message$1<CdnPublicKey> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 dc_id = 3;
   */
  dcId = 0;

  /**
   * @generated from field: string public_key = 4;
   */
  publicKey = "";

  constructor(data?: PartialMessage<CdnPublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.CdnPublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CdnPublicKey {
    return new CdnPublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CdnPublicKey {
    return new CdnPublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CdnPublicKey {
    return new CdnPublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: CdnPublicKey | PlainMessage<CdnPublicKey> | undefined, b: CdnPublicKey | PlainMessage<CdnPublicKey> | undefined): boolean {
    return proto3.util.equals(CdnPublicKey, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLCdnPublicKey
 */
export class TLCdnPublicKey extends Message$1<TLCdnPublicKey> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.CdnPublicKey data2 = 1;
   */
  data2: CdnPublicKey[] = [];

  constructor(data?: PartialMessage<TLCdnPublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLCdnPublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: CdnPublicKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLCdnPublicKey {
    return new TLCdnPublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLCdnPublicKey {
    return new TLCdnPublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLCdnPublicKey {
    return new TLCdnPublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: TLCdnPublicKey | PlainMessage<TLCdnPublicKey> | undefined, b: TLCdnPublicKey | PlainMessage<TLCdnPublicKey> | undefined): boolean {
    return proto3.util.equals(TLCdnPublicKey, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEvent
 */
export class ChannelAdminLogEvent extends Message$1<ChannelAdminLogEvent> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  /**
   * @generated from field: int64 user_id = 5;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction action = 6;
   */
  action: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<ChannelAdminLogEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "action", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelAdminLogEvent {
    return new ChannelAdminLogEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelAdminLogEvent {
    return new ChannelAdminLogEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelAdminLogEvent {
    return new ChannelAdminLogEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelAdminLogEvent | PlainMessage<ChannelAdminLogEvent> | undefined, b: ChannelAdminLogEvent | PlainMessage<ChannelAdminLogEvent> | undefined): boolean {
    return proto3.util.equals(ChannelAdminLogEvent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEvent
 */
export class TLChannelAdminLogEvent extends Message$1<TLChannelAdminLogEvent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEvent data2 = 1;
   */
  data2: ChannelAdminLogEvent[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEvent {
    return new TLChannelAdminLogEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEvent {
    return new TLChannelAdminLogEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEvent {
    return new TLChannelAdminLogEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEvent | PlainMessage<TLChannelAdminLogEvent> | undefined, b: TLChannelAdminLogEvent | PlainMessage<TLChannelAdminLogEvent> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEvent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction
 */
export class ChannelAdminLogEventAction extends Message$1<ChannelAdminLogEventAction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string prev_value_STRING = 3;
   */
  prevValueSTRING = "";

  /**
   * @generated from field: string new_value_STRING = 4;
   */
  newValueSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo prev_photo = 5;
   */
  prevPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo new_photo = 6;
   */
  newPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool new_value_BOOL = 7;
   */
  newValueBOOL: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message message = 8;
   */
  message: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message prev_message = 9;
   */
  prevMessage: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message new_message = 10;
   */
  newMessage: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant participant_CHANNELPARTICIPANT = 11;
   */
  participantCHANNELPARTICIPANT: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant prev_participant = 12;
   */
  prevParticipant: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant new_participant = 13;
   */
  newParticipant: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet prev_stickerset = 14;
   */
  prevStickerset: InputStickerSet[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet new_stickerset = 15;
   */
  newStickerset: InputStickerSet[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights prev_banned_rights = 16;
   */
  prevBannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights new_banned_rights = 17;
   */
  newBannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: int64 prev_value_INT64 = 18;
   */
  prevValueINT64 = protoInt64.zero;

  /**
   * @generated from field: int64 new_value_INT64 = 19;
   */
  newValueINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelLocation prev_value_CHANNELLOCATION = 20;
   */
  prevValueCHANNELLOCATION: ChannelLocation[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelLocation new_value_CHANNELLOCATION = 21;
   */
  newValueCHANNELLOCATION: ChannelLocation[] = [];

  /**
   * @generated from field: int32 prev_value_INT32 = 22;
   */
  prevValueINT32 = 0;

  /**
   * @generated from field: int32 new_value_INT32 = 23;
   */
  newValueINT32 = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call = 24;
   */
  call: InputGroupCall[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant participant_GROUPCALLPARTICIPANT = 25;
   */
  participantGROUPCALLPARTICIPANT: GroupCallParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool join_muted = 26;
   */
  joinMuted: Bool[] = [];

  /**
   * @generated from field: bool via_chatlist = 27;
   */
  viaChatlist = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite invite = 28;
   */
  invite: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite prev_invite = 29;
   */
  prevInvite: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite new_invite = 30;
   */
  newInvite: ExportedChatInvite[] = [];

  /**
   * @generated from field: int64 approved_by = 31;
   */
  approvedBy = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions prev_value_CHATREACTIONS = 32;
   */
  prevValueCHATREACTIONS: ChatReactions[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions new_value_CHATREACTIONS = 33;
   */
  newValueCHATREACTIONS: ChatReactions[] = [];

  /**
   * @generated from field: string prev_value_VECTORSTRING = 34;
   */
  prevValueVECTORSTRING = "";

  /**
   * @generated from field: string new_value_VECTORSTRING = 35;
   */
  newValueVECTORSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic topic = 36;
   */
  topic: ForumTopic[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic prev_topic = 37;
   */
  prevTopic: ForumTopic[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic new_topic = 38;
   */
  newTopic: ForumTopic[] = [];

  constructor(data?: PartialMessage<ChannelAdminLogEventAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "prev_value_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_value_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "prev_photo", kind: "message", T: Photo, repeated: true },
    { no: 6, name: "new_photo", kind: "message", T: Photo, repeated: true },
    { no: 7, name: "new_value_BOOL", kind: "message", T: Bool, repeated: true },
    { no: 8, name: "message", kind: "message", T: Message, repeated: true },
    { no: 9, name: "prev_message", kind: "message", T: Message, repeated: true },
    { no: 10, name: "new_message", kind: "message", T: Message, repeated: true },
    { no: 11, name: "participant_CHANNELPARTICIPANT", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 12, name: "prev_participant", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 13, name: "new_participant", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 14, name: "prev_stickerset", kind: "message", T: InputStickerSet, repeated: true },
    { no: 15, name: "new_stickerset", kind: "message", T: InputStickerSet, repeated: true },
    { no: 16, name: "prev_banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 17, name: "new_banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 18, name: "prev_value_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "new_value_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "prev_value_CHANNELLOCATION", kind: "message", T: ChannelLocation, repeated: true },
    { no: 21, name: "new_value_CHANNELLOCATION", kind: "message", T: ChannelLocation, repeated: true },
    { no: 22, name: "prev_value_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "new_value_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "call", kind: "message", T: InputGroupCall, repeated: true },
    { no: 25, name: "participant_GROUPCALLPARTICIPANT", kind: "message", T: GroupCallParticipant, repeated: true },
    { no: 26, name: "join_muted", kind: "message", T: Bool, repeated: true },
    { no: 27, name: "via_chatlist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 28, name: "invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 29, name: "prev_invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 30, name: "new_invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 31, name: "approved_by", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 32, name: "prev_value_CHATREACTIONS", kind: "message", T: ChatReactions, repeated: true },
    { no: 33, name: "new_value_CHATREACTIONS", kind: "message", T: ChatReactions, repeated: true },
    { no: 34, name: "prev_value_VECTORSTRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "new_value_VECTORSTRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 36, name: "topic", kind: "message", T: ForumTopic, repeated: true },
    { no: 37, name: "prev_topic", kind: "message", T: ForumTopic, repeated: true },
    { no: 38, name: "new_topic", kind: "message", T: ForumTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelAdminLogEventAction {
    return new ChannelAdminLogEventAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelAdminLogEventAction {
    return new ChannelAdminLogEventAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelAdminLogEventAction {
    return new ChannelAdminLogEventAction().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelAdminLogEventAction | PlainMessage<ChannelAdminLogEventAction> | undefined, b: ChannelAdminLogEventAction | PlainMessage<ChannelAdminLogEventAction> | undefined): boolean {
    return proto3.util.equals(ChannelAdminLogEventAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeTitle
 */
export class TLChannelAdminLogEventActionChangeTitle extends Message$1<TLChannelAdminLogEventActionChangeTitle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeTitle {
    return new TLChannelAdminLogEventActionChangeTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeTitle {
    return new TLChannelAdminLogEventActionChangeTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeTitle {
    return new TLChannelAdminLogEventActionChangeTitle().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeTitle | PlainMessage<TLChannelAdminLogEventActionChangeTitle> | undefined, b: TLChannelAdminLogEventActionChangeTitle | PlainMessage<TLChannelAdminLogEventActionChangeTitle> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeTitle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeAbout
 */
export class TLChannelAdminLogEventActionChangeAbout extends Message$1<TLChannelAdminLogEventActionChangeAbout> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeAbout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeAbout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeAbout {
    return new TLChannelAdminLogEventActionChangeAbout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeAbout {
    return new TLChannelAdminLogEventActionChangeAbout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeAbout {
    return new TLChannelAdminLogEventActionChangeAbout().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeAbout | PlainMessage<TLChannelAdminLogEventActionChangeAbout> | undefined, b: TLChannelAdminLogEventActionChangeAbout | PlainMessage<TLChannelAdminLogEventActionChangeAbout> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeAbout, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeUsername
 */
export class TLChannelAdminLogEventActionChangeUsername extends Message$1<TLChannelAdminLogEventActionChangeUsername> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeUsername>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeUsername";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeUsername {
    return new TLChannelAdminLogEventActionChangeUsername().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeUsername {
    return new TLChannelAdminLogEventActionChangeUsername().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeUsername {
    return new TLChannelAdminLogEventActionChangeUsername().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeUsername | PlainMessage<TLChannelAdminLogEventActionChangeUsername> | undefined, b: TLChannelAdminLogEventActionChangeUsername | PlainMessage<TLChannelAdminLogEventActionChangeUsername> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeUsername, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangePhoto
 */
export class TLChannelAdminLogEventActionChangePhoto extends Message$1<TLChannelAdminLogEventActionChangePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangePhoto {
    return new TLChannelAdminLogEventActionChangePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangePhoto {
    return new TLChannelAdminLogEventActionChangePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangePhoto {
    return new TLChannelAdminLogEventActionChangePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangePhoto | PlainMessage<TLChannelAdminLogEventActionChangePhoto> | undefined, b: TLChannelAdminLogEventActionChangePhoto | PlainMessage<TLChannelAdminLogEventActionChangePhoto> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleInvites
 */
export class TLChannelAdminLogEventActionToggleInvites extends Message$1<TLChannelAdminLogEventActionToggleInvites> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleInvites {
    return new TLChannelAdminLogEventActionToggleInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleInvites {
    return new TLChannelAdminLogEventActionToggleInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleInvites {
    return new TLChannelAdminLogEventActionToggleInvites().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleInvites | PlainMessage<TLChannelAdminLogEventActionToggleInvites> | undefined, b: TLChannelAdminLogEventActionToggleInvites | PlainMessage<TLChannelAdminLogEventActionToggleInvites> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleSignatures
 */
export class TLChannelAdminLogEventActionToggleSignatures extends Message$1<TLChannelAdminLogEventActionToggleSignatures> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleSignatures>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleSignatures";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleSignatures {
    return new TLChannelAdminLogEventActionToggleSignatures().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleSignatures {
    return new TLChannelAdminLogEventActionToggleSignatures().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleSignatures {
    return new TLChannelAdminLogEventActionToggleSignatures().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleSignatures | PlainMessage<TLChannelAdminLogEventActionToggleSignatures> | undefined, b: TLChannelAdminLogEventActionToggleSignatures | PlainMessage<TLChannelAdminLogEventActionToggleSignatures> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleSignatures, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionUpdatePinned
 */
export class TLChannelAdminLogEventActionUpdatePinned extends Message$1<TLChannelAdminLogEventActionUpdatePinned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionUpdatePinned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionUpdatePinned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionUpdatePinned {
    return new TLChannelAdminLogEventActionUpdatePinned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionUpdatePinned {
    return new TLChannelAdminLogEventActionUpdatePinned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionUpdatePinned {
    return new TLChannelAdminLogEventActionUpdatePinned().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionUpdatePinned | PlainMessage<TLChannelAdminLogEventActionUpdatePinned> | undefined, b: TLChannelAdminLogEventActionUpdatePinned | PlainMessage<TLChannelAdminLogEventActionUpdatePinned> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionUpdatePinned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionEditMessage
 */
export class TLChannelAdminLogEventActionEditMessage extends Message$1<TLChannelAdminLogEventActionEditMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionEditMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionEditMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionEditMessage {
    return new TLChannelAdminLogEventActionEditMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionEditMessage {
    return new TLChannelAdminLogEventActionEditMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionEditMessage {
    return new TLChannelAdminLogEventActionEditMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionEditMessage | PlainMessage<TLChannelAdminLogEventActionEditMessage> | undefined, b: TLChannelAdminLogEventActionEditMessage | PlainMessage<TLChannelAdminLogEventActionEditMessage> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionEditMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDeleteMessage
 */
export class TLChannelAdminLogEventActionDeleteMessage extends Message$1<TLChannelAdminLogEventActionDeleteMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionDeleteMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDeleteMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionDeleteMessage {
    return new TLChannelAdminLogEventActionDeleteMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDeleteMessage {
    return new TLChannelAdminLogEventActionDeleteMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDeleteMessage {
    return new TLChannelAdminLogEventActionDeleteMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionDeleteMessage | PlainMessage<TLChannelAdminLogEventActionDeleteMessage> | undefined, b: TLChannelAdminLogEventActionDeleteMessage | PlainMessage<TLChannelAdminLogEventActionDeleteMessage> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionDeleteMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoin
 */
export class TLChannelAdminLogEventActionParticipantJoin extends Message$1<TLChannelAdminLogEventActionParticipantJoin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantJoin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantJoin {
    return new TLChannelAdminLogEventActionParticipantJoin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoin {
    return new TLChannelAdminLogEventActionParticipantJoin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoin {
    return new TLChannelAdminLogEventActionParticipantJoin().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantJoin | PlainMessage<TLChannelAdminLogEventActionParticipantJoin> | undefined, b: TLChannelAdminLogEventActionParticipantJoin | PlainMessage<TLChannelAdminLogEventActionParticipantJoin> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantJoin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantLeave
 */
export class TLChannelAdminLogEventActionParticipantLeave extends Message$1<TLChannelAdminLogEventActionParticipantLeave> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantLeave>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantLeave";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantLeave {
    return new TLChannelAdminLogEventActionParticipantLeave().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantLeave {
    return new TLChannelAdminLogEventActionParticipantLeave().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantLeave {
    return new TLChannelAdminLogEventActionParticipantLeave().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantLeave | PlainMessage<TLChannelAdminLogEventActionParticipantLeave> | undefined, b: TLChannelAdminLogEventActionParticipantLeave | PlainMessage<TLChannelAdminLogEventActionParticipantLeave> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantLeave, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantInvite
 */
export class TLChannelAdminLogEventActionParticipantInvite extends Message$1<TLChannelAdminLogEventActionParticipantInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantInvite {
    return new TLChannelAdminLogEventActionParticipantInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantInvite {
    return new TLChannelAdminLogEventActionParticipantInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantInvite {
    return new TLChannelAdminLogEventActionParticipantInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantInvite | PlainMessage<TLChannelAdminLogEventActionParticipantInvite> | undefined, b: TLChannelAdminLogEventActionParticipantInvite | PlainMessage<TLChannelAdminLogEventActionParticipantInvite> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantToggleBan
 */
export class TLChannelAdminLogEventActionParticipantToggleBan extends Message$1<TLChannelAdminLogEventActionParticipantToggleBan> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantToggleBan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantToggleBan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantToggleBan {
    return new TLChannelAdminLogEventActionParticipantToggleBan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantToggleBan {
    return new TLChannelAdminLogEventActionParticipantToggleBan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantToggleBan {
    return new TLChannelAdminLogEventActionParticipantToggleBan().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantToggleBan | PlainMessage<TLChannelAdminLogEventActionParticipantToggleBan> | undefined, b: TLChannelAdminLogEventActionParticipantToggleBan | PlainMessage<TLChannelAdminLogEventActionParticipantToggleBan> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantToggleBan, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantToggleAdmin
 */
export class TLChannelAdminLogEventActionParticipantToggleAdmin extends Message$1<TLChannelAdminLogEventActionParticipantToggleAdmin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantToggleAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantToggleAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantToggleAdmin {
    return new TLChannelAdminLogEventActionParticipantToggleAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantToggleAdmin {
    return new TLChannelAdminLogEventActionParticipantToggleAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantToggleAdmin {
    return new TLChannelAdminLogEventActionParticipantToggleAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantToggleAdmin | PlainMessage<TLChannelAdminLogEventActionParticipantToggleAdmin> | undefined, b: TLChannelAdminLogEventActionParticipantToggleAdmin | PlainMessage<TLChannelAdminLogEventActionParticipantToggleAdmin> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantToggleAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeStickerSet
 */
export class TLChannelAdminLogEventActionChangeStickerSet extends Message$1<TLChannelAdminLogEventActionChangeStickerSet> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeStickerSet {
    return new TLChannelAdminLogEventActionChangeStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeStickerSet {
    return new TLChannelAdminLogEventActionChangeStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeStickerSet {
    return new TLChannelAdminLogEventActionChangeStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeStickerSet | PlainMessage<TLChannelAdminLogEventActionChangeStickerSet> | undefined, b: TLChannelAdminLogEventActionChangeStickerSet | PlainMessage<TLChannelAdminLogEventActionChangeStickerSet> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionTogglePreHistoryHidden
 */
export class TLChannelAdminLogEventActionTogglePreHistoryHidden extends Message$1<TLChannelAdminLogEventActionTogglePreHistoryHidden> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionTogglePreHistoryHidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionTogglePreHistoryHidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionTogglePreHistoryHidden {
    return new TLChannelAdminLogEventActionTogglePreHistoryHidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionTogglePreHistoryHidden {
    return new TLChannelAdminLogEventActionTogglePreHistoryHidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionTogglePreHistoryHidden {
    return new TLChannelAdminLogEventActionTogglePreHistoryHidden().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionTogglePreHistoryHidden | PlainMessage<TLChannelAdminLogEventActionTogglePreHistoryHidden> | undefined, b: TLChannelAdminLogEventActionTogglePreHistoryHidden | PlainMessage<TLChannelAdminLogEventActionTogglePreHistoryHidden> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionTogglePreHistoryHidden, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDefaultBannedRights
 */
export class TLChannelAdminLogEventActionDefaultBannedRights extends Message$1<TLChannelAdminLogEventActionDefaultBannedRights> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionDefaultBannedRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDefaultBannedRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionDefaultBannedRights {
    return new TLChannelAdminLogEventActionDefaultBannedRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDefaultBannedRights {
    return new TLChannelAdminLogEventActionDefaultBannedRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDefaultBannedRights {
    return new TLChannelAdminLogEventActionDefaultBannedRights().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionDefaultBannedRights | PlainMessage<TLChannelAdminLogEventActionDefaultBannedRights> | undefined, b: TLChannelAdminLogEventActionDefaultBannedRights | PlainMessage<TLChannelAdminLogEventActionDefaultBannedRights> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionDefaultBannedRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionStopPoll
 */
export class TLChannelAdminLogEventActionStopPoll extends Message$1<TLChannelAdminLogEventActionStopPoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionStopPoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionStopPoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionStopPoll {
    return new TLChannelAdminLogEventActionStopPoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionStopPoll {
    return new TLChannelAdminLogEventActionStopPoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionStopPoll {
    return new TLChannelAdminLogEventActionStopPoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionStopPoll | PlainMessage<TLChannelAdminLogEventActionStopPoll> | undefined, b: TLChannelAdminLogEventActionStopPoll | PlainMessage<TLChannelAdminLogEventActionStopPoll> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionStopPoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeLinkedChat
 */
export class TLChannelAdminLogEventActionChangeLinkedChat extends Message$1<TLChannelAdminLogEventActionChangeLinkedChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeLinkedChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeLinkedChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeLinkedChat {
    return new TLChannelAdminLogEventActionChangeLinkedChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeLinkedChat {
    return new TLChannelAdminLogEventActionChangeLinkedChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeLinkedChat {
    return new TLChannelAdminLogEventActionChangeLinkedChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeLinkedChat | PlainMessage<TLChannelAdminLogEventActionChangeLinkedChat> | undefined, b: TLChannelAdminLogEventActionChangeLinkedChat | PlainMessage<TLChannelAdminLogEventActionChangeLinkedChat> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeLinkedChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeLocation
 */
export class TLChannelAdminLogEventActionChangeLocation extends Message$1<TLChannelAdminLogEventActionChangeLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeLocation {
    return new TLChannelAdminLogEventActionChangeLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeLocation {
    return new TLChannelAdminLogEventActionChangeLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeLocation {
    return new TLChannelAdminLogEventActionChangeLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeLocation | PlainMessage<TLChannelAdminLogEventActionChangeLocation> | undefined, b: TLChannelAdminLogEventActionChangeLocation | PlainMessage<TLChannelAdminLogEventActionChangeLocation> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleSlowMode
 */
export class TLChannelAdminLogEventActionToggleSlowMode extends Message$1<TLChannelAdminLogEventActionToggleSlowMode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleSlowMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleSlowMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleSlowMode {
    return new TLChannelAdminLogEventActionToggleSlowMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleSlowMode {
    return new TLChannelAdminLogEventActionToggleSlowMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleSlowMode {
    return new TLChannelAdminLogEventActionToggleSlowMode().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleSlowMode | PlainMessage<TLChannelAdminLogEventActionToggleSlowMode> | undefined, b: TLChannelAdminLogEventActionToggleSlowMode | PlainMessage<TLChannelAdminLogEventActionToggleSlowMode> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleSlowMode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionStartGroupCall
 */
export class TLChannelAdminLogEventActionStartGroupCall extends Message$1<TLChannelAdminLogEventActionStartGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionStartGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionStartGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionStartGroupCall {
    return new TLChannelAdminLogEventActionStartGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionStartGroupCall {
    return new TLChannelAdminLogEventActionStartGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionStartGroupCall {
    return new TLChannelAdminLogEventActionStartGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionStartGroupCall | PlainMessage<TLChannelAdminLogEventActionStartGroupCall> | undefined, b: TLChannelAdminLogEventActionStartGroupCall | PlainMessage<TLChannelAdminLogEventActionStartGroupCall> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionStartGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDiscardGroupCall
 */
export class TLChannelAdminLogEventActionDiscardGroupCall extends Message$1<TLChannelAdminLogEventActionDiscardGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionDiscardGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDiscardGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionDiscardGroupCall {
    return new TLChannelAdminLogEventActionDiscardGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDiscardGroupCall {
    return new TLChannelAdminLogEventActionDiscardGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDiscardGroupCall {
    return new TLChannelAdminLogEventActionDiscardGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionDiscardGroupCall | PlainMessage<TLChannelAdminLogEventActionDiscardGroupCall> | undefined, b: TLChannelAdminLogEventActionDiscardGroupCall | PlainMessage<TLChannelAdminLogEventActionDiscardGroupCall> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionDiscardGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantMute
 */
export class TLChannelAdminLogEventActionParticipantMute extends Message$1<TLChannelAdminLogEventActionParticipantMute> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantMute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantMute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantMute {
    return new TLChannelAdminLogEventActionParticipantMute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantMute {
    return new TLChannelAdminLogEventActionParticipantMute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantMute {
    return new TLChannelAdminLogEventActionParticipantMute().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantMute | PlainMessage<TLChannelAdminLogEventActionParticipantMute> | undefined, b: TLChannelAdminLogEventActionParticipantMute | PlainMessage<TLChannelAdminLogEventActionParticipantMute> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantMute, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantUnmute
 */
export class TLChannelAdminLogEventActionParticipantUnmute extends Message$1<TLChannelAdminLogEventActionParticipantUnmute> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantUnmute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantUnmute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantUnmute {
    return new TLChannelAdminLogEventActionParticipantUnmute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantUnmute {
    return new TLChannelAdminLogEventActionParticipantUnmute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantUnmute {
    return new TLChannelAdminLogEventActionParticipantUnmute().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantUnmute | PlainMessage<TLChannelAdminLogEventActionParticipantUnmute> | undefined, b: TLChannelAdminLogEventActionParticipantUnmute | PlainMessage<TLChannelAdminLogEventActionParticipantUnmute> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantUnmute, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleGroupCallSetting
 */
export class TLChannelAdminLogEventActionToggleGroupCallSetting extends Message$1<TLChannelAdminLogEventActionToggleGroupCallSetting> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleGroupCallSetting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleGroupCallSetting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleGroupCallSetting {
    return new TLChannelAdminLogEventActionToggleGroupCallSetting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleGroupCallSetting {
    return new TLChannelAdminLogEventActionToggleGroupCallSetting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleGroupCallSetting {
    return new TLChannelAdminLogEventActionToggleGroupCallSetting().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleGroupCallSetting | PlainMessage<TLChannelAdminLogEventActionToggleGroupCallSetting> | undefined, b: TLChannelAdminLogEventActionToggleGroupCallSetting | PlainMessage<TLChannelAdminLogEventActionToggleGroupCallSetting> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleGroupCallSetting, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoinByInvite
 */
export class TLChannelAdminLogEventActionParticipantJoinByInvite extends Message$1<TLChannelAdminLogEventActionParticipantJoinByInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantJoinByInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoinByInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantJoinByInvite {
    return new TLChannelAdminLogEventActionParticipantJoinByInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoinByInvite {
    return new TLChannelAdminLogEventActionParticipantJoinByInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoinByInvite {
    return new TLChannelAdminLogEventActionParticipantJoinByInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantJoinByInvite | PlainMessage<TLChannelAdminLogEventActionParticipantJoinByInvite> | undefined, b: TLChannelAdminLogEventActionParticipantJoinByInvite | PlainMessage<TLChannelAdminLogEventActionParticipantJoinByInvite> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantJoinByInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteDelete
 */
export class TLChannelAdminLogEventActionExportedInviteDelete extends Message$1<TLChannelAdminLogEventActionExportedInviteDelete> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionExportedInviteDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionExportedInviteDelete {
    return new TLChannelAdminLogEventActionExportedInviteDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteDelete {
    return new TLChannelAdminLogEventActionExportedInviteDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteDelete {
    return new TLChannelAdminLogEventActionExportedInviteDelete().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionExportedInviteDelete | PlainMessage<TLChannelAdminLogEventActionExportedInviteDelete> | undefined, b: TLChannelAdminLogEventActionExportedInviteDelete | PlainMessage<TLChannelAdminLogEventActionExportedInviteDelete> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionExportedInviteDelete, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteRevoke
 */
export class TLChannelAdminLogEventActionExportedInviteRevoke extends Message$1<TLChannelAdminLogEventActionExportedInviteRevoke> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionExportedInviteRevoke>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteRevoke";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionExportedInviteRevoke {
    return new TLChannelAdminLogEventActionExportedInviteRevoke().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteRevoke {
    return new TLChannelAdminLogEventActionExportedInviteRevoke().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteRevoke {
    return new TLChannelAdminLogEventActionExportedInviteRevoke().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionExportedInviteRevoke | PlainMessage<TLChannelAdminLogEventActionExportedInviteRevoke> | undefined, b: TLChannelAdminLogEventActionExportedInviteRevoke | PlainMessage<TLChannelAdminLogEventActionExportedInviteRevoke> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionExportedInviteRevoke, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteEdit
 */
export class TLChannelAdminLogEventActionExportedInviteEdit extends Message$1<TLChannelAdminLogEventActionExportedInviteEdit> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionExportedInviteEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionExportedInviteEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionExportedInviteEdit {
    return new TLChannelAdminLogEventActionExportedInviteEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteEdit {
    return new TLChannelAdminLogEventActionExportedInviteEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionExportedInviteEdit {
    return new TLChannelAdminLogEventActionExportedInviteEdit().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionExportedInviteEdit | PlainMessage<TLChannelAdminLogEventActionExportedInviteEdit> | undefined, b: TLChannelAdminLogEventActionExportedInviteEdit | PlainMessage<TLChannelAdminLogEventActionExportedInviteEdit> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionExportedInviteEdit, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantVolume
 */
export class TLChannelAdminLogEventActionParticipantVolume extends Message$1<TLChannelAdminLogEventActionParticipantVolume> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantVolume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantVolume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantVolume {
    return new TLChannelAdminLogEventActionParticipantVolume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantVolume {
    return new TLChannelAdminLogEventActionParticipantVolume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantVolume {
    return new TLChannelAdminLogEventActionParticipantVolume().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantVolume | PlainMessage<TLChannelAdminLogEventActionParticipantVolume> | undefined, b: TLChannelAdminLogEventActionParticipantVolume | PlainMessage<TLChannelAdminLogEventActionParticipantVolume> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantVolume, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeHistoryTTL
 */
export class TLChannelAdminLogEventActionChangeHistoryTTL extends Message$1<TLChannelAdminLogEventActionChangeHistoryTTL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeHistoryTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeHistoryTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeHistoryTTL {
    return new TLChannelAdminLogEventActionChangeHistoryTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeHistoryTTL {
    return new TLChannelAdminLogEventActionChangeHistoryTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeHistoryTTL {
    return new TLChannelAdminLogEventActionChangeHistoryTTL().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeHistoryTTL | PlainMessage<TLChannelAdminLogEventActionChangeHistoryTTL> | undefined, b: TLChannelAdminLogEventActionChangeHistoryTTL | PlainMessage<TLChannelAdminLogEventActionChangeHistoryTTL> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeHistoryTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoinByRequest
 */
export class TLChannelAdminLogEventActionParticipantJoinByRequest extends Message$1<TLChannelAdminLogEventActionParticipantJoinByRequest> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionParticipantJoinByRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionParticipantJoinByRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionParticipantJoinByRequest {
    return new TLChannelAdminLogEventActionParticipantJoinByRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoinByRequest {
    return new TLChannelAdminLogEventActionParticipantJoinByRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionParticipantJoinByRequest {
    return new TLChannelAdminLogEventActionParticipantJoinByRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionParticipantJoinByRequest | PlainMessage<TLChannelAdminLogEventActionParticipantJoinByRequest> | undefined, b: TLChannelAdminLogEventActionParticipantJoinByRequest | PlainMessage<TLChannelAdminLogEventActionParticipantJoinByRequest> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionParticipantJoinByRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleNoForwards
 */
export class TLChannelAdminLogEventActionToggleNoForwards extends Message$1<TLChannelAdminLogEventActionToggleNoForwards> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleNoForwards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleNoForwards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleNoForwards {
    return new TLChannelAdminLogEventActionToggleNoForwards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleNoForwards {
    return new TLChannelAdminLogEventActionToggleNoForwards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleNoForwards {
    return new TLChannelAdminLogEventActionToggleNoForwards().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleNoForwards | PlainMessage<TLChannelAdminLogEventActionToggleNoForwards> | undefined, b: TLChannelAdminLogEventActionToggleNoForwards | PlainMessage<TLChannelAdminLogEventActionToggleNoForwards> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleNoForwards, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionSendMessage
 */
export class TLChannelAdminLogEventActionSendMessage extends Message$1<TLChannelAdminLogEventActionSendMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionSendMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionSendMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionSendMessage {
    return new TLChannelAdminLogEventActionSendMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionSendMessage {
    return new TLChannelAdminLogEventActionSendMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionSendMessage {
    return new TLChannelAdminLogEventActionSendMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionSendMessage | PlainMessage<TLChannelAdminLogEventActionSendMessage> | undefined, b: TLChannelAdminLogEventActionSendMessage | PlainMessage<TLChannelAdminLogEventActionSendMessage> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionSendMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeAvailableReactions
 */
export class TLChannelAdminLogEventActionChangeAvailableReactions extends Message$1<TLChannelAdminLogEventActionChangeAvailableReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeAvailableReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeAvailableReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeAvailableReactions {
    return new TLChannelAdminLogEventActionChangeAvailableReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeAvailableReactions {
    return new TLChannelAdminLogEventActionChangeAvailableReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeAvailableReactions {
    return new TLChannelAdminLogEventActionChangeAvailableReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeAvailableReactions | PlainMessage<TLChannelAdminLogEventActionChangeAvailableReactions> | undefined, b: TLChannelAdminLogEventActionChangeAvailableReactions | PlainMessage<TLChannelAdminLogEventActionChangeAvailableReactions> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeAvailableReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeUsernames
 */
export class TLChannelAdminLogEventActionChangeUsernames extends Message$1<TLChannelAdminLogEventActionChangeUsernames> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionChangeUsernames>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionChangeUsernames";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionChangeUsernames {
    return new TLChannelAdminLogEventActionChangeUsernames().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeUsernames {
    return new TLChannelAdminLogEventActionChangeUsernames().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionChangeUsernames {
    return new TLChannelAdminLogEventActionChangeUsernames().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionChangeUsernames | PlainMessage<TLChannelAdminLogEventActionChangeUsernames> | undefined, b: TLChannelAdminLogEventActionChangeUsernames | PlainMessage<TLChannelAdminLogEventActionChangeUsernames> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionChangeUsernames, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleForum
 */
export class TLChannelAdminLogEventActionToggleForum extends Message$1<TLChannelAdminLogEventActionToggleForum> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleForum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleForum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleForum {
    return new TLChannelAdminLogEventActionToggleForum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleForum {
    return new TLChannelAdminLogEventActionToggleForum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleForum {
    return new TLChannelAdminLogEventActionToggleForum().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleForum | PlainMessage<TLChannelAdminLogEventActionToggleForum> | undefined, b: TLChannelAdminLogEventActionToggleForum | PlainMessage<TLChannelAdminLogEventActionToggleForum> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleForum, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionCreateTopic
 */
export class TLChannelAdminLogEventActionCreateTopic extends Message$1<TLChannelAdminLogEventActionCreateTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionCreateTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionCreateTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionCreateTopic {
    return new TLChannelAdminLogEventActionCreateTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionCreateTopic {
    return new TLChannelAdminLogEventActionCreateTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionCreateTopic {
    return new TLChannelAdminLogEventActionCreateTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionCreateTopic | PlainMessage<TLChannelAdminLogEventActionCreateTopic> | undefined, b: TLChannelAdminLogEventActionCreateTopic | PlainMessage<TLChannelAdminLogEventActionCreateTopic> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionCreateTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionEditTopic
 */
export class TLChannelAdminLogEventActionEditTopic extends Message$1<TLChannelAdminLogEventActionEditTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionEditTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionEditTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionEditTopic {
    return new TLChannelAdminLogEventActionEditTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionEditTopic {
    return new TLChannelAdminLogEventActionEditTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionEditTopic {
    return new TLChannelAdminLogEventActionEditTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionEditTopic | PlainMessage<TLChannelAdminLogEventActionEditTopic> | undefined, b: TLChannelAdminLogEventActionEditTopic | PlainMessage<TLChannelAdminLogEventActionEditTopic> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionEditTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDeleteTopic
 */
export class TLChannelAdminLogEventActionDeleteTopic extends Message$1<TLChannelAdminLogEventActionDeleteTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionDeleteTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionDeleteTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionDeleteTopic {
    return new TLChannelAdminLogEventActionDeleteTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDeleteTopic {
    return new TLChannelAdminLogEventActionDeleteTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionDeleteTopic {
    return new TLChannelAdminLogEventActionDeleteTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionDeleteTopic | PlainMessage<TLChannelAdminLogEventActionDeleteTopic> | undefined, b: TLChannelAdminLogEventActionDeleteTopic | PlainMessage<TLChannelAdminLogEventActionDeleteTopic> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionDeleteTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionPinTopic
 */
export class TLChannelAdminLogEventActionPinTopic extends Message$1<TLChannelAdminLogEventActionPinTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionPinTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionPinTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionPinTopic {
    return new TLChannelAdminLogEventActionPinTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionPinTopic {
    return new TLChannelAdminLogEventActionPinTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionPinTopic {
    return new TLChannelAdminLogEventActionPinTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionPinTopic | PlainMessage<TLChannelAdminLogEventActionPinTopic> | undefined, b: TLChannelAdminLogEventActionPinTopic | PlainMessage<TLChannelAdminLogEventActionPinTopic> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionPinTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleAntiSpam
 */
export class TLChannelAdminLogEventActionToggleAntiSpam extends Message$1<TLChannelAdminLogEventActionToggleAntiSpam> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventAction data2 = 1;
   */
  data2: ChannelAdminLogEventAction[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventActionToggleAntiSpam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventActionToggleAntiSpam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventActionToggleAntiSpam {
    return new TLChannelAdminLogEventActionToggleAntiSpam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleAntiSpam {
    return new TLChannelAdminLogEventActionToggleAntiSpam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventActionToggleAntiSpam {
    return new TLChannelAdminLogEventActionToggleAntiSpam().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventActionToggleAntiSpam | PlainMessage<TLChannelAdminLogEventActionToggleAntiSpam> | undefined, b: TLChannelAdminLogEventActionToggleAntiSpam | PlainMessage<TLChannelAdminLogEventActionToggleAntiSpam> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventActionToggleAntiSpam, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventsFilter
 */
export class ChannelAdminLogEventsFilter extends Message$1<ChannelAdminLogEventsFilter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool join = 3;
   */
  join = false;

  /**
   * @generated from field: bool leave = 4;
   */
  leave = false;

  /**
   * @generated from field: bool invite = 5;
   */
  invite = false;

  /**
   * @generated from field: bool ban = 6;
   */
  ban = false;

  /**
   * @generated from field: bool unban = 7;
   */
  unban = false;

  /**
   * @generated from field: bool kick = 8;
   */
  kick = false;

  /**
   * @generated from field: bool unkick = 9;
   */
  unkick = false;

  /**
   * @generated from field: bool promote = 10;
   */
  promote = false;

  /**
   * @generated from field: bool demote = 11;
   */
  demote = false;

  /**
   * @generated from field: bool info = 12;
   */
  info = false;

  /**
   * @generated from field: bool settings = 13;
   */
  settings = false;

  /**
   * @generated from field: bool pinned = 14;
   */
  pinned = false;

  /**
   * @generated from field: bool edit = 15;
   */
  edit = false;

  /**
   * @generated from field: bool delete = 16;
   */
  delete = false;

  /**
   * @generated from field: bool group_call = 17;
   */
  groupCall = false;

  /**
   * @generated from field: bool invites = 18;
   */
  invites = false;

  /**
   * @generated from field: bool send = 19;
   */
  send = false;

  /**
   * @generated from field: bool forums = 20;
   */
  forums = false;

  constructor(data?: PartialMessage<ChannelAdminLogEventsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "join", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "leave", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "invite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "ban", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "unban", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "kick", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "unkick", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "promote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "demote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "info", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "settings", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "group_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "invites", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "send", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "forums", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelAdminLogEventsFilter {
    return new ChannelAdminLogEventsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelAdminLogEventsFilter {
    return new ChannelAdminLogEventsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelAdminLogEventsFilter {
    return new ChannelAdminLogEventsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelAdminLogEventsFilter | PlainMessage<ChannelAdminLogEventsFilter> | undefined, b: ChannelAdminLogEventsFilter | PlainMessage<ChannelAdminLogEventsFilter> | undefined): boolean {
    return proto3.util.equals(ChannelAdminLogEventsFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventsFilter
 */
export class TLChannelAdminLogEventsFilter extends Message$1<TLChannelAdminLogEventsFilter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEventsFilter data2 = 1;
   */
  data2: ChannelAdminLogEventsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelAdminLogEventsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelAdminLogEventsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelAdminLogEventsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelAdminLogEventsFilter {
    return new TLChannelAdminLogEventsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventsFilter {
    return new TLChannelAdminLogEventsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelAdminLogEventsFilter {
    return new TLChannelAdminLogEventsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelAdminLogEventsFilter | PlainMessage<TLChannelAdminLogEventsFilter> | undefined, b: TLChannelAdminLogEventsFilter | PlainMessage<TLChannelAdminLogEventsFilter> | undefined): boolean {
    return proto3.util.equals(TLChannelAdminLogEventsFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelLocation
 */
export class ChannelLocation extends Message$1<ChannelLocation> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo_point = 3;
   */
  geoPoint: GeoPoint[] = [];

  /**
   * @generated from field: string address = 4;
   */
  address = "";

  constructor(data?: PartialMessage<ChannelLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "geo_point", kind: "message", T: GeoPoint, repeated: true },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelLocation {
    return new ChannelLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelLocation {
    return new ChannelLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelLocation {
    return new ChannelLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelLocation | PlainMessage<ChannelLocation> | undefined, b: ChannelLocation | PlainMessage<ChannelLocation> | undefined): boolean {
    return proto3.util.equals(ChannelLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelLocationEmpty
 */
export class TLChannelLocationEmpty extends Message$1<TLChannelLocationEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelLocation data2 = 1;
   */
  data2: ChannelLocation[] = [];

  constructor(data?: PartialMessage<TLChannelLocationEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelLocationEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelLocationEmpty {
    return new TLChannelLocationEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelLocationEmpty {
    return new TLChannelLocationEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelLocationEmpty {
    return new TLChannelLocationEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelLocationEmpty | PlainMessage<TLChannelLocationEmpty> | undefined, b: TLChannelLocationEmpty | PlainMessage<TLChannelLocationEmpty> | undefined): boolean {
    return proto3.util.equals(TLChannelLocationEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelLocation
 */
export class TLChannelLocation extends Message$1<TLChannelLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelLocation data2 = 1;
   */
  data2: ChannelLocation[] = [];

  constructor(data?: PartialMessage<TLChannelLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelLocation {
    return new TLChannelLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelLocation {
    return new TLChannelLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelLocation {
    return new TLChannelLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelLocation | PlainMessage<TLChannelLocation> | undefined, b: TLChannelLocation | PlainMessage<TLChannelLocation> | undefined): boolean {
    return proto3.util.equals(TLChannelLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelMessagesFilter
 */
export class ChannelMessagesFilter extends Message$1<ChannelMessagesFilter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool exclude_new_messages = 3;
   */
  excludeNewMessages = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageRange ranges = 4;
   */
  ranges: MessageRange[] = [];

  constructor(data?: PartialMessage<ChannelMessagesFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelMessagesFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "exclude_new_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "ranges", kind: "message", T: MessageRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelMessagesFilter {
    return new ChannelMessagesFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelMessagesFilter {
    return new ChannelMessagesFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelMessagesFilter {
    return new ChannelMessagesFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelMessagesFilter | PlainMessage<ChannelMessagesFilter> | undefined, b: ChannelMessagesFilter | PlainMessage<ChannelMessagesFilter> | undefined): boolean {
    return proto3.util.equals(ChannelMessagesFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelMessagesFilterEmpty
 */
export class TLChannelMessagesFilterEmpty extends Message$1<TLChannelMessagesFilterEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelMessagesFilter data2 = 1;
   */
  data2: ChannelMessagesFilter[] = [];

  constructor(data?: PartialMessage<TLChannelMessagesFilterEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelMessagesFilterEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelMessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelMessagesFilterEmpty {
    return new TLChannelMessagesFilterEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelMessagesFilterEmpty {
    return new TLChannelMessagesFilterEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelMessagesFilterEmpty {
    return new TLChannelMessagesFilterEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelMessagesFilterEmpty | PlainMessage<TLChannelMessagesFilterEmpty> | undefined, b: TLChannelMessagesFilterEmpty | PlainMessage<TLChannelMessagesFilterEmpty> | undefined): boolean {
    return proto3.util.equals(TLChannelMessagesFilterEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelMessagesFilter
 */
export class TLChannelMessagesFilter extends Message$1<TLChannelMessagesFilter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelMessagesFilter data2 = 1;
   */
  data2: ChannelMessagesFilter[] = [];

  constructor(data?: PartialMessage<TLChannelMessagesFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelMessagesFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelMessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelMessagesFilter {
    return new TLChannelMessagesFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelMessagesFilter {
    return new TLChannelMessagesFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelMessagesFilter {
    return new TLChannelMessagesFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelMessagesFilter | PlainMessage<TLChannelMessagesFilter> | undefined, b: TLChannelMessagesFilter | PlainMessage<TLChannelMessagesFilter> | undefined): boolean {
    return proto3.util.equals(TLChannelMessagesFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant
 */
export class ChannelParticipant extends Message$1<ChannelParticipant> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  /**
   * @generated from field: bool via_request = 5;
   */
  viaRequest = false;

  /**
   * @generated from field: int64 inviter_id_INT64 = 6;
   */
  inviterIdINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights admin_rights = 7;
   */
  adminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue rank = 8;
   */
  rank: StringValue[] = [];

  /**
   * @generated from field: bool can_edit = 9;
   */
  canEdit = false;

  /**
   * @generated from field: bool self = 10;
   */
  self = false;

  /**
   * @generated from field: repeated google.protobuf.Int64Value inviter_id_FLAGINT64 = 11;
   */
  inviterIdFLAGINT64: Int64Value[] = [];

  /**
   * @generated from field: int64 promoted_by = 12;
   */
  promotedBy = protoInt64.zero;

  /**
   * @generated from field: bool left = 13;
   */
  left = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 14;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int64 kicked_by = 15;
   */
  kickedBy = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights banned_rights = 16;
   */
  bannedRights: ChatBannedRights[] = [];

  constructor(data?: PartialMessage<ChannelParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "via_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "inviter_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 8, name: "rank", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "can_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "self", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "inviter_id_FLAGINT64", kind: "message", T: Int64Value, repeated: true },
    { no: 12, name: "promoted_by", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "left", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 15, name: "kicked_by", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelParticipant {
    return new ChannelParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelParticipant {
    return new ChannelParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelParticipant {
    return new ChannelParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelParticipant | PlainMessage<ChannelParticipant> | undefined, b: ChannelParticipant | PlainMessage<ChannelParticipant> | undefined): boolean {
    return proto3.util.equals(ChannelParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipant
 */
export class TLChannelParticipant extends Message$1<TLChannelParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipant {
    return new TLChannelParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipant {
    return new TLChannelParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipant {
    return new TLChannelParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipant | PlainMessage<TLChannelParticipant> | undefined, b: TLChannelParticipant | PlainMessage<TLChannelParticipant> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantSelf
 */
export class TLChannelParticipantSelf extends Message$1<TLChannelParticipantSelf> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantSelf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantSelf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantSelf {
    return new TLChannelParticipantSelf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantSelf {
    return new TLChannelParticipantSelf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantSelf {
    return new TLChannelParticipantSelf().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantSelf | PlainMessage<TLChannelParticipantSelf> | undefined, b: TLChannelParticipantSelf | PlainMessage<TLChannelParticipantSelf> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantSelf, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantCreator
 */
export class TLChannelParticipantCreator extends Message$1<TLChannelParticipantCreator> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantCreator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantCreator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantCreator {
    return new TLChannelParticipantCreator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantCreator {
    return new TLChannelParticipantCreator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantCreator {
    return new TLChannelParticipantCreator().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantCreator | PlainMessage<TLChannelParticipantCreator> | undefined, b: TLChannelParticipantCreator | PlainMessage<TLChannelParticipantCreator> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantCreator, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantAdmin
 */
export class TLChannelParticipantAdmin extends Message$1<TLChannelParticipantAdmin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantAdmin {
    return new TLChannelParticipantAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantAdmin {
    return new TLChannelParticipantAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantAdmin {
    return new TLChannelParticipantAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantAdmin | PlainMessage<TLChannelParticipantAdmin> | undefined, b: TLChannelParticipantAdmin | PlainMessage<TLChannelParticipantAdmin> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantBanned
 */
export class TLChannelParticipantBanned extends Message$1<TLChannelParticipantBanned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantBanned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantBanned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantBanned {
    return new TLChannelParticipantBanned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantBanned {
    return new TLChannelParticipantBanned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantBanned {
    return new TLChannelParticipantBanned().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantBanned | PlainMessage<TLChannelParticipantBanned> | undefined, b: TLChannelParticipantBanned | PlainMessage<TLChannelParticipantBanned> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantBanned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantLeft
 */
export class TLChannelParticipantLeft extends Message$1<TLChannelParticipantLeft> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant data2 = 1;
   */
  data2: ChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantLeft>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantLeft";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantLeft {
    return new TLChannelParticipantLeft().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantLeft {
    return new TLChannelParticipantLeft().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantLeft {
    return new TLChannelParticipantLeft().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantLeft | PlainMessage<TLChannelParticipantLeft> | undefined, b: TLChannelParticipantLeft | PlainMessage<TLChannelParticipantLeft> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantLeft, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter
 */
export class ChannelParticipantsFilter extends Message$1<ChannelParticipantsFilter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string q_STRING = 3;
   */
  qSTRING = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue q_FLAGSTRING = 4;
   */
  qFLAGSTRING: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value top_msg_id = 5;
   */
  topMsgId: Int32Value[] = [];

  constructor(data?: PartialMessage<ChannelParticipantsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "q_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "q_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
    { no: 5, name: "top_msg_id", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelParticipantsFilter {
    return new ChannelParticipantsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelParticipantsFilter {
    return new ChannelParticipantsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelParticipantsFilter {
    return new ChannelParticipantsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelParticipantsFilter | PlainMessage<ChannelParticipantsFilter> | undefined, b: ChannelParticipantsFilter | PlainMessage<ChannelParticipantsFilter> | undefined): boolean {
    return proto3.util.equals(ChannelParticipantsFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsRecent
 */
export class TLChannelParticipantsRecent extends Message$1<TLChannelParticipantsRecent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsRecent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsRecent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsRecent {
    return new TLChannelParticipantsRecent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsRecent {
    return new TLChannelParticipantsRecent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsRecent {
    return new TLChannelParticipantsRecent().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsRecent | PlainMessage<TLChannelParticipantsRecent> | undefined, b: TLChannelParticipantsRecent | PlainMessage<TLChannelParticipantsRecent> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsRecent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsAdmins
 */
export class TLChannelParticipantsAdmins extends Message$1<TLChannelParticipantsAdmins> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsAdmins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsAdmins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsAdmins {
    return new TLChannelParticipantsAdmins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsAdmins {
    return new TLChannelParticipantsAdmins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsAdmins {
    return new TLChannelParticipantsAdmins().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsAdmins | PlainMessage<TLChannelParticipantsAdmins> | undefined, b: TLChannelParticipantsAdmins | PlainMessage<TLChannelParticipantsAdmins> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsAdmins, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsKicked
 */
export class TLChannelParticipantsKicked extends Message$1<TLChannelParticipantsKicked> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsKicked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsKicked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsKicked {
    return new TLChannelParticipantsKicked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsKicked {
    return new TLChannelParticipantsKicked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsKicked {
    return new TLChannelParticipantsKicked().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsKicked | PlainMessage<TLChannelParticipantsKicked> | undefined, b: TLChannelParticipantsKicked | PlainMessage<TLChannelParticipantsKicked> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsKicked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsBots
 */
export class TLChannelParticipantsBots extends Message$1<TLChannelParticipantsBots> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsBots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsBots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsBots {
    return new TLChannelParticipantsBots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsBots {
    return new TLChannelParticipantsBots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsBots {
    return new TLChannelParticipantsBots().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsBots | PlainMessage<TLChannelParticipantsBots> | undefined, b: TLChannelParticipantsBots | PlainMessage<TLChannelParticipantsBots> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsBots, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsBanned
 */
export class TLChannelParticipantsBanned extends Message$1<TLChannelParticipantsBanned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsBanned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsBanned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsBanned {
    return new TLChannelParticipantsBanned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsBanned {
    return new TLChannelParticipantsBanned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsBanned {
    return new TLChannelParticipantsBanned().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsBanned | PlainMessage<TLChannelParticipantsBanned> | undefined, b: TLChannelParticipantsBanned | PlainMessage<TLChannelParticipantsBanned> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsBanned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsSearch
 */
export class TLChannelParticipantsSearch extends Message$1<TLChannelParticipantsSearch> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsSearch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsSearch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsSearch {
    return new TLChannelParticipantsSearch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsSearch {
    return new TLChannelParticipantsSearch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsSearch {
    return new TLChannelParticipantsSearch().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsSearch | PlainMessage<TLChannelParticipantsSearch> | undefined, b: TLChannelParticipantsSearch | PlainMessage<TLChannelParticipantsSearch> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsSearch, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsContacts
 */
export class TLChannelParticipantsContacts extends Message$1<TLChannelParticipantsContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsContacts {
    return new TLChannelParticipantsContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsContacts {
    return new TLChannelParticipantsContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsContacts {
    return new TLChannelParticipantsContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsContacts | PlainMessage<TLChannelParticipantsContacts> | undefined, b: TLChannelParticipantsContacts | PlainMessage<TLChannelParticipantsContacts> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsMentions
 */
export class TLChannelParticipantsMentions extends Message$1<TLChannelParticipantsMentions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipantsFilter data2 = 1;
   */
  data2: ChannelParticipantsFilter[] = [];

  constructor(data?: PartialMessage<TLChannelParticipantsMentions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelParticipantsMentions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelParticipantsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelParticipantsMentions {
    return new TLChannelParticipantsMentions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelParticipantsMentions {
    return new TLChannelParticipantsMentions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelParticipantsMentions {
    return new TLChannelParticipantsMentions().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelParticipantsMentions | PlainMessage<TLChannelParticipantsMentions> | undefined, b: TLChannelParticipantsMentions | PlainMessage<TLChannelParticipantsMentions> | undefined): boolean {
    return proto3.util.equals(TLChannelParticipantsMentions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Chat
 */
export class Chat extends Message$1<Chat> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool creator = 4;
   */
  creator = false;

  /**
   * @generated from field: bool left = 5;
   */
  left = false;

  /**
   * @generated from field: bool deactivated = 6;
   */
  deactivated = false;

  /**
   * @generated from field: bool call_active = 7;
   */
  callActive = false;

  /**
   * @generated from field: bool call_not_empty = 8;
   */
  callNotEmpty = false;

  /**
   * @generated from field: bool noforwards = 9;
   */
  noforwards = false;

  /**
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatPhoto photo = 11;
   */
  photo: ChatPhoto[] = [];

  /**
   * @generated from field: int32 participants_count_INT32 = 12;
   */
  participantsCountINT32 = 0;

  /**
   * @generated from field: int32 date = 13;
   */
  date = 0;

  /**
   * @generated from field: int32 version = 14;
   */
  version = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChannel migrated_to = 15;
   */
  migratedTo: InputChannel[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights admin_rights = 16;
   */
  adminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights default_banned_rights = 17;
   */
  defaultBannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: bool broadcast = 18;
   */
  broadcast = false;

  /**
   * @generated from field: bool verified = 19;
   */
  verified = false;

  /**
   * @generated from field: bool megagroup = 20;
   */
  megagroup = false;

  /**
   * @generated from field: bool restricted = 21;
   */
  restricted = false;

  /**
   * @generated from field: bool signatures = 22;
   */
  signatures = false;

  /**
   * @generated from field: bool min = 23;
   */
  min = false;

  /**
   * @generated from field: bool scam = 24;
   */
  scam = false;

  /**
   * @generated from field: bool has_link = 25;
   */
  hasLink = false;

  /**
   * @generated from field: bool has_geo = 26;
   */
  hasGeo = false;

  /**
   * @generated from field: bool slowmode_enabled = 27;
   */
  slowmodeEnabled = false;

  /**
   * @generated from field: bool fake = 28;
   */
  fake = false;

  /**
   * @generated from field: bool gigagroup = 29;
   */
  gigagroup = false;

  /**
   * @generated from field: bool join_to_send = 30;
   */
  joinToSend = false;

  /**
   * @generated from field: bool join_request = 31;
   */
  joinRequest = false;

  /**
   * @generated from field: bool forum = 32;
   */
  forum = false;

  /**
   * @generated from field: bool stories_hidden = 33;
   */
  storiesHidden = false;

  /**
   * @generated from field: bool stories_hidden_min = 34;
   */
  storiesHiddenMin = false;

  /**
   * @generated from field: bool stories_unavailable = 35;
   */
  storiesUnavailable = false;

  /**
   * @generated from field: repeated google.protobuf.Int64Value access_hash_FLAGINT64 = 36;
   */
  accessHashFLAGINT64: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue username = 37;
   */
  username: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RestrictionReason restriction_reason = 38;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights banned_rights = 39;
   */
  bannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value participants_count_FLAGINT32 = 40;
   */
  participantsCountFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Username usernames = 41;
   */
  usernames: Username[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value stories_max_id = 42;
   */
  storiesMaxId: Int32Value[] = [];

  /**
   * @generated from field: int64 access_hash_INT64 = 43;
   */
  accessHashINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value until_date = 44;
   */
  untilDate: Int32Value[] = [];

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "creator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "left", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "deactivated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "call_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "call_not_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "noforwards", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "photo", kind: "message", T: ChatPhoto, repeated: true },
    { no: 12, name: "participants_count_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "migrated_to", kind: "message", T: InputChannel, repeated: true },
    { no: 16, name: "admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 17, name: "default_banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 18, name: "broadcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "megagroup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "restricted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "signatures", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "has_link", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "has_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "slowmode_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 28, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 29, name: "gigagroup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "join_to_send", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 31, name: "join_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 32, name: "forum", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 33, name: "stories_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 34, name: "stories_hidden_min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 35, name: "stories_unavailable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 36, name: "access_hash_FLAGINT64", kind: "message", T: Int64Value, repeated: true },
    { no: 37, name: "username", kind: "message", T: StringValue, repeated: true },
    { no: 38, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 39, name: "banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 40, name: "participants_count_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 41, name: "usernames", kind: "message", T: Username, repeated: true },
    { no: 42, name: "stories_max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 43, name: "access_hash_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 44, name: "until_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatEmpty
 */
export class TLChatEmpty extends Message$1<TLChatEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat data2 = 1;
   */
  data2: Chat[] = [];

  constructor(data?: PartialMessage<TLChatEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatEmpty {
    return new TLChatEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatEmpty {
    return new TLChatEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatEmpty {
    return new TLChatEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatEmpty | PlainMessage<TLChatEmpty> | undefined, b: TLChatEmpty | PlainMessage<TLChatEmpty> | undefined): boolean {
    return proto3.util.equals(TLChatEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChat
 */
export class TLChat extends Message$1<TLChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat data2 = 1;
   */
  data2: Chat[] = [];

  constructor(data?: PartialMessage<TLChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChat {
    return new TLChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChat {
    return new TLChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChat {
    return new TLChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLChat | PlainMessage<TLChat> | undefined, b: TLChat | PlainMessage<TLChat> | undefined): boolean {
    return proto3.util.equals(TLChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatForbidden
 */
export class TLChatForbidden extends Message$1<TLChatForbidden> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat data2 = 1;
   */
  data2: Chat[] = [];

  constructor(data?: PartialMessage<TLChatForbidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatForbidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatForbidden {
    return new TLChatForbidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatForbidden {
    return new TLChatForbidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatForbidden {
    return new TLChatForbidden().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatForbidden | PlainMessage<TLChatForbidden> | undefined, b: TLChatForbidden | PlainMessage<TLChatForbidden> | undefined): boolean {
    return proto3.util.equals(TLChatForbidden, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannel
 */
export class TLChannel extends Message$1<TLChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat data2 = 1;
   */
  data2: Chat[] = [];

  constructor(data?: PartialMessage<TLChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannel {
    return new TLChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannel {
    return new TLChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannel {
    return new TLChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannel | PlainMessage<TLChannel> | undefined, b: TLChannel | PlainMessage<TLChannel> | undefined): boolean {
    return proto3.util.equals(TLChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelForbidden
 */
export class TLChannelForbidden extends Message$1<TLChannelForbidden> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat data2 = 1;
   */
  data2: Chat[] = [];

  constructor(data?: PartialMessage<TLChannelForbidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelForbidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelForbidden {
    return new TLChannelForbidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelForbidden {
    return new TLChannelForbidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelForbidden {
    return new TLChannelForbidden().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelForbidden | PlainMessage<TLChannelForbidden> | undefined, b: TLChannelForbidden | PlainMessage<TLChannelForbidden> | undefined): boolean {
    return proto3.util.equals(TLChannelForbidden, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights
 */
export class ChatAdminRights extends Message$1<ChatAdminRights> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool change_info = 3;
   */
  changeInfo = false;

  /**
   * @generated from field: bool post_messages = 4;
   */
  postMessages = false;

  /**
   * @generated from field: bool edit_messages = 5;
   */
  editMessages = false;

  /**
   * @generated from field: bool delete_messages = 6;
   */
  deleteMessages = false;

  /**
   * @generated from field: bool ban_users = 7;
   */
  banUsers = false;

  /**
   * @generated from field: bool invite_users = 8;
   */
  inviteUsers = false;

  /**
   * @generated from field: bool pin_messages = 9;
   */
  pinMessages = false;

  /**
   * @generated from field: bool add_admins = 10;
   */
  addAdmins = false;

  /**
   * @generated from field: bool anonymous = 11;
   */
  anonymous = false;

  /**
   * @generated from field: bool manage_call = 12;
   */
  manageCall = false;

  /**
   * @generated from field: bool other = 13;
   */
  other = false;

  /**
   * @generated from field: bool manage_topics = 14;
   */
  manageTopics = false;

  /**
   * @generated from field: bool post_stories = 15;
   */
  postStories = false;

  /**
   * @generated from field: bool edit_stories = 16;
   */
  editStories = false;

  /**
   * @generated from field: bool delete_stories = 17;
   */
  deleteStories = false;

  constructor(data?: PartialMessage<ChatAdminRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "change_info", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "post_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "edit_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "delete_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "ban_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "invite_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "pin_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "add_admins", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "anonymous", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "manage_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "other", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "manage_topics", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "post_stories", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "edit_stories", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "delete_stories", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatAdminRights {
    return new ChatAdminRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatAdminRights {
    return new ChatAdminRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatAdminRights {
    return new ChatAdminRights().fromJsonString(jsonString, options);
  }

  static equals(a: ChatAdminRights | PlainMessage<ChatAdminRights> | undefined, b: ChatAdminRights | PlainMessage<ChatAdminRights> | undefined): boolean {
    return proto3.util.equals(ChatAdminRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatAdminRights
 */
export class TLChatAdminRights extends Message$1<TLChatAdminRights> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights data2 = 1;
   */
  data2: ChatAdminRights[] = [];

  constructor(data?: PartialMessage<TLChatAdminRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatAdminRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatAdminRights, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatAdminRights {
    return new TLChatAdminRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatAdminRights {
    return new TLChatAdminRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatAdminRights {
    return new TLChatAdminRights().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatAdminRights | PlainMessage<TLChatAdminRights> | undefined, b: TLChatAdminRights | PlainMessage<TLChatAdminRights> | undefined): boolean {
    return proto3.util.equals(TLChatAdminRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatAdminWithInvites
 */
export class ChatAdminWithInvites extends Message$1<ChatAdminWithInvites> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 admin_id = 3;
   */
  adminId = protoInt64.zero;

  /**
   * @generated from field: int32 invites_count = 4;
   */
  invitesCount = 0;

  /**
   * @generated from field: int32 revoked_invites_count = 5;
   */
  revokedInvitesCount = 0;

  constructor(data?: PartialMessage<ChatAdminWithInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatAdminWithInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "admin_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "invites_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "revoked_invites_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatAdminWithInvites {
    return new ChatAdminWithInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatAdminWithInvites {
    return new ChatAdminWithInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatAdminWithInvites {
    return new ChatAdminWithInvites().fromJsonString(jsonString, options);
  }

  static equals(a: ChatAdminWithInvites | PlainMessage<ChatAdminWithInvites> | undefined, b: ChatAdminWithInvites | PlainMessage<ChatAdminWithInvites> | undefined): boolean {
    return proto3.util.equals(ChatAdminWithInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatAdminWithInvites
 */
export class TLChatAdminWithInvites extends Message$1<TLChatAdminWithInvites> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminWithInvites data2 = 1;
   */
  data2: ChatAdminWithInvites[] = [];

  constructor(data?: PartialMessage<TLChatAdminWithInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatAdminWithInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatAdminWithInvites, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatAdminWithInvites {
    return new TLChatAdminWithInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatAdminWithInvites {
    return new TLChatAdminWithInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatAdminWithInvites {
    return new TLChatAdminWithInvites().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatAdminWithInvites | PlainMessage<TLChatAdminWithInvites> | undefined, b: TLChatAdminWithInvites | PlainMessage<TLChatAdminWithInvites> | undefined): boolean {
    return proto3.util.equals(TLChatAdminWithInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights
 */
export class ChatBannedRights extends Message$1<ChatBannedRights> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool view_messages = 3;
   */
  viewMessages = false;

  /**
   * @generated from field: bool send_messages = 4;
   */
  sendMessages = false;

  /**
   * @generated from field: bool send_media = 5;
   */
  sendMedia = false;

  /**
   * @generated from field: bool send_stickers = 6;
   */
  sendStickers = false;

  /**
   * @generated from field: bool send_gifs = 7;
   */
  sendGifs = false;

  /**
   * @generated from field: bool send_games = 8;
   */
  sendGames = false;

  /**
   * @generated from field: bool send_inline = 9;
   */
  sendInline = false;

  /**
   * @generated from field: bool embed_links = 10;
   */
  embedLinks = false;

  /**
   * @generated from field: bool send_polls = 11;
   */
  sendPolls = false;

  /**
   * @generated from field: bool change_info = 12;
   */
  changeInfo = false;

  /**
   * @generated from field: bool invite_users = 13;
   */
  inviteUsers = false;

  /**
   * @generated from field: bool pin_messages = 14;
   */
  pinMessages = false;

  /**
   * @generated from field: bool manage_topics = 15;
   */
  manageTopics = false;

  /**
   * @generated from field: bool send_photos = 16;
   */
  sendPhotos = false;

  /**
   * @generated from field: bool send_videos = 17;
   */
  sendVideos = false;

  /**
   * @generated from field: bool send_roundvideos = 18;
   */
  sendRoundvideos = false;

  /**
   * @generated from field: bool send_audios = 19;
   */
  sendAudios = false;

  /**
   * @generated from field: bool send_voices = 20;
   */
  sendVoices = false;

  /**
   * @generated from field: bool send_docs = 21;
   */
  sendDocs = false;

  /**
   * @generated from field: bool send_plain = 22;
   */
  sendPlain = false;

  /**
   * @generated from field: int32 until_date = 23;
   */
  untilDate = 0;

  constructor(data?: PartialMessage<ChatBannedRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "view_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "send_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "send_media", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "send_stickers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "send_gifs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "send_games", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "send_inline", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "embed_links", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "send_polls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "change_info", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "invite_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "pin_messages", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "manage_topics", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "send_photos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "send_videos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "send_roundvideos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "send_audios", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "send_voices", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "send_docs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "send_plain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "until_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatBannedRights {
    return new ChatBannedRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatBannedRights {
    return new ChatBannedRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatBannedRights {
    return new ChatBannedRights().fromJsonString(jsonString, options);
  }

  static equals(a: ChatBannedRights | PlainMessage<ChatBannedRights> | undefined, b: ChatBannedRights | PlainMessage<ChatBannedRights> | undefined): boolean {
    return proto3.util.equals(ChatBannedRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatBannedRights
 */
export class TLChatBannedRights extends Message$1<TLChatBannedRights> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights data2 = 1;
   */
  data2: ChatBannedRights[] = [];

  constructor(data?: PartialMessage<TLChatBannedRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatBannedRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatBannedRights, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatBannedRights {
    return new TLChatBannedRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatBannedRights {
    return new TLChatBannedRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatBannedRights {
    return new TLChatBannedRights().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatBannedRights | PlainMessage<TLChatBannedRights> | undefined, b: TLChatBannedRights | PlainMessage<TLChatBannedRights> | undefined): boolean {
    return proto3.util.equals(TLChatBannedRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatFull
 */
export class ChatFull extends Message$1<ChatFull> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool can_set_username = 3;
   */
  canSetUsername = false;

  /**
   * @generated from field: bool has_scheduled = 4;
   */
  hasScheduled = false;

  /**
   * @generated from field: bool translations_disabled = 5;
   */
  translationsDisabled = false;

  /**
   * @generated from field: int64 id = 6;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string about = 7;
   */
  about = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipants participants = 8;
   */
  participants: ChatParticipants[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo chat_photo = 9;
   */
  chatPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings notify_settings = 10;
   */
  notifySettings: PeerNotifySettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite exported_invite = 11;
   */
  exportedInvite: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInfo bot_info = 12;
   */
  botInfo: BotInfo[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value pinned_msg_id = 13;
   */
  pinnedMsgId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value folder_id = 14;
   */
  folderId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call = 15;
   */
  call: InputGroupCall[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 16;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer groupcall_default_join_as = 17;
   */
  groupcallDefaultJoinAs: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue theme_emoticon = 18;
   */
  themeEmoticon: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value requests_pending = 19;
   */
  requestsPending: Int32Value[] = [];

  /**
   * @generated from field: int64 recent_requesters = 20;
   */
  recentRequesters = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions available_reactions_FLAGCHATREACTIONS = 21;
   */
  availableReactionsFLAGCHATREACTIONS: ChatReactions[] = [];

  /**
   * @generated from field: bool can_view_participants = 22;
   */
  canViewParticipants = false;

  /**
   * @generated from field: bool can_set_stickers = 23;
   */
  canSetStickers = false;

  /**
   * @generated from field: bool hidden_prehistory = 24;
   */
  hiddenPrehistory = false;

  /**
   * @generated from field: bool can_set_location = 25;
   */
  canSetLocation = false;

  /**
   * @generated from field: bool can_view_stats = 26;
   */
  canViewStats = false;

  /**
   * @generated from field: bool blocked = 27;
   */
  blocked = false;

  /**
   * @generated from field: bool can_delete_channel = 28;
   */
  canDeleteChannel = false;

  /**
   * @generated from field: bool antispam = 29;
   */
  antispam = false;

  /**
   * @generated from field: bool participants_hidden = 30;
   */
  participantsHidden = false;

  /**
   * @generated from field: bool stories_pinned_available = 31;
   */
  storiesPinnedAvailable = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value participants_count = 32;
   */
  participantsCount: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value admins_count = 33;
   */
  adminsCount: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value kicked_count = 34;
   */
  kickedCount: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value banned_count = 35;
   */
  bannedCount: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value online_count = 36;
   */
  onlineCount: Int32Value[] = [];

  /**
   * @generated from field: int32 read_inbox_max_id = 37;
   */
  readInboxMaxId = 0;

  /**
   * @generated from field: int32 read_outbox_max_id = 38;
   */
  readOutboxMaxId = 0;

  /**
   * @generated from field: int32 unread_count = 39;
   */
  unreadCount = 0;

  /**
   * @generated from field: repeated google.protobuf.Int64Value migrated_from_chat_id = 40;
   */
  migratedFromChatId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value migrated_from_max_id = 41;
   */
  migratedFromMaxId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSet stickerset = 42;
   */
  stickerset: StickerSet[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value available_min_id = 43;
   */
  availableMinId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value linked_chat_id = 44;
   */
  linkedChatId: Int64Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelLocation location = 45;
   */
  location: ChannelLocation[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value slowmode_seconds = 46;
   */
  slowmodeSeconds: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value slowmode_next_send_date = 47;
   */
  slowmodeNextSendDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value stats_dc = 48;
   */
  statsDc: Int32Value[] = [];

  /**
   * @generated from field: int32 pts = 49;
   */
  pts = 0;

  /**
   * @generated from field: string pending_suggestions = 50;
   */
  pendingSuggestions = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer default_send_as = 51;
   */
  defaultSendAs: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerStories stories = 52;
   */
  stories: PeerStories[] = [];

  /**
   * @generated from field: string available_reactions_FLAGVECTORSTRING = 53;
   */
  availableReactionsFLAGVECTORSTRING = "";

  constructor(data?: PartialMessage<ChatFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "can_set_username", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "translations_disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "participants", kind: "message", T: ChatParticipants, repeated: true },
    { no: 9, name: "chat_photo", kind: "message", T: Photo, repeated: true },
    { no: 10, name: "notify_settings", kind: "message", T: PeerNotifySettings, repeated: true },
    { no: 11, name: "exported_invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 12, name: "bot_info", kind: "message", T: BotInfo, repeated: true },
    { no: 13, name: "pinned_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 14, name: "folder_id", kind: "message", T: Int32Value, repeated: true },
    { no: 15, name: "call", kind: "message", T: InputGroupCall, repeated: true },
    { no: 16, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 17, name: "groupcall_default_join_as", kind: "message", T: Peer, repeated: true },
    { no: 18, name: "theme_emoticon", kind: "message", T: StringValue, repeated: true },
    { no: 19, name: "requests_pending", kind: "message", T: Int32Value, repeated: true },
    { no: 20, name: "recent_requesters", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "available_reactions_FLAGCHATREACTIONS", kind: "message", T: ChatReactions, repeated: true },
    { no: 22, name: "can_view_participants", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "can_set_stickers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "hidden_prehistory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "can_set_location", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "can_view_stats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "blocked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 28, name: "can_delete_channel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 29, name: "antispam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "participants_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 31, name: "stories_pinned_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 32, name: "participants_count", kind: "message", T: Int32Value, repeated: true },
    { no: 33, name: "admins_count", kind: "message", T: Int32Value, repeated: true },
    { no: 34, name: "kicked_count", kind: "message", T: Int32Value, repeated: true },
    { no: 35, name: "banned_count", kind: "message", T: Int32Value, repeated: true },
    { no: 36, name: "online_count", kind: "message", T: Int32Value, repeated: true },
    { no: 37, name: "read_inbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 38, name: "read_outbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 39, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 40, name: "migrated_from_chat_id", kind: "message", T: Int64Value, repeated: true },
    { no: 41, name: "migrated_from_max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 42, name: "stickerset", kind: "message", T: StickerSet, repeated: true },
    { no: 43, name: "available_min_id", kind: "message", T: Int32Value, repeated: true },
    { no: 44, name: "linked_chat_id", kind: "message", T: Int64Value, repeated: true },
    { no: 45, name: "location", kind: "message", T: ChannelLocation, repeated: true },
    { no: 46, name: "slowmode_seconds", kind: "message", T: Int32Value, repeated: true },
    { no: 47, name: "slowmode_next_send_date", kind: "message", T: Int32Value, repeated: true },
    { no: 48, name: "stats_dc", kind: "message", T: Int32Value, repeated: true },
    { no: 49, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 50, name: "pending_suggestions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 51, name: "default_send_as", kind: "message", T: Peer, repeated: true },
    { no: 52, name: "stories", kind: "message", T: PeerStories, repeated: true },
    { no: 53, name: "available_reactions_FLAGVECTORSTRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatFull {
    return new ChatFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatFull {
    return new ChatFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatFull {
    return new ChatFull().fromJsonString(jsonString, options);
  }

  static equals(a: ChatFull | PlainMessage<ChatFull> | undefined, b: ChatFull | PlainMessage<ChatFull> | undefined): boolean {
    return proto3.util.equals(ChatFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatFull
 */
export class TLChatFull extends Message$1<TLChatFull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatFull data2 = 1;
   */
  data2: ChatFull[] = [];

  constructor(data?: PartialMessage<TLChatFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatFull, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatFull {
    return new TLChatFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatFull {
    return new TLChatFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatFull {
    return new TLChatFull().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatFull | PlainMessage<TLChatFull> | undefined, b: TLChatFull | PlainMessage<TLChatFull> | undefined): boolean {
    return proto3.util.equals(TLChatFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelFull
 */
export class TLChannelFull extends Message$1<TLChannelFull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatFull data2 = 1;
   */
  data2: ChatFull[] = [];

  constructor(data?: PartialMessage<TLChannelFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatFull, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelFull {
    return new TLChannelFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelFull {
    return new TLChannelFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelFull {
    return new TLChannelFull().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelFull | PlainMessage<TLChannelFull> | undefined, b: TLChannelFull | PlainMessage<TLChannelFull> | undefined): boolean {
    return proto3.util.equals(TLChannelFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatInvite
 */
export class ChatInvite extends Message$1<ChatInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chat = 3;
   */
  chat: Chat[] = [];

  /**
   * @generated from field: bool channel = 4;
   */
  channel = false;

  /**
   * @generated from field: bool broadcast = 5;
   */
  broadcast = false;

  /**
   * @generated from field: bool public = 6;
   */
  public = false;

  /**
   * @generated from field: bool megagroup = 7;
   */
  megagroup = false;

  /**
   * @generated from field: bool request_needed = 8;
   */
  requestNeeded = false;

  /**
   * @generated from field: bool verified = 9;
   */
  verified = false;

  /**
   * @generated from field: bool scam = 10;
   */
  scam = false;

  /**
   * @generated from field: bool fake = 11;
   */
  fake = false;

  /**
   * @generated from field: string title = 12;
   */
  title = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue about = 13;
   */
  about: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 14;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: int32 participants_count = 15;
   */
  participantsCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User participants = 16;
   */
  participants: User[] = [];

  /**
   * @generated from field: int32 expires = 17;
   */
  expires = 0;

  constructor(data?: PartialMessage<ChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chat", kind: "message", T: Chat, repeated: true },
    { no: 4, name: "channel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "broadcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "megagroup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "request_needed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "about", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 15, name: "participants_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "participants", kind: "message", T: User, repeated: true },
    { no: 17, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatInvite {
    return new ChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatInvite {
    return new ChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatInvite {
    return new ChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ChatInvite | PlainMessage<ChatInvite> | undefined, b: ChatInvite | PlainMessage<ChatInvite> | undefined): boolean {
    return proto3.util.equals(ChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInviteAlready
 */
export class TLChatInviteAlready extends Message$1<TLChatInviteAlready> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInvite data2 = 1;
   */
  data2: ChatInvite[] = [];

  constructor(data?: PartialMessage<TLChatInviteAlready>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInviteAlready";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInviteAlready {
    return new TLChatInviteAlready().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInviteAlready {
    return new TLChatInviteAlready().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInviteAlready {
    return new TLChatInviteAlready().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInviteAlready | PlainMessage<TLChatInviteAlready> | undefined, b: TLChatInviteAlready | PlainMessage<TLChatInviteAlready> | undefined): boolean {
    return proto3.util.equals(TLChatInviteAlready, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInvite
 */
export class TLChatInvite extends Message$1<TLChatInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInvite data2 = 1;
   */
  data2: ChatInvite[] = [];

  constructor(data?: PartialMessage<TLChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInvite {
    return new TLChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInvite {
    return new TLChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInvite {
    return new TLChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInvite | PlainMessage<TLChatInvite> | undefined, b: TLChatInvite | PlainMessage<TLChatInvite> | undefined): boolean {
    return proto3.util.equals(TLChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInvitePeek
 */
export class TLChatInvitePeek extends Message$1<TLChatInvitePeek> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInvite data2 = 1;
   */
  data2: ChatInvite[] = [];

  constructor(data?: PartialMessage<TLChatInvitePeek>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInvitePeek";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInvitePeek {
    return new TLChatInvitePeek().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInvitePeek {
    return new TLChatInvitePeek().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInvitePeek {
    return new TLChatInvitePeek().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInvitePeek | PlainMessage<TLChatInvitePeek> | undefined, b: TLChatInvitePeek | PlainMessage<TLChatInvitePeek> | undefined): boolean {
    return proto3.util.equals(TLChatInvitePeek, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatInviteImporter
 */
export class ChatInviteImporter extends Message$1<ChatInviteImporter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool requested = 3;
   */
  requested = false;

  /**
   * @generated from field: bool via_chatlist = 4;
   */
  viaChatlist = false;

  /**
   * @generated from field: int64 user_id = 5;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue about = 7;
   */
  about: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value approved_by = 8;
   */
  approvedBy: Int64Value[] = [];

  constructor(data?: PartialMessage<ChatInviteImporter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatInviteImporter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "via_chatlist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "about", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "approved_by", kind: "message", T: Int64Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatInviteImporter {
    return new ChatInviteImporter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatInviteImporter {
    return new ChatInviteImporter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatInviteImporter {
    return new ChatInviteImporter().fromJsonString(jsonString, options);
  }

  static equals(a: ChatInviteImporter | PlainMessage<ChatInviteImporter> | undefined, b: ChatInviteImporter | PlainMessage<ChatInviteImporter> | undefined): boolean {
    return proto3.util.equals(ChatInviteImporter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInviteImporter
 */
export class TLChatInviteImporter extends Message$1<TLChatInviteImporter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInviteImporter data2 = 1;
   */
  data2: ChatInviteImporter[] = [];

  constructor(data?: PartialMessage<TLChatInviteImporter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInviteImporter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatInviteImporter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInviteImporter {
    return new TLChatInviteImporter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInviteImporter {
    return new TLChatInviteImporter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInviteImporter {
    return new TLChatInviteImporter().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInviteImporter | PlainMessage<TLChatInviteImporter> | undefined, b: TLChatInviteImporter | PlainMessage<TLChatInviteImporter> | undefined): boolean {
    return proto3.util.equals(TLChatInviteImporter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatOnlines
 */
export class ChatOnlines extends Message$1<ChatOnlines> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 onlines = 3;
   */
  onlines = 0;

  constructor(data?: PartialMessage<ChatOnlines>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatOnlines";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "onlines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatOnlines {
    return new ChatOnlines().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatOnlines {
    return new ChatOnlines().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatOnlines {
    return new ChatOnlines().fromJsonString(jsonString, options);
  }

  static equals(a: ChatOnlines | PlainMessage<ChatOnlines> | undefined, b: ChatOnlines | PlainMessage<ChatOnlines> | undefined): boolean {
    return proto3.util.equals(ChatOnlines, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatOnlines
 */
export class TLChatOnlines extends Message$1<TLChatOnlines> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatOnlines data2 = 1;
   */
  data2: ChatOnlines[] = [];

  constructor(data?: PartialMessage<TLChatOnlines>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatOnlines";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatOnlines, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatOnlines {
    return new TLChatOnlines().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatOnlines {
    return new TLChatOnlines().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatOnlines {
    return new TLChatOnlines().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatOnlines | PlainMessage<TLChatOnlines> | undefined, b: TLChatOnlines | PlainMessage<TLChatOnlines> | undefined): boolean {
    return proto3.util.equals(TLChatOnlines, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatParticipant
 */
export class ChatParticipant extends Message$1<ChatParticipant> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 inviter_id = 4;
   */
  inviterId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  constructor(data?: PartialMessage<ChatParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "inviter_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatParticipant {
    return new ChatParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatParticipant {
    return new ChatParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatParticipant {
    return new ChatParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: ChatParticipant | PlainMessage<ChatParticipant> | undefined, b: ChatParticipant | PlainMessage<ChatParticipant> | undefined): boolean {
    return proto3.util.equals(ChatParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatParticipant
 */
export class TLChatParticipant extends Message$1<TLChatParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant data2 = 1;
   */
  data2: ChatParticipant[] = [];

  constructor(data?: PartialMessage<TLChatParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatParticipant {
    return new TLChatParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatParticipant {
    return new TLChatParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatParticipant {
    return new TLChatParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatParticipant | PlainMessage<TLChatParticipant> | undefined, b: TLChatParticipant | PlainMessage<TLChatParticipant> | undefined): boolean {
    return proto3.util.equals(TLChatParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantCreator
 */
export class TLChatParticipantCreator extends Message$1<TLChatParticipantCreator> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant data2 = 1;
   */
  data2: ChatParticipant[] = [];

  constructor(data?: PartialMessage<TLChatParticipantCreator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantCreator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatParticipantCreator {
    return new TLChatParticipantCreator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatParticipantCreator {
    return new TLChatParticipantCreator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatParticipantCreator {
    return new TLChatParticipantCreator().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatParticipantCreator | PlainMessage<TLChatParticipantCreator> | undefined, b: TLChatParticipantCreator | PlainMessage<TLChatParticipantCreator> | undefined): boolean {
    return proto3.util.equals(TLChatParticipantCreator, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantAdmin
 */
export class TLChatParticipantAdmin extends Message$1<TLChatParticipantAdmin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant data2 = 1;
   */
  data2: ChatParticipant[] = [];

  constructor(data?: PartialMessage<TLChatParticipantAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatParticipantAdmin {
    return new TLChatParticipantAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatParticipantAdmin {
    return new TLChatParticipantAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatParticipantAdmin {
    return new TLChatParticipantAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatParticipantAdmin | PlainMessage<TLChatParticipantAdmin> | undefined, b: TLChatParticipantAdmin | PlainMessage<TLChatParticipantAdmin> | undefined): boolean {
    return proto3.util.equals(TLChatParticipantAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatParticipants
 */
export class ChatParticipants extends Message$1<ChatParticipants> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 chat_id = 3;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant self_participant = 4;
   */
  selfParticipant: ChatParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant participants = 5;
   */
  participants: ChatParticipant[] = [];

  /**
   * @generated from field: int32 version = 6;
   */
  version = 0;

  constructor(data?: PartialMessage<ChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "self_participant", kind: "message", T: ChatParticipant, repeated: true },
    { no: 5, name: "participants", kind: "message", T: ChatParticipant, repeated: true },
    { no: 6, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatParticipants {
    return new ChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatParticipants {
    return new ChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatParticipants {
    return new ChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: ChatParticipants | PlainMessage<ChatParticipants> | undefined, b: ChatParticipants | PlainMessage<ChatParticipants> | undefined): boolean {
    return proto3.util.equals(ChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantsForbidden
 */
export class TLChatParticipantsForbidden extends Message$1<TLChatParticipantsForbidden> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipants data2 = 1;
   */
  data2: ChatParticipants[] = [];

  constructor(data?: PartialMessage<TLChatParticipantsForbidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatParticipantsForbidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatParticipants, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatParticipantsForbidden {
    return new TLChatParticipantsForbidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatParticipantsForbidden {
    return new TLChatParticipantsForbidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatParticipantsForbidden {
    return new TLChatParticipantsForbidden().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatParticipantsForbidden | PlainMessage<TLChatParticipantsForbidden> | undefined, b: TLChatParticipantsForbidden | PlainMessage<TLChatParticipantsForbidden> | undefined): boolean {
    return proto3.util.equals(TLChatParticipantsForbidden, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatParticipants
 */
export class TLChatParticipants extends Message$1<TLChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipants data2 = 1;
   */
  data2: ChatParticipants[] = [];

  constructor(data?: PartialMessage<TLChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatParticipants, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatParticipants {
    return new TLChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatParticipants {
    return new TLChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatParticipants {
    return new TLChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatParticipants | PlainMessage<TLChatParticipants> | undefined, b: TLChatParticipants | PlainMessage<TLChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatPhoto
 */
export class ChatPhoto extends Message$1<ChatPhoto> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool has_video = 3;
   */
  hasVideo = false;

  /**
   * @generated from field: int64 photo_id = 4;
   */
  photoId = protoInt64.zero;

  /**
   * @generated from field: bytes stripped_thumb = 5;
   */
  strippedThumb = new Uint8Array(0);

  /**
   * @generated from field: int32 dc_id = 6;
   */
  dcId = 0;

  constructor(data?: PartialMessage<ChatPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "has_video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "stripped_thumb", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatPhoto {
    return new ChatPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatPhoto {
    return new ChatPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatPhoto {
    return new ChatPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: ChatPhoto | PlainMessage<ChatPhoto> | undefined, b: ChatPhoto | PlainMessage<ChatPhoto> | undefined): boolean {
    return proto3.util.equals(ChatPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatPhotoEmpty
 */
export class TLChatPhotoEmpty extends Message$1<TLChatPhotoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatPhoto data2 = 1;
   */
  data2: ChatPhoto[] = [];

  constructor(data?: PartialMessage<TLChatPhotoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatPhotoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatPhotoEmpty {
    return new TLChatPhotoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatPhotoEmpty {
    return new TLChatPhotoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatPhotoEmpty {
    return new TLChatPhotoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatPhotoEmpty | PlainMessage<TLChatPhotoEmpty> | undefined, b: TLChatPhotoEmpty | PlainMessage<TLChatPhotoEmpty> | undefined): boolean {
    return proto3.util.equals(TLChatPhotoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatPhoto
 */
export class TLChatPhoto extends Message$1<TLChatPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatPhoto data2 = 1;
   */
  data2: ChatPhoto[] = [];

  constructor(data?: PartialMessage<TLChatPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatPhoto {
    return new TLChatPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatPhoto {
    return new TLChatPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatPhoto {
    return new TLChatPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatPhoto | PlainMessage<TLChatPhoto> | undefined, b: TLChatPhoto | PlainMessage<TLChatPhoto> | undefined): boolean {
    return proto3.util.equals(TLChatPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatReactions
 */
export class ChatReactions extends Message$1<ChatReactions> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool allow_custom = 3;
   */
  allowCustom = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reactions = 4;
   */
  reactions: Reaction[] = [];

  constructor(data?: PartialMessage<ChatReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "allow_custom", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "reactions", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatReactions {
    return new ChatReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatReactions {
    return new ChatReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatReactions {
    return new ChatReactions().fromJsonString(jsonString, options);
  }

  static equals(a: ChatReactions | PlainMessage<ChatReactions> | undefined, b: ChatReactions | PlainMessage<ChatReactions> | undefined): boolean {
    return proto3.util.equals(ChatReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsNone
 */
export class TLChatReactionsNone extends Message$1<TLChatReactionsNone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions data2 = 1;
   */
  data2: ChatReactions[] = [];

  constructor(data?: PartialMessage<TLChatReactionsNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatReactionsNone {
    return new TLChatReactionsNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatReactionsNone {
    return new TLChatReactionsNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatReactionsNone {
    return new TLChatReactionsNone().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatReactionsNone | PlainMessage<TLChatReactionsNone> | undefined, b: TLChatReactionsNone | PlainMessage<TLChatReactionsNone> | undefined): boolean {
    return proto3.util.equals(TLChatReactionsNone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsAll
 */
export class TLChatReactionsAll extends Message$1<TLChatReactionsAll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions data2 = 1;
   */
  data2: ChatReactions[] = [];

  constructor(data?: PartialMessage<TLChatReactionsAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatReactionsAll {
    return new TLChatReactionsAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatReactionsAll {
    return new TLChatReactionsAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatReactionsAll {
    return new TLChatReactionsAll().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatReactionsAll | PlainMessage<TLChatReactionsAll> | undefined, b: TLChatReactionsAll | PlainMessage<TLChatReactionsAll> | undefined): boolean {
    return proto3.util.equals(TLChatReactionsAll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsSome
 */
export class TLChatReactionsSome extends Message$1<TLChatReactionsSome> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatReactions data2 = 1;
   */
  data2: ChatReactions[] = [];

  constructor(data?: PartialMessage<TLChatReactionsSome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatReactionsSome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatReactionsSome {
    return new TLChatReactionsSome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatReactionsSome {
    return new TLChatReactionsSome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatReactionsSome {
    return new TLChatReactionsSome().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatReactionsSome | PlainMessage<TLChatReactionsSome> | undefined, b: TLChatReactionsSome | PlainMessage<TLChatReactionsSome> | undefined): boolean {
    return proto3.util.equals(TLChatReactionsSome, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.CodeSettings
 */
export class CodeSettings extends Message$1<CodeSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool allow_flashcall = 3;
   */
  allowFlashcall = false;

  /**
   * @generated from field: bool current_number = 4;
   */
  currentNumber = false;

  /**
   * @generated from field: bool allow_app_hash = 5;
   */
  allowAppHash = false;

  /**
   * @generated from field: bool allow_missed_call = 6;
   */
  allowMissedCall = false;

  /**
   * @generated from field: bool allow_firebase = 7;
   */
  allowFirebase = false;

  /**
   * @generated from field: bytes logout_tokens = 8;
   */
  logoutTokens = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.StringValue token = 9;
   */
  token: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool app_sandbox = 10;
   */
  appSandbox: Bool[] = [];

  constructor(data?: PartialMessage<CodeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.CodeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "allow_flashcall", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "current_number", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "allow_app_hash", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "allow_missed_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "allow_firebase", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "logout_tokens", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "token", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "app_sandbox", kind: "message", T: Bool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSettings {
    return new CodeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSettings {
    return new CodeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSettings {
    return new CodeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSettings | PlainMessage<CodeSettings> | undefined, b: CodeSettings | PlainMessage<CodeSettings> | undefined): boolean {
    return proto3.util.equals(CodeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLCodeSettings
 */
export class TLCodeSettings extends Message$1<TLCodeSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.CodeSettings data2 = 1;
   */
  data2: CodeSettings[] = [];

  constructor(data?: PartialMessage<TLCodeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLCodeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: CodeSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLCodeSettings {
    return new TLCodeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLCodeSettings {
    return new TLCodeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLCodeSettings {
    return new TLCodeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLCodeSettings | PlainMessage<TLCodeSettings> | undefined, b: TLCodeSettings | PlainMessage<TLCodeSettings> | undefined): boolean {
    return proto3.util.equals(TLCodeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Config
 */
export class Config extends Message$1<Config> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool default_p2p_contacts = 3;
   */
  defaultP2pContacts = false;

  /**
   * @generated from field: bool preload_featured_stickers = 4;
   */
  preloadFeaturedStickers = false;

  /**
   * @generated from field: bool revoke_pm_inbox = 5;
   */
  revokePmInbox = false;

  /**
   * @generated from field: bool blocked_mode = 6;
   */
  blockedMode = false;

  /**
   * @generated from field: bool force_try_ipv6 = 7;
   */
  forceTryIpv6 = false;

  /**
   * @generated from field: int32 date = 8;
   */
  date = 0;

  /**
   * @generated from field: int32 expires = 9;
   */
  expires = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool test_mode = 10;
   */
  testMode: Bool[] = [];

  /**
   * @generated from field: int32 this_dc = 11;
   */
  thisDc = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DcOption dc_options = 12;
   */
  dcOptions: DcOption[] = [];

  /**
   * @generated from field: string dc_txt_domain_name = 13;
   */
  dcTxtDomainName = "";

  /**
   * @generated from field: int32 chat_size_max = 14;
   */
  chatSizeMax = 0;

  /**
   * @generated from field: int32 megagroup_size_max = 15;
   */
  megagroupSizeMax = 0;

  /**
   * @generated from field: int32 forwarded_count_max = 16;
   */
  forwardedCountMax = 0;

  /**
   * @generated from field: int32 online_update_period_ms = 17;
   */
  onlineUpdatePeriodMs = 0;

  /**
   * @generated from field: int32 offline_blur_timeout_ms = 18;
   */
  offlineBlurTimeoutMs = 0;

  /**
   * @generated from field: int32 offline_idle_timeout_ms = 19;
   */
  offlineIdleTimeoutMs = 0;

  /**
   * @generated from field: int32 online_cloud_timeout_ms = 20;
   */
  onlineCloudTimeoutMs = 0;

  /**
   * @generated from field: int32 notify_cloud_delay_ms = 21;
   */
  notifyCloudDelayMs = 0;

  /**
   * @generated from field: int32 notify_default_delay_ms = 22;
   */
  notifyDefaultDelayMs = 0;

  /**
   * @generated from field: int32 push_chat_period_ms = 23;
   */
  pushChatPeriodMs = 0;

  /**
   * @generated from field: int32 push_chat_limit = 24;
   */
  pushChatLimit = 0;

  /**
   * @generated from field: int32 edit_time_limit = 25;
   */
  editTimeLimit = 0;

  /**
   * @generated from field: int32 revoke_time_limit = 26;
   */
  revokeTimeLimit = 0;

  /**
   * @generated from field: int32 revoke_pm_time_limit = 27;
   */
  revokePmTimeLimit = 0;

  /**
   * @generated from field: int32 rating_e_decay = 28;
   */
  ratingEDecay = 0;

  /**
   * @generated from field: int32 stickers_recent_limit = 29;
   */
  stickersRecentLimit = 0;

  /**
   * @generated from field: int32 channels_read_media_period = 30;
   */
  channelsReadMediaPeriod = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value tmp_sessions = 31;
   */
  tmpSessions: Int32Value[] = [];

  /**
   * @generated from field: int32 call_receive_timeout_ms = 32;
   */
  callReceiveTimeoutMs = 0;

  /**
   * @generated from field: int32 call_ring_timeout_ms = 33;
   */
  callRingTimeoutMs = 0;

  /**
   * @generated from field: int32 call_connect_timeout_ms = 34;
   */
  callConnectTimeoutMs = 0;

  /**
   * @generated from field: int32 call_packet_timeout_ms = 35;
   */
  callPacketTimeoutMs = 0;

  /**
   * @generated from field: string me_url_prefix = 36;
   */
  meUrlPrefix = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue autoupdate_url_prefix = 37;
   */
  autoupdateUrlPrefix: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue gif_search_username = 38;
   */
  gifSearchUsername: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue venue_search_username = 39;
   */
  venueSearchUsername: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue img_search_username = 40;
   */
  imgSearchUsername: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue static_maps_provider = 41;
   */
  staticMapsProvider: StringValue[] = [];

  /**
   * @generated from field: int32 caption_length_max = 42;
   */
  captionLengthMax = 0;

  /**
   * @generated from field: int32 message_length_max = 43;
   */
  messageLengthMax = 0;

  /**
   * @generated from field: int32 webfile_dc_id = 44;
   */
  webfileDcId = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue suggested_lang_code = 45;
   */
  suggestedLangCode: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value lang_pack_version = 46;
   */
  langPackVersion: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value base_lang_pack_version = 47;
   */
  baseLangPackVersion: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reactions_default = 48;
   */
  reactionsDefault: Reaction[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue autologin_token = 49;
   */
  autologinToken: StringValue[] = [];

  /**
   * @generated from field: bool phonecalls_enabled = 50;
   */
  phonecallsEnabled = false;

  /**
   * @generated from field: bool ignore_phone_entities = 51;
   */
  ignorePhoneEntities = false;

  /**
   * @generated from field: bool pfs_enabled = 52;
   */
  pfsEnabled = false;

  /**
   * @generated from field: int32 saved_gifs_limit = 53;
   */
  savedGifsLimit = 0;

  /**
   * @generated from field: int32 stickers_faved_limit = 54;
   */
  stickersFavedLimit = 0;

  /**
   * @generated from field: int32 pinned_dialogs_count_max = 55;
   */
  pinnedDialogsCountMax = 0;

  /**
   * @generated from field: int32 pinned_infolder_count_max = 56;
   */
  pinnedInfolderCountMax = 0;

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "default_p2p_contacts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "preload_featured_stickers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "revoke_pm_inbox", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "blocked_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "force_try_ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "test_mode", kind: "message", T: Bool, repeated: true },
    { no: 11, name: "this_dc", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "dc_options", kind: "message", T: DcOption, repeated: true },
    { no: 13, name: "dc_txt_domain_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "chat_size_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "megagroup_size_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "forwarded_count_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "online_update_period_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "offline_blur_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "offline_idle_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "online_cloud_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "notify_cloud_delay_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "notify_default_delay_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "push_chat_period_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "push_chat_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "edit_time_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "revoke_time_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 27, name: "revoke_pm_time_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 28, name: "rating_e_decay", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 29, name: "stickers_recent_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 30, name: "channels_read_media_period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 31, name: "tmp_sessions", kind: "message", T: Int32Value, repeated: true },
    { no: 32, name: "call_receive_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 33, name: "call_ring_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 34, name: "call_connect_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 35, name: "call_packet_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 36, name: "me_url_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "autoupdate_url_prefix", kind: "message", T: StringValue, repeated: true },
    { no: 38, name: "gif_search_username", kind: "message", T: StringValue, repeated: true },
    { no: 39, name: "venue_search_username", kind: "message", T: StringValue, repeated: true },
    { no: 40, name: "img_search_username", kind: "message", T: StringValue, repeated: true },
    { no: 41, name: "static_maps_provider", kind: "message", T: StringValue, repeated: true },
    { no: 42, name: "caption_length_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 43, name: "message_length_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 44, name: "webfile_dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 45, name: "suggested_lang_code", kind: "message", T: StringValue, repeated: true },
    { no: 46, name: "lang_pack_version", kind: "message", T: Int32Value, repeated: true },
    { no: 47, name: "base_lang_pack_version", kind: "message", T: Int32Value, repeated: true },
    { no: 48, name: "reactions_default", kind: "message", T: Reaction, repeated: true },
    { no: 49, name: "autologin_token", kind: "message", T: StringValue, repeated: true },
    { no: 50, name: "phonecalls_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 51, name: "ignore_phone_entities", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 52, name: "pfs_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 53, name: "saved_gifs_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 54, name: "stickers_faved_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 55, name: "pinned_dialogs_count_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 56, name: "pinned_infolder_count_max", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLConfig
 */
export class TLConfig extends Message$1<TLConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Config data2 = 1;
   */
  data2: Config[] = [];

  constructor(data?: PartialMessage<TLConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLConfig {
    return new TLConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLConfig {
    return new TLConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLConfig {
    return new TLConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLConfig | PlainMessage<TLConfig> | undefined, b: TLConfig | PlainMessage<TLConfig> | undefined): boolean {
    return proto3.util.equals(TLConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Contact
 */
export class Contact extends Message$1<Contact> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool mutual = 4;
   */
  mutual: Bool[] = [];

  constructor(data?: PartialMessage<Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mutual", kind: "message", T: Bool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contact {
    return new Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Contact | PlainMessage<Contact> | undefined, b: Contact | PlainMessage<Contact> | undefined): boolean {
    return proto3.util.equals(Contact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContact
 */
export class TLContact extends Message$1<TLContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Contact data2 = 1;
   */
  data2: Contact[] = [];

  constructor(data?: PartialMessage<TLContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Contact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContact {
    return new TLContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContact {
    return new TLContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContact {
    return new TLContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLContact | PlainMessage<TLContact> | undefined, b: TLContact | PlainMessage<TLContact> | undefined): boolean {
    return proto3.util.equals(TLContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactData
 */
export class ContactData extends Message$1<ContactData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 contact_user_id = 4;
   */
  contactUserId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.StringValue first_name = 5;
   */
  firstName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue last_name = 6;
   */
  lastName: StringValue[] = [];

  /**
   * @generated from field: bool mutual_contact = 7;
   */
  mutualContact = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue phone = 8;
   */
  phone: StringValue[] = [];

  constructor(data?: PartialMessage<ContactData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "contact_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "first_name", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "last_name", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "mutual_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "phone", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactData {
    return new ContactData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactData {
    return new ContactData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactData {
    return new ContactData().fromJsonString(jsonString, options);
  }

  static equals(a: ContactData | PlainMessage<ContactData> | undefined, b: ContactData | PlainMessage<ContactData> | undefined): boolean {
    return proto3.util.equals(ContactData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactData
 */
export class TLContactData extends Message$1<TLContactData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactData data2 = 1;
   */
  data2: ContactData[] = [];

  constructor(data?: PartialMessage<TLContactData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactData {
    return new TLContactData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactData {
    return new TLContactData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactData {
    return new TLContactData().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactData | PlainMessage<TLContactData> | undefined, b: TLContactData | PlainMessage<TLContactData> | undefined): boolean {
    return proto3.util.equals(TLContactData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactStatus
 */
export class ContactStatus extends Message$1<ContactStatus> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus status = 4;
   */
  status: UserStatus[] = [];

  constructor(data?: PartialMessage<ContactStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactStatus {
    return new ContactStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactStatus {
    return new ContactStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactStatus {
    return new ContactStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ContactStatus | PlainMessage<ContactStatus> | undefined, b: ContactStatus | PlainMessage<ContactStatus> | undefined): boolean {
    return proto3.util.equals(ContactStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactStatus
 */
export class TLContactStatus extends Message$1<TLContactStatus> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactStatus data2 = 1;
   */
  data2: ContactStatus[] = [];

  constructor(data?: PartialMessage<TLContactStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactStatus {
    return new TLContactStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactStatus {
    return new TLContactStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactStatus {
    return new TLContactStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactStatus | PlainMessage<TLContactStatus> | undefined, b: TLContactStatus | PlainMessage<TLContactStatus> | undefined): boolean {
    return proto3.util.equals(TLContactStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DataJSON
 */
export class DataJSON extends Message$1<DataJSON> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string data = 3;
   */
  data = "";

  constructor(data?: PartialMessage<DataJSON>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DataJSON";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataJSON {
    return new DataJSON().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataJSON {
    return new DataJSON().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataJSON {
    return new DataJSON().fromJsonString(jsonString, options);
  }

  static equals(a: DataJSON | PlainMessage<DataJSON> | undefined, b: DataJSON | PlainMessage<DataJSON> | undefined): boolean {
    return proto3.util.equals(DataJSON, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDataJSON
 */
export class TLDataJSON extends Message$1<TLDataJSON> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON data2 = 1;
   */
  data2: DataJSON[] = [];

  constructor(data?: PartialMessage<TLDataJSON>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDataJSON";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DataJSON, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDataJSON {
    return new TLDataJSON().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDataJSON {
    return new TLDataJSON().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDataJSON {
    return new TLDataJSON().fromJsonString(jsonString, options);
  }

  static equals(a: TLDataJSON | PlainMessage<TLDataJSON> | undefined, b: TLDataJSON | PlainMessage<TLDataJSON> | undefined): boolean {
    return proto3.util.equals(TLDataJSON, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DcOption
 */
export class DcOption extends Message$1<DcOption> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool ipv6 = 3;
   */
  ipv6 = false;

  /**
   * @generated from field: bool media_only = 4;
   */
  mediaOnly = false;

  /**
   * @generated from field: bool tcpo_only = 5;
   */
  tcpoOnly = false;

  /**
   * @generated from field: bool cdn = 6;
   */
  cdn = false;

  /**
   * @generated from field: bool static = 7;
   */
  static = false;

  /**
   * @generated from field: bool this_port_only = 8;
   */
  thisPortOnly = false;

  /**
   * @generated from field: int32 id = 9;
   */
  id = 0;

  /**
   * @generated from field: string ip_address = 10;
   */
  ipAddress = "";

  /**
   * @generated from field: int32 port = 11;
   */
  port = 0;

  /**
   * @generated from field: bytes secret = 12;
   */
  secret = new Uint8Array(0);

  constructor(data?: PartialMessage<DcOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DcOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "media_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "tcpo_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "cdn", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "static", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "this_port_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DcOption {
    return new DcOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DcOption {
    return new DcOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DcOption {
    return new DcOption().fromJsonString(jsonString, options);
  }

  static equals(a: DcOption | PlainMessage<DcOption> | undefined, b: DcOption | PlainMessage<DcOption> | undefined): boolean {
    return proto3.util.equals(DcOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDcOption
 */
export class TLDcOption extends Message$1<TLDcOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DcOption data2 = 1;
   */
  data2: DcOption[] = [];

  constructor(data?: PartialMessage<TLDcOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDcOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DcOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDcOption {
    return new TLDcOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDcOption {
    return new TLDcOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDcOption {
    return new TLDcOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLDcOption | PlainMessage<TLDcOption> | undefined, b: TLDcOption | PlainMessage<TLDcOption> | undefined): boolean {
    return proto3.util.equals(TLDcOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DefaultHistoryTTL
 */
export class DefaultHistoryTTL extends Message$1<DefaultHistoryTTL> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 period = 3;
   */
  period = 0;

  constructor(data?: PartialMessage<DefaultHistoryTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DefaultHistoryTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DefaultHistoryTTL {
    return new DefaultHistoryTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DefaultHistoryTTL {
    return new DefaultHistoryTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DefaultHistoryTTL {
    return new DefaultHistoryTTL().fromJsonString(jsonString, options);
  }

  static equals(a: DefaultHistoryTTL | PlainMessage<DefaultHistoryTTL> | undefined, b: DefaultHistoryTTL | PlainMessage<DefaultHistoryTTL> | undefined): boolean {
    return proto3.util.equals(DefaultHistoryTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDefaultHistoryTTL
 */
export class TLDefaultHistoryTTL extends Message$1<TLDefaultHistoryTTL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DefaultHistoryTTL data2 = 1;
   */
  data2: DefaultHistoryTTL[] = [];

  constructor(data?: PartialMessage<TLDefaultHistoryTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDefaultHistoryTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DefaultHistoryTTL, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDefaultHistoryTTL {
    return new TLDefaultHistoryTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDefaultHistoryTTL {
    return new TLDefaultHistoryTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDefaultHistoryTTL {
    return new TLDefaultHistoryTTL().fromJsonString(jsonString, options);
  }

  static equals(a: TLDefaultHistoryTTL | PlainMessage<TLDefaultHistoryTTL> | undefined, b: TLDefaultHistoryTTL | PlainMessage<TLDefaultHistoryTTL> | undefined): boolean {
    return proto3.util.equals(TLDefaultHistoryTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Dialog
 */
export class Dialog extends Message$1<Dialog> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool pinned = 3;
   */
  pinned = false;

  /**
   * @generated from field: bool unread_mark = 4;
   */
  unreadMark = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 5;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 top_message = 6;
   */
  topMessage = 0;

  /**
   * @generated from field: int32 read_inbox_max_id = 7;
   */
  readInboxMaxId = 0;

  /**
   * @generated from field: int32 read_outbox_max_id = 8;
   */
  readOutboxMaxId = 0;

  /**
   * @generated from field: int32 unread_count = 9;
   */
  unreadCount = 0;

  /**
   * @generated from field: int32 unread_mentions_count = 10;
   */
  unreadMentionsCount = 0;

  /**
   * @generated from field: int32 unread_reactions_count = 11;
   */
  unreadReactionsCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings notify_settings = 12;
   */
  notifySettings: PeerNotifySettings[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value pts = 13;
   */
  pts: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DraftMessage draft = 14;
   */
  draft: DraftMessage[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value folder_id = 15;
   */
  folderId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 16;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Folder folder = 17;
   */
  folder: Folder[] = [];

  /**
   * @generated from field: int32 unread_muted_peers_count = 18;
   */
  unreadMutedPeersCount = 0;

  /**
   * @generated from field: int32 unread_unmuted_peers_count = 19;
   */
  unreadUnmutedPeersCount = 0;

  /**
   * @generated from field: int32 unread_muted_messages_count = 20;
   */
  unreadMutedMessagesCount = 0;

  /**
   * @generated from field: int32 unread_unmuted_messages_count = 21;
   */
  unreadUnmutedMessagesCount = 0;

  constructor(data?: PartialMessage<Dialog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Dialog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "unread_mark", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 6, name: "top_message", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "read_inbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "read_outbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "unread_mentions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "unread_reactions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "notify_settings", kind: "message", T: PeerNotifySettings, repeated: true },
    { no: 13, name: "pts", kind: "message", T: Int32Value, repeated: true },
    { no: 14, name: "draft", kind: "message", T: DraftMessage, repeated: true },
    { no: 15, name: "folder_id", kind: "message", T: Int32Value, repeated: true },
    { no: 16, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 17, name: "folder", kind: "message", T: Folder, repeated: true },
    { no: 18, name: "unread_muted_peers_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "unread_unmuted_peers_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "unread_muted_messages_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "unread_unmuted_messages_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dialog {
    return new Dialog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dialog {
    return new Dialog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dialog {
    return new Dialog().fromJsonString(jsonString, options);
  }

  static equals(a: Dialog | PlainMessage<Dialog> | undefined, b: Dialog | PlainMessage<Dialog> | undefined): boolean {
    return proto3.util.equals(Dialog, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialog
 */
export class TLDialog extends Message$1<TLDialog> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Dialog data2 = 1;
   */
  data2: Dialog[] = [];

  constructor(data?: PartialMessage<TLDialog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Dialog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialog {
    return new TLDialog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialog {
    return new TLDialog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialog {
    return new TLDialog().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialog | PlainMessage<TLDialog> | undefined, b: TLDialog | PlainMessage<TLDialog> | undefined): boolean {
    return proto3.util.equals(TLDialog, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogFolder
 */
export class TLDialogFolder extends Message$1<TLDialogFolder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Dialog data2 = 1;
   */
  data2: Dialog[] = [];

  constructor(data?: PartialMessage<TLDialogFolder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogFolder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Dialog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogFolder {
    return new TLDialogFolder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogFolder {
    return new TLDialogFolder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogFolder {
    return new TLDialogFolder().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogFolder | PlainMessage<TLDialogFolder> | undefined, b: TLDialogFolder | PlainMessage<TLDialogFolder> | undefined): boolean {
    return proto3.util.equals(TLDialogFolder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DialogFilter
 */
export class DialogFilter extends Message$1<DialogFilter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool contacts = 3;
   */
  contacts = false;

  /**
   * @generated from field: bool non_contacts = 4;
   */
  nonContacts = false;

  /**
   * @generated from field: bool groups = 5;
   */
  groups = false;

  /**
   * @generated from field: bool broadcasts = 6;
   */
  broadcasts = false;

  /**
   * @generated from field: bool bots = 7;
   */
  bots = false;

  /**
   * @generated from field: bool exclude_muted = 8;
   */
  excludeMuted = false;

  /**
   * @generated from field: bool exclude_read = 9;
   */
  excludeRead = false;

  /**
   * @generated from field: bool exclude_archived = 10;
   */
  excludeArchived = false;

  /**
   * @generated from field: int32 id = 11;
   */
  id = 0;

  /**
   * @generated from field: string title = 12;
   */
  title = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue emoticon = 13;
   */
  emoticon: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer pinned_peers = 14;
   */
  pinnedPeers: InputPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer include_peers = 15;
   */
  includePeers: InputPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer exclude_peers = 16;
   */
  excludePeers: InputPeer[] = [];

  /**
   * @generated from field: bool has_my_invites = 17;
   */
  hasMyInvites = false;

  constructor(data?: PartialMessage<DialogFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DialogFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "contacts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "non_contacts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "groups", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "broadcasts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "bots", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "exclude_muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "exclude_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "exclude_archived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "emoticon", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "pinned_peers", kind: "message", T: InputPeer, repeated: true },
    { no: 15, name: "include_peers", kind: "message", T: InputPeer, repeated: true },
    { no: 16, name: "exclude_peers", kind: "message", T: InputPeer, repeated: true },
    { no: 17, name: "has_my_invites", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DialogFilter {
    return new DialogFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DialogFilter {
    return new DialogFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DialogFilter {
    return new DialogFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DialogFilter | PlainMessage<DialogFilter> | undefined, b: DialogFilter | PlainMessage<DialogFilter> | undefined): boolean {
    return proto3.util.equals(DialogFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogFilter
 */
export class TLDialogFilter extends Message$1<TLDialogFilter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter data2 = 1;
   */
  data2: DialogFilter[] = [];

  constructor(data?: PartialMessage<TLDialogFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogFilter {
    return new TLDialogFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogFilter {
    return new TLDialogFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogFilter {
    return new TLDialogFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogFilter | PlainMessage<TLDialogFilter> | undefined, b: TLDialogFilter | PlainMessage<TLDialogFilter> | undefined): boolean {
    return proto3.util.equals(TLDialogFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterDefault
 */
export class TLDialogFilterDefault extends Message$1<TLDialogFilterDefault> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter data2 = 1;
   */
  data2: DialogFilter[] = [];

  constructor(data?: PartialMessage<TLDialogFilterDefault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterDefault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogFilterDefault {
    return new TLDialogFilterDefault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogFilterDefault {
    return new TLDialogFilterDefault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogFilterDefault {
    return new TLDialogFilterDefault().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogFilterDefault | PlainMessage<TLDialogFilterDefault> | undefined, b: TLDialogFilterDefault | PlainMessage<TLDialogFilterDefault> | undefined): boolean {
    return proto3.util.equals(TLDialogFilterDefault, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterChatlist
 */
export class TLDialogFilterChatlist extends Message$1<TLDialogFilterChatlist> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter data2 = 1;
   */
  data2: DialogFilter[] = [];

  constructor(data?: PartialMessage<TLDialogFilterChatlist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterChatlist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogFilterChatlist {
    return new TLDialogFilterChatlist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogFilterChatlist {
    return new TLDialogFilterChatlist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogFilterChatlist {
    return new TLDialogFilterChatlist().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogFilterChatlist | PlainMessage<TLDialogFilterChatlist> | undefined, b: TLDialogFilterChatlist | PlainMessage<TLDialogFilterChatlist> | undefined): boolean {
    return proto3.util.equals(TLDialogFilterChatlist, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DialogFilterSuggested
 */
export class DialogFilterSuggested extends Message$1<DialogFilterSuggested> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter filter = 3;
   */
  filter: DialogFilter[] = [];

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<DialogFilterSuggested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DialogFilterSuggested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "filter", kind: "message", T: DialogFilter, repeated: true },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DialogFilterSuggested {
    return new DialogFilterSuggested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DialogFilterSuggested {
    return new DialogFilterSuggested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DialogFilterSuggested {
    return new DialogFilterSuggested().fromJsonString(jsonString, options);
  }

  static equals(a: DialogFilterSuggested | PlainMessage<DialogFilterSuggested> | undefined, b: DialogFilterSuggested | PlainMessage<DialogFilterSuggested> | undefined): boolean {
    return proto3.util.equals(DialogFilterSuggested, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterSuggested
 */
export class TLDialogFilterSuggested extends Message$1<TLDialogFilterSuggested> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilterSuggested data2 = 1;
   */
  data2: DialogFilterSuggested[] = [];

  constructor(data?: PartialMessage<TLDialogFilterSuggested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogFilterSuggested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogFilterSuggested, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogFilterSuggested {
    return new TLDialogFilterSuggested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogFilterSuggested {
    return new TLDialogFilterSuggested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogFilterSuggested {
    return new TLDialogFilterSuggested().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogFilterSuggested | PlainMessage<TLDialogFilterSuggested> | undefined, b: TLDialogFilterSuggested | PlainMessage<TLDialogFilterSuggested> | undefined): boolean {
    return proto3.util.equals(TLDialogFilterSuggested, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DialogPeer
 */
export class DialogPeer extends Message$1<DialogPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 folder_id = 4;
   */
  folderId = 0;

  constructor(data?: PartialMessage<DialogPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DialogPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DialogPeer {
    return new DialogPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DialogPeer {
    return new DialogPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DialogPeer {
    return new DialogPeer().fromJsonString(jsonString, options);
  }

  static equals(a: DialogPeer | PlainMessage<DialogPeer> | undefined, b: DialogPeer | PlainMessage<DialogPeer> | undefined): boolean {
    return proto3.util.equals(DialogPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogPeer
 */
export class TLDialogPeer extends Message$1<TLDialogPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogPeer data2 = 1;
   */
  data2: DialogPeer[] = [];

  constructor(data?: PartialMessage<TLDialogPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogPeer {
    return new TLDialogPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogPeer {
    return new TLDialogPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogPeer {
    return new TLDialogPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogPeer | PlainMessage<TLDialogPeer> | undefined, b: TLDialogPeer | PlainMessage<TLDialogPeer> | undefined): boolean {
    return proto3.util.equals(TLDialogPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDialogPeerFolder
 */
export class TLDialogPeerFolder extends Message$1<TLDialogPeerFolder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogPeer data2 = 1;
   */
  data2: DialogPeer[] = [];

  constructor(data?: PartialMessage<TLDialogPeerFolder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDialogPeerFolder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DialogPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDialogPeerFolder {
    return new TLDialogPeerFolder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDialogPeerFolder {
    return new TLDialogPeerFolder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDialogPeerFolder {
    return new TLDialogPeerFolder().fromJsonString(jsonString, options);
  }

  static equals(a: TLDialogPeerFolder | PlainMessage<TLDialogPeerFolder> | undefined, b: TLDialogPeerFolder | PlainMessage<TLDialogPeerFolder> | undefined): boolean {
    return proto3.util.equals(TLDialogPeerFolder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Document
 */
export class Document extends Message$1<Document> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 5;
   */
  fileReference = new Uint8Array(0);

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  /**
   * @generated from field: string mime_type = 7;
   */
  mimeType = "";

  /**
   * @generated from field: int64 size2_INT64 = 8;
   */
  size2INT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize thumbs = 9;
   */
  thumbs: PhotoSize[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize video_thumbs = 10;
   */
  videoThumbs: VideoSize[] = [];

  /**
   * @generated from field: int32 dc_id = 11;
   */
  dcId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute attributes = 12;
   */
  attributes: DocumentAttribute[] = [];

  /**
   * @generated from field: int32 size2_INT32 = 13;
   */
  size2INT32 = 0;

  /**
   * @generated from field: int64 size2 = 100;
   */
  size2 = protoInt64.zero;

  constructor(data?: PartialMessage<Document>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Document";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "size2_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "thumbs", kind: "message", T: PhotoSize, repeated: true },
    { no: 10, name: "video_thumbs", kind: "message", T: VideoSize, repeated: true },
    { no: 11, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "attributes", kind: "message", T: DocumentAttribute, repeated: true },
    { no: 13, name: "size2_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 100, name: "size2", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document {
    return new Document().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJsonString(jsonString, options);
  }

  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean {
    return proto3.util.equals(Document, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentEmpty
 */
export class TLDocumentEmpty extends Message$1<TLDocumentEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document data2 = 1;
   */
  data2: Document[] = [];

  constructor(data?: PartialMessage<TLDocumentEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentEmpty {
    return new TLDocumentEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentEmpty {
    return new TLDocumentEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentEmpty {
    return new TLDocumentEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentEmpty | PlainMessage<TLDocumentEmpty> | undefined, b: TLDocumentEmpty | PlainMessage<TLDocumentEmpty> | undefined): boolean {
    return proto3.util.equals(TLDocumentEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocument
 */
export class TLDocument extends Message$1<TLDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document data2 = 1;
   */
  data2: Document[] = [];

  constructor(data?: PartialMessage<TLDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocument {
    return new TLDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocument {
    return new TLDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocument {
    return new TLDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocument | PlainMessage<TLDocument> | undefined, b: TLDocument | PlainMessage<TLDocument> | undefined): boolean {
    return proto3.util.equals(TLDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute
 */
export class DocumentAttribute extends Message$1<DocumentAttribute> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 w = 3;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 4;
   */
  h = 0;

  /**
   * @generated from field: bool mask = 5;
   */
  mask = false;

  /**
   * @generated from field: string alt = 6;
   */
  alt = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet stickerset = 7;
   */
  stickerset: InputStickerSet[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MaskCoords mask_coords = 8;
   */
  maskCoords: MaskCoords[] = [];

  /**
   * @generated from field: bool round_message = 9;
   */
  roundMessage = false;

  /**
   * @generated from field: bool supports_streaming = 10;
   */
  supportsStreaming = false;

  /**
   * @generated from field: bool nosound = 11;
   */
  nosound = false;

  /**
   * @generated from field: float duration_FLOAT64 = 12;
   */
  durationFLOAT64 = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value preload_prefix_size = 13;
   */
  preloadPrefixSize: Int32Value[] = [];

  /**
   * @generated from field: bool voice = 14;
   */
  voice = false;

  /**
   * @generated from field: int32 duration_INT32 = 15;
   */
  durationINT32 = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 16;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue performer = 17;
   */
  performer: StringValue[] = [];

  /**
   * @generated from field: bytes waveform = 18;
   */
  waveform = new Uint8Array(0);

  /**
   * @generated from field: string file_name = 19;
   */
  fileName = "";

  /**
   * @generated from field: bool free = 20;
   */
  free = false;

  /**
   * @generated from field: bool text_color = 21;
   */
  textColor = false;

  /**
   * @generated from field: float duration = 100;
   */
  duration = 0;

  constructor(data?: PartialMessage<DocumentAttribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "mask", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "alt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "stickerset", kind: "message", T: InputStickerSet, repeated: true },
    { no: 8, name: "mask_coords", kind: "message", T: MaskCoords, repeated: true },
    { no: 9, name: "round_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "supports_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "nosound", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "duration_FLOAT64", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "preload_prefix_size", kind: "message", T: Int32Value, repeated: true },
    { no: 14, name: "voice", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "duration_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 17, name: "performer", kind: "message", T: StringValue, repeated: true },
    { no: 18, name: "waveform", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 19, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "free", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "text_color", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 100, name: "duration", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentAttribute {
    return new DocumentAttribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentAttribute {
    return new DocumentAttribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentAttribute {
    return new DocumentAttribute().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentAttribute | PlainMessage<DocumentAttribute> | undefined, b: DocumentAttribute | PlainMessage<DocumentAttribute> | undefined): boolean {
    return proto3.util.equals(DocumentAttribute, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeImageSize
 */
export class TLDocumentAttributeImageSize extends Message$1<TLDocumentAttributeImageSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeImageSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeImageSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeImageSize {
    return new TLDocumentAttributeImageSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeImageSize {
    return new TLDocumentAttributeImageSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeImageSize {
    return new TLDocumentAttributeImageSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeImageSize | PlainMessage<TLDocumentAttributeImageSize> | undefined, b: TLDocumentAttributeImageSize | PlainMessage<TLDocumentAttributeImageSize> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeImageSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeAnimated
 */
export class TLDocumentAttributeAnimated extends Message$1<TLDocumentAttributeAnimated> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeAnimated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeAnimated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeAnimated {
    return new TLDocumentAttributeAnimated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeAnimated {
    return new TLDocumentAttributeAnimated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeAnimated {
    return new TLDocumentAttributeAnimated().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeAnimated | PlainMessage<TLDocumentAttributeAnimated> | undefined, b: TLDocumentAttributeAnimated | PlainMessage<TLDocumentAttributeAnimated> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeAnimated, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeSticker
 */
export class TLDocumentAttributeSticker extends Message$1<TLDocumentAttributeSticker> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeSticker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeSticker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeSticker {
    return new TLDocumentAttributeSticker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeSticker {
    return new TLDocumentAttributeSticker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeSticker {
    return new TLDocumentAttributeSticker().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeSticker | PlainMessage<TLDocumentAttributeSticker> | undefined, b: TLDocumentAttributeSticker | PlainMessage<TLDocumentAttributeSticker> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeSticker, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeVideo
 */
export class TLDocumentAttributeVideo extends Message$1<TLDocumentAttributeVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeVideo {
    return new TLDocumentAttributeVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeVideo {
    return new TLDocumentAttributeVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeVideo {
    return new TLDocumentAttributeVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeVideo | PlainMessage<TLDocumentAttributeVideo> | undefined, b: TLDocumentAttributeVideo | PlainMessage<TLDocumentAttributeVideo> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeAudio
 */
export class TLDocumentAttributeAudio extends Message$1<TLDocumentAttributeAudio> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeAudio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeAudio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeAudio {
    return new TLDocumentAttributeAudio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeAudio {
    return new TLDocumentAttributeAudio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeAudio {
    return new TLDocumentAttributeAudio().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeAudio | PlainMessage<TLDocumentAttributeAudio> | undefined, b: TLDocumentAttributeAudio | PlainMessage<TLDocumentAttributeAudio> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeAudio, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeFilename
 */
export class TLDocumentAttributeFilename extends Message$1<TLDocumentAttributeFilename> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeFilename>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeFilename";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeFilename {
    return new TLDocumentAttributeFilename().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeFilename {
    return new TLDocumentAttributeFilename().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeFilename {
    return new TLDocumentAttributeFilename().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeFilename | PlainMessage<TLDocumentAttributeFilename> | undefined, b: TLDocumentAttributeFilename | PlainMessage<TLDocumentAttributeFilename> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeFilename, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeHasStickers
 */
export class TLDocumentAttributeHasStickers extends Message$1<TLDocumentAttributeHasStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeHasStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeHasStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeHasStickers {
    return new TLDocumentAttributeHasStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeHasStickers {
    return new TLDocumentAttributeHasStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeHasStickers {
    return new TLDocumentAttributeHasStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeHasStickers | PlainMessage<TLDocumentAttributeHasStickers> | undefined, b: TLDocumentAttributeHasStickers | PlainMessage<TLDocumentAttributeHasStickers> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeHasStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeCustomEmoji
 */
export class TLDocumentAttributeCustomEmoji extends Message$1<TLDocumentAttributeCustomEmoji> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute data2 = 1;
   */
  data2: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<TLDocumentAttributeCustomEmoji>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDocumentAttributeCustomEmoji";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDocumentAttributeCustomEmoji {
    return new TLDocumentAttributeCustomEmoji().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDocumentAttributeCustomEmoji {
    return new TLDocumentAttributeCustomEmoji().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDocumentAttributeCustomEmoji {
    return new TLDocumentAttributeCustomEmoji().fromJsonString(jsonString, options);
  }

  static equals(a: TLDocumentAttributeCustomEmoji | PlainMessage<TLDocumentAttributeCustomEmoji> | undefined, b: TLDocumentAttributeCustomEmoji | PlainMessage<TLDocumentAttributeCustomEmoji> | undefined): boolean {
    return proto3.util.equals(TLDocumentAttributeCustomEmoji, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.DraftMessage
 */
export class DraftMessage extends Message$1<DraftMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value date_FLAGINT32 = 3;
   */
  dateFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: bool no_webpage = 4;
   */
  noWebpage = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value reply_to_msg_id = 5;
   */
  replyToMsgId: Int32Value[] = [];

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 7;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: int32 date_INT32 = 8;
   */
  dateINT32 = 0;

  constructor(data?: PartialMessage<DraftMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.DraftMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "date_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "no_webpage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "reply_to_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 8, name: "date_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DraftMessage {
    return new DraftMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DraftMessage {
    return new DraftMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DraftMessage {
    return new DraftMessage().fromJsonString(jsonString, options);
  }

  static equals(a: DraftMessage | PlainMessage<DraftMessage> | undefined, b: DraftMessage | PlainMessage<DraftMessage> | undefined): boolean {
    return proto3.util.equals(DraftMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDraftMessageEmpty
 */
export class TLDraftMessageEmpty extends Message$1<TLDraftMessageEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DraftMessage data2 = 1;
   */
  data2: DraftMessage[] = [];

  constructor(data?: PartialMessage<TLDraftMessageEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDraftMessageEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DraftMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDraftMessageEmpty {
    return new TLDraftMessageEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDraftMessageEmpty {
    return new TLDraftMessageEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDraftMessageEmpty {
    return new TLDraftMessageEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLDraftMessageEmpty | PlainMessage<TLDraftMessageEmpty> | undefined, b: TLDraftMessageEmpty | PlainMessage<TLDraftMessageEmpty> | undefined): boolean {
    return proto3.util.equals(TLDraftMessageEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLDraftMessage
 */
export class TLDraftMessage extends Message$1<TLDraftMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DraftMessage data2 = 1;
   */
  data2: DraftMessage[] = [];

  constructor(data?: PartialMessage<TLDraftMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLDraftMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: DraftMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLDraftMessage {
    return new TLDraftMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLDraftMessage {
    return new TLDraftMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLDraftMessage {
    return new TLDraftMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLDraftMessage | PlainMessage<TLDraftMessage> | undefined, b: TLDraftMessage | PlainMessage<TLDraftMessage> | undefined): boolean {
    return proto3.util.equals(TLDraftMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmailVerification
 */
export class EmailVerification extends Message$1<EmailVerification> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: string token = 4;
   */
  token = "";

  constructor(data?: PartialMessage<EmailVerification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmailVerification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailVerification {
    return new EmailVerification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailVerification {
    return new EmailVerification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailVerification {
    return new EmailVerification().fromJsonString(jsonString, options);
  }

  static equals(a: EmailVerification | PlainMessage<EmailVerification> | undefined, b: EmailVerification | PlainMessage<EmailVerification> | undefined): boolean {
    return proto3.util.equals(EmailVerification, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationCode
 */
export class TLEmailVerificationCode extends Message$1<TLEmailVerificationCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerification data2 = 1;
   */
  data2: EmailVerification[] = [];

  constructor(data?: PartialMessage<TLEmailVerificationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerificationCode {
    return new TLEmailVerificationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerificationCode {
    return new TLEmailVerificationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerificationCode {
    return new TLEmailVerificationCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerificationCode | PlainMessage<TLEmailVerificationCode> | undefined, b: TLEmailVerificationCode | PlainMessage<TLEmailVerificationCode> | undefined): boolean {
    return proto3.util.equals(TLEmailVerificationCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationGoogle
 */
export class TLEmailVerificationGoogle extends Message$1<TLEmailVerificationGoogle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerification data2 = 1;
   */
  data2: EmailVerification[] = [];

  constructor(data?: PartialMessage<TLEmailVerificationGoogle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationGoogle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerificationGoogle {
    return new TLEmailVerificationGoogle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerificationGoogle {
    return new TLEmailVerificationGoogle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerificationGoogle {
    return new TLEmailVerificationGoogle().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerificationGoogle | PlainMessage<TLEmailVerificationGoogle> | undefined, b: TLEmailVerificationGoogle | PlainMessage<TLEmailVerificationGoogle> | undefined): boolean {
    return proto3.util.equals(TLEmailVerificationGoogle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationApple
 */
export class TLEmailVerificationApple extends Message$1<TLEmailVerificationApple> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerification data2 = 1;
   */
  data2: EmailVerification[] = [];

  constructor(data?: PartialMessage<TLEmailVerificationApple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerificationApple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerificationApple {
    return new TLEmailVerificationApple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerificationApple {
    return new TLEmailVerificationApple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerificationApple {
    return new TLEmailVerificationApple().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerificationApple | PlainMessage<TLEmailVerificationApple> | undefined, b: TLEmailVerificationApple | PlainMessage<TLEmailVerificationApple> | undefined): boolean {
    return proto3.util.equals(TLEmailVerificationApple, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmailVerifyPurpose
 */
export class EmailVerifyPurpose extends Message$1<EmailVerifyPurpose> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * @generated from field: string phone_code_hash = 4;
   */
  phoneCodeHash = "";

  constructor(data?: PartialMessage<EmailVerifyPurpose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmailVerifyPurpose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phone_code_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailVerifyPurpose {
    return new EmailVerifyPurpose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailVerifyPurpose {
    return new EmailVerifyPurpose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailVerifyPurpose {
    return new EmailVerifyPurpose().fromJsonString(jsonString, options);
  }

  static equals(a: EmailVerifyPurpose | PlainMessage<EmailVerifyPurpose> | undefined, b: EmailVerifyPurpose | PlainMessage<EmailVerifyPurpose> | undefined): boolean {
    return proto3.util.equals(EmailVerifyPurpose, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposeLoginSetup
 */
export class TLEmailVerifyPurposeLoginSetup extends Message$1<TLEmailVerifyPurposeLoginSetup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerifyPurpose data2 = 1;
   */
  data2: EmailVerifyPurpose[] = [];

  constructor(data?: PartialMessage<TLEmailVerifyPurposeLoginSetup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposeLoginSetup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerifyPurpose, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerifyPurposeLoginSetup {
    return new TLEmailVerifyPurposeLoginSetup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposeLoginSetup {
    return new TLEmailVerifyPurposeLoginSetup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposeLoginSetup {
    return new TLEmailVerifyPurposeLoginSetup().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerifyPurposeLoginSetup | PlainMessage<TLEmailVerifyPurposeLoginSetup> | undefined, b: TLEmailVerifyPurposeLoginSetup | PlainMessage<TLEmailVerifyPurposeLoginSetup> | undefined): boolean {
    return proto3.util.equals(TLEmailVerifyPurposeLoginSetup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposeLoginChange
 */
export class TLEmailVerifyPurposeLoginChange extends Message$1<TLEmailVerifyPurposeLoginChange> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerifyPurpose data2 = 1;
   */
  data2: EmailVerifyPurpose[] = [];

  constructor(data?: PartialMessage<TLEmailVerifyPurposeLoginChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposeLoginChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerifyPurpose, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerifyPurposeLoginChange {
    return new TLEmailVerifyPurposeLoginChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposeLoginChange {
    return new TLEmailVerifyPurposeLoginChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposeLoginChange {
    return new TLEmailVerifyPurposeLoginChange().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerifyPurposeLoginChange | PlainMessage<TLEmailVerifyPurposeLoginChange> | undefined, b: TLEmailVerifyPurposeLoginChange | PlainMessage<TLEmailVerifyPurposeLoginChange> | undefined): boolean {
    return proto3.util.equals(TLEmailVerifyPurposeLoginChange, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposePassport
 */
export class TLEmailVerifyPurposePassport extends Message$1<TLEmailVerifyPurposePassport> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmailVerifyPurpose data2 = 1;
   */
  data2: EmailVerifyPurpose[] = [];

  constructor(data?: PartialMessage<TLEmailVerifyPurposePassport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmailVerifyPurposePassport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmailVerifyPurpose, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmailVerifyPurposePassport {
    return new TLEmailVerifyPurposePassport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposePassport {
    return new TLEmailVerifyPurposePassport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmailVerifyPurposePassport {
    return new TLEmailVerifyPurposePassport().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmailVerifyPurposePassport | PlainMessage<TLEmailVerifyPurposePassport> | undefined, b: TLEmailVerifyPurposePassport | PlainMessage<TLEmailVerifyPurposePassport> | undefined): boolean {
    return proto3.util.equals(TLEmailVerifyPurposePassport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiGroup
 */
export class EmojiGroup extends Message$1<EmojiGroup> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: int64 icon_emoji_id = 4;
   */
  iconEmojiId = protoInt64.zero;

  /**
   * @generated from field: string emoticons = 5;
   */
  emoticons = "";

  constructor(data?: PartialMessage<EmojiGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "icon_emoji_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "emoticons", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiGroup {
    return new EmojiGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiGroup {
    return new EmojiGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiGroup {
    return new EmojiGroup().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiGroup | PlainMessage<EmojiGroup> | undefined, b: EmojiGroup | PlainMessage<EmojiGroup> | undefined): boolean {
    return proto3.util.equals(EmojiGroup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiGroup
 */
export class TLEmojiGroup extends Message$1<TLEmojiGroup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiGroup data2 = 1;
   */
  data2: EmojiGroup[] = [];

  constructor(data?: PartialMessage<TLEmojiGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiGroup {
    return new TLEmojiGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiGroup {
    return new TLEmojiGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiGroup {
    return new TLEmojiGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiGroup | PlainMessage<TLEmojiGroup> | undefined, b: TLEmojiGroup | PlainMessage<TLEmojiGroup> | undefined): boolean {
    return proto3.util.equals(TLEmojiGroup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiKeyword
 */
export class EmojiKeyword extends Message$1<EmojiKeyword> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string keyword = 3;
   */
  keyword = "";

  /**
   * @generated from field: string emoticons = 4;
   */
  emoticons = "";

  constructor(data?: PartialMessage<EmojiKeyword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiKeyword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "emoticons", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiKeyword {
    return new EmojiKeyword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiKeyword {
    return new EmojiKeyword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiKeyword {
    return new EmojiKeyword().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiKeyword | PlainMessage<EmojiKeyword> | undefined, b: EmojiKeyword | PlainMessage<EmojiKeyword> | undefined): boolean {
    return proto3.util.equals(EmojiKeyword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeyword
 */
export class TLEmojiKeyword extends Message$1<TLEmojiKeyword> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiKeyword data2 = 1;
   */
  data2: EmojiKeyword[] = [];

  constructor(data?: PartialMessage<TLEmojiKeyword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeyword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiKeyword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiKeyword {
    return new TLEmojiKeyword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiKeyword {
    return new TLEmojiKeyword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiKeyword {
    return new TLEmojiKeyword().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiKeyword | PlainMessage<TLEmojiKeyword> | undefined, b: TLEmojiKeyword | PlainMessage<TLEmojiKeyword> | undefined): boolean {
    return proto3.util.equals(TLEmojiKeyword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeywordDeleted
 */
export class TLEmojiKeywordDeleted extends Message$1<TLEmojiKeywordDeleted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiKeyword data2 = 1;
   */
  data2: EmojiKeyword[] = [];

  constructor(data?: PartialMessage<TLEmojiKeywordDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeywordDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiKeyword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiKeywordDeleted {
    return new TLEmojiKeywordDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiKeywordDeleted {
    return new TLEmojiKeywordDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiKeywordDeleted {
    return new TLEmojiKeywordDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiKeywordDeleted | PlainMessage<TLEmojiKeywordDeleted> | undefined, b: TLEmojiKeywordDeleted | PlainMessage<TLEmojiKeywordDeleted> | undefined): boolean {
    return proto3.util.equals(TLEmojiKeywordDeleted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiKeywordsDifference
 */
export class EmojiKeywordsDifference extends Message$1<EmojiKeywordsDifference> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string lang_code = 3;
   */
  langCode = "";

  /**
   * @generated from field: int32 from_version = 4;
   */
  fromVersion = 0;

  /**
   * @generated from field: int32 version = 5;
   */
  version = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiKeyword keywords = 6;
   */
  keywords: EmojiKeyword[] = [];

  constructor(data?: PartialMessage<EmojiKeywordsDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiKeywordsDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "from_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "keywords", kind: "message", T: EmojiKeyword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiKeywordsDifference {
    return new EmojiKeywordsDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiKeywordsDifference {
    return new EmojiKeywordsDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiKeywordsDifference {
    return new EmojiKeywordsDifference().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiKeywordsDifference | PlainMessage<EmojiKeywordsDifference> | undefined, b: EmojiKeywordsDifference | PlainMessage<EmojiKeywordsDifference> | undefined): boolean {
    return proto3.util.equals(EmojiKeywordsDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeywordsDifference
 */
export class TLEmojiKeywordsDifference extends Message$1<TLEmojiKeywordsDifference> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiKeywordsDifference data2 = 1;
   */
  data2: EmojiKeywordsDifference[] = [];

  constructor(data?: PartialMessage<TLEmojiKeywordsDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiKeywordsDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiKeywordsDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiKeywordsDifference {
    return new TLEmojiKeywordsDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiKeywordsDifference {
    return new TLEmojiKeywordsDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiKeywordsDifference {
    return new TLEmojiKeywordsDifference().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiKeywordsDifference | PlainMessage<TLEmojiKeywordsDifference> | undefined, b: TLEmojiKeywordsDifference | PlainMessage<TLEmojiKeywordsDifference> | undefined): boolean {
    return proto3.util.equals(TLEmojiKeywordsDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiLanguage
 */
export class EmojiLanguage extends Message$1<EmojiLanguage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string lang_code = 3;
   */
  langCode = "";

  constructor(data?: PartialMessage<EmojiLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiLanguage {
    return new EmojiLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiLanguage {
    return new EmojiLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiLanguage {
    return new EmojiLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiLanguage | PlainMessage<EmojiLanguage> | undefined, b: EmojiLanguage | PlainMessage<EmojiLanguage> | undefined): boolean {
    return proto3.util.equals(EmojiLanguage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiLanguage
 */
export class TLEmojiLanguage extends Message$1<TLEmojiLanguage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiLanguage data2 = 1;
   */
  data2: EmojiLanguage[] = [];

  constructor(data?: PartialMessage<TLEmojiLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiLanguage {
    return new TLEmojiLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiLanguage {
    return new TLEmojiLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiLanguage {
    return new TLEmojiLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiLanguage | PlainMessage<TLEmojiLanguage> | undefined, b: TLEmojiLanguage | PlainMessage<TLEmojiLanguage> | undefined): boolean {
    return proto3.util.equals(TLEmojiLanguage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiList
 */
export class EmojiList extends Message$1<EmojiList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: int64 document_id = 4;
   */
  documentId = protoInt64.zero;

  constructor(data?: PartialMessage<EmojiList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiList {
    return new EmojiList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiList {
    return new EmojiList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiList {
    return new EmojiList().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiList | PlainMessage<EmojiList> | undefined, b: EmojiList | PlainMessage<EmojiList> | undefined): boolean {
    return proto3.util.equals(EmojiList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiListNotModified
 */
export class TLEmojiListNotModified extends Message$1<TLEmojiListNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiList data2 = 1;
   */
  data2: EmojiList[] = [];

  constructor(data?: PartialMessage<TLEmojiListNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiListNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiListNotModified {
    return new TLEmojiListNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiListNotModified {
    return new TLEmojiListNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiListNotModified {
    return new TLEmojiListNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiListNotModified | PlainMessage<TLEmojiListNotModified> | undefined, b: TLEmojiListNotModified | PlainMessage<TLEmojiListNotModified> | undefined): boolean {
    return proto3.util.equals(TLEmojiListNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiList
 */
export class TLEmojiList extends Message$1<TLEmojiList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiList data2 = 1;
   */
  data2: EmojiList[] = [];

  constructor(data?: PartialMessage<TLEmojiList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiList {
    return new TLEmojiList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiList {
    return new TLEmojiList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiList {
    return new TLEmojiList().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiList | PlainMessage<TLEmojiList> | undefined, b: TLEmojiList | PlainMessage<TLEmojiList> | undefined): boolean {
    return proto3.util.equals(TLEmojiList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiStatus
 */
export class EmojiStatus extends Message$1<EmojiStatus> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 document_id = 3;
   */
  documentId = protoInt64.zero;

  /**
   * @generated from field: int32 until = 4;
   */
  until = 0;

  constructor(data?: PartialMessage<EmojiStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "until", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiStatus {
    return new EmojiStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiStatus {
    return new EmojiStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiStatus {
    return new EmojiStatus().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiStatus | PlainMessage<EmojiStatus> | undefined, b: EmojiStatus | PlainMessage<EmojiStatus> | undefined): boolean {
    return proto3.util.equals(EmojiStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatusEmpty
 */
export class TLEmojiStatusEmpty extends Message$1<TLEmojiStatusEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus data2 = 1;
   */
  data2: EmojiStatus[] = [];

  constructor(data?: PartialMessage<TLEmojiStatusEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatusEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiStatusEmpty {
    return new TLEmojiStatusEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiStatusEmpty {
    return new TLEmojiStatusEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiStatusEmpty {
    return new TLEmojiStatusEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiStatusEmpty | PlainMessage<TLEmojiStatusEmpty> | undefined, b: TLEmojiStatusEmpty | PlainMessage<TLEmojiStatusEmpty> | undefined): boolean {
    return proto3.util.equals(TLEmojiStatusEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatus
 */
export class TLEmojiStatus extends Message$1<TLEmojiStatus> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus data2 = 1;
   */
  data2: EmojiStatus[] = [];

  constructor(data?: PartialMessage<TLEmojiStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiStatus {
    return new TLEmojiStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiStatus {
    return new TLEmojiStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiStatus {
    return new TLEmojiStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiStatus | PlainMessage<TLEmojiStatus> | undefined, b: TLEmojiStatus | PlainMessage<TLEmojiStatus> | undefined): boolean {
    return proto3.util.equals(TLEmojiStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatusUntil
 */
export class TLEmojiStatusUntil extends Message$1<TLEmojiStatusUntil> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus data2 = 1;
   */
  data2: EmojiStatus[] = [];

  constructor(data?: PartialMessage<TLEmojiStatusUntil>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiStatusUntil";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiStatusUntil {
    return new TLEmojiStatusUntil().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiStatusUntil {
    return new TLEmojiStatusUntil().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiStatusUntil {
    return new TLEmojiStatusUntil().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiStatusUntil | PlainMessage<TLEmojiStatusUntil> | undefined, b: TLEmojiStatusUntil | PlainMessage<TLEmojiStatusUntil> | undefined): boolean {
    return proto3.util.equals(TLEmojiStatusUntil, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EmojiURL
 */
export class EmojiURL extends Message$1<EmojiURL> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<EmojiURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EmojiURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiURL {
    return new EmojiURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiURL {
    return new EmojiURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiURL {
    return new EmojiURL().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiURL | PlainMessage<EmojiURL> | undefined, b: EmojiURL | PlainMessage<EmojiURL> | undefined): boolean {
    return proto3.util.equals(EmojiURL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEmojiURL
 */
export class TLEmojiURL extends Message$1<TLEmojiURL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiURL data2 = 1;
   */
  data2: EmojiURL[] = [];

  constructor(data?: PartialMessage<TLEmojiURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEmojiURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EmojiURL, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEmojiURL {
    return new TLEmojiURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEmojiURL {
    return new TLEmojiURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEmojiURL {
    return new TLEmojiURL().fromJsonString(jsonString, options);
  }

  static equals(a: TLEmojiURL | PlainMessage<TLEmojiURL> | undefined, b: TLEmojiURL | PlainMessage<TLEmojiURL> | undefined): boolean {
    return proto3.util.equals(TLEmojiURL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EncryptedChat
 */
export class EncryptedChat extends Message$1<EncryptedChat> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: int64 admin_id = 6;
   */
  adminId = protoInt64.zero;

  /**
   * @generated from field: int64 participant_id = 7;
   */
  participantId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value folder_id = 8;
   */
  folderId: Int32Value[] = [];

  /**
   * @generated from field: bytes g_a = 9;
   */
  gA = new Uint8Array(0);

  /**
   * @generated from field: bytes g_a_or_b = 10;
   */
  gAOrB = new Uint8Array(0);

  /**
   * @generated from field: int64 key_fingerprint = 11;
   */
  keyFingerprint = protoInt64.zero;

  /**
   * @generated from field: bool history_deleted = 12;
   */
  historyDeleted = false;

  constructor(data?: PartialMessage<EncryptedChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EncryptedChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "admin_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "participant_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "folder_id", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "g_a", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "g_a_or_b", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "key_fingerprint", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "history_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptedChat {
    return new EncryptedChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptedChat {
    return new EncryptedChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptedChat {
    return new EncryptedChat().fromJsonString(jsonString, options);
  }

  static equals(a: EncryptedChat | PlainMessage<EncryptedChat> | undefined, b: EncryptedChat | PlainMessage<EncryptedChat> | undefined): boolean {
    return proto3.util.equals(EncryptedChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatEmpty
 */
export class TLEncryptedChatEmpty extends Message$1<TLEncryptedChatEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat data2 = 1;
   */
  data2: EncryptedChat[] = [];

  constructor(data?: PartialMessage<TLEncryptedChatEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedChatEmpty {
    return new TLEncryptedChatEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedChatEmpty {
    return new TLEncryptedChatEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedChatEmpty {
    return new TLEncryptedChatEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedChatEmpty | PlainMessage<TLEncryptedChatEmpty> | undefined, b: TLEncryptedChatEmpty | PlainMessage<TLEncryptedChatEmpty> | undefined): boolean {
    return proto3.util.equals(TLEncryptedChatEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatWaiting
 */
export class TLEncryptedChatWaiting extends Message$1<TLEncryptedChatWaiting> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat data2 = 1;
   */
  data2: EncryptedChat[] = [];

  constructor(data?: PartialMessage<TLEncryptedChatWaiting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatWaiting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedChatWaiting {
    return new TLEncryptedChatWaiting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedChatWaiting {
    return new TLEncryptedChatWaiting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedChatWaiting {
    return new TLEncryptedChatWaiting().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedChatWaiting | PlainMessage<TLEncryptedChatWaiting> | undefined, b: TLEncryptedChatWaiting | PlainMessage<TLEncryptedChatWaiting> | undefined): boolean {
    return proto3.util.equals(TLEncryptedChatWaiting, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatRequested
 */
export class TLEncryptedChatRequested extends Message$1<TLEncryptedChatRequested> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat data2 = 1;
   */
  data2: EncryptedChat[] = [];

  constructor(data?: PartialMessage<TLEncryptedChatRequested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatRequested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedChatRequested {
    return new TLEncryptedChatRequested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedChatRequested {
    return new TLEncryptedChatRequested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedChatRequested {
    return new TLEncryptedChatRequested().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedChatRequested | PlainMessage<TLEncryptedChatRequested> | undefined, b: TLEncryptedChatRequested | PlainMessage<TLEncryptedChatRequested> | undefined): boolean {
    return proto3.util.equals(TLEncryptedChatRequested, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChat
 */
export class TLEncryptedChat extends Message$1<TLEncryptedChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat data2 = 1;
   */
  data2: EncryptedChat[] = [];

  constructor(data?: PartialMessage<TLEncryptedChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedChat {
    return new TLEncryptedChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedChat {
    return new TLEncryptedChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedChat {
    return new TLEncryptedChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedChat | PlainMessage<TLEncryptedChat> | undefined, b: TLEncryptedChat | PlainMessage<TLEncryptedChat> | undefined): boolean {
    return proto3.util.equals(TLEncryptedChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatDiscarded
 */
export class TLEncryptedChatDiscarded extends Message$1<TLEncryptedChatDiscarded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat data2 = 1;
   */
  data2: EncryptedChat[] = [];

  constructor(data?: PartialMessage<TLEncryptedChatDiscarded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedChatDiscarded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedChatDiscarded {
    return new TLEncryptedChatDiscarded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedChatDiscarded {
    return new TLEncryptedChatDiscarded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedChatDiscarded {
    return new TLEncryptedChatDiscarded().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedChatDiscarded | PlainMessage<TLEncryptedChatDiscarded> | undefined, b: TLEncryptedChatDiscarded | PlainMessage<TLEncryptedChatDiscarded> | undefined): boolean {
    return proto3.util.equals(TLEncryptedChatDiscarded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EncryptedFile
 */
export class EncryptedFile extends Message$1<EncryptedFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int64 size2_INT64 = 5;
   */
  size2INT64 = protoInt64.zero;

  /**
   * @generated from field: int32 dc_id = 6;
   */
  dcId = 0;

  /**
   * @generated from field: int32 key_fingerprint = 7;
   */
  keyFingerprint = 0;

  /**
   * @generated from field: int32 size2_INT32 = 8;
   */
  size2INT32 = 0;

  constructor(data?: PartialMessage<EncryptedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EncryptedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "size2_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "key_fingerprint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "size2_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptedFile {
    return new EncryptedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptedFile {
    return new EncryptedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptedFile {
    return new EncryptedFile().fromJsonString(jsonString, options);
  }

  static equals(a: EncryptedFile | PlainMessage<EncryptedFile> | undefined, b: EncryptedFile | PlainMessage<EncryptedFile> | undefined): boolean {
    return proto3.util.equals(EncryptedFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedFileEmpty
 */
export class TLEncryptedFileEmpty extends Message$1<TLEncryptedFileEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedFile data2 = 1;
   */
  data2: EncryptedFile[] = [];

  constructor(data?: PartialMessage<TLEncryptedFileEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedFileEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedFileEmpty {
    return new TLEncryptedFileEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedFileEmpty {
    return new TLEncryptedFileEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedFileEmpty {
    return new TLEncryptedFileEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedFileEmpty | PlainMessage<TLEncryptedFileEmpty> | undefined, b: TLEncryptedFileEmpty | PlainMessage<TLEncryptedFileEmpty> | undefined): boolean {
    return proto3.util.equals(TLEncryptedFileEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedFile
 */
export class TLEncryptedFile extends Message$1<TLEncryptedFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedFile data2 = 1;
   */
  data2: EncryptedFile[] = [];

  constructor(data?: PartialMessage<TLEncryptedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedFile {
    return new TLEncryptedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedFile {
    return new TLEncryptedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedFile {
    return new TLEncryptedFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedFile | PlainMessage<TLEncryptedFile> | undefined, b: TLEncryptedFile | PlainMessage<TLEncryptedFile> | undefined): boolean {
    return proto3.util.equals(TLEncryptedFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage
 */
export class EncryptedMessage extends Message$1<EncryptedMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 random_id = 3;
   */
  randomId = protoInt64.zero;

  /**
   * @generated from field: int32 chat_id = 4;
   */
  chatId = 0;

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: bytes bytes = 6;
   */
  bytes = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedFile file = 7;
   */
  file: EncryptedFile[] = [];

  constructor(data?: PartialMessage<EncryptedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "random_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chat_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "file", kind: "message", T: EncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptedMessage {
    return new EncryptedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptedMessage {
    return new EncryptedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptedMessage {
    return new EncryptedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: EncryptedMessage | PlainMessage<EncryptedMessage> | undefined, b: EncryptedMessage | PlainMessage<EncryptedMessage> | undefined): boolean {
    return proto3.util.equals(EncryptedMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedMessage
 */
export class TLEncryptedMessage extends Message$1<TLEncryptedMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage data2 = 1;
   */
  data2: EncryptedMessage[] = [];

  constructor(data?: PartialMessage<TLEncryptedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedMessage {
    return new TLEncryptedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedMessage {
    return new TLEncryptedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedMessage {
    return new TLEncryptedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedMessage | PlainMessage<TLEncryptedMessage> | undefined, b: TLEncryptedMessage | PlainMessage<TLEncryptedMessage> | undefined): boolean {
    return proto3.util.equals(TLEncryptedMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLEncryptedMessageService
 */
export class TLEncryptedMessageService extends Message$1<TLEncryptedMessageService> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage data2 = 1;
   */
  data2: EncryptedMessage[] = [];

  constructor(data?: PartialMessage<TLEncryptedMessageService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLEncryptedMessageService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: EncryptedMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLEncryptedMessageService {
    return new TLEncryptedMessageService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLEncryptedMessageService {
    return new TLEncryptedMessageService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLEncryptedMessageService {
    return new TLEncryptedMessageService().fromJsonString(jsonString, options);
  }

  static equals(a: TLEncryptedMessageService | PlainMessage<TLEncryptedMessageService> | undefined, b: TLEncryptedMessageService | PlainMessage<TLEncryptedMessageService> | undefined): boolean {
    return proto3.util.equals(TLEncryptedMessageService, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite
 */
export class ExportedChatInvite extends Message$1<ExportedChatInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool revoked = 3;
   */
  revoked = false;

  /**
   * @generated from field: bool permanent = 4;
   */
  permanent = false;

  /**
   * @generated from field: bool request_needed = 5;
   */
  requestNeeded = false;

  /**
   * @generated from field: string link = 6;
   */
  link = "";

  /**
   * @generated from field: int64 admin_id = 7;
   */
  adminId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 8;
   */
  date = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value start_date = 9;
   */
  startDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value expire_date = 10;
   */
  expireDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value usage_limit = 11;
   */
  usageLimit: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value usage = 12;
   */
  usage: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value requested = 13;
   */
  requested: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 14;
   */
  title: StringValue[] = [];

  constructor(data?: PartialMessage<ExportedChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "permanent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "request_needed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "admin_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "start_date", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "expire_date", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "usage_limit", kind: "message", T: Int32Value, repeated: true },
    { no: 12, name: "usage", kind: "message", T: Int32Value, repeated: true },
    { no: 13, name: "requested", kind: "message", T: Int32Value, repeated: true },
    { no: 14, name: "title", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportedChatInvite {
    return new ExportedChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportedChatInvite {
    return new ExportedChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportedChatInvite {
    return new ExportedChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ExportedChatInvite | PlainMessage<ExportedChatInvite> | undefined, b: ExportedChatInvite | PlainMessage<ExportedChatInvite> | undefined): boolean {
    return proto3.util.equals(ExportedChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInviteExported
 */
export class TLChatInviteExported extends Message$1<TLChatInviteExported> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite data2 = 1;
   */
  data2: ExportedChatInvite[] = [];

  constructor(data?: PartialMessage<TLChatInviteExported>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInviteExported";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInviteExported {
    return new TLChatInviteExported().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInviteExported {
    return new TLChatInviteExported().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInviteExported {
    return new TLChatInviteExported().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInviteExported | PlainMessage<TLChatInviteExported> | undefined, b: TLChatInviteExported | PlainMessage<TLChatInviteExported> | undefined): boolean {
    return proto3.util.equals(TLChatInviteExported, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatInvitePublicJoinRequests
 */
export class TLChatInvitePublicJoinRequests extends Message$1<TLChatInvitePublicJoinRequests> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite data2 = 1;
   */
  data2: ExportedChatInvite[] = [];

  constructor(data?: PartialMessage<TLChatInvitePublicJoinRequests>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatInvitePublicJoinRequests";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatInvitePublicJoinRequests {
    return new TLChatInvitePublicJoinRequests().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatInvitePublicJoinRequests {
    return new TLChatInvitePublicJoinRequests().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatInvitePublicJoinRequests {
    return new TLChatInvitePublicJoinRequests().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatInvitePublicJoinRequests | PlainMessage<TLChatInvitePublicJoinRequests> | undefined, b: TLChatInvitePublicJoinRequests | PlainMessage<TLChatInvitePublicJoinRequests> | undefined): boolean {
    return proto3.util.equals(TLChatInvitePublicJoinRequests, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ExportedChatlistInvite
 */
export class ExportedChatlistInvite extends Message$1<ExportedChatlistInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peers = 5;
   */
  peers: Peer[] = [];

  constructor(data?: PartialMessage<ExportedChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ExportedChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "peers", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportedChatlistInvite {
    return new ExportedChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportedChatlistInvite {
    return new ExportedChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportedChatlistInvite {
    return new ExportedChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ExportedChatlistInvite | PlainMessage<ExportedChatlistInvite> | undefined, b: ExportedChatlistInvite | PlainMessage<ExportedChatlistInvite> | undefined): boolean {
    return proto3.util.equals(ExportedChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLExportedChatlistInvite
 */
export class TLExportedChatlistInvite extends Message$1<TLExportedChatlistInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatlistInvite data2 = 1;
   */
  data2: ExportedChatlistInvite[] = [];

  constructor(data?: PartialMessage<TLExportedChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLExportedChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedChatlistInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLExportedChatlistInvite {
    return new TLExportedChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLExportedChatlistInvite {
    return new TLExportedChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLExportedChatlistInvite {
    return new TLExportedChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLExportedChatlistInvite | PlainMessage<TLExportedChatlistInvite> | undefined, b: TLExportedChatlistInvite | PlainMessage<TLExportedChatlistInvite> | undefined): boolean {
    return proto3.util.equals(TLExportedChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ExportedContactToken
 */
export class ExportedContactToken extends Message$1<ExportedContactToken> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int32 expires = 4;
   */
  expires = 0;

  constructor(data?: PartialMessage<ExportedContactToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ExportedContactToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportedContactToken {
    return new ExportedContactToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportedContactToken {
    return new ExportedContactToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportedContactToken {
    return new ExportedContactToken().fromJsonString(jsonString, options);
  }

  static equals(a: ExportedContactToken | PlainMessage<ExportedContactToken> | undefined, b: ExportedContactToken | PlainMessage<ExportedContactToken> | undefined): boolean {
    return proto3.util.equals(ExportedContactToken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLExportedContactToken
 */
export class TLExportedContactToken extends Message$1<TLExportedContactToken> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedContactToken data2 = 1;
   */
  data2: ExportedContactToken[] = [];

  constructor(data?: PartialMessage<TLExportedContactToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLExportedContactToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedContactToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLExportedContactToken {
    return new TLExportedContactToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLExportedContactToken {
    return new TLExportedContactToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLExportedContactToken {
    return new TLExportedContactToken().fromJsonString(jsonString, options);
  }

  static equals(a: TLExportedContactToken | PlainMessage<TLExportedContactToken> | undefined, b: TLExportedContactToken | PlainMessage<TLExportedContactToken> | undefined): boolean {
    return proto3.util.equals(TLExportedContactToken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ExportedMessageLink
 */
export class ExportedMessageLink extends Message$1<ExportedMessageLink> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string link = 3;
   */
  link = "";

  /**
   * @generated from field: string html = 4;
   */
  html = "";

  constructor(data?: PartialMessage<ExportedMessageLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ExportedMessageLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportedMessageLink {
    return new ExportedMessageLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportedMessageLink {
    return new ExportedMessageLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportedMessageLink {
    return new ExportedMessageLink().fromJsonString(jsonString, options);
  }

  static equals(a: ExportedMessageLink | PlainMessage<ExportedMessageLink> | undefined, b: ExportedMessageLink | PlainMessage<ExportedMessageLink> | undefined): boolean {
    return proto3.util.equals(ExportedMessageLink, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLExportedMessageLink
 */
export class TLExportedMessageLink extends Message$1<TLExportedMessageLink> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedMessageLink data2 = 1;
   */
  data2: ExportedMessageLink[] = [];

  constructor(data?: PartialMessage<TLExportedMessageLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLExportedMessageLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedMessageLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLExportedMessageLink {
    return new TLExportedMessageLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLExportedMessageLink {
    return new TLExportedMessageLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLExportedMessageLink {
    return new TLExportedMessageLink().fromJsonString(jsonString, options);
  }

  static equals(a: TLExportedMessageLink | PlainMessage<TLExportedMessageLink> | undefined, b: TLExportedMessageLink | PlainMessage<TLExportedMessageLink> | undefined): boolean {
    return proto3.util.equals(TLExportedMessageLink, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ExportedStoryLink
 */
export class ExportedStoryLink extends Message$1<ExportedStoryLink> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string link = 3;
   */
  link = "";

  constructor(data?: PartialMessage<ExportedStoryLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ExportedStoryLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportedStoryLink {
    return new ExportedStoryLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportedStoryLink {
    return new ExportedStoryLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportedStoryLink {
    return new ExportedStoryLink().fromJsonString(jsonString, options);
  }

  static equals(a: ExportedStoryLink | PlainMessage<ExportedStoryLink> | undefined, b: ExportedStoryLink | PlainMessage<ExportedStoryLink> | undefined): boolean {
    return proto3.util.equals(ExportedStoryLink, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLExportedStoryLink
 */
export class TLExportedStoryLink extends Message$1<TLExportedStoryLink> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedStoryLink data2 = 1;
   */
  data2: ExportedStoryLink[] = [];

  constructor(data?: PartialMessage<TLExportedStoryLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLExportedStoryLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ExportedStoryLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLExportedStoryLink {
    return new TLExportedStoryLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLExportedStoryLink {
    return new TLExportedStoryLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLExportedStoryLink {
    return new TLExportedStoryLink().fromJsonString(jsonString, options);
  }

  static equals(a: TLExportedStoryLink | PlainMessage<TLExportedStoryLink> | undefined, b: TLExportedStoryLink | PlainMessage<TLExportedStoryLink> | undefined): boolean {
    return proto3.util.equals(TLExportedStoryLink, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.FileHash
 */
export class FileHash extends Message$1<FileHash> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 offset_INT64 = 3;
   */
  offsetINT64 = protoInt64.zero;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit = 0;

  /**
   * @generated from field: bytes hash = 5;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: int32 offset_INT32 = 6;
   */
  offsetINT32 = 0;

  constructor(data?: PartialMessage<FileHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.FileHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "offset_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "offset_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileHash {
    return new FileHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileHash {
    return new FileHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileHash {
    return new FileHash().fromJsonString(jsonString, options);
  }

  static equals(a: FileHash | PlainMessage<FileHash> | undefined, b: FileHash | PlainMessage<FileHash> | undefined): boolean {
    return proto3.util.equals(FileHash, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLFileHash
 */
export class TLFileHash extends Message$1<TLFileHash> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.FileHash data2 = 1;
   */
  data2: FileHash[] = [];

  constructor(data?: PartialMessage<TLFileHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLFileHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: FileHash, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLFileHash {
    return new TLFileHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLFileHash {
    return new TLFileHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLFileHash {
    return new TLFileHash().fromJsonString(jsonString, options);
  }

  static equals(a: TLFileHash | PlainMessage<TLFileHash> | undefined, b: TLFileHash | PlainMessage<TLFileHash> | undefined): boolean {
    return proto3.util.equals(TLFileHash, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Folder
 */
export class Folder extends Message$1<Folder> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool autofill_new_broadcasts = 3;
   */
  autofillNewBroadcasts = false;

  /**
   * @generated from field: bool autofill_public_groups = 4;
   */
  autofillPublicGroups = false;

  /**
   * @generated from field: bool autofill_new_correspondents = 5;
   */
  autofillNewCorrespondents = false;

  /**
   * @generated from field: int32 id = 6;
   */
  id = 0;

  /**
   * @generated from field: string title = 7;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatPhoto photo = 8;
   */
  photo: ChatPhoto[] = [];

  constructor(data?: PartialMessage<Folder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Folder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "autofill_new_broadcasts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "autofill_public_groups", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "autofill_new_correspondents", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "photo", kind: "message", T: ChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Folder {
    return new Folder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Folder {
    return new Folder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Folder {
    return new Folder().fromJsonString(jsonString, options);
  }

  static equals(a: Folder | PlainMessage<Folder> | undefined, b: Folder | PlainMessage<Folder> | undefined): boolean {
    return proto3.util.equals(Folder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLFolder
 */
export class TLFolder extends Message$1<TLFolder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Folder data2 = 1;
   */
  data2: Folder[] = [];

  constructor(data?: PartialMessage<TLFolder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLFolder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Folder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLFolder {
    return new TLFolder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLFolder {
    return new TLFolder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLFolder {
    return new TLFolder().fromJsonString(jsonString, options);
  }

  static equals(a: TLFolder | PlainMessage<TLFolder> | undefined, b: TLFolder | PlainMessage<TLFolder> | undefined): boolean {
    return proto3.util.equals(TLFolder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.FolderPeer
 */
export class FolderPeer extends Message$1<FolderPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 folder_id = 4;
   */
  folderId = 0;

  constructor(data?: PartialMessage<FolderPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.FolderPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FolderPeer {
    return new FolderPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FolderPeer {
    return new FolderPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FolderPeer {
    return new FolderPeer().fromJsonString(jsonString, options);
  }

  static equals(a: FolderPeer | PlainMessage<FolderPeer> | undefined, b: FolderPeer | PlainMessage<FolderPeer> | undefined): boolean {
    return proto3.util.equals(FolderPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLFolderPeer
 */
export class TLFolderPeer extends Message$1<TLFolderPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.FolderPeer data2 = 1;
   */
  data2: FolderPeer[] = [];

  constructor(data?: PartialMessage<TLFolderPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLFolderPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: FolderPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLFolderPeer {
    return new TLFolderPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLFolderPeer {
    return new TLFolderPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLFolderPeer {
    return new TLFolderPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLFolderPeer | PlainMessage<TLFolderPeer> | undefined, b: TLFolderPeer | PlainMessage<TLFolderPeer> | undefined): boolean {
    return proto3.util.equals(TLFolderPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ForumTopic
 */
export class ForumTopic extends Message$1<ForumTopic> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: bool my = 4;
   */
  my = false;

  /**
   * @generated from field: bool closed = 5;
   */
  closed = false;

  /**
   * @generated from field: bool pinned = 6;
   */
  pinned = false;

  /**
   * @generated from field: bool short = 7;
   */
  short = false;

  /**
   * @generated from field: bool hidden = 8;
   */
  hidden = false;

  /**
   * @generated from field: int32 date = 9;
   */
  date = 0;

  /**
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * @generated from field: int32 icon_color = 11;
   */
  iconColor = 0;

  /**
   * @generated from field: repeated google.protobuf.Int64Value icon_emoji_id = 12;
   */
  iconEmojiId: Int64Value[] = [];

  /**
   * @generated from field: int32 top_message = 13;
   */
  topMessage = 0;

  /**
   * @generated from field: int32 read_inbox_max_id = 14;
   */
  readInboxMaxId = 0;

  /**
   * @generated from field: int32 read_outbox_max_id = 15;
   */
  readOutboxMaxId = 0;

  /**
   * @generated from field: int32 unread_count = 16;
   */
  unreadCount = 0;

  /**
   * @generated from field: int32 unread_mentions_count = 17;
   */
  unreadMentionsCount = 0;

  /**
   * @generated from field: int32 unread_reactions_count = 18;
   */
  unreadReactionsCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 19;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings notify_settings = 20;
   */
  notifySettings: PeerNotifySettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DraftMessage draft = 21;
   */
  draft: DraftMessage[] = [];

  constructor(data?: PartialMessage<ForumTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ForumTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "my", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "short", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "icon_color", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "icon_emoji_id", kind: "message", T: Int64Value, repeated: true },
    { no: 13, name: "top_message", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "read_inbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "read_outbox_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "unread_mentions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "unread_reactions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 20, name: "notify_settings", kind: "message", T: PeerNotifySettings, repeated: true },
    { no: 21, name: "draft", kind: "message", T: DraftMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForumTopic {
    return new ForumTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForumTopic {
    return new ForumTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForumTopic {
    return new ForumTopic().fromJsonString(jsonString, options);
  }

  static equals(a: ForumTopic | PlainMessage<ForumTopic> | undefined, b: ForumTopic | PlainMessage<ForumTopic> | undefined): boolean {
    return proto3.util.equals(ForumTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLForumTopicDeleted
 */
export class TLForumTopicDeleted extends Message$1<TLForumTopicDeleted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic data2 = 1;
   */
  data2: ForumTopic[] = [];

  constructor(data?: PartialMessage<TLForumTopicDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLForumTopicDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ForumTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLForumTopicDeleted {
    return new TLForumTopicDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLForumTopicDeleted {
    return new TLForumTopicDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLForumTopicDeleted {
    return new TLForumTopicDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: TLForumTopicDeleted | PlainMessage<TLForumTopicDeleted> | undefined, b: TLForumTopicDeleted | PlainMessage<TLForumTopicDeleted> | undefined): boolean {
    return proto3.util.equals(TLForumTopicDeleted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLForumTopic
 */
export class TLForumTopic extends Message$1<TLForumTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic data2 = 1;
   */
  data2: ForumTopic[] = [];

  constructor(data?: PartialMessage<TLForumTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLForumTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ForumTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLForumTopic {
    return new TLForumTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLForumTopic {
    return new TLForumTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLForumTopic {
    return new TLForumTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLForumTopic | PlainMessage<TLForumTopic> | undefined, b: TLForumTopic | PlainMessage<TLForumTopic> | undefined): boolean {
    return proto3.util.equals(TLForumTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Game
 */
export class Game extends Message$1<Game> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string short_name = 5;
   */
  shortName = "";

  /**
   * @generated from field: string title = 6;
   */
  title = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 8;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 9;
   */
  document: Document[] = [];

  constructor(data?: PartialMessage<Game>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Game";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 9, name: "document", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game {
    return new Game().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJsonString(jsonString, options);
  }

  static equals(a: Game | PlainMessage<Game> | undefined, b: Game | PlainMessage<Game> | undefined): boolean {
    return proto3.util.equals(Game, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGame
 */
export class TLGame extends Message$1<TLGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Game data2 = 1;
   */
  data2: Game[] = [];

  constructor(data?: PartialMessage<TLGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Game, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGame {
    return new TLGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGame {
    return new TLGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGame {
    return new TLGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLGame | PlainMessage<TLGame> | undefined, b: TLGame | PlainMessage<TLGame> | undefined): boolean {
    return proto3.util.equals(TLGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GeoPoint
 */
export class GeoPoint extends Message$1<GeoPoint> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float long = 3;
   */
  long = 0;

  /**
   * @generated from field: float lat = 4;
   */
  lat = 0;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value accuracy_radius = 6;
   */
  accuracyRadius: Int32Value[] = [];

  constructor(data?: PartialMessage<GeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "long", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "lat", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "accuracy_radius", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoPoint {
    return new GeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoPoint {
    return new GeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoPoint {
    return new GeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: GeoPoint | PlainMessage<GeoPoint> | undefined, b: GeoPoint | PlainMessage<GeoPoint> | undefined): boolean {
    return proto3.util.equals(GeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGeoPointEmpty
 */
export class TLGeoPointEmpty extends Message$1<TLGeoPointEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint data2 = 1;
   */
  data2: GeoPoint[] = [];

  constructor(data?: PartialMessage<TLGeoPointEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGeoPointEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GeoPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGeoPointEmpty {
    return new TLGeoPointEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGeoPointEmpty {
    return new TLGeoPointEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGeoPointEmpty {
    return new TLGeoPointEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLGeoPointEmpty | PlainMessage<TLGeoPointEmpty> | undefined, b: TLGeoPointEmpty | PlainMessage<TLGeoPointEmpty> | undefined): boolean {
    return proto3.util.equals(TLGeoPointEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGeoPoint
 */
export class TLGeoPoint extends Message$1<TLGeoPoint> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint data2 = 1;
   */
  data2: GeoPoint[] = [];

  constructor(data?: PartialMessage<TLGeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GeoPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGeoPoint {
    return new TLGeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGeoPoint {
    return new TLGeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGeoPoint {
    return new TLGeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: TLGeoPoint | PlainMessage<TLGeoPoint> | undefined, b: TLGeoPoint | PlainMessage<TLGeoPoint> | undefined): boolean {
    return proto3.util.equals(TLGeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GlobalPrivacySettings
 */
export class GlobalPrivacySettings extends Message$1<GlobalPrivacySettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool archive_and_mute_new_noncontact_peers_FLAGBOOLEAN = 3;
   */
  archiveAndMuteNewNoncontactPeersFLAGBOOLEAN = false;

  /**
   * @generated from field: bool keep_archived_unmuted = 4;
   */
  keepArchivedUnmuted = false;

  /**
   * @generated from field: bool keep_archived_folders = 5;
   */
  keepArchivedFolders = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool archive_and_mute_new_noncontact_peers_FLAGBOOL = 6;
   */
  archiveAndMuteNewNoncontactPeersFLAGBOOL: Bool[] = [];

  constructor(data?: PartialMessage<GlobalPrivacySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GlobalPrivacySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "archive_and_mute_new_noncontact_peers_FLAGBOOLEAN", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "keep_archived_unmuted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "keep_archived_folders", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "archive_and_mute_new_noncontact_peers_FLAGBOOL", kind: "message", T: Bool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GlobalPrivacySettings {
    return new GlobalPrivacySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GlobalPrivacySettings {
    return new GlobalPrivacySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GlobalPrivacySettings {
    return new GlobalPrivacySettings().fromJsonString(jsonString, options);
  }

  static equals(a: GlobalPrivacySettings | PlainMessage<GlobalPrivacySettings> | undefined, b: GlobalPrivacySettings | PlainMessage<GlobalPrivacySettings> | undefined): boolean {
    return proto3.util.equals(GlobalPrivacySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGlobalPrivacySettings
 */
export class TLGlobalPrivacySettings extends Message$1<TLGlobalPrivacySettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GlobalPrivacySettings data2 = 1;
   */
  data2: GlobalPrivacySettings[] = [];

  constructor(data?: PartialMessage<TLGlobalPrivacySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGlobalPrivacySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GlobalPrivacySettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGlobalPrivacySettings {
    return new TLGlobalPrivacySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGlobalPrivacySettings {
    return new TLGlobalPrivacySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGlobalPrivacySettings {
    return new TLGlobalPrivacySettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLGlobalPrivacySettings | PlainMessage<TLGlobalPrivacySettings> | undefined, b: TLGlobalPrivacySettings | PlainMessage<TLGlobalPrivacySettings> | undefined): boolean {
    return proto3.util.equals(TLGlobalPrivacySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GroupCall
 */
export class GroupCall extends Message$1<GroupCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int32 duration = 5;
   */
  duration = 0;

  /**
   * @generated from field: bool join_muted = 6;
   */
  joinMuted = false;

  /**
   * @generated from field: bool can_change_join_muted = 7;
   */
  canChangeJoinMuted = false;

  /**
   * @generated from field: bool join_date_asc = 8;
   */
  joinDateAsc = false;

  /**
   * @generated from field: bool schedule_start_subscribed = 9;
   */
  scheduleStartSubscribed = false;

  /**
   * @generated from field: bool can_start_video = 10;
   */
  canStartVideo = false;

  /**
   * @generated from field: bool record_video_active = 11;
   */
  recordVideoActive = false;

  /**
   * @generated from field: bool rtmp_stream = 12;
   */
  rtmpStream = false;

  /**
   * @generated from field: bool listeners_hidden = 13;
   */
  listenersHidden = false;

  /**
   * @generated from field: int32 participants_count = 14;
   */
  participantsCount = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 15;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value stream_dc_id = 16;
   */
  streamDcId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value record_start_date = 17;
   */
  recordStartDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value schedule_date = 18;
   */
  scheduleDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value unmuted_video_count = 19;
   */
  unmutedVideoCount: Int32Value[] = [];

  /**
   * @generated from field: int32 unmuted_video_limit = 20;
   */
  unmutedVideoLimit = 0;

  /**
   * @generated from field: int32 version = 21;
   */
  version = 0;

  constructor(data?: PartialMessage<GroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "join_muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "can_change_join_muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "join_date_asc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "schedule_start_subscribed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "can_start_video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "record_video_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "rtmp_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "listeners_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "participants_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 16, name: "stream_dc_id", kind: "message", T: Int32Value, repeated: true },
    { no: 17, name: "record_start_date", kind: "message", T: Int32Value, repeated: true },
    { no: 18, name: "schedule_date", kind: "message", T: Int32Value, repeated: true },
    { no: 19, name: "unmuted_video_count", kind: "message", T: Int32Value, repeated: true },
    { no: 20, name: "unmuted_video_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupCall {
    return new GroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupCall {
    return new GroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupCall {
    return new GroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: GroupCall | PlainMessage<GroupCall> | undefined, b: GroupCall | PlainMessage<GroupCall> | undefined): boolean {
    return proto3.util.equals(GroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCallDiscarded
 */
export class TLGroupCallDiscarded extends Message$1<TLGroupCallDiscarded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCall data2 = 1;
   */
  data2: GroupCall[] = [];

  constructor(data?: PartialMessage<TLGroupCallDiscarded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCallDiscarded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCallDiscarded {
    return new TLGroupCallDiscarded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCallDiscarded {
    return new TLGroupCallDiscarded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCallDiscarded {
    return new TLGroupCallDiscarded().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCallDiscarded | PlainMessage<TLGroupCallDiscarded> | undefined, b: TLGroupCallDiscarded | PlainMessage<TLGroupCallDiscarded> | undefined): boolean {
    return proto3.util.equals(TLGroupCallDiscarded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCall
 */
export class TLGroupCall extends Message$1<TLGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCall data2 = 1;
   */
  data2: GroupCall[] = [];

  constructor(data?: PartialMessage<TLGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCall {
    return new TLGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCall {
    return new TLGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCall {
    return new TLGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCall | PlainMessage<TLGroupCall> | undefined, b: TLGroupCall | PlainMessage<TLGroupCall> | undefined): boolean {
    return proto3.util.equals(TLGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant
 */
export class GroupCallParticipant extends Message$1<GroupCallParticipant> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool muted = 3;
   */
  muted = false;

  /**
   * @generated from field: bool left = 4;
   */
  left = false;

  /**
   * @generated from field: bool can_self_unmute = 5;
   */
  canSelfUnmute = false;

  /**
   * @generated from field: bool just_joined = 6;
   */
  justJoined = false;

  /**
   * @generated from field: bool versioned = 7;
   */
  versioned = false;

  /**
   * @generated from field: bool min = 8;
   */
  min = false;

  /**
   * @generated from field: bool muted_by_you = 9;
   */
  mutedByYou = false;

  /**
   * @generated from field: bool volume_by_admin = 10;
   */
  volumeByAdmin = false;

  /**
   * @generated from field: bool self = 11;
   */
  self = false;

  /**
   * @generated from field: bool video_joined = 12;
   */
  videoJoined = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 13;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 date = 14;
   */
  date = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value active_date = 15;
   */
  activeDate: Int32Value[] = [];

  /**
   * @generated from field: int32 source = 16;
   */
  source = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value volume = 17;
   */
  volume: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue about = 18;
   */
  about: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value raise_hand_rating = 19;
   */
  raiseHandRating: Int64Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideo video = 20;
   */
  video: GroupCallParticipantVideo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideo presentation = 21;
   */
  presentation: GroupCallParticipantVideo[] = [];

  constructor(data?: PartialMessage<GroupCallParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "left", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "can_self_unmute", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "just_joined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "versioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "muted_by_you", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "volume_by_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "self", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "video_joined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 14, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "active_date", kind: "message", T: Int32Value, repeated: true },
    { no: 16, name: "source", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "volume", kind: "message", T: Int32Value, repeated: true },
    { no: 18, name: "about", kind: "message", T: StringValue, repeated: true },
    { no: 19, name: "raise_hand_rating", kind: "message", T: Int64Value, repeated: true },
    { no: 20, name: "video", kind: "message", T: GroupCallParticipantVideo, repeated: true },
    { no: 21, name: "presentation", kind: "message", T: GroupCallParticipantVideo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupCallParticipant {
    return new GroupCallParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupCallParticipant {
    return new GroupCallParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupCallParticipant {
    return new GroupCallParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: GroupCallParticipant | PlainMessage<GroupCallParticipant> | undefined, b: GroupCallParticipant | PlainMessage<GroupCallParticipant> | undefined): boolean {
    return proto3.util.equals(GroupCallParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipant
 */
export class TLGroupCallParticipant extends Message$1<TLGroupCallParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant data2 = 1;
   */
  data2: GroupCallParticipant[] = [];

  constructor(data?: PartialMessage<TLGroupCallParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCallParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCallParticipant {
    return new TLGroupCallParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCallParticipant {
    return new TLGroupCallParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCallParticipant {
    return new TLGroupCallParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCallParticipant | PlainMessage<TLGroupCallParticipant> | undefined, b: TLGroupCallParticipant | PlainMessage<TLGroupCallParticipant> | undefined): boolean {
    return proto3.util.equals(TLGroupCallParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideo
 */
export class GroupCallParticipantVideo extends Message$1<GroupCallParticipantVideo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool paused = 3;
   */
  paused = false;

  /**
   * @generated from field: string endpoint = 4;
   */
  endpoint = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideoSourceGroup source_groups = 5;
   */
  sourceGroups: GroupCallParticipantVideoSourceGroup[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value audio_source = 6;
   */
  audioSource: Int32Value[] = [];

  constructor(data?: PartialMessage<GroupCallParticipantVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "source_groups", kind: "message", T: GroupCallParticipantVideoSourceGroup, repeated: true },
    { no: 6, name: "audio_source", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupCallParticipantVideo {
    return new GroupCallParticipantVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupCallParticipantVideo {
    return new GroupCallParticipantVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupCallParticipantVideo {
    return new GroupCallParticipantVideo().fromJsonString(jsonString, options);
  }

  static equals(a: GroupCallParticipantVideo | PlainMessage<GroupCallParticipantVideo> | undefined, b: GroupCallParticipantVideo | PlainMessage<GroupCallParticipantVideo> | undefined): boolean {
    return proto3.util.equals(GroupCallParticipantVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipantVideo
 */
export class TLGroupCallParticipantVideo extends Message$1<TLGroupCallParticipantVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideo data2 = 1;
   */
  data2: GroupCallParticipantVideo[] = [];

  constructor(data?: PartialMessage<TLGroupCallParticipantVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipantVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCallParticipantVideo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCallParticipantVideo {
    return new TLGroupCallParticipantVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCallParticipantVideo {
    return new TLGroupCallParticipantVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCallParticipantVideo {
    return new TLGroupCallParticipantVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCallParticipantVideo | PlainMessage<TLGroupCallParticipantVideo> | undefined, b: TLGroupCallParticipantVideo | PlainMessage<TLGroupCallParticipantVideo> | undefined): boolean {
    return proto3.util.equals(TLGroupCallParticipantVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideoSourceGroup
 */
export class GroupCallParticipantVideoSourceGroup extends Message$1<GroupCallParticipantVideoSourceGroup> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string semantics = 3;
   */
  semantics = "";

  /**
   * @generated from field: int32 sources = 4;
   */
  sources = 0;

  constructor(data?: PartialMessage<GroupCallParticipantVideoSourceGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideoSourceGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "semantics", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sources", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupCallParticipantVideoSourceGroup {
    return new GroupCallParticipantVideoSourceGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupCallParticipantVideoSourceGroup {
    return new GroupCallParticipantVideoSourceGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupCallParticipantVideoSourceGroup {
    return new GroupCallParticipantVideoSourceGroup().fromJsonString(jsonString, options);
  }

  static equals(a: GroupCallParticipantVideoSourceGroup | PlainMessage<GroupCallParticipantVideoSourceGroup> | undefined, b: GroupCallParticipantVideoSourceGroup | PlainMessage<GroupCallParticipantVideoSourceGroup> | undefined): boolean {
    return proto3.util.equals(GroupCallParticipantVideoSourceGroup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipantVideoSourceGroup
 */
export class TLGroupCallParticipantVideoSourceGroup extends Message$1<TLGroupCallParticipantVideoSourceGroup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipantVideoSourceGroup data2 = 1;
   */
  data2: GroupCallParticipantVideoSourceGroup[] = [];

  constructor(data?: PartialMessage<TLGroupCallParticipantVideoSourceGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCallParticipantVideoSourceGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCallParticipantVideoSourceGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCallParticipantVideoSourceGroup {
    return new TLGroupCallParticipantVideoSourceGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCallParticipantVideoSourceGroup {
    return new TLGroupCallParticipantVideoSourceGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCallParticipantVideoSourceGroup {
    return new TLGroupCallParticipantVideoSourceGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCallParticipantVideoSourceGroup | PlainMessage<TLGroupCallParticipantVideoSourceGroup> | undefined, b: TLGroupCallParticipantVideoSourceGroup | PlainMessage<TLGroupCallParticipantVideoSourceGroup> | undefined): boolean {
    return proto3.util.equals(TLGroupCallParticipantVideoSourceGroup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.GroupCallStreamChannel
 */
export class GroupCallStreamChannel extends Message$1<GroupCallStreamChannel> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 channel = 3;
   */
  channel = 0;

  /**
   * @generated from field: int32 scale = 4;
   */
  scale = 0;

  /**
   * @generated from field: int64 last_timestamp_ms = 5;
   */
  lastTimestampMs = protoInt64.zero;

  constructor(data?: PartialMessage<GroupCallStreamChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.GroupCallStreamChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "channel", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "scale", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "last_timestamp_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupCallStreamChannel {
    return new GroupCallStreamChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupCallStreamChannel {
    return new GroupCallStreamChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupCallStreamChannel {
    return new GroupCallStreamChannel().fromJsonString(jsonString, options);
  }

  static equals(a: GroupCallStreamChannel | PlainMessage<GroupCallStreamChannel> | undefined, b: GroupCallStreamChannel | PlainMessage<GroupCallStreamChannel> | undefined): boolean {
    return proto3.util.equals(GroupCallStreamChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLGroupCallStreamChannel
 */
export class TLGroupCallStreamChannel extends Message$1<TLGroupCallStreamChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallStreamChannel data2 = 1;
   */
  data2: GroupCallStreamChannel[] = [];

  constructor(data?: PartialMessage<TLGroupCallStreamChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLGroupCallStreamChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: GroupCallStreamChannel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLGroupCallStreamChannel {
    return new TLGroupCallStreamChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLGroupCallStreamChannel {
    return new TLGroupCallStreamChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLGroupCallStreamChannel {
    return new TLGroupCallStreamChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLGroupCallStreamChannel | PlainMessage<TLGroupCallStreamChannel> | undefined, b: TLGroupCallStreamChannel | PlainMessage<TLGroupCallStreamChannel> | undefined): boolean {
    return proto3.util.equals(TLGroupCallStreamChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HighScore
 */
export class HighScore extends Message$1<HighScore> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 pos = 3;
   */
  pos = 0;

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 score = 5;
   */
  score = 0;

  constructor(data?: PartialMessage<HighScore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HighScore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HighScore {
    return new HighScore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HighScore {
    return new HighScore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HighScore {
    return new HighScore().fromJsonString(jsonString, options);
  }

  static equals(a: HighScore | PlainMessage<HighScore> | undefined, b: HighScore | PlainMessage<HighScore> | undefined): boolean {
    return proto3.util.equals(HighScore, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHighScore
 */
export class TLHighScore extends Message$1<TLHighScore> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HighScore data2 = 1;
   */
  data2: HighScore[] = [];

  constructor(data?: PartialMessage<TLHighScore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHighScore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HighScore, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHighScore {
    return new TLHighScore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHighScore {
    return new TLHighScore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHighScore {
    return new TLHighScore().fromJsonString(jsonString, options);
  }

  static equals(a: TLHighScore | PlainMessage<TLHighScore> | undefined, b: TLHighScore | PlainMessage<TLHighScore> | undefined): boolean {
    return proto3.util.equals(TLHighScore, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ImmutableChat
 */
export class ImmutableChat extends Message$1<ImmutableChat> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 creator = 4;
   */
  creator = protoInt64.zero;

  /**
   * @generated from field: string title = 5;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 6;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: bool deactivated = 7;
   */
  deactivated = false;

  /**
   * @generated from field: bool call_active = 8;
   */
  callActive = false;

  /**
   * @generated from field: bool call_not_empty = 9;
   */
  callNotEmpty = false;

  /**
   * @generated from field: bool noforwards = 10;
   */
  noforwards = false;

  /**
   * @generated from field: int32 participants_count = 11;
   */
  participantsCount = 0;

  /**
   * @generated from field: int64 date = 12;
   */
  date = protoInt64.zero;

  /**
   * @generated from field: int32 version = 13;
   */
  version = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChannel migrated_to = 14;
   */
  migratedTo: InputChannel[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights default_banned_rights = 15;
   */
  defaultBannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: bool can_set_username = 16;
   */
  canSetUsername = false;

  /**
   * @generated from field: string about = 17;
   */
  about = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite exported_invite = 18;
   */
  exportedInvite: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInfo bot_info = 19;
   */
  botInfo: BotInfo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call = 20;
   */
  call: InputGroupCall[] = [];

  /**
   * @generated from field: int32 available_reactions_type = 21;
   */
  availableReactionsType = 0;

  /**
   * @generated from field: string available_reactions = 22;
   */
  availableReactions = "";

  /**
   * @generated from field: int32 ttl_period = 23;
   */
  ttlPeriod = 0;

  constructor(data?: PartialMessage<ImmutableChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ImmutableChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "creator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 7, name: "deactivated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "call_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "call_not_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "noforwards", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "participants_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "migrated_to", kind: "message", T: InputChannel, repeated: true },
    { no: 15, name: "default_banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 16, name: "can_set_username", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "exported_invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 19, name: "bot_info", kind: "message", T: BotInfo, repeated: true },
    { no: 20, name: "call", kind: "message", T: InputGroupCall, repeated: true },
    { no: 21, name: "available_reactions_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "available_reactions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ttl_period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImmutableChat {
    return new ImmutableChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImmutableChat {
    return new ImmutableChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImmutableChat {
    return new ImmutableChat().fromJsonString(jsonString, options);
  }

  static equals(a: ImmutableChat | PlainMessage<ImmutableChat> | undefined, b: ImmutableChat | PlainMessage<ImmutableChat> | undefined): boolean {
    return proto3.util.equals(ImmutableChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLImmutableChat
 */
export class TLImmutableChat extends Message$1<TLImmutableChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableChat data2 = 1;
   */
  data2: ImmutableChat[] = [];

  constructor(data?: PartialMessage<TLImmutableChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLImmutableChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ImmutableChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLImmutableChat {
    return new TLImmutableChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLImmutableChat {
    return new TLImmutableChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLImmutableChat {
    return new TLImmutableChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLImmutableChat | PlainMessage<TLImmutableChat> | undefined, b: TLImmutableChat | PlainMessage<TLImmutableChat> | undefined): boolean {
    return proto3.util.equals(TLImmutableChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ImmutableChatParticipant
 */
export class ImmutableChatParticipant extends Message$1<ImmutableChatParticipant> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 chat_id = 4;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: int64 user_id = 5;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 state = 6;
   */
  state = 0;

  /**
   * @generated from field: int32 participant_type = 7;
   */
  participantType = 0;

  /**
   * @generated from field: string link = 8;
   */
  link = "";

  /**
   * @generated from field: int32 useage = 9;
   */
  useage = 0;

  /**
   * @generated from field: int64 inviter_user_id = 10;
   */
  inviterUserId = protoInt64.zero;

  /**
   * @generated from field: int64 invited_at = 11;
   */
  invitedAt = protoInt64.zero;

  /**
   * @generated from field: int64 kicked_at = 12;
   */
  kickedAt = protoInt64.zero;

  /**
   * @generated from field: int64 left_at = 13;
   */
  leftAt = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights admin_rights = 14;
   */
  adminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: int64 date = 15;
   */
  date = protoInt64.zero;

  /**
   * @generated from field: bool is_bot = 16;
   */
  isBot = false;

  constructor(data?: PartialMessage<ImmutableChatParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ImmutableChatParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "state", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "participant_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "useage", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "inviter_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "invited_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "kicked_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "left_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 15, name: "date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "is_bot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImmutableChatParticipant {
    return new ImmutableChatParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImmutableChatParticipant {
    return new ImmutableChatParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImmutableChatParticipant {
    return new ImmutableChatParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: ImmutableChatParticipant | PlainMessage<ImmutableChatParticipant> | undefined, b: ImmutableChatParticipant | PlainMessage<ImmutableChatParticipant> | undefined): boolean {
    return proto3.util.equals(ImmutableChatParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLImmutableChatParticipant
 */
export class TLImmutableChatParticipant extends Message$1<TLImmutableChatParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableChatParticipant data2 = 1;
   */
  data2: ImmutableChatParticipant[] = [];

  constructor(data?: PartialMessage<TLImmutableChatParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLImmutableChatParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ImmutableChatParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLImmutableChatParticipant {
    return new TLImmutableChatParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLImmutableChatParticipant {
    return new TLImmutableChatParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLImmutableChatParticipant {
    return new TLImmutableChatParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLImmutableChatParticipant | PlainMessage<TLImmutableChatParticipant> | undefined, b: TLImmutableChatParticipant | PlainMessage<TLImmutableChatParticipant> | undefined): boolean {
    return proto3.util.equals(TLImmutableChatParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ImmutableUser
 */
export class ImmutableUser extends Message$1<ImmutableUser> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserData user = 3;
   */
  user: UserData[] = [];

  /**
   * @generated from field: int64 last_seen_at = 4;
   */
  lastSeenAt = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactData contacts = 5;
   */
  contacts: ContactData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactData reverse_contacts = 6;
   */
  reverseContacts: ContactData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKeyRules keys_privacy_rules = 7;
   */
  keysPrivacyRules: PrivacyKeyRules[] = [];

  constructor(data?: PartialMessage<ImmutableUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ImmutableUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user", kind: "message", T: UserData, repeated: true },
    { no: 4, name: "last_seen_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "contacts", kind: "message", T: ContactData, repeated: true },
    { no: 6, name: "reverse_contacts", kind: "message", T: ContactData, repeated: true },
    { no: 7, name: "keys_privacy_rules", kind: "message", T: PrivacyKeyRules, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImmutableUser {
    return new ImmutableUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImmutableUser {
    return new ImmutableUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImmutableUser {
    return new ImmutableUser().fromJsonString(jsonString, options);
  }

  static equals(a: ImmutableUser | PlainMessage<ImmutableUser> | undefined, b: ImmutableUser | PlainMessage<ImmutableUser> | undefined): boolean {
    return proto3.util.equals(ImmutableUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLImmutableUser
 */
export class TLImmutableUser extends Message$1<TLImmutableUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableUser data2 = 1;
   */
  data2: ImmutableUser[] = [];

  constructor(data?: PartialMessage<TLImmutableUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLImmutableUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ImmutableUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLImmutableUser {
    return new TLImmutableUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLImmutableUser {
    return new TLImmutableUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLImmutableUser {
    return new TLImmutableUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLImmutableUser | PlainMessage<TLImmutableUser> | undefined, b: TLImmutableUser | PlainMessage<TLImmutableUser> | undefined): boolean {
    return proto3.util.equals(TLImmutableUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ImportedContact
 */
export class ImportedContact extends Message$1<ImportedContact> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 client_id = 4;
   */
  clientId = protoInt64.zero;

  constructor(data?: PartialMessage<ImportedContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ImportedContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "client_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportedContact {
    return new ImportedContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportedContact {
    return new ImportedContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportedContact {
    return new ImportedContact().fromJsonString(jsonString, options);
  }

  static equals(a: ImportedContact | PlainMessage<ImportedContact> | undefined, b: ImportedContact | PlainMessage<ImportedContact> | undefined): boolean {
    return proto3.util.equals(ImportedContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLImportedContact
 */
export class TLImportedContact extends Message$1<TLImportedContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImportedContact data2 = 1;
   */
  data2: ImportedContact[] = [];

  constructor(data?: PartialMessage<TLImportedContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLImportedContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ImportedContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLImportedContact {
    return new TLImportedContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLImportedContact {
    return new TLImportedContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLImportedContact {
    return new TLImportedContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLImportedContact | PlainMessage<TLImportedContact> | undefined, b: TLImportedContact | PlainMessage<TLImportedContact> | undefined): boolean {
    return proto3.util.equals(TLImportedContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InlineBotSwitchPM
 */
export class InlineBotSwitchPM extends Message$1<InlineBotSwitchPM> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: string start_param = 4;
   */
  startParam = "";

  constructor(data?: PartialMessage<InlineBotSwitchPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InlineBotSwitchPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_param", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InlineBotSwitchPM {
    return new InlineBotSwitchPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InlineBotSwitchPM {
    return new InlineBotSwitchPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InlineBotSwitchPM {
    return new InlineBotSwitchPM().fromJsonString(jsonString, options);
  }

  static equals(a: InlineBotSwitchPM | PlainMessage<InlineBotSwitchPM> | undefined, b: InlineBotSwitchPM | PlainMessage<InlineBotSwitchPM> | undefined): boolean {
    return proto3.util.equals(InlineBotSwitchPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineBotSwitchPM
 */
export class TLInlineBotSwitchPM extends Message$1<TLInlineBotSwitchPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineBotSwitchPM data2 = 1;
   */
  data2: InlineBotSwitchPM[] = [];

  constructor(data?: PartialMessage<TLInlineBotSwitchPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineBotSwitchPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineBotSwitchPM, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineBotSwitchPM {
    return new TLInlineBotSwitchPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineBotSwitchPM {
    return new TLInlineBotSwitchPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineBotSwitchPM {
    return new TLInlineBotSwitchPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineBotSwitchPM | PlainMessage<TLInlineBotSwitchPM> | undefined, b: TLInlineBotSwitchPM | PlainMessage<TLInlineBotSwitchPM> | undefined): boolean {
    return proto3.util.equals(TLInlineBotSwitchPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InlineBotWebView
 */
export class InlineBotWebView extends Message$1<InlineBotWebView> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  constructor(data?: PartialMessage<InlineBotWebView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InlineBotWebView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InlineBotWebView {
    return new InlineBotWebView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InlineBotWebView {
    return new InlineBotWebView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InlineBotWebView {
    return new InlineBotWebView().fromJsonString(jsonString, options);
  }

  static equals(a: InlineBotWebView | PlainMessage<InlineBotWebView> | undefined, b: InlineBotWebView | PlainMessage<InlineBotWebView> | undefined): boolean {
    return proto3.util.equals(InlineBotWebView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineBotWebView
 */
export class TLInlineBotWebView extends Message$1<TLInlineBotWebView> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineBotWebView data2 = 1;
   */
  data2: InlineBotWebView[] = [];

  constructor(data?: PartialMessage<TLInlineBotWebView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineBotWebView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineBotWebView, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineBotWebView {
    return new TLInlineBotWebView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineBotWebView {
    return new TLInlineBotWebView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineBotWebView {
    return new TLInlineBotWebView().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineBotWebView | PlainMessage<TLInlineBotWebView> | undefined, b: TLInlineBotWebView | PlainMessage<TLInlineBotWebView> | undefined): boolean {
    return proto3.util.equals(TLInlineBotWebView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType
 */
export class InlineQueryPeerType extends Message$1<InlineQueryPeerType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<InlineQueryPeerType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InlineQueryPeerType {
    return new InlineQueryPeerType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InlineQueryPeerType {
    return new InlineQueryPeerType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InlineQueryPeerType {
    return new InlineQueryPeerType().fromJsonString(jsonString, options);
  }

  static equals(a: InlineQueryPeerType | PlainMessage<InlineQueryPeerType> | undefined, b: InlineQueryPeerType | PlainMessage<InlineQueryPeerType> | undefined): boolean {
    return proto3.util.equals(InlineQueryPeerType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeSameBotPM
 */
export class TLInlineQueryPeerTypeSameBotPM extends Message$1<TLInlineQueryPeerTypeSameBotPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypeSameBotPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeSameBotPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypeSameBotPM {
    return new TLInlineQueryPeerTypeSameBotPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeSameBotPM {
    return new TLInlineQueryPeerTypeSameBotPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeSameBotPM {
    return new TLInlineQueryPeerTypeSameBotPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypeSameBotPM | PlainMessage<TLInlineQueryPeerTypeSameBotPM> | undefined, b: TLInlineQueryPeerTypeSameBotPM | PlainMessage<TLInlineQueryPeerTypeSameBotPM> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypeSameBotPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypePM
 */
export class TLInlineQueryPeerTypePM extends Message$1<TLInlineQueryPeerTypePM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypePM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypePM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypePM {
    return new TLInlineQueryPeerTypePM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypePM {
    return new TLInlineQueryPeerTypePM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypePM {
    return new TLInlineQueryPeerTypePM().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypePM | PlainMessage<TLInlineQueryPeerTypePM> | undefined, b: TLInlineQueryPeerTypePM | PlainMessage<TLInlineQueryPeerTypePM> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypePM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeChat
 */
export class TLInlineQueryPeerTypeChat extends Message$1<TLInlineQueryPeerTypeChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypeChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypeChat {
    return new TLInlineQueryPeerTypeChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeChat {
    return new TLInlineQueryPeerTypeChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeChat {
    return new TLInlineQueryPeerTypeChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypeChat | PlainMessage<TLInlineQueryPeerTypeChat> | undefined, b: TLInlineQueryPeerTypeChat | PlainMessage<TLInlineQueryPeerTypeChat> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypeChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeMegagroup
 */
export class TLInlineQueryPeerTypeMegagroup extends Message$1<TLInlineQueryPeerTypeMegagroup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypeMegagroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeMegagroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypeMegagroup {
    return new TLInlineQueryPeerTypeMegagroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeMegagroup {
    return new TLInlineQueryPeerTypeMegagroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeMegagroup {
    return new TLInlineQueryPeerTypeMegagroup().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypeMegagroup | PlainMessage<TLInlineQueryPeerTypeMegagroup> | undefined, b: TLInlineQueryPeerTypeMegagroup | PlainMessage<TLInlineQueryPeerTypeMegagroup> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypeMegagroup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeBroadcast
 */
export class TLInlineQueryPeerTypeBroadcast extends Message$1<TLInlineQueryPeerTypeBroadcast> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypeBroadcast>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeBroadcast";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypeBroadcast {
    return new TLInlineQueryPeerTypeBroadcast().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeBroadcast {
    return new TLInlineQueryPeerTypeBroadcast().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeBroadcast {
    return new TLInlineQueryPeerTypeBroadcast().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypeBroadcast | PlainMessage<TLInlineQueryPeerTypeBroadcast> | undefined, b: TLInlineQueryPeerTypeBroadcast | PlainMessage<TLInlineQueryPeerTypeBroadcast> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypeBroadcast, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeBotPM
 */
export class TLInlineQueryPeerTypeBotPM extends Message$1<TLInlineQueryPeerTypeBotPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType data2 = 1;
   */
  data2: InlineQueryPeerType[] = [];

  constructor(data?: PartialMessage<TLInlineQueryPeerTypeBotPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInlineQueryPeerTypeBotPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InlineQueryPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInlineQueryPeerTypeBotPM {
    return new TLInlineQueryPeerTypeBotPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeBotPM {
    return new TLInlineQueryPeerTypeBotPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInlineQueryPeerTypeBotPM {
    return new TLInlineQueryPeerTypeBotPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLInlineQueryPeerTypeBotPM | PlainMessage<TLInlineQueryPeerTypeBotPM> | undefined, b: TLInlineQueryPeerTypeBotPM | PlainMessage<TLInlineQueryPeerTypeBotPM> | undefined): boolean {
    return proto3.util.equals(TLInlineQueryPeerTypeBotPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputAppEvent
 */
export class InputAppEvent extends Message$1<InputAppEvent> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float time = 3;
   */
  time = 0;

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: int64 peer = 5;
   */
  peer = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data = 6;
   */
  data: JSONValue[] = [];

  constructor(data?: PartialMessage<InputAppEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputAppEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "time", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "peer", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "data", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputAppEvent {
    return new InputAppEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputAppEvent {
    return new InputAppEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputAppEvent {
    return new InputAppEvent().fromJsonString(jsonString, options);
  }

  static equals(a: InputAppEvent | PlainMessage<InputAppEvent> | undefined, b: InputAppEvent | PlainMessage<InputAppEvent> | undefined): boolean {
    return proto3.util.equals(InputAppEvent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputAppEvent
 */
export class TLInputAppEvent extends Message$1<TLInputAppEvent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputAppEvent data2 = 1;
   */
  data2: InputAppEvent[] = [];

  constructor(data?: PartialMessage<TLInputAppEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputAppEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputAppEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputAppEvent {
    return new TLInputAppEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputAppEvent {
    return new TLInputAppEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputAppEvent {
    return new TLInputAppEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputAppEvent | PlainMessage<TLInputAppEvent> | undefined, b: TLInputAppEvent | PlainMessage<TLInputAppEvent> | undefined): boolean {
    return proto3.util.equals(TLInputAppEvent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputBotApp
 */
export class InputBotApp extends Message$1<InputBotApp> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser bot_id = 5;
   */
  botId: InputUser[] = [];

  /**
   * @generated from field: string short_name = 6;
   */
  shortName = "";

  constructor(data?: PartialMessage<InputBotApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputBotApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "bot_id", kind: "message", T: InputUser, repeated: true },
    { no: 6, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputBotApp {
    return new InputBotApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputBotApp {
    return new InputBotApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputBotApp {
    return new InputBotApp().fromJsonString(jsonString, options);
  }

  static equals(a: InputBotApp | PlainMessage<InputBotApp> | undefined, b: InputBotApp | PlainMessage<InputBotApp> | undefined): boolean {
    return proto3.util.equals(InputBotApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotAppID
 */
export class TLInputBotAppID extends Message$1<TLInputBotAppID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotApp data2 = 1;
   */
  data2: InputBotApp[] = [];

  constructor(data?: PartialMessage<TLInputBotAppID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotAppID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotAppID {
    return new TLInputBotAppID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotAppID {
    return new TLInputBotAppID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotAppID {
    return new TLInputBotAppID().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotAppID | PlainMessage<TLInputBotAppID> | undefined, b: TLInputBotAppID | PlainMessage<TLInputBotAppID> | undefined): boolean {
    return proto3.util.equals(TLInputBotAppID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotAppShortName
 */
export class TLInputBotAppShortName extends Message$1<TLInputBotAppShortName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotApp data2 = 1;
   */
  data2: InputBotApp[] = [];

  constructor(data?: PartialMessage<TLInputBotAppShortName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotAppShortName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotAppShortName {
    return new TLInputBotAppShortName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotAppShortName {
    return new TLInputBotAppShortName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotAppShortName {
    return new TLInputBotAppShortName().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotAppShortName | PlainMessage<TLInputBotAppShortName> | undefined, b: TLInputBotAppShortName | PlainMessage<TLInputBotAppShortName> | undefined): boolean {
    return proto3.util.equals(TLInputBotAppShortName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage
 */
export class InputBotInlineMessage extends Message$1<InputBotInlineMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 4;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup reply_markup = 5;
   */
  replyMarkup: ReplyMarkup[] = [];

  /**
   * @generated from field: bool no_webpage = 6;
   */
  noWebpage = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint geo_point = 7;
   */
  geoPoint: InputGeoPoint[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value heading = 8;
   */
  heading: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value period = 9;
   */
  period: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value proximity_notification_radius = 10;
   */
  proximityNotificationRadius: Int32Value[] = [];

  /**
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * @generated from field: string address = 12;
   */
  address = "";

  /**
   * @generated from field: string provider = 13;
   */
  provider = "";

  /**
   * @generated from field: string venue_id = 14;
   */
  venueId = "";

  /**
   * @generated from field: string venue_type = 15;
   */
  venueType = "";

  /**
   * @generated from field: string phone_number = 16;
   */
  phoneNumber = "";

  /**
   * @generated from field: string first_name = 17;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 18;
   */
  lastName = "";

  /**
   * @generated from field: string vcard = 19;
   */
  vcard = "";

  /**
   * @generated from field: string description = 20;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebDocument photo = 21;
   */
  photo: InputWebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Invoice invoice = 22;
   */
  invoice: Invoice[] = [];

  /**
   * @generated from field: bytes payload = 23;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON provider_data = 24;
   */
  providerData: DataJSON[] = [];

  constructor(data?: PartialMessage<InputBotInlineMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 5, name: "reply_markup", kind: "message", T: ReplyMarkup, repeated: true },
    { no: 6, name: "no_webpage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "geo_point", kind: "message", T: InputGeoPoint, repeated: true },
    { no: 8, name: "heading", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "period", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "proximity_notification_radius", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "venue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "vcard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "photo", kind: "message", T: InputWebDocument, repeated: true },
    { no: 22, name: "invoice", kind: "message", T: Invoice, repeated: true },
    { no: 23, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 24, name: "provider_data", kind: "message", T: DataJSON, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputBotInlineMessage {
    return new InputBotInlineMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputBotInlineMessage {
    return new InputBotInlineMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputBotInlineMessage {
    return new InputBotInlineMessage().fromJsonString(jsonString, options);
  }

  static equals(a: InputBotInlineMessage | PlainMessage<InputBotInlineMessage> | undefined, b: InputBotInlineMessage | PlainMessage<InputBotInlineMessage> | undefined): boolean {
    return proto3.util.equals(InputBotInlineMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaAuto
 */
export class TLInputBotInlineMessageMediaAuto extends Message$1<TLInputBotInlineMessageMediaAuto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageMediaAuto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaAuto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageMediaAuto {
    return new TLInputBotInlineMessageMediaAuto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaAuto {
    return new TLInputBotInlineMessageMediaAuto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaAuto {
    return new TLInputBotInlineMessageMediaAuto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageMediaAuto | PlainMessage<TLInputBotInlineMessageMediaAuto> | undefined, b: TLInputBotInlineMessageMediaAuto | PlainMessage<TLInputBotInlineMessageMediaAuto> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageMediaAuto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageText
 */
export class TLInputBotInlineMessageText extends Message$1<TLInputBotInlineMessageText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageText {
    return new TLInputBotInlineMessageText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageText {
    return new TLInputBotInlineMessageText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageText {
    return new TLInputBotInlineMessageText().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageText | PlainMessage<TLInputBotInlineMessageText> | undefined, b: TLInputBotInlineMessageText | PlainMessage<TLInputBotInlineMessageText> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaGeo
 */
export class TLInputBotInlineMessageMediaGeo extends Message$1<TLInputBotInlineMessageMediaGeo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageMediaGeo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaGeo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageMediaGeo {
    return new TLInputBotInlineMessageMediaGeo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaGeo {
    return new TLInputBotInlineMessageMediaGeo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaGeo {
    return new TLInputBotInlineMessageMediaGeo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageMediaGeo | PlainMessage<TLInputBotInlineMessageMediaGeo> | undefined, b: TLInputBotInlineMessageMediaGeo | PlainMessage<TLInputBotInlineMessageMediaGeo> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageMediaGeo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaVenue
 */
export class TLInputBotInlineMessageMediaVenue extends Message$1<TLInputBotInlineMessageMediaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageMediaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageMediaVenue {
    return new TLInputBotInlineMessageMediaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaVenue {
    return new TLInputBotInlineMessageMediaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaVenue {
    return new TLInputBotInlineMessageMediaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageMediaVenue | PlainMessage<TLInputBotInlineMessageMediaVenue> | undefined, b: TLInputBotInlineMessageMediaVenue | PlainMessage<TLInputBotInlineMessageMediaVenue> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageMediaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaContact
 */
export class TLInputBotInlineMessageMediaContact extends Message$1<TLInputBotInlineMessageMediaContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageMediaContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageMediaContact {
    return new TLInputBotInlineMessageMediaContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaContact {
    return new TLInputBotInlineMessageMediaContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaContact {
    return new TLInputBotInlineMessageMediaContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageMediaContact | PlainMessage<TLInputBotInlineMessageMediaContact> | undefined, b: TLInputBotInlineMessageMediaContact | PlainMessage<TLInputBotInlineMessageMediaContact> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageMediaContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageGame
 */
export class TLInputBotInlineMessageGame extends Message$1<TLInputBotInlineMessageGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageGame {
    return new TLInputBotInlineMessageGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageGame {
    return new TLInputBotInlineMessageGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageGame {
    return new TLInputBotInlineMessageGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageGame | PlainMessage<TLInputBotInlineMessageGame> | undefined, b: TLInputBotInlineMessageGame | PlainMessage<TLInputBotInlineMessageGame> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaInvoice
 */
export class TLInputBotInlineMessageMediaInvoice extends Message$1<TLInputBotInlineMessageMediaInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage data2 = 1;
   */
  data2: InputBotInlineMessage[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageMediaInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageMediaInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageMediaInvoice {
    return new TLInputBotInlineMessageMediaInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaInvoice {
    return new TLInputBotInlineMessageMediaInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageMediaInvoice {
    return new TLInputBotInlineMessageMediaInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageMediaInvoice | PlainMessage<TLInputBotInlineMessageMediaInvoice> | undefined, b: TLInputBotInlineMessageMediaInvoice | PlainMessage<TLInputBotInlineMessageMediaInvoice> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageMediaInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID
 */
export class InputBotInlineMessageID extends Message$1<InputBotInlineMessageID> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 dc_id = 3;
   */
  dcId = 0;

  /**
   * @generated from field: int64 id_INT64 = 4;
   */
  idINT64 = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int64 owner_id = 6;
   */
  ownerId = protoInt64.zero;

  /**
   * @generated from field: int32 id_INT32 = 7;
   */
  idINT32 = 0;

  constructor(data?: PartialMessage<InputBotInlineMessageID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "owner_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputBotInlineMessageID {
    return new InputBotInlineMessageID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputBotInlineMessageID {
    return new InputBotInlineMessageID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputBotInlineMessageID {
    return new InputBotInlineMessageID().fromJsonString(jsonString, options);
  }

  static equals(a: InputBotInlineMessageID | PlainMessage<InputBotInlineMessageID> | undefined, b: InputBotInlineMessageID | PlainMessage<InputBotInlineMessageID> | undefined): boolean {
    return proto3.util.equals(InputBotInlineMessageID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageID
 */
export class TLInputBotInlineMessageID extends Message$1<TLInputBotInlineMessageID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID data2 = 1;
   */
  data2: InputBotInlineMessageID[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessageID, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageID {
    return new TLInputBotInlineMessageID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageID {
    return new TLInputBotInlineMessageID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageID {
    return new TLInputBotInlineMessageID().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageID | PlainMessage<TLInputBotInlineMessageID> | undefined, b: TLInputBotInlineMessageID | PlainMessage<TLInputBotInlineMessageID> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageID64
 */
export class TLInputBotInlineMessageID64 extends Message$1<TLInputBotInlineMessageID64> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID data2 = 1;
   */
  data2: InputBotInlineMessageID[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineMessageID64>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineMessageID64";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineMessageID, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineMessageID64 {
    return new TLInputBotInlineMessageID64().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageID64 {
    return new TLInputBotInlineMessageID64().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineMessageID64 {
    return new TLInputBotInlineMessageID64().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineMessageID64 | PlainMessage<TLInputBotInlineMessageID64> | undefined, b: TLInputBotInlineMessageID64 | PlainMessage<TLInputBotInlineMessageID64> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineMessageID64, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult
 */
export class InputBotInlineResult extends Message$1<InputBotInlineResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 5;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue description = 6;
   */
  description: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue url = 7;
   */
  url: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebDocument thumb = 8;
   */
  thumb: InputWebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebDocument content = 9;
   */
  content: InputWebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessage send_message = 10;
   */
  sendMessage: InputBotInlineMessage[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto photo = 11;
   */
  photo: InputPhoto[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument document = 12;
   */
  document: InputDocument[] = [];

  /**
   * @generated from field: string short_name = 13;
   */
  shortName = "";

  constructor(data?: PartialMessage<InputBotInlineResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "description", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "url", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "thumb", kind: "message", T: InputWebDocument, repeated: true },
    { no: 9, name: "content", kind: "message", T: InputWebDocument, repeated: true },
    { no: 10, name: "send_message", kind: "message", T: InputBotInlineMessage, repeated: true },
    { no: 11, name: "photo", kind: "message", T: InputPhoto, repeated: true },
    { no: 12, name: "document", kind: "message", T: InputDocument, repeated: true },
    { no: 13, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputBotInlineResult {
    return new InputBotInlineResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputBotInlineResult {
    return new InputBotInlineResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputBotInlineResult {
    return new InputBotInlineResult().fromJsonString(jsonString, options);
  }

  static equals(a: InputBotInlineResult | PlainMessage<InputBotInlineResult> | undefined, b: InputBotInlineResult | PlainMessage<InputBotInlineResult> | undefined): boolean {
    return proto3.util.equals(InputBotInlineResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResult
 */
export class TLInputBotInlineResult extends Message$1<TLInputBotInlineResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult data2 = 1;
   */
  data2: InputBotInlineResult[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineResult {
    return new TLInputBotInlineResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineResult {
    return new TLInputBotInlineResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineResult {
    return new TLInputBotInlineResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineResult | PlainMessage<TLInputBotInlineResult> | undefined, b: TLInputBotInlineResult | PlainMessage<TLInputBotInlineResult> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultPhoto
 */
export class TLInputBotInlineResultPhoto extends Message$1<TLInputBotInlineResultPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult data2 = 1;
   */
  data2: InputBotInlineResult[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineResultPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineResultPhoto {
    return new TLInputBotInlineResultPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineResultPhoto {
    return new TLInputBotInlineResultPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineResultPhoto {
    return new TLInputBotInlineResultPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineResultPhoto | PlainMessage<TLInputBotInlineResultPhoto> | undefined, b: TLInputBotInlineResultPhoto | PlainMessage<TLInputBotInlineResultPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineResultPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultDocument
 */
export class TLInputBotInlineResultDocument extends Message$1<TLInputBotInlineResultDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult data2 = 1;
   */
  data2: InputBotInlineResult[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineResultDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineResultDocument {
    return new TLInputBotInlineResultDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineResultDocument {
    return new TLInputBotInlineResultDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineResultDocument {
    return new TLInputBotInlineResultDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineResultDocument | PlainMessage<TLInputBotInlineResultDocument> | undefined, b: TLInputBotInlineResultDocument | PlainMessage<TLInputBotInlineResultDocument> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineResultDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultGame
 */
export class TLInputBotInlineResultGame extends Message$1<TLInputBotInlineResultGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineResult data2 = 1;
   */
  data2: InputBotInlineResult[] = [];

  constructor(data?: PartialMessage<TLInputBotInlineResultGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputBotInlineResultGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputBotInlineResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputBotInlineResultGame {
    return new TLInputBotInlineResultGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputBotInlineResultGame {
    return new TLInputBotInlineResultGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputBotInlineResultGame {
    return new TLInputBotInlineResultGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputBotInlineResultGame | PlainMessage<TLInputBotInlineResultGame> | undefined, b: TLInputBotInlineResultGame | PlainMessage<TLInputBotInlineResultGame> | undefined): boolean {
    return proto3.util.equals(TLInputBotInlineResultGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputChannel
 */
export class InputChannel extends Message$1<InputChannel> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 channel_id = 3;
   */
  channelId = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 5;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 msg_id = 6;
   */
  msgId = 0;

  constructor(data?: PartialMessage<InputChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "channel_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 6, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputChannel {
    return new InputChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputChannel {
    return new InputChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputChannel {
    return new InputChannel().fromJsonString(jsonString, options);
  }

  static equals(a: InputChannel | PlainMessage<InputChannel> | undefined, b: InputChannel | PlainMessage<InputChannel> | undefined): boolean {
    return proto3.util.equals(InputChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChannelEmpty
 */
export class TLInputChannelEmpty extends Message$1<TLInputChannelEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChannel data2 = 1;
   */
  data2: InputChannel[] = [];

  constructor(data?: PartialMessage<TLInputChannelEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChannelEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChannel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChannelEmpty {
    return new TLInputChannelEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChannelEmpty {
    return new TLInputChannelEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChannelEmpty {
    return new TLInputChannelEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChannelEmpty | PlainMessage<TLInputChannelEmpty> | undefined, b: TLInputChannelEmpty | PlainMessage<TLInputChannelEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputChannelEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChannel
 */
export class TLInputChannel extends Message$1<TLInputChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChannel data2 = 1;
   */
  data2: InputChannel[] = [];

  constructor(data?: PartialMessage<TLInputChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChannel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChannel {
    return new TLInputChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChannel {
    return new TLInputChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChannel {
    return new TLInputChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChannel | PlainMessage<TLInputChannel> | undefined, b: TLInputChannel | PlainMessage<TLInputChannel> | undefined): boolean {
    return proto3.util.equals(TLInputChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChannelFromMessage
 */
export class TLInputChannelFromMessage extends Message$1<TLInputChannelFromMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChannel data2 = 1;
   */
  data2: InputChannel[] = [];

  constructor(data?: PartialMessage<TLInputChannelFromMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChannelFromMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChannel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChannelFromMessage {
    return new TLInputChannelFromMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChannelFromMessage {
    return new TLInputChannelFromMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChannelFromMessage {
    return new TLInputChannelFromMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChannelFromMessage | PlainMessage<TLInputChannelFromMessage> | undefined, b: TLInputChannelFromMessage | PlainMessage<TLInputChannelFromMessage> | undefined): boolean {
    return proto3.util.equals(TLInputChannelFromMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputChatPhoto
 */
export class InputChatPhoto extends Message$1<InputChatPhoto> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile file = 3;
   */
  file: InputFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile video = 4;
   */
  video: InputFile[] = [];

  /**
   * @generated from field: repeated google.protobuf.DoubleValue video_start_ts = 5;
   */
  videoStartTs: DoubleValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize video_emoji_markup = 6;
   */
  videoEmojiMarkup: VideoSize[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto id = 7;
   */
  id: InputPhoto[] = [];

  constructor(data?: PartialMessage<InputChatPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputChatPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "file", kind: "message", T: InputFile, repeated: true },
    { no: 4, name: "video", kind: "message", T: InputFile, repeated: true },
    { no: 5, name: "video_start_ts", kind: "message", T: DoubleValue, repeated: true },
    { no: 6, name: "video_emoji_markup", kind: "message", T: VideoSize, repeated: true },
    { no: 7, name: "id", kind: "message", T: InputPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputChatPhoto {
    return new InputChatPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputChatPhoto {
    return new InputChatPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputChatPhoto {
    return new InputChatPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: InputChatPhoto | PlainMessage<InputChatPhoto> | undefined, b: InputChatPhoto | PlainMessage<InputChatPhoto> | undefined): boolean {
    return proto3.util.equals(InputChatPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChatPhotoEmpty
 */
export class TLInputChatPhotoEmpty extends Message$1<TLInputChatPhotoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChatPhoto data2 = 1;
   */
  data2: InputChatPhoto[] = [];

  constructor(data?: PartialMessage<TLInputChatPhotoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChatPhotoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChatPhotoEmpty {
    return new TLInputChatPhotoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChatPhotoEmpty {
    return new TLInputChatPhotoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChatPhotoEmpty {
    return new TLInputChatPhotoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChatPhotoEmpty | PlainMessage<TLInputChatPhotoEmpty> | undefined, b: TLInputChatPhotoEmpty | PlainMessage<TLInputChatPhotoEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputChatPhotoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChatUploadedPhoto
 */
export class TLInputChatUploadedPhoto extends Message$1<TLInputChatUploadedPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChatPhoto data2 = 1;
   */
  data2: InputChatPhoto[] = [];

  constructor(data?: PartialMessage<TLInputChatUploadedPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChatUploadedPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChatUploadedPhoto {
    return new TLInputChatUploadedPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChatUploadedPhoto {
    return new TLInputChatUploadedPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChatUploadedPhoto {
    return new TLInputChatUploadedPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChatUploadedPhoto | PlainMessage<TLInputChatUploadedPhoto> | undefined, b: TLInputChatUploadedPhoto | PlainMessage<TLInputChatUploadedPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputChatUploadedPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChatPhoto
 */
export class TLInputChatPhoto extends Message$1<TLInputChatPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChatPhoto data2 = 1;
   */
  data2: InputChatPhoto[] = [];

  constructor(data?: PartialMessage<TLInputChatPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChatPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChatPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChatPhoto {
    return new TLInputChatPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChatPhoto {
    return new TLInputChatPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChatPhoto {
    return new TLInputChatPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChatPhoto | PlainMessage<TLInputChatPhoto> | undefined, b: TLInputChatPhoto | PlainMessage<TLInputChatPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputChatPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputChatlist
 */
export class InputChatlist extends Message$1<InputChatlist> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 filter_id = 3;
   */
  filterId = 0;

  constructor(data?: PartialMessage<InputChatlist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputChatlist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "filter_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputChatlist {
    return new InputChatlist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputChatlist {
    return new InputChatlist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputChatlist {
    return new InputChatlist().fromJsonString(jsonString, options);
  }

  static equals(a: InputChatlist | PlainMessage<InputChatlist> | undefined, b: InputChatlist | PlainMessage<InputChatlist> | undefined): boolean {
    return proto3.util.equals(InputChatlist, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputChatlistDialogFilter
 */
export class TLInputChatlistDialogFilter extends Message$1<TLInputChatlistDialogFilter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputChatlist data2 = 1;
   */
  data2: InputChatlist[] = [];

  constructor(data?: PartialMessage<TLInputChatlistDialogFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputChatlistDialogFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputChatlist, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputChatlistDialogFilter {
    return new TLInputChatlistDialogFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputChatlistDialogFilter {
    return new TLInputChatlistDialogFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputChatlistDialogFilter {
    return new TLInputChatlistDialogFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputChatlistDialogFilter | PlainMessage<TLInputChatlistDialogFilter> | undefined, b: TLInputChatlistDialogFilter | PlainMessage<TLInputChatlistDialogFilter> | undefined): boolean {
    return proto3.util.equals(TLInputChatlistDialogFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputCheckPasswordSRP
 */
export class InputCheckPasswordSRP extends Message$1<InputCheckPasswordSRP> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 srp_id = 3;
   */
  srpId = protoInt64.zero;

  /**
   * @generated from field: bytes A = 4;
   */
  A = new Uint8Array(0);

  /**
   * @generated from field: bytes M1 = 5;
   */
  M1 = new Uint8Array(0);

  constructor(data?: PartialMessage<InputCheckPasswordSRP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputCheckPasswordSRP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "srp_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "A", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "M1", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputCheckPasswordSRP {
    return new InputCheckPasswordSRP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputCheckPasswordSRP {
    return new InputCheckPasswordSRP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputCheckPasswordSRP {
    return new InputCheckPasswordSRP().fromJsonString(jsonString, options);
  }

  static equals(a: InputCheckPasswordSRP | PlainMessage<InputCheckPasswordSRP> | undefined, b: InputCheckPasswordSRP | PlainMessage<InputCheckPasswordSRP> | undefined): boolean {
    return proto3.util.equals(InputCheckPasswordSRP, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputCheckPasswordEmpty
 */
export class TLInputCheckPasswordEmpty extends Message$1<TLInputCheckPasswordEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputCheckPasswordSRP data2 = 1;
   */
  data2: InputCheckPasswordSRP[] = [];

  constructor(data?: PartialMessage<TLInputCheckPasswordEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputCheckPasswordEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputCheckPasswordSRP, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputCheckPasswordEmpty {
    return new TLInputCheckPasswordEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputCheckPasswordEmpty {
    return new TLInputCheckPasswordEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputCheckPasswordEmpty {
    return new TLInputCheckPasswordEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputCheckPasswordEmpty | PlainMessage<TLInputCheckPasswordEmpty> | undefined, b: TLInputCheckPasswordEmpty | PlainMessage<TLInputCheckPasswordEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputCheckPasswordEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputCheckPasswordSRP
 */
export class TLInputCheckPasswordSRP extends Message$1<TLInputCheckPasswordSRP> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputCheckPasswordSRP data2 = 1;
   */
  data2: InputCheckPasswordSRP[] = [];

  constructor(data?: PartialMessage<TLInputCheckPasswordSRP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputCheckPasswordSRP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputCheckPasswordSRP, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputCheckPasswordSRP {
    return new TLInputCheckPasswordSRP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputCheckPasswordSRP {
    return new TLInputCheckPasswordSRP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputCheckPasswordSRP {
    return new TLInputCheckPasswordSRP().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputCheckPasswordSRP | PlainMessage<TLInputCheckPasswordSRP> | undefined, b: TLInputCheckPasswordSRP | PlainMessage<TLInputCheckPasswordSRP> | undefined): boolean {
    return proto3.util.equals(TLInputCheckPasswordSRP, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputClientProxy
 */
export class InputClientProxy extends Message$1<InputClientProxy> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: int32 port = 4;
   */
  port = 0;

  constructor(data?: PartialMessage<InputClientProxy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputClientProxy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputClientProxy {
    return new InputClientProxy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputClientProxy {
    return new InputClientProxy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputClientProxy {
    return new InputClientProxy().fromJsonString(jsonString, options);
  }

  static equals(a: InputClientProxy | PlainMessage<InputClientProxy> | undefined, b: InputClientProxy | PlainMessage<InputClientProxy> | undefined): boolean {
    return proto3.util.equals(InputClientProxy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputClientProxy
 */
export class TLInputClientProxy extends Message$1<TLInputClientProxy> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputClientProxy data2 = 1;
   */
  data2: InputClientProxy[] = [];

  constructor(data?: PartialMessage<TLInputClientProxy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputClientProxy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputClientProxy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputClientProxy {
    return new TLInputClientProxy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputClientProxy {
    return new TLInputClientProxy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputClientProxy {
    return new TLInputClientProxy().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputClientProxy | PlainMessage<TLInputClientProxy> | undefined, b: TLInputClientProxy | PlainMessage<TLInputClientProxy> | undefined): boolean {
    return proto3.util.equals(TLInputClientProxy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputContact
 */
export class InputContact extends Message$1<InputContact> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 client_id = 3;
   */
  clientId = protoInt64.zero;

  /**
   * @generated from field: string phone = 4;
   */
  phone = "";

  /**
   * @generated from field: string first_name = 5;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 6;
   */
  lastName = "";

  constructor(data?: PartialMessage<InputContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "client_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputContact {
    return new InputContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputContact {
    return new InputContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputContact {
    return new InputContact().fromJsonString(jsonString, options);
  }

  static equals(a: InputContact | PlainMessage<InputContact> | undefined, b: InputContact | PlainMessage<InputContact> | undefined): boolean {
    return proto3.util.equals(InputContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhoneContact
 */
export class TLInputPhoneContact extends Message$1<TLInputPhoneContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputContact data2 = 1;
   */
  data2: InputContact[] = [];

  constructor(data?: PartialMessage<TLInputPhoneContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhoneContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhoneContact {
    return new TLInputPhoneContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhoneContact {
    return new TLInputPhoneContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhoneContact {
    return new TLInputPhoneContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhoneContact | PlainMessage<TLInputPhoneContact> | undefined, b: TLInputPhoneContact | PlainMessage<TLInputPhoneContact> | undefined): boolean {
    return proto3.util.equals(TLInputPhoneContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputDialogPeer
 */
export class InputDialogPeer extends Message$1<InputDialogPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 3;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 folder_id = 4;
   */
  folderId = 0;

  constructor(data?: PartialMessage<InputDialogPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputDialogPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 4, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputDialogPeer {
    return new InputDialogPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputDialogPeer {
    return new InputDialogPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputDialogPeer {
    return new InputDialogPeer().fromJsonString(jsonString, options);
  }

  static equals(a: InputDialogPeer | PlainMessage<InputDialogPeer> | undefined, b: InputDialogPeer | PlainMessage<InputDialogPeer> | undefined): boolean {
    return proto3.util.equals(InputDialogPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputDialogPeer
 */
export class TLInputDialogPeer extends Message$1<TLInputDialogPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDialogPeer data2 = 1;
   */
  data2: InputDialogPeer[] = [];

  constructor(data?: PartialMessage<TLInputDialogPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputDialogPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputDialogPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputDialogPeer {
    return new TLInputDialogPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputDialogPeer {
    return new TLInputDialogPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputDialogPeer {
    return new TLInputDialogPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputDialogPeer | PlainMessage<TLInputDialogPeer> | undefined, b: TLInputDialogPeer | PlainMessage<TLInputDialogPeer> | undefined): boolean {
    return proto3.util.equals(TLInputDialogPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputDialogPeerFolder
 */
export class TLInputDialogPeerFolder extends Message$1<TLInputDialogPeerFolder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDialogPeer data2 = 1;
   */
  data2: InputDialogPeer[] = [];

  constructor(data?: PartialMessage<TLInputDialogPeerFolder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputDialogPeerFolder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputDialogPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputDialogPeerFolder {
    return new TLInputDialogPeerFolder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputDialogPeerFolder {
    return new TLInputDialogPeerFolder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputDialogPeerFolder {
    return new TLInputDialogPeerFolder().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputDialogPeerFolder | PlainMessage<TLInputDialogPeerFolder> | undefined, b: TLInputDialogPeerFolder | PlainMessage<TLInputDialogPeerFolder> | undefined): boolean {
    return proto3.util.equals(TLInputDialogPeerFolder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputDocument
 */
export class InputDocument extends Message$1<InputDocument> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 5;
   */
  fileReference = new Uint8Array(0);

  constructor(data?: PartialMessage<InputDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputDocument {
    return new InputDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputDocument {
    return new InputDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputDocument {
    return new InputDocument().fromJsonString(jsonString, options);
  }

  static equals(a: InputDocument | PlainMessage<InputDocument> | undefined, b: InputDocument | PlainMessage<InputDocument> | undefined): boolean {
    return proto3.util.equals(InputDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputDocumentEmpty
 */
export class TLInputDocumentEmpty extends Message$1<TLInputDocumentEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument data2 = 1;
   */
  data2: InputDocument[] = [];

  constructor(data?: PartialMessage<TLInputDocumentEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputDocumentEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputDocumentEmpty {
    return new TLInputDocumentEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputDocumentEmpty {
    return new TLInputDocumentEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputDocumentEmpty {
    return new TLInputDocumentEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputDocumentEmpty | PlainMessage<TLInputDocumentEmpty> | undefined, b: TLInputDocumentEmpty | PlainMessage<TLInputDocumentEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputDocumentEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputDocument
 */
export class TLInputDocument extends Message$1<TLInputDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument data2 = 1;
   */
  data2: InputDocument[] = [];

  constructor(data?: PartialMessage<TLInputDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputDocument {
    return new TLInputDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputDocument {
    return new TLInputDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputDocument {
    return new TLInputDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputDocument | PlainMessage<TLInputDocument> | undefined, b: TLInputDocument | PlainMessage<TLInputDocument> | undefined): boolean {
    return proto3.util.equals(TLInputDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputEncryptedChat
 */
export class InputEncryptedChat extends Message$1<InputEncryptedChat> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 chat_id = 3;
   */
  chatId = 0;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<InputEncryptedChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputEncryptedChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chat_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputEncryptedChat {
    return new InputEncryptedChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputEncryptedChat {
    return new InputEncryptedChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputEncryptedChat {
    return new InputEncryptedChat().fromJsonString(jsonString, options);
  }

  static equals(a: InputEncryptedChat | PlainMessage<InputEncryptedChat> | undefined, b: InputEncryptedChat | PlainMessage<InputEncryptedChat> | undefined): boolean {
    return proto3.util.equals(InputEncryptedChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedChat
 */
export class TLInputEncryptedChat extends Message$1<TLInputEncryptedChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputEncryptedChat data2 = 1;
   */
  data2: InputEncryptedChat[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputEncryptedChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedChat {
    return new TLInputEncryptedChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedChat {
    return new TLInputEncryptedChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedChat {
    return new TLInputEncryptedChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedChat | PlainMessage<TLInputEncryptedChat> | undefined, b: TLInputEncryptedChat | PlainMessage<TLInputEncryptedChat> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile
 */
export class InputEncryptedFile extends Message$1<InputEncryptedFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 parts = 4;
   */
  parts = 0;

  /**
   * @generated from field: string md5_checksum = 5;
   */
  md5Checksum = "";

  /**
   * @generated from field: int32 key_fingerprint = 6;
   */
  keyFingerprint = 0;

  /**
   * @generated from field: int64 access_hash = 7;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<InputEncryptedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "parts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "md5_checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "key_fingerprint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputEncryptedFile {
    return new InputEncryptedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputEncryptedFile {
    return new InputEncryptedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputEncryptedFile {
    return new InputEncryptedFile().fromJsonString(jsonString, options);
  }

  static equals(a: InputEncryptedFile | PlainMessage<InputEncryptedFile> | undefined, b: InputEncryptedFile | PlainMessage<InputEncryptedFile> | undefined): boolean {
    return proto3.util.equals(InputEncryptedFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileEmpty
 */
export class TLInputEncryptedFileEmpty extends Message$1<TLInputEncryptedFileEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile data2 = 1;
   */
  data2: InputEncryptedFile[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedFileEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputEncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedFileEmpty {
    return new TLInputEncryptedFileEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedFileEmpty {
    return new TLInputEncryptedFileEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedFileEmpty {
    return new TLInputEncryptedFileEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedFileEmpty | PlainMessage<TLInputEncryptedFileEmpty> | undefined, b: TLInputEncryptedFileEmpty | PlainMessage<TLInputEncryptedFileEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedFileEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileUploaded
 */
export class TLInputEncryptedFileUploaded extends Message$1<TLInputEncryptedFileUploaded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile data2 = 1;
   */
  data2: InputEncryptedFile[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedFileUploaded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileUploaded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputEncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedFileUploaded {
    return new TLInputEncryptedFileUploaded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedFileUploaded {
    return new TLInputEncryptedFileUploaded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedFileUploaded {
    return new TLInputEncryptedFileUploaded().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedFileUploaded | PlainMessage<TLInputEncryptedFileUploaded> | undefined, b: TLInputEncryptedFileUploaded | PlainMessage<TLInputEncryptedFileUploaded> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedFileUploaded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFile
 */
export class TLInputEncryptedFile extends Message$1<TLInputEncryptedFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile data2 = 1;
   */
  data2: InputEncryptedFile[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputEncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedFile {
    return new TLInputEncryptedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedFile {
    return new TLInputEncryptedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedFile {
    return new TLInputEncryptedFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedFile | PlainMessage<TLInputEncryptedFile> | undefined, b: TLInputEncryptedFile | PlainMessage<TLInputEncryptedFile> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileBigUploaded
 */
export class TLInputEncryptedFileBigUploaded extends Message$1<TLInputEncryptedFileBigUploaded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputEncryptedFile data2 = 1;
   */
  data2: InputEncryptedFile[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedFileBigUploaded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileBigUploaded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputEncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedFileBigUploaded {
    return new TLInputEncryptedFileBigUploaded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedFileBigUploaded {
    return new TLInputEncryptedFileBigUploaded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedFileBigUploaded {
    return new TLInputEncryptedFileBigUploaded().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedFileBigUploaded | PlainMessage<TLInputEncryptedFileBigUploaded> | undefined, b: TLInputEncryptedFileBigUploaded | PlainMessage<TLInputEncryptedFileBigUploaded> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedFileBigUploaded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputFile
 */
export class InputFile extends Message$1<InputFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 parts = 4;
   */
  parts = 0;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string md5_checksum = 6;
   */
  md5Checksum = "";

  constructor(data?: PartialMessage<InputFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "parts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "md5_checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputFile {
    return new InputFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputFile {
    return new InputFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputFile {
    return new InputFile().fromJsonString(jsonString, options);
  }

  static equals(a: InputFile | PlainMessage<InputFile> | undefined, b: InputFile | PlainMessage<InputFile> | undefined): boolean {
    return proto3.util.equals(InputFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputFile
 */
export class TLInputFile extends Message$1<TLInputFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile data2 = 1;
   */
  data2: InputFile[] = [];

  constructor(data?: PartialMessage<TLInputFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputFile {
    return new TLInputFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputFile {
    return new TLInputFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputFile {
    return new TLInputFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputFile | PlainMessage<TLInputFile> | undefined, b: TLInputFile | PlainMessage<TLInputFile> | undefined): boolean {
    return proto3.util.equals(TLInputFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputFileBig
 */
export class TLInputFileBig extends Message$1<TLInputFileBig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile data2 = 1;
   */
  data2: InputFile[] = [];

  constructor(data?: PartialMessage<TLInputFileBig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputFileBig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputFileBig {
    return new TLInputFileBig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputFileBig {
    return new TLInputFileBig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputFileBig {
    return new TLInputFileBig().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputFileBig | PlainMessage<TLInputFileBig> | undefined, b: TLInputFileBig | PlainMessage<TLInputFileBig> | undefined): boolean {
    return proto3.util.equals(TLInputFileBig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputFileLocation
 */
export class InputFileLocation extends Message$1<InputFileLocation> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 volume_id = 3;
   */
  volumeId = protoInt64.zero;

  /**
   * @generated from field: int32 local_id = 4;
   */
  localId = 0;

  /**
   * @generated from field: int64 secret = 5;
   */
  secret = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 6;
   */
  fileReference = new Uint8Array(0);

  /**
   * @generated from field: int64 id = 7;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 8;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string thumb_size = 9;
   */
  thumbSize = "";

  /**
   * @generated from field: bool big = 10;
   */
  big = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 11;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int64 photo_id = 12;
   */
  photoId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet stickerset = 13;
   */
  stickerset: InputStickerSet[] = [];

  /**
   * @generated from field: int32 thumb_version = 14;
   */
  thumbVersion = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call = 15;
   */
  call: InputGroupCall[] = [];

  /**
   * @generated from field: int64 time_ms = 16;
   */
  timeMs = protoInt64.zero;

  /**
   * @generated from field: int32 scale = 17;
   */
  scale = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value video_channel = 18;
   */
  videoChannel: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value video_quality = 19;
   */
  videoQuality: Int32Value[] = [];

  constructor(data?: PartialMessage<InputFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "volume_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "local_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "secret", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "thumb_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "big", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 12, name: "photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "stickerset", kind: "message", T: InputStickerSet, repeated: true },
    { no: 14, name: "thumb_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "call", kind: "message", T: InputGroupCall, repeated: true },
    { no: 16, name: "time_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "scale", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "video_channel", kind: "message", T: Int32Value, repeated: true },
    { no: 19, name: "video_quality", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputFileLocation {
    return new InputFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputFileLocation {
    return new InputFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputFileLocation {
    return new InputFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: InputFileLocation | PlainMessage<InputFileLocation> | undefined, b: InputFileLocation | PlainMessage<InputFileLocation> | undefined): boolean {
    return proto3.util.equals(InputFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputFileLocation
 */
export class TLInputFileLocation extends Message$1<TLInputFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputFileLocation {
    return new TLInputFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputFileLocation {
    return new TLInputFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputFileLocation {
    return new TLInputFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputFileLocation | PlainMessage<TLInputFileLocation> | undefined, b: TLInputFileLocation | PlainMessage<TLInputFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileLocation
 */
export class TLInputEncryptedFileLocation extends Message$1<TLInputEncryptedFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputEncryptedFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputEncryptedFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputEncryptedFileLocation {
    return new TLInputEncryptedFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputEncryptedFileLocation {
    return new TLInputEncryptedFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputEncryptedFileLocation {
    return new TLInputEncryptedFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputEncryptedFileLocation | PlainMessage<TLInputEncryptedFileLocation> | undefined, b: TLInputEncryptedFileLocation | PlainMessage<TLInputEncryptedFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputEncryptedFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputDocumentFileLocation
 */
export class TLInputDocumentFileLocation extends Message$1<TLInputDocumentFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputDocumentFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputDocumentFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputDocumentFileLocation {
    return new TLInputDocumentFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputDocumentFileLocation {
    return new TLInputDocumentFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputDocumentFileLocation {
    return new TLInputDocumentFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputDocumentFileLocation | PlainMessage<TLInputDocumentFileLocation> | undefined, b: TLInputDocumentFileLocation | PlainMessage<TLInputDocumentFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputDocumentFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFileLocation
 */
export class TLInputSecureFileLocation extends Message$1<TLInputSecureFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputSecureFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputSecureFileLocation {
    return new TLInputSecureFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputSecureFileLocation {
    return new TLInputSecureFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputSecureFileLocation {
    return new TLInputSecureFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputSecureFileLocation | PlainMessage<TLInputSecureFileLocation> | undefined, b: TLInputSecureFileLocation | PlainMessage<TLInputSecureFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputSecureFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputTakeoutFileLocation
 */
export class TLInputTakeoutFileLocation extends Message$1<TLInputTakeoutFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputTakeoutFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputTakeoutFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputTakeoutFileLocation {
    return new TLInputTakeoutFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputTakeoutFileLocation {
    return new TLInputTakeoutFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputTakeoutFileLocation {
    return new TLInputTakeoutFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputTakeoutFileLocation | PlainMessage<TLInputTakeoutFileLocation> | undefined, b: TLInputTakeoutFileLocation | PlainMessage<TLInputTakeoutFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputTakeoutFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoFileLocation
 */
export class TLInputPhotoFileLocation extends Message$1<TLInputPhotoFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputPhotoFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhotoFileLocation {
    return new TLInputPhotoFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhotoFileLocation {
    return new TLInputPhotoFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhotoFileLocation {
    return new TLInputPhotoFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhotoFileLocation | PlainMessage<TLInputPhotoFileLocation> | undefined, b: TLInputPhotoFileLocation | PlainMessage<TLInputPhotoFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputPhotoFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoLegacyFileLocation
 */
export class TLInputPhotoLegacyFileLocation extends Message$1<TLInputPhotoLegacyFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputPhotoLegacyFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoLegacyFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhotoLegacyFileLocation {
    return new TLInputPhotoLegacyFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhotoLegacyFileLocation {
    return new TLInputPhotoLegacyFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhotoLegacyFileLocation {
    return new TLInputPhotoLegacyFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhotoLegacyFileLocation | PlainMessage<TLInputPhotoLegacyFileLocation> | undefined, b: TLInputPhotoLegacyFileLocation | PlainMessage<TLInputPhotoLegacyFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputPhotoLegacyFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerPhotoFileLocation
 */
export class TLInputPeerPhotoFileLocation extends Message$1<TLInputPeerPhotoFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputPeerPhotoFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerPhotoFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerPhotoFileLocation {
    return new TLInputPeerPhotoFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerPhotoFileLocation {
    return new TLInputPeerPhotoFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerPhotoFileLocation {
    return new TLInputPeerPhotoFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerPhotoFileLocation | PlainMessage<TLInputPeerPhotoFileLocation> | undefined, b: TLInputPeerPhotoFileLocation | PlainMessage<TLInputPeerPhotoFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputPeerPhotoFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetThumb
 */
export class TLInputStickerSetThumb extends Message$1<TLInputStickerSetThumb> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetThumb>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetThumb";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetThumb {
    return new TLInputStickerSetThumb().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetThumb {
    return new TLInputStickerSetThumb().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetThumb {
    return new TLInputStickerSetThumb().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetThumb | PlainMessage<TLInputStickerSetThumb> | undefined, b: TLInputStickerSetThumb | PlainMessage<TLInputStickerSetThumb> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetThumb, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGroupCallStream
 */
export class TLInputGroupCallStream extends Message$1<TLInputGroupCallStream> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFileLocation data2 = 1;
   */
  data2: InputFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputGroupCallStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGroupCallStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGroupCallStream {
    return new TLInputGroupCallStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGroupCallStream {
    return new TLInputGroupCallStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGroupCallStream {
    return new TLInputGroupCallStream().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGroupCallStream | PlainMessage<TLInputGroupCallStream> | undefined, b: TLInputGroupCallStream | PlainMessage<TLInputGroupCallStream> | undefined): boolean {
    return proto3.util.equals(TLInputGroupCallStream, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputFolderPeer
 */
export class InputFolderPeer extends Message$1<InputFolderPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 3;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 folder_id = 4;
   */
  folderId = 0;

  constructor(data?: PartialMessage<InputFolderPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputFolderPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 4, name: "folder_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputFolderPeer {
    return new InputFolderPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputFolderPeer {
    return new InputFolderPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputFolderPeer {
    return new InputFolderPeer().fromJsonString(jsonString, options);
  }

  static equals(a: InputFolderPeer | PlainMessage<InputFolderPeer> | undefined, b: InputFolderPeer | PlainMessage<InputFolderPeer> | undefined): boolean {
    return proto3.util.equals(InputFolderPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputFolderPeer
 */
export class TLInputFolderPeer extends Message$1<TLInputFolderPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFolderPeer data2 = 1;
   */
  data2: InputFolderPeer[] = [];

  constructor(data?: PartialMessage<TLInputFolderPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputFolderPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputFolderPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputFolderPeer {
    return new TLInputFolderPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputFolderPeer {
    return new TLInputFolderPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputFolderPeer {
    return new TLInputFolderPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputFolderPeer | PlainMessage<TLInputFolderPeer> | undefined, b: TLInputFolderPeer | PlainMessage<TLInputFolderPeer> | undefined): boolean {
    return proto3.util.equals(TLInputFolderPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputGame
 */
export class InputGame extends Message$1<InputGame> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser bot_id = 5;
   */
  botId: InputUser[] = [];

  /**
   * @generated from field: string short_name = 6;
   */
  shortName = "";

  constructor(data?: PartialMessage<InputGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "bot_id", kind: "message", T: InputUser, repeated: true },
    { no: 6, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputGame {
    return new InputGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputGame {
    return new InputGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputGame {
    return new InputGame().fromJsonString(jsonString, options);
  }

  static equals(a: InputGame | PlainMessage<InputGame> | undefined, b: InputGame | PlainMessage<InputGame> | undefined): boolean {
    return proto3.util.equals(InputGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGameID
 */
export class TLInputGameID extends Message$1<TLInputGameID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGame data2 = 1;
   */
  data2: InputGame[] = [];

  constructor(data?: PartialMessage<TLInputGameID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGameID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputGame, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGameID {
    return new TLInputGameID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGameID {
    return new TLInputGameID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGameID {
    return new TLInputGameID().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGameID | PlainMessage<TLInputGameID> | undefined, b: TLInputGameID | PlainMessage<TLInputGameID> | undefined): boolean {
    return proto3.util.equals(TLInputGameID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGameShortName
 */
export class TLInputGameShortName extends Message$1<TLInputGameShortName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGame data2 = 1;
   */
  data2: InputGame[] = [];

  constructor(data?: PartialMessage<TLInputGameShortName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGameShortName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputGame, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGameShortName {
    return new TLInputGameShortName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGameShortName {
    return new TLInputGameShortName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGameShortName {
    return new TLInputGameShortName().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGameShortName | PlainMessage<TLInputGameShortName> | undefined, b: TLInputGameShortName | PlainMessage<TLInputGameShortName> | undefined): boolean {
    return proto3.util.equals(TLInputGameShortName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint
 */
export class InputGeoPoint extends Message$1<InputGeoPoint> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float lat = 3;
   */
  lat = 0;

  /**
   * @generated from field: float long = 4;
   */
  long = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value accuracy_radius = 5;
   */
  accuracyRadius: Int32Value[] = [];

  constructor(data?: PartialMessage<InputGeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "lat", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "long", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "accuracy_radius", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputGeoPoint {
    return new InputGeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputGeoPoint {
    return new InputGeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputGeoPoint {
    return new InputGeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: InputGeoPoint | PlainMessage<InputGeoPoint> | undefined, b: InputGeoPoint | PlainMessage<InputGeoPoint> | undefined): boolean {
    return proto3.util.equals(InputGeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGeoPointEmpty
 */
export class TLInputGeoPointEmpty extends Message$1<TLInputGeoPointEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint data2 = 1;
   */
  data2: InputGeoPoint[] = [];

  constructor(data?: PartialMessage<TLInputGeoPointEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGeoPointEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputGeoPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGeoPointEmpty {
    return new TLInputGeoPointEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGeoPointEmpty {
    return new TLInputGeoPointEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGeoPointEmpty {
    return new TLInputGeoPointEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGeoPointEmpty | PlainMessage<TLInputGeoPointEmpty> | undefined, b: TLInputGeoPointEmpty | PlainMessage<TLInputGeoPointEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputGeoPointEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGeoPoint
 */
export class TLInputGeoPoint extends Message$1<TLInputGeoPoint> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint data2 = 1;
   */
  data2: InputGeoPoint[] = [];

  constructor(data?: PartialMessage<TLInputGeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputGeoPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGeoPoint {
    return new TLInputGeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGeoPoint {
    return new TLInputGeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGeoPoint {
    return new TLInputGeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGeoPoint | PlainMessage<TLInputGeoPoint> | undefined, b: TLInputGeoPoint | PlainMessage<TLInputGeoPoint> | undefined): boolean {
    return proto3.util.equals(TLInputGeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputGroupCall
 */
export class InputGroupCall extends Message$1<InputGroupCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<InputGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputGroupCall {
    return new InputGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputGroupCall {
    return new InputGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputGroupCall {
    return new InputGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: InputGroupCall | PlainMessage<InputGroupCall> | undefined, b: InputGroupCall | PlainMessage<InputGroupCall> | undefined): boolean {
    return proto3.util.equals(InputGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputGroupCall
 */
export class TLInputGroupCall extends Message$1<TLInputGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall data2 = 1;
   */
  data2: InputGroupCall[] = [];

  constructor(data?: PartialMessage<TLInputGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputGroupCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputGroupCall {
    return new TLInputGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputGroupCall {
    return new TLInputGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputGroupCall {
    return new TLInputGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputGroupCall | PlainMessage<TLInputGroupCall> | undefined, b: TLInputGroupCall | PlainMessage<TLInputGroupCall> | undefined): boolean {
    return proto3.util.equals(TLInputGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputInvoice
 */
export class InputInvoice extends Message$1<InputInvoice> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 3;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 msg_id = 4;
   */
  msgId = 0;

  /**
   * @generated from field: string slug = 5;
   */
  slug = "";

  constructor(data?: PartialMessage<InputInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 4, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputInvoice {
    return new InputInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputInvoice {
    return new InputInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputInvoice {
    return new InputInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: InputInvoice | PlainMessage<InputInvoice> | undefined, b: InputInvoice | PlainMessage<InputInvoice> | undefined): boolean {
    return proto3.util.equals(InputInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputInvoiceMessage
 */
export class TLInputInvoiceMessage extends Message$1<TLInputInvoiceMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputInvoice data2 = 1;
   */
  data2: InputInvoice[] = [];

  constructor(data?: PartialMessage<TLInputInvoiceMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputInvoiceMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputInvoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputInvoiceMessage {
    return new TLInputInvoiceMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputInvoiceMessage {
    return new TLInputInvoiceMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputInvoiceMessage {
    return new TLInputInvoiceMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputInvoiceMessage | PlainMessage<TLInputInvoiceMessage> | undefined, b: TLInputInvoiceMessage | PlainMessage<TLInputInvoiceMessage> | undefined): boolean {
    return proto3.util.equals(TLInputInvoiceMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputInvoiceSlug
 */
export class TLInputInvoiceSlug extends Message$1<TLInputInvoiceSlug> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputInvoice data2 = 1;
   */
  data2: InputInvoice[] = [];

  constructor(data?: PartialMessage<TLInputInvoiceSlug>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputInvoiceSlug";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputInvoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputInvoiceSlug {
    return new TLInputInvoiceSlug().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputInvoiceSlug {
    return new TLInputInvoiceSlug().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputInvoiceSlug {
    return new TLInputInvoiceSlug().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputInvoiceSlug | PlainMessage<TLInputInvoiceSlug> | undefined, b: TLInputInvoiceSlug | PlainMessage<TLInputInvoiceSlug> | undefined): boolean {
    return proto3.util.equals(TLInputInvoiceSlug, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputMedia
 */
export class InputMedia extends Message$1<InputMedia> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool spoiler = 3;
   */
  spoiler = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile file = 4;
   */
  file: InputFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument stickers = 5;
   */
  stickers: InputDocument[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_seconds = 6;
   */
  ttlSeconds: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto id_INPUTPHOTO = 7;
   */
  idINPUTPHOTO: InputPhoto[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint geo_point = 8;
   */
  geoPoint: InputGeoPoint[] = [];

  /**
   * @generated from field: string phone_number = 9;
   */
  phoneNumber = "";

  /**
   * @generated from field: string first_name = 10;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 11;
   */
  lastName = "";

  /**
   * @generated from field: string vcard = 12;
   */
  vcard = "";

  /**
   * @generated from field: bool nosound_video = 13;
   */
  nosoundVideo = false;

  /**
   * @generated from field: bool force_file = 14;
   */
  forceFile = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputFile thumb = 15;
   */
  thumb: InputFile[] = [];

  /**
   * @generated from field: string mime_type = 16;
   */
  mimeType = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute attributes = 17;
   */
  attributes: DocumentAttribute[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument id_INPUTDOCUMENT = 18;
   */
  idINPUTDOCUMENT: InputDocument[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue query = 19;
   */
  query: StringValue[] = [];

  /**
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * @generated from field: string address = 21;
   */
  address = "";

  /**
   * @generated from field: string provider = 22;
   */
  provider = "";

  /**
   * @generated from field: string venue_id = 23;
   */
  venueId = "";

  /**
   * @generated from field: string venue_type = 24;
   */
  venueType = "";

  /**
   * @generated from field: string url = 25;
   */
  url = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGame id_INPUTGAME = 26;
   */
  idINPUTGAME: InputGame[] = [];

  /**
   * @generated from field: string description = 27;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebDocument photo = 28;
   */
  photo: InputWebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Invoice invoice = 29;
   */
  invoice: Invoice[] = [];

  /**
   * @generated from field: bytes payload = 30;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON provider_data = 31;
   */
  providerData: DataJSON[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue start_param = 32;
   */
  startParam: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia extended_media = 33;
   */
  extendedMedia: InputMedia[] = [];

  /**
   * @generated from field: bool stopped = 34;
   */
  stopped = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value heading = 35;
   */
  heading: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value period = 36;
   */
  period: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value proximity_notification_radius = 37;
   */
  proximityNotificationRadius: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Poll poll = 38;
   */
  poll: Poll[] = [];

  /**
   * @generated from field: bytes correct_answers = 39;
   */
  correctAnswers = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.StringValue solution = 40;
   */
  solution: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity solution_entities = 41;
   */
  solutionEntities: MessageEntity[] = [];

  /**
   * @generated from field: string emoticon = 42;
   */
  emoticon = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 43;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 id_INT32 = 44;
   */
  idINT32 = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id = 45;
   */
  userId: InputUser[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BizDataRaw biz_data = 46;
   */
  bizData: BizDataRaw[] = [];

  constructor(data?: PartialMessage<InputMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "spoiler", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "file", kind: "message", T: InputFile, repeated: true },
    { no: 5, name: "stickers", kind: "message", T: InputDocument, repeated: true },
    { no: 6, name: "ttl_seconds", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "id_INPUTPHOTO", kind: "message", T: InputPhoto, repeated: true },
    { no: 8, name: "geo_point", kind: "message", T: InputGeoPoint, repeated: true },
    { no: 9, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "vcard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "nosound_video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "force_file", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "thumb", kind: "message", T: InputFile, repeated: true },
    { no: 16, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "attributes", kind: "message", T: DocumentAttribute, repeated: true },
    { no: 18, name: "id_INPUTDOCUMENT", kind: "message", T: InputDocument, repeated: true },
    { no: 19, name: "query", kind: "message", T: StringValue, repeated: true },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "venue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "id_INPUTGAME", kind: "message", T: InputGame, repeated: true },
    { no: 27, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "photo", kind: "message", T: InputWebDocument, repeated: true },
    { no: 29, name: "invoice", kind: "message", T: Invoice, repeated: true },
    { no: 30, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 31, name: "provider_data", kind: "message", T: DataJSON, repeated: true },
    { no: 32, name: "start_param", kind: "message", T: StringValue, repeated: true },
    { no: 33, name: "extended_media", kind: "message", T: InputMedia, repeated: true },
    { no: 34, name: "stopped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 35, name: "heading", kind: "message", T: Int32Value, repeated: true },
    { no: 36, name: "period", kind: "message", T: Int32Value, repeated: true },
    { no: 37, name: "proximity_notification_radius", kind: "message", T: Int32Value, repeated: true },
    { no: 38, name: "poll", kind: "message", T: Poll, repeated: true },
    { no: 39, name: "correct_answers", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 40, name: "solution", kind: "message", T: StringValue, repeated: true },
    { no: 41, name: "solution_entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 42, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 43, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 44, name: "id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 45, name: "user_id", kind: "message", T: InputUser, repeated: true },
    { no: 46, name: "biz_data", kind: "message", T: BizDataRaw, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputMedia {
    return new InputMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputMedia {
    return new InputMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputMedia {
    return new InputMedia().fromJsonString(jsonString, options);
  }

  static equals(a: InputMedia | PlainMessage<InputMedia> | undefined, b: InputMedia | PlainMessage<InputMedia> | undefined): boolean {
    return proto3.util.equals(InputMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaEmpty
 */
export class TLInputMediaEmpty extends Message$1<TLInputMediaEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaEmpty {
    return new TLInputMediaEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaEmpty {
    return new TLInputMediaEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaEmpty {
    return new TLInputMediaEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaEmpty | PlainMessage<TLInputMediaEmpty> | undefined, b: TLInputMediaEmpty | PlainMessage<TLInputMediaEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputMediaEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaUploadedPhoto
 */
export class TLInputMediaUploadedPhoto extends Message$1<TLInputMediaUploadedPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaUploadedPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaUploadedPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaUploadedPhoto {
    return new TLInputMediaUploadedPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaUploadedPhoto {
    return new TLInputMediaUploadedPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaUploadedPhoto {
    return new TLInputMediaUploadedPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaUploadedPhoto | PlainMessage<TLInputMediaUploadedPhoto> | undefined, b: TLInputMediaUploadedPhoto | PlainMessage<TLInputMediaUploadedPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputMediaUploadedPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPhoto
 */
export class TLInputMediaPhoto extends Message$1<TLInputMediaPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaPhoto {
    return new TLInputMediaPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaPhoto {
    return new TLInputMediaPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaPhoto {
    return new TLInputMediaPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaPhoto | PlainMessage<TLInputMediaPhoto> | undefined, b: TLInputMediaPhoto | PlainMessage<TLInputMediaPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputMediaPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGeoPoint
 */
export class TLInputMediaGeoPoint extends Message$1<TLInputMediaGeoPoint> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaGeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaGeoPoint {
    return new TLInputMediaGeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaGeoPoint {
    return new TLInputMediaGeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaGeoPoint {
    return new TLInputMediaGeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaGeoPoint | PlainMessage<TLInputMediaGeoPoint> | undefined, b: TLInputMediaGeoPoint | PlainMessage<TLInputMediaGeoPoint> | undefined): boolean {
    return proto3.util.equals(TLInputMediaGeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaContact
 */
export class TLInputMediaContact extends Message$1<TLInputMediaContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaContact {
    return new TLInputMediaContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaContact {
    return new TLInputMediaContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaContact {
    return new TLInputMediaContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaContact | PlainMessage<TLInputMediaContact> | undefined, b: TLInputMediaContact | PlainMessage<TLInputMediaContact> | undefined): boolean {
    return proto3.util.equals(TLInputMediaContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaUploadedDocument
 */
export class TLInputMediaUploadedDocument extends Message$1<TLInputMediaUploadedDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaUploadedDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaUploadedDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaUploadedDocument {
    return new TLInputMediaUploadedDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaUploadedDocument {
    return new TLInputMediaUploadedDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaUploadedDocument {
    return new TLInputMediaUploadedDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaUploadedDocument | PlainMessage<TLInputMediaUploadedDocument> | undefined, b: TLInputMediaUploadedDocument | PlainMessage<TLInputMediaUploadedDocument> | undefined): boolean {
    return proto3.util.equals(TLInputMediaUploadedDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDocument
 */
export class TLInputMediaDocument extends Message$1<TLInputMediaDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaDocument {
    return new TLInputMediaDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaDocument {
    return new TLInputMediaDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaDocument {
    return new TLInputMediaDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaDocument | PlainMessage<TLInputMediaDocument> | undefined, b: TLInputMediaDocument | PlainMessage<TLInputMediaDocument> | undefined): boolean {
    return proto3.util.equals(TLInputMediaDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaVenue
 */
export class TLInputMediaVenue extends Message$1<TLInputMediaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaVenue {
    return new TLInputMediaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaVenue {
    return new TLInputMediaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaVenue {
    return new TLInputMediaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaVenue | PlainMessage<TLInputMediaVenue> | undefined, b: TLInputMediaVenue | PlainMessage<TLInputMediaVenue> | undefined): boolean {
    return proto3.util.equals(TLInputMediaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPhotoExternal
 */
export class TLInputMediaPhotoExternal extends Message$1<TLInputMediaPhotoExternal> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaPhotoExternal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPhotoExternal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaPhotoExternal {
    return new TLInputMediaPhotoExternal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaPhotoExternal {
    return new TLInputMediaPhotoExternal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaPhotoExternal {
    return new TLInputMediaPhotoExternal().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaPhotoExternal | PlainMessage<TLInputMediaPhotoExternal> | undefined, b: TLInputMediaPhotoExternal | PlainMessage<TLInputMediaPhotoExternal> | undefined): boolean {
    return proto3.util.equals(TLInputMediaPhotoExternal, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDocumentExternal
 */
export class TLInputMediaDocumentExternal extends Message$1<TLInputMediaDocumentExternal> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaDocumentExternal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDocumentExternal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaDocumentExternal {
    return new TLInputMediaDocumentExternal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaDocumentExternal {
    return new TLInputMediaDocumentExternal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaDocumentExternal {
    return new TLInputMediaDocumentExternal().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaDocumentExternal | PlainMessage<TLInputMediaDocumentExternal> | undefined, b: TLInputMediaDocumentExternal | PlainMessage<TLInputMediaDocumentExternal> | undefined): boolean {
    return proto3.util.equals(TLInputMediaDocumentExternal, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGame
 */
export class TLInputMediaGame extends Message$1<TLInputMediaGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaGame {
    return new TLInputMediaGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaGame {
    return new TLInputMediaGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaGame {
    return new TLInputMediaGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaGame | PlainMessage<TLInputMediaGame> | undefined, b: TLInputMediaGame | PlainMessage<TLInputMediaGame> | undefined): boolean {
    return proto3.util.equals(TLInputMediaGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaInvoice
 */
export class TLInputMediaInvoice extends Message$1<TLInputMediaInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaInvoice {
    return new TLInputMediaInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaInvoice {
    return new TLInputMediaInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaInvoice {
    return new TLInputMediaInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaInvoice | PlainMessage<TLInputMediaInvoice> | undefined, b: TLInputMediaInvoice | PlainMessage<TLInputMediaInvoice> | undefined): boolean {
    return proto3.util.equals(TLInputMediaInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGeoLive
 */
export class TLInputMediaGeoLive extends Message$1<TLInputMediaGeoLive> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaGeoLive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaGeoLive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaGeoLive {
    return new TLInputMediaGeoLive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaGeoLive {
    return new TLInputMediaGeoLive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaGeoLive {
    return new TLInputMediaGeoLive().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaGeoLive | PlainMessage<TLInputMediaGeoLive> | undefined, b: TLInputMediaGeoLive | PlainMessage<TLInputMediaGeoLive> | undefined): boolean {
    return proto3.util.equals(TLInputMediaGeoLive, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPoll
 */
export class TLInputMediaPoll extends Message$1<TLInputMediaPoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaPoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaPoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaPoll {
    return new TLInputMediaPoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaPoll {
    return new TLInputMediaPoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaPoll {
    return new TLInputMediaPoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaPoll | PlainMessage<TLInputMediaPoll> | undefined, b: TLInputMediaPoll | PlainMessage<TLInputMediaPoll> | undefined): boolean {
    return proto3.util.equals(TLInputMediaPoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDice
 */
export class TLInputMediaDice extends Message$1<TLInputMediaDice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaDice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaDice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaDice {
    return new TLInputMediaDice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaDice {
    return new TLInputMediaDice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaDice {
    return new TLInputMediaDice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaDice | PlainMessage<TLInputMediaDice> | undefined, b: TLInputMediaDice | PlainMessage<TLInputMediaDice> | undefined): boolean {
    return proto3.util.equals(TLInputMediaDice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaStory
 */
export class TLInputMediaStory extends Message$1<TLInputMediaStory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaStory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaStory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaStory {
    return new TLInputMediaStory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaStory {
    return new TLInputMediaStory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaStory {
    return new TLInputMediaStory().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaStory | PlainMessage<TLInputMediaStory> | undefined, b: TLInputMediaStory | PlainMessage<TLInputMediaStory> | undefined): boolean {
    return proto3.util.equals(TLInputMediaStory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaBizDataRaw
 */
export class TLInputMediaBizDataRaw extends Message$1<TLInputMediaBizDataRaw> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia data2 = 1;
   */
  data2: InputMedia[] = [];

  constructor(data?: PartialMessage<TLInputMediaBizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaBizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaBizDataRaw {
    return new TLInputMediaBizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaBizDataRaw {
    return new TLInputMediaBizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaBizDataRaw {
    return new TLInputMediaBizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaBizDataRaw | PlainMessage<TLInputMediaBizDataRaw> | undefined, b: TLInputMediaBizDataRaw | PlainMessage<TLInputMediaBizDataRaw> | undefined): boolean {
    return proto3.util.equals(TLInputMediaBizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputMessage
 */
export class InputMessage extends Message$1<InputMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: int64 query_id = 4;
   */
  queryId = protoInt64.zero;

  constructor(data?: PartialMessage<InputMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputMessage {
    return new InputMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputMessage {
    return new InputMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputMessage {
    return new InputMessage().fromJsonString(jsonString, options);
  }

  static equals(a: InputMessage | PlainMessage<InputMessage> | undefined, b: InputMessage | PlainMessage<InputMessage> | undefined): boolean {
    return proto3.util.equals(InputMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessageID
 */
export class TLInputMessageID extends Message$1<TLInputMessageID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMessage data2 = 1;
   */
  data2: InputMessage[] = [];

  constructor(data?: PartialMessage<TLInputMessageID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessageID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessageID {
    return new TLInputMessageID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessageID {
    return new TLInputMessageID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessageID {
    return new TLInputMessageID().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessageID | PlainMessage<TLInputMessageID> | undefined, b: TLInputMessageID | PlainMessage<TLInputMessageID> | undefined): boolean {
    return proto3.util.equals(TLInputMessageID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessageReplyTo
 */
export class TLInputMessageReplyTo extends Message$1<TLInputMessageReplyTo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMessage data2 = 1;
   */
  data2: InputMessage[] = [];

  constructor(data?: PartialMessage<TLInputMessageReplyTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessageReplyTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessageReplyTo {
    return new TLInputMessageReplyTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessageReplyTo {
    return new TLInputMessageReplyTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessageReplyTo {
    return new TLInputMessageReplyTo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessageReplyTo | PlainMessage<TLInputMessageReplyTo> | undefined, b: TLInputMessageReplyTo | PlainMessage<TLInputMessageReplyTo> | undefined): boolean {
    return proto3.util.equals(TLInputMessageReplyTo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagePinned
 */
export class TLInputMessagePinned extends Message$1<TLInputMessagePinned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMessage data2 = 1;
   */
  data2: InputMessage[] = [];

  constructor(data?: PartialMessage<TLInputMessagePinned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagePinned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagePinned {
    return new TLInputMessagePinned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagePinned {
    return new TLInputMessagePinned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagePinned {
    return new TLInputMessagePinned().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagePinned | PlainMessage<TLInputMessagePinned> | undefined, b: TLInputMessagePinned | PlainMessage<TLInputMessagePinned> | undefined): boolean {
    return proto3.util.equals(TLInputMessagePinned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessageCallbackQuery
 */
export class TLInputMessageCallbackQuery extends Message$1<TLInputMessageCallbackQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMessage data2 = 1;
   */
  data2: InputMessage[] = [];

  constructor(data?: PartialMessage<TLInputMessageCallbackQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessageCallbackQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessageCallbackQuery {
    return new TLInputMessageCallbackQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessageCallbackQuery {
    return new TLInputMessageCallbackQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessageCallbackQuery {
    return new TLInputMessageCallbackQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessageCallbackQuery | PlainMessage<TLInputMessageCallbackQuery> | undefined, b: TLInputMessageCallbackQuery | PlainMessage<TLInputMessageCallbackQuery> | undefined): boolean {
    return proto3.util.equals(TLInputMessageCallbackQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer
 */
export class InputNotifyPeer extends Message$1<InputNotifyPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 3;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 top_msg_id = 4;
   */
  topMsgId = 0;

  constructor(data?: PartialMessage<InputNotifyPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 4, name: "top_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputNotifyPeer {
    return new InputNotifyPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputNotifyPeer {
    return new InputNotifyPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputNotifyPeer {
    return new InputNotifyPeer().fromJsonString(jsonString, options);
  }

  static equals(a: InputNotifyPeer | PlainMessage<InputNotifyPeer> | undefined, b: InputNotifyPeer | PlainMessage<InputNotifyPeer> | undefined): boolean {
    return proto3.util.equals(InputNotifyPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyPeer
 */
export class TLInputNotifyPeer extends Message$1<TLInputNotifyPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer data2 = 1;
   */
  data2: InputNotifyPeer[] = [];

  constructor(data?: PartialMessage<TLInputNotifyPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputNotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputNotifyPeer {
    return new TLInputNotifyPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputNotifyPeer {
    return new TLInputNotifyPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputNotifyPeer {
    return new TLInputNotifyPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputNotifyPeer | PlainMessage<TLInputNotifyPeer> | undefined, b: TLInputNotifyPeer | PlainMessage<TLInputNotifyPeer> | undefined): boolean {
    return proto3.util.equals(TLInputNotifyPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyUsers
 */
export class TLInputNotifyUsers extends Message$1<TLInputNotifyUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer data2 = 1;
   */
  data2: InputNotifyPeer[] = [];

  constructor(data?: PartialMessage<TLInputNotifyUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputNotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputNotifyUsers {
    return new TLInputNotifyUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputNotifyUsers {
    return new TLInputNotifyUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputNotifyUsers {
    return new TLInputNotifyUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputNotifyUsers | PlainMessage<TLInputNotifyUsers> | undefined, b: TLInputNotifyUsers | PlainMessage<TLInputNotifyUsers> | undefined): boolean {
    return proto3.util.equals(TLInputNotifyUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyChats
 */
export class TLInputNotifyChats extends Message$1<TLInputNotifyChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer data2 = 1;
   */
  data2: InputNotifyPeer[] = [];

  constructor(data?: PartialMessage<TLInputNotifyChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputNotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputNotifyChats {
    return new TLInputNotifyChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputNotifyChats {
    return new TLInputNotifyChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputNotifyChats {
    return new TLInputNotifyChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputNotifyChats | PlainMessage<TLInputNotifyChats> | undefined, b: TLInputNotifyChats | PlainMessage<TLInputNotifyChats> | undefined): boolean {
    return proto3.util.equals(TLInputNotifyChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyBroadcasts
 */
export class TLInputNotifyBroadcasts extends Message$1<TLInputNotifyBroadcasts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer data2 = 1;
   */
  data2: InputNotifyPeer[] = [];

  constructor(data?: PartialMessage<TLInputNotifyBroadcasts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyBroadcasts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputNotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputNotifyBroadcasts {
    return new TLInputNotifyBroadcasts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputNotifyBroadcasts {
    return new TLInputNotifyBroadcasts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputNotifyBroadcasts {
    return new TLInputNotifyBroadcasts().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputNotifyBroadcasts | PlainMessage<TLInputNotifyBroadcasts> | undefined, b: TLInputNotifyBroadcasts | PlainMessage<TLInputNotifyBroadcasts> | undefined): boolean {
    return proto3.util.equals(TLInputNotifyBroadcasts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyForumTopic
 */
export class TLInputNotifyForumTopic extends Message$1<TLInputNotifyForumTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputNotifyPeer data2 = 1;
   */
  data2: InputNotifyPeer[] = [];

  constructor(data?: PartialMessage<TLInputNotifyForumTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputNotifyForumTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputNotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputNotifyForumTopic {
    return new TLInputNotifyForumTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputNotifyForumTopic {
    return new TLInputNotifyForumTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputNotifyForumTopic {
    return new TLInputNotifyForumTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputNotifyForumTopic | PlainMessage<TLInputNotifyForumTopic> | undefined, b: TLInputNotifyForumTopic | PlainMessage<TLInputNotifyForumTopic> | undefined): boolean {
    return proto3.util.equals(TLInputNotifyForumTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials
 */
export class InputPaymentCredentials extends Message$1<InputPaymentCredentials> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: bytes tmp_password = 4;
   */
  tmpPassword = new Uint8Array(0);

  /**
   * @generated from field: bool save = 5;
   */
  save = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON data = 6;
   */
  data: DataJSON[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON payment_data = 7;
   */
  paymentData: DataJSON[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON payment_token = 8;
   */
  paymentToken: DataJSON[] = [];

  constructor(data?: PartialMessage<InputPaymentCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tmp_password", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "save", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "data", kind: "message", T: DataJSON, repeated: true },
    { no: 7, name: "payment_data", kind: "message", T: DataJSON, repeated: true },
    { no: 8, name: "payment_token", kind: "message", T: DataJSON, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPaymentCredentials {
    return new InputPaymentCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPaymentCredentials {
    return new InputPaymentCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPaymentCredentials {
    return new InputPaymentCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: InputPaymentCredentials | PlainMessage<InputPaymentCredentials> | undefined, b: InputPaymentCredentials | PlainMessage<InputPaymentCredentials> | undefined): boolean {
    return proto3.util.equals(InputPaymentCredentials, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsSaved
 */
export class TLInputPaymentCredentialsSaved extends Message$1<TLInputPaymentCredentialsSaved> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials data2 = 1;
   */
  data2: InputPaymentCredentials[] = [];

  constructor(data?: PartialMessage<TLInputPaymentCredentialsSaved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsSaved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPaymentCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPaymentCredentialsSaved {
    return new TLInputPaymentCredentialsSaved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsSaved {
    return new TLInputPaymentCredentialsSaved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsSaved {
    return new TLInputPaymentCredentialsSaved().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPaymentCredentialsSaved | PlainMessage<TLInputPaymentCredentialsSaved> | undefined, b: TLInputPaymentCredentialsSaved | PlainMessage<TLInputPaymentCredentialsSaved> | undefined): boolean {
    return proto3.util.equals(TLInputPaymentCredentialsSaved, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentials
 */
export class TLInputPaymentCredentials extends Message$1<TLInputPaymentCredentials> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials data2 = 1;
   */
  data2: InputPaymentCredentials[] = [];

  constructor(data?: PartialMessage<TLInputPaymentCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPaymentCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPaymentCredentials {
    return new TLInputPaymentCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPaymentCredentials {
    return new TLInputPaymentCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPaymentCredentials {
    return new TLInputPaymentCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPaymentCredentials | PlainMessage<TLInputPaymentCredentials> | undefined, b: TLInputPaymentCredentials | PlainMessage<TLInputPaymentCredentials> | undefined): boolean {
    return proto3.util.equals(TLInputPaymentCredentials, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsApplePay
 */
export class TLInputPaymentCredentialsApplePay extends Message$1<TLInputPaymentCredentialsApplePay> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials data2 = 1;
   */
  data2: InputPaymentCredentials[] = [];

  constructor(data?: PartialMessage<TLInputPaymentCredentialsApplePay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsApplePay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPaymentCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPaymentCredentialsApplePay {
    return new TLInputPaymentCredentialsApplePay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsApplePay {
    return new TLInputPaymentCredentialsApplePay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsApplePay {
    return new TLInputPaymentCredentialsApplePay().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPaymentCredentialsApplePay | PlainMessage<TLInputPaymentCredentialsApplePay> | undefined, b: TLInputPaymentCredentialsApplePay | PlainMessage<TLInputPaymentCredentialsApplePay> | undefined): boolean {
    return proto3.util.equals(TLInputPaymentCredentialsApplePay, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsGooglePay
 */
export class TLInputPaymentCredentialsGooglePay extends Message$1<TLInputPaymentCredentialsGooglePay> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPaymentCredentials data2 = 1;
   */
  data2: InputPaymentCredentials[] = [];

  constructor(data?: PartialMessage<TLInputPaymentCredentialsGooglePay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPaymentCredentialsGooglePay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPaymentCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPaymentCredentialsGooglePay {
    return new TLInputPaymentCredentialsGooglePay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsGooglePay {
    return new TLInputPaymentCredentialsGooglePay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPaymentCredentialsGooglePay {
    return new TLInputPaymentCredentialsGooglePay().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPaymentCredentialsGooglePay | PlainMessage<TLInputPaymentCredentialsGooglePay> | undefined, b: TLInputPaymentCredentialsGooglePay | PlainMessage<TLInputPaymentCredentialsGooglePay> | undefined): boolean {
    return proto3.util.equals(TLInputPaymentCredentialsGooglePay, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPeer
 */
export class InputPeer extends Message$1<InputPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 chat_id = 3;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int64 channel_id = 6;
   */
  channelId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 7;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 msg_id = 8;
   */
  msgId = 0;

  /**
   * @generated from field: string username = 9;
   */
  username = "";

  constructor(data?: PartialMessage<InputPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "channel_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 8, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPeer {
    return new InputPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPeer {
    return new InputPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPeer {
    return new InputPeer().fromJsonString(jsonString, options);
  }

  static equals(a: InputPeer | PlainMessage<InputPeer> | undefined, b: InputPeer | PlainMessage<InputPeer> | undefined): boolean {
    return proto3.util.equals(InputPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerEmpty
 */
export class TLInputPeerEmpty extends Message$1<TLInputPeerEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerEmpty {
    return new TLInputPeerEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerEmpty {
    return new TLInputPeerEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerEmpty {
    return new TLInputPeerEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerEmpty | PlainMessage<TLInputPeerEmpty> | undefined, b: TLInputPeerEmpty | PlainMessage<TLInputPeerEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputPeerEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerSelf
 */
export class TLInputPeerSelf extends Message$1<TLInputPeerSelf> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerSelf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerSelf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerSelf {
    return new TLInputPeerSelf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerSelf {
    return new TLInputPeerSelf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerSelf {
    return new TLInputPeerSelf().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerSelf | PlainMessage<TLInputPeerSelf> | undefined, b: TLInputPeerSelf | PlainMessage<TLInputPeerSelf> | undefined): boolean {
    return proto3.util.equals(TLInputPeerSelf, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChat
 */
export class TLInputPeerChat extends Message$1<TLInputPeerChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerChat {
    return new TLInputPeerChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerChat {
    return new TLInputPeerChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerChat {
    return new TLInputPeerChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerChat | PlainMessage<TLInputPeerChat> | undefined, b: TLInputPeerChat | PlainMessage<TLInputPeerChat> | undefined): boolean {
    return proto3.util.equals(TLInputPeerChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUser
 */
export class TLInputPeerUser extends Message$1<TLInputPeerUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerUser {
    return new TLInputPeerUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerUser {
    return new TLInputPeerUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerUser {
    return new TLInputPeerUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerUser | PlainMessage<TLInputPeerUser> | undefined, b: TLInputPeerUser | PlainMessage<TLInputPeerUser> | undefined): boolean {
    return proto3.util.equals(TLInputPeerUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChannel
 */
export class TLInputPeerChannel extends Message$1<TLInputPeerChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerChannel {
    return new TLInputPeerChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerChannel {
    return new TLInputPeerChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerChannel {
    return new TLInputPeerChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerChannel | PlainMessage<TLInputPeerChannel> | undefined, b: TLInputPeerChannel | PlainMessage<TLInputPeerChannel> | undefined): boolean {
    return proto3.util.equals(TLInputPeerChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUserFromMessage
 */
export class TLInputPeerUserFromMessage extends Message$1<TLInputPeerUserFromMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerUserFromMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUserFromMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerUserFromMessage {
    return new TLInputPeerUserFromMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerUserFromMessage {
    return new TLInputPeerUserFromMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerUserFromMessage {
    return new TLInputPeerUserFromMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerUserFromMessage | PlainMessage<TLInputPeerUserFromMessage> | undefined, b: TLInputPeerUserFromMessage | PlainMessage<TLInputPeerUserFromMessage> | undefined): boolean {
    return proto3.util.equals(TLInputPeerUserFromMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChannelFromMessage
 */
export class TLInputPeerChannelFromMessage extends Message$1<TLInputPeerChannelFromMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerChannelFromMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerChannelFromMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerChannelFromMessage {
    return new TLInputPeerChannelFromMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerChannelFromMessage {
    return new TLInputPeerChannelFromMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerChannelFromMessage {
    return new TLInputPeerChannelFromMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerChannelFromMessage | PlainMessage<TLInputPeerChannelFromMessage> | undefined, b: TLInputPeerChannelFromMessage | PlainMessage<TLInputPeerChannelFromMessage> | undefined): boolean {
    return proto3.util.equals(TLInputPeerChannelFromMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUsername
 */
export class TLInputPeerUsername extends Message$1<TLInputPeerUsername> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer data2 = 1;
   */
  data2: InputPeer[] = [];

  constructor(data?: PartialMessage<TLInputPeerUsername>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerUsername";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerUsername {
    return new TLInputPeerUsername().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerUsername {
    return new TLInputPeerUsername().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerUsername {
    return new TLInputPeerUsername().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerUsername | PlainMessage<TLInputPeerUsername> | undefined, b: TLInputPeerUsername | PlainMessage<TLInputPeerUsername> | undefined): boolean {
    return proto3.util.equals(TLInputPeerUsername, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPeerNotifySettings
 */
export class InputPeerNotifySettings extends Message$1<InputPeerNotifySettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool show_previews = 3;
   */
  showPreviews: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool silent = 4;
   */
  silent: Bool[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value mute_until = 5;
   */
  muteUntil: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound sound_FLAGNOTIFICATIONSOUND = 6;
   */
  soundFLAGNOTIFICATIONSOUND: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool stories_muted = 7;
   */
  storiesMuted: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool stories_hide_sender = 8;
   */
  storiesHideSender: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound stories_sound = 9;
   */
  storiesSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue sound_FLAGSTRING = 10;
   */
  soundFLAGSTRING: StringValue[] = [];

  constructor(data?: PartialMessage<InputPeerNotifySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPeerNotifySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "show_previews", kind: "message", T: Bool, repeated: true },
    { no: 4, name: "silent", kind: "message", T: Bool, repeated: true },
    { no: 5, name: "mute_until", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "sound_FLAGNOTIFICATIONSOUND", kind: "message", T: NotificationSound, repeated: true },
    { no: 7, name: "stories_muted", kind: "message", T: Bool, repeated: true },
    { no: 8, name: "stories_hide_sender", kind: "message", T: Bool, repeated: true },
    { no: 9, name: "stories_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 10, name: "sound_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPeerNotifySettings {
    return new InputPeerNotifySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPeerNotifySettings {
    return new InputPeerNotifySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPeerNotifySettings {
    return new InputPeerNotifySettings().fromJsonString(jsonString, options);
  }

  static equals(a: InputPeerNotifySettings | PlainMessage<InputPeerNotifySettings> | undefined, b: InputPeerNotifySettings | PlainMessage<InputPeerNotifySettings> | undefined): boolean {
    return proto3.util.equals(InputPeerNotifySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPeerNotifySettings
 */
export class TLInputPeerNotifySettings extends Message$1<TLInputPeerNotifySettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeerNotifySettings data2 = 1;
   */
  data2: InputPeerNotifySettings[] = [];

  constructor(data?: PartialMessage<TLInputPeerNotifySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPeerNotifySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPeerNotifySettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPeerNotifySettings {
    return new TLInputPeerNotifySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPeerNotifySettings {
    return new TLInputPeerNotifySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPeerNotifySettings {
    return new TLInputPeerNotifySettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPeerNotifySettings | PlainMessage<TLInputPeerNotifySettings> | undefined, b: TLInputPeerNotifySettings | PlainMessage<TLInputPeerNotifySettings> | undefined): boolean {
    return proto3.util.equals(TLInputPeerNotifySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPhoneCall
 */
export class InputPhoneCall extends Message$1<InputPhoneCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<InputPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPhoneCall {
    return new InputPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPhoneCall {
    return new InputPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPhoneCall {
    return new InputPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: InputPhoneCall | PlainMessage<InputPhoneCall> | undefined, b: InputPhoneCall | PlainMessage<InputPhoneCall> | undefined): boolean {
    return proto3.util.equals(InputPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhoneCall
 */
export class TLInputPhoneCall extends Message$1<TLInputPhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoneCall data2 = 1;
   */
  data2: InputPhoneCall[] = [];

  constructor(data?: PartialMessage<TLInputPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhoneCall {
    return new TLInputPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhoneCall {
    return new TLInputPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhoneCall {
    return new TLInputPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhoneCall | PlainMessage<TLInputPhoneCall> | undefined, b: TLInputPhoneCall | PlainMessage<TLInputPhoneCall> | undefined): boolean {
    return proto3.util.equals(TLInputPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPhoto
 */
export class InputPhoto extends Message$1<InputPhoto> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 5;
   */
  fileReference = new Uint8Array(0);

  constructor(data?: PartialMessage<InputPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPhoto {
    return new InputPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPhoto {
    return new InputPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPhoto {
    return new InputPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: InputPhoto | PlainMessage<InputPhoto> | undefined, b: InputPhoto | PlainMessage<InputPhoto> | undefined): boolean {
    return proto3.util.equals(InputPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoEmpty
 */
export class TLInputPhotoEmpty extends Message$1<TLInputPhotoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto data2 = 1;
   */
  data2: InputPhoto[] = [];

  constructor(data?: PartialMessage<TLInputPhotoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhotoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhotoEmpty {
    return new TLInputPhotoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhotoEmpty {
    return new TLInputPhotoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhotoEmpty {
    return new TLInputPhotoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhotoEmpty | PlainMessage<TLInputPhotoEmpty> | undefined, b: TLInputPhotoEmpty | PlainMessage<TLInputPhotoEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputPhotoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPhoto
 */
export class TLInputPhoto extends Message$1<TLInputPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto data2 = 1;
   */
  data2: InputPhoto[] = [];

  constructor(data?: PartialMessage<TLInputPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPhoto {
    return new TLInputPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPhoto {
    return new TLInputPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPhoto {
    return new TLInputPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPhoto | PlainMessage<TLInputPhoto> | undefined, b: TLInputPhoto | PlainMessage<TLInputPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey
 */
export class InputPrivacyKey extends Message$1<InputPrivacyKey> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<InputPrivacyKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPrivacyKey {
    return new InputPrivacyKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPrivacyKey {
    return new InputPrivacyKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPrivacyKey {
    return new InputPrivacyKey().fromJsonString(jsonString, options);
  }

  static equals(a: InputPrivacyKey | PlainMessage<InputPrivacyKey> | undefined, b: InputPrivacyKey | PlainMessage<InputPrivacyKey> | undefined): boolean {
    return proto3.util.equals(InputPrivacyKey, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyStatusTimestamp
 */
export class TLInputPrivacyKeyStatusTimestamp extends Message$1<TLInputPrivacyKeyStatusTimestamp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyStatusTimestamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyStatusTimestamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyStatusTimestamp {
    return new TLInputPrivacyKeyStatusTimestamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyStatusTimestamp {
    return new TLInputPrivacyKeyStatusTimestamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyStatusTimestamp {
    return new TLInputPrivacyKeyStatusTimestamp().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyStatusTimestamp | PlainMessage<TLInputPrivacyKeyStatusTimestamp> | undefined, b: TLInputPrivacyKeyStatusTimestamp | PlainMessage<TLInputPrivacyKeyStatusTimestamp> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyStatusTimestamp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyChatInvite
 */
export class TLInputPrivacyKeyChatInvite extends Message$1<TLInputPrivacyKeyChatInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyChatInvite {
    return new TLInputPrivacyKeyChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyChatInvite {
    return new TLInputPrivacyKeyChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyChatInvite {
    return new TLInputPrivacyKeyChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyChatInvite | PlainMessage<TLInputPrivacyKeyChatInvite> | undefined, b: TLInputPrivacyKeyChatInvite | PlainMessage<TLInputPrivacyKeyChatInvite> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneCall
 */
export class TLInputPrivacyKeyPhoneCall extends Message$1<TLInputPrivacyKeyPhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyPhoneCall {
    return new TLInputPrivacyKeyPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneCall {
    return new TLInputPrivacyKeyPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneCall {
    return new TLInputPrivacyKeyPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyPhoneCall | PlainMessage<TLInputPrivacyKeyPhoneCall> | undefined, b: TLInputPrivacyKeyPhoneCall | PlainMessage<TLInputPrivacyKeyPhoneCall> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneP2P
 */
export class TLInputPrivacyKeyPhoneP2P extends Message$1<TLInputPrivacyKeyPhoneP2P> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyPhoneP2P>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneP2P";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyPhoneP2P {
    return new TLInputPrivacyKeyPhoneP2P().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneP2P {
    return new TLInputPrivacyKeyPhoneP2P().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneP2P {
    return new TLInputPrivacyKeyPhoneP2P().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyPhoneP2P | PlainMessage<TLInputPrivacyKeyPhoneP2P> | undefined, b: TLInputPrivacyKeyPhoneP2P | PlainMessage<TLInputPrivacyKeyPhoneP2P> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyPhoneP2P, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyForwards
 */
export class TLInputPrivacyKeyForwards extends Message$1<TLInputPrivacyKeyForwards> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyForwards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyForwards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyForwards {
    return new TLInputPrivacyKeyForwards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyForwards {
    return new TLInputPrivacyKeyForwards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyForwards {
    return new TLInputPrivacyKeyForwards().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyForwards | PlainMessage<TLInputPrivacyKeyForwards> | undefined, b: TLInputPrivacyKeyForwards | PlainMessage<TLInputPrivacyKeyForwards> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyForwards, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyProfilePhoto
 */
export class TLInputPrivacyKeyProfilePhoto extends Message$1<TLInputPrivacyKeyProfilePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyProfilePhoto {
    return new TLInputPrivacyKeyProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyProfilePhoto {
    return new TLInputPrivacyKeyProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyProfilePhoto {
    return new TLInputPrivacyKeyProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyProfilePhoto | PlainMessage<TLInputPrivacyKeyProfilePhoto> | undefined, b: TLInputPrivacyKeyProfilePhoto | PlainMessage<TLInputPrivacyKeyProfilePhoto> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneNumber
 */
export class TLInputPrivacyKeyPhoneNumber extends Message$1<TLInputPrivacyKeyPhoneNumber> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyPhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyPhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyPhoneNumber {
    return new TLInputPrivacyKeyPhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneNumber {
    return new TLInputPrivacyKeyPhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyPhoneNumber {
    return new TLInputPrivacyKeyPhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyPhoneNumber | PlainMessage<TLInputPrivacyKeyPhoneNumber> | undefined, b: TLInputPrivacyKeyPhoneNumber | PlainMessage<TLInputPrivacyKeyPhoneNumber> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyPhoneNumber, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyAddedByPhone
 */
export class TLInputPrivacyKeyAddedByPhone extends Message$1<TLInputPrivacyKeyAddedByPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyAddedByPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyAddedByPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyAddedByPhone {
    return new TLInputPrivacyKeyAddedByPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyAddedByPhone {
    return new TLInputPrivacyKeyAddedByPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyAddedByPhone {
    return new TLInputPrivacyKeyAddedByPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyAddedByPhone | PlainMessage<TLInputPrivacyKeyAddedByPhone> | undefined, b: TLInputPrivacyKeyAddedByPhone | PlainMessage<TLInputPrivacyKeyAddedByPhone> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyAddedByPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyVoiceMessages
 */
export class TLInputPrivacyKeyVoiceMessages extends Message$1<TLInputPrivacyKeyVoiceMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyVoiceMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyVoiceMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyVoiceMessages {
    return new TLInputPrivacyKeyVoiceMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyVoiceMessages {
    return new TLInputPrivacyKeyVoiceMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyVoiceMessages {
    return new TLInputPrivacyKeyVoiceMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyVoiceMessages | PlainMessage<TLInputPrivacyKeyVoiceMessages> | undefined, b: TLInputPrivacyKeyVoiceMessages | PlainMessage<TLInputPrivacyKeyVoiceMessages> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyVoiceMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyAbout
 */
export class TLInputPrivacyKeyAbout extends Message$1<TLInputPrivacyKeyAbout> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyKey data2 = 1;
   */
  data2: InputPrivacyKey[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyKeyAbout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyKeyAbout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyKeyAbout {
    return new TLInputPrivacyKeyAbout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyAbout {
    return new TLInputPrivacyKeyAbout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyKeyAbout {
    return new TLInputPrivacyKeyAbout().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyKeyAbout | PlainMessage<TLInputPrivacyKeyAbout> | undefined, b: TLInputPrivacyKeyAbout | PlainMessage<TLInputPrivacyKeyAbout> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyKeyAbout, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule
 */
export class InputPrivacyRule extends Message$1<InputPrivacyRule> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser users = 3;
   */
  users: InputUser[] = [];

  /**
   * @generated from field: int64 chats = 4;
   */
  chats = protoInt64.zero;

  constructor(data?: PartialMessage<InputPrivacyRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "users", kind: "message", T: InputUser, repeated: true },
    { no: 4, name: "chats", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputPrivacyRule {
    return new InputPrivacyRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputPrivacyRule {
    return new InputPrivacyRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputPrivacyRule {
    return new InputPrivacyRule().fromJsonString(jsonString, options);
  }

  static equals(a: InputPrivacyRule | PlainMessage<InputPrivacyRule> | undefined, b: InputPrivacyRule | PlainMessage<InputPrivacyRule> | undefined): boolean {
    return proto3.util.equals(InputPrivacyRule, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowContacts
 */
export class TLInputPrivacyValueAllowContacts extends Message$1<TLInputPrivacyValueAllowContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueAllowContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueAllowContacts {
    return new TLInputPrivacyValueAllowContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowContacts {
    return new TLInputPrivacyValueAllowContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowContacts {
    return new TLInputPrivacyValueAllowContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueAllowContacts | PlainMessage<TLInputPrivacyValueAllowContacts> | undefined, b: TLInputPrivacyValueAllowContacts | PlainMessage<TLInputPrivacyValueAllowContacts> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueAllowContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowAll
 */
export class TLInputPrivacyValueAllowAll extends Message$1<TLInputPrivacyValueAllowAll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueAllowAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueAllowAll {
    return new TLInputPrivacyValueAllowAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowAll {
    return new TLInputPrivacyValueAllowAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowAll {
    return new TLInputPrivacyValueAllowAll().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueAllowAll | PlainMessage<TLInputPrivacyValueAllowAll> | undefined, b: TLInputPrivacyValueAllowAll | PlainMessage<TLInputPrivacyValueAllowAll> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueAllowAll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowUsers
 */
export class TLInputPrivacyValueAllowUsers extends Message$1<TLInputPrivacyValueAllowUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueAllowUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueAllowUsers {
    return new TLInputPrivacyValueAllowUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowUsers {
    return new TLInputPrivacyValueAllowUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowUsers {
    return new TLInputPrivacyValueAllowUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueAllowUsers | PlainMessage<TLInputPrivacyValueAllowUsers> | undefined, b: TLInputPrivacyValueAllowUsers | PlainMessage<TLInputPrivacyValueAllowUsers> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueAllowUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowContacts
 */
export class TLInputPrivacyValueDisallowContacts extends Message$1<TLInputPrivacyValueDisallowContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueDisallowContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueDisallowContacts {
    return new TLInputPrivacyValueDisallowContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowContacts {
    return new TLInputPrivacyValueDisallowContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowContacts {
    return new TLInputPrivacyValueDisallowContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueDisallowContacts | PlainMessage<TLInputPrivacyValueDisallowContacts> | undefined, b: TLInputPrivacyValueDisallowContacts | PlainMessage<TLInputPrivacyValueDisallowContacts> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueDisallowContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowAll
 */
export class TLInputPrivacyValueDisallowAll extends Message$1<TLInputPrivacyValueDisallowAll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueDisallowAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueDisallowAll {
    return new TLInputPrivacyValueDisallowAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowAll {
    return new TLInputPrivacyValueDisallowAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowAll {
    return new TLInputPrivacyValueDisallowAll().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueDisallowAll | PlainMessage<TLInputPrivacyValueDisallowAll> | undefined, b: TLInputPrivacyValueDisallowAll | PlainMessage<TLInputPrivacyValueDisallowAll> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueDisallowAll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowUsers
 */
export class TLInputPrivacyValueDisallowUsers extends Message$1<TLInputPrivacyValueDisallowUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueDisallowUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueDisallowUsers {
    return new TLInputPrivacyValueDisallowUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowUsers {
    return new TLInputPrivacyValueDisallowUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowUsers {
    return new TLInputPrivacyValueDisallowUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueDisallowUsers | PlainMessage<TLInputPrivacyValueDisallowUsers> | undefined, b: TLInputPrivacyValueDisallowUsers | PlainMessage<TLInputPrivacyValueDisallowUsers> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueDisallowUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowChatParticipants
 */
export class TLInputPrivacyValueAllowChatParticipants extends Message$1<TLInputPrivacyValueAllowChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueAllowChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueAllowChatParticipants {
    return new TLInputPrivacyValueAllowChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowChatParticipants {
    return new TLInputPrivacyValueAllowChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowChatParticipants {
    return new TLInputPrivacyValueAllowChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueAllowChatParticipants | PlainMessage<TLInputPrivacyValueAllowChatParticipants> | undefined, b: TLInputPrivacyValueAllowChatParticipants | PlainMessage<TLInputPrivacyValueAllowChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueAllowChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowChatParticipants
 */
export class TLInputPrivacyValueDisallowChatParticipants extends Message$1<TLInputPrivacyValueDisallowChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueDisallowChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueDisallowChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueDisallowChatParticipants {
    return new TLInputPrivacyValueDisallowChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowChatParticipants {
    return new TLInputPrivacyValueDisallowChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueDisallowChatParticipants {
    return new TLInputPrivacyValueDisallowChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueDisallowChatParticipants | PlainMessage<TLInputPrivacyValueDisallowChatParticipants> | undefined, b: TLInputPrivacyValueDisallowChatParticipants | PlainMessage<TLInputPrivacyValueDisallowChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueDisallowChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowCloseFriends
 */
export class TLInputPrivacyValueAllowCloseFriends extends Message$1<TLInputPrivacyValueAllowCloseFriends> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPrivacyRule data2 = 1;
   */
  data2: InputPrivacyRule[] = [];

  constructor(data?: PartialMessage<TLInputPrivacyValueAllowCloseFriends>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputPrivacyValueAllowCloseFriends";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputPrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputPrivacyValueAllowCloseFriends {
    return new TLInputPrivacyValueAllowCloseFriends().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowCloseFriends {
    return new TLInputPrivacyValueAllowCloseFriends().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputPrivacyValueAllowCloseFriends {
    return new TLInputPrivacyValueAllowCloseFriends().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputPrivacyValueAllowCloseFriends | PlainMessage<TLInputPrivacyValueAllowCloseFriends> | undefined, b: TLInputPrivacyValueAllowCloseFriends | PlainMessage<TLInputPrivacyValueAllowCloseFriends> | undefined): boolean {
    return proto3.util.equals(TLInputPrivacyValueAllowCloseFriends, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputReplyTo
 */
export class InputReplyTo extends Message$1<InputReplyTo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 reply_to_msg_id = 3;
   */
  replyToMsgId = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value top_msg_id = 4;
   */
  topMsgId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id = 5;
   */
  userId: InputUser[] = [];

  /**
   * @generated from field: int32 story_id = 6;
   */
  storyId = 0;

  constructor(data?: PartialMessage<InputReplyTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputReplyTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "reply_to_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "top_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "user_id", kind: "message", T: InputUser, repeated: true },
    { no: 6, name: "story_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputReplyTo {
    return new InputReplyTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputReplyTo {
    return new InputReplyTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputReplyTo {
    return new InputReplyTo().fromJsonString(jsonString, options);
  }

  static equals(a: InputReplyTo | PlainMessage<InputReplyTo> | undefined, b: InputReplyTo | PlainMessage<InputReplyTo> | undefined): boolean {
    return proto3.util.equals(InputReplyTo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReplyToMessage
 */
export class TLInputReplyToMessage extends Message$1<TLInputReplyToMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputReplyTo data2 = 1;
   */
  data2: InputReplyTo[] = [];

  constructor(data?: PartialMessage<TLInputReplyToMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReplyToMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputReplyTo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReplyToMessage {
    return new TLInputReplyToMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReplyToMessage {
    return new TLInputReplyToMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReplyToMessage {
    return new TLInputReplyToMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReplyToMessage | PlainMessage<TLInputReplyToMessage> | undefined, b: TLInputReplyToMessage | PlainMessage<TLInputReplyToMessage> | undefined): boolean {
    return proto3.util.equals(TLInputReplyToMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReplyToStory
 */
export class TLInputReplyToStory extends Message$1<TLInputReplyToStory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputReplyTo data2 = 1;
   */
  data2: InputReplyTo[] = [];

  constructor(data?: PartialMessage<TLInputReplyToStory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReplyToStory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputReplyTo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReplyToStory {
    return new TLInputReplyToStory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReplyToStory {
    return new TLInputReplyToStory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReplyToStory {
    return new TLInputReplyToStory().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReplyToStory | PlainMessage<TLInputReplyToStory> | undefined, b: TLInputReplyToStory | PlainMessage<TLInputReplyToStory> | undefined): boolean {
    return proto3.util.equals(TLInputReplyToStory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputSecureFile
 */
export class InputSecureFile extends Message$1<InputSecureFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 parts = 4;
   */
  parts = 0;

  /**
   * @generated from field: string md5_checksum = 5;
   */
  md5Checksum = "";

  /**
   * @generated from field: bytes file_hash = 6;
   */
  fileHash = new Uint8Array(0);

  /**
   * @generated from field: bytes secret = 7;
   */
  secret = new Uint8Array(0);

  /**
   * @generated from field: int64 access_hash = 8;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<InputSecureFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputSecureFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "parts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "md5_checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "file_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputSecureFile {
    return new InputSecureFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputSecureFile {
    return new InputSecureFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputSecureFile {
    return new InputSecureFile().fromJsonString(jsonString, options);
  }

  static equals(a: InputSecureFile | PlainMessage<InputSecureFile> | undefined, b: InputSecureFile | PlainMessage<InputSecureFile> | undefined): boolean {
    return proto3.util.equals(InputSecureFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFileUploaded
 */
export class TLInputSecureFileUploaded extends Message$1<TLInputSecureFileUploaded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile data2 = 1;
   */
  data2: InputSecureFile[] = [];

  constructor(data?: PartialMessage<TLInputSecureFileUploaded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFileUploaded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputSecureFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputSecureFileUploaded {
    return new TLInputSecureFileUploaded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputSecureFileUploaded {
    return new TLInputSecureFileUploaded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputSecureFileUploaded {
    return new TLInputSecureFileUploaded().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputSecureFileUploaded | PlainMessage<TLInputSecureFileUploaded> | undefined, b: TLInputSecureFileUploaded | PlainMessage<TLInputSecureFileUploaded> | undefined): boolean {
    return proto3.util.equals(TLInputSecureFileUploaded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFile
 */
export class TLInputSecureFile extends Message$1<TLInputSecureFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile data2 = 1;
   */
  data2: InputSecureFile[] = [];

  constructor(data?: PartialMessage<TLInputSecureFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputSecureFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputSecureFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputSecureFile {
    return new TLInputSecureFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputSecureFile {
    return new TLInputSecureFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputSecureFile {
    return new TLInputSecureFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputSecureFile | PlainMessage<TLInputSecureFile> | undefined, b: TLInputSecureFile | PlainMessage<TLInputSecureFile> | undefined): boolean {
    return proto3.util.equals(TLInputSecureFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputSecureValue
 */
export class InputSecureValue extends Message$1<InputSecureValue> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType type = 3;
   */
  type: SecureValueType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureData data = 4;
   */
  data: SecureData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile front_side = 5;
   */
  frontSide: InputSecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile reverse_side = 6;
   */
  reverseSide: InputSecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile selfie = 7;
   */
  selfie: InputSecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile translation = 8;
   */
  translation: InputSecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureFile files = 9;
   */
  files: InputSecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePlainData plain_data = 10;
   */
  plainData: SecurePlainData[] = [];

  constructor(data?: PartialMessage<InputSecureValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputSecureValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: SecureValueType, repeated: true },
    { no: 4, name: "data", kind: "message", T: SecureData, repeated: true },
    { no: 5, name: "front_side", kind: "message", T: InputSecureFile, repeated: true },
    { no: 6, name: "reverse_side", kind: "message", T: InputSecureFile, repeated: true },
    { no: 7, name: "selfie", kind: "message", T: InputSecureFile, repeated: true },
    { no: 8, name: "translation", kind: "message", T: InputSecureFile, repeated: true },
    { no: 9, name: "files", kind: "message", T: InputSecureFile, repeated: true },
    { no: 10, name: "plain_data", kind: "message", T: SecurePlainData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputSecureValue {
    return new InputSecureValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputSecureValue {
    return new InputSecureValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputSecureValue {
    return new InputSecureValue().fromJsonString(jsonString, options);
  }

  static equals(a: InputSecureValue | PlainMessage<InputSecureValue> | undefined, b: InputSecureValue | PlainMessage<InputSecureValue> | undefined): boolean {
    return proto3.util.equals(InputSecureValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputSecureValue
 */
export class TLInputSecureValue extends Message$1<TLInputSecureValue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSecureValue data2 = 1;
   */
  data2: InputSecureValue[] = [];

  constructor(data?: PartialMessage<TLInputSecureValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputSecureValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputSecureValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputSecureValue {
    return new TLInputSecureValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputSecureValue {
    return new TLInputSecureValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputSecureValue {
    return new TLInputSecureValue().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputSecureValue | PlainMessage<TLInputSecureValue> | undefined, b: TLInputSecureValue | PlainMessage<TLInputSecureValue> | undefined): boolean {
    return proto3.util.equals(TLInputSecureValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputSingleMedia
 */
export class InputSingleMedia extends Message$1<InputSingleMedia> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputMedia media = 3;
   */
  media: InputMedia[] = [];

  /**
   * @generated from field: int64 random_id = 4;
   */
  randomId = protoInt64.zero;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 6;
   */
  entities: MessageEntity[] = [];

  constructor(data?: PartialMessage<InputSingleMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputSingleMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "media", kind: "message", T: InputMedia, repeated: true },
    { no: 4, name: "random_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "entities", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputSingleMedia {
    return new InputSingleMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputSingleMedia {
    return new InputSingleMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputSingleMedia {
    return new InputSingleMedia().fromJsonString(jsonString, options);
  }

  static equals(a: InputSingleMedia | PlainMessage<InputSingleMedia> | undefined, b: InputSingleMedia | PlainMessage<InputSingleMedia> | undefined): boolean {
    return proto3.util.equals(InputSingleMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputSingleMedia
 */
export class TLInputSingleMedia extends Message$1<TLInputSingleMedia> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputSingleMedia data2 = 1;
   */
  data2: InputSingleMedia[] = [];

  constructor(data?: PartialMessage<TLInputSingleMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputSingleMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputSingleMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputSingleMedia {
    return new TLInputSingleMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputSingleMedia {
    return new TLInputSingleMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputSingleMedia {
    return new TLInputSingleMedia().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputSingleMedia | PlainMessage<TLInputSingleMedia> | undefined, b: TLInputSingleMedia | PlainMessage<TLInputSingleMedia> | undefined): boolean {
    return proto3.util.equals(TLInputSingleMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputStickerSet
 */
export class InputStickerSet extends Message$1<InputStickerSet> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string short_name = 5;
   */
  shortName = "";

  /**
   * @generated from field: string emoticon = 6;
   */
  emoticon = "";

  constructor(data?: PartialMessage<InputStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputStickerSet {
    return new InputStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputStickerSet {
    return new InputStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputStickerSet {
    return new InputStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: InputStickerSet | PlainMessage<InputStickerSet> | undefined, b: InputStickerSet | PlainMessage<InputStickerSet> | undefined): boolean {
    return proto3.util.equals(InputStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmpty
 */
export class TLInputStickerSetEmpty extends Message$1<TLInputStickerSetEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetEmpty {
    return new TLInputStickerSetEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetEmpty {
    return new TLInputStickerSetEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetEmpty {
    return new TLInputStickerSetEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetEmpty | PlainMessage<TLInputStickerSetEmpty> | undefined, b: TLInputStickerSetEmpty | PlainMessage<TLInputStickerSetEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetID
 */
export class TLInputStickerSetID extends Message$1<TLInputStickerSetID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetID {
    return new TLInputStickerSetID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetID {
    return new TLInputStickerSetID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetID {
    return new TLInputStickerSetID().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetID | PlainMessage<TLInputStickerSetID> | undefined, b: TLInputStickerSetID | PlainMessage<TLInputStickerSetID> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetShortName
 */
export class TLInputStickerSetShortName extends Message$1<TLInputStickerSetShortName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetShortName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetShortName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetShortName {
    return new TLInputStickerSetShortName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetShortName {
    return new TLInputStickerSetShortName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetShortName {
    return new TLInputStickerSetShortName().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetShortName | PlainMessage<TLInputStickerSetShortName> | undefined, b: TLInputStickerSetShortName | PlainMessage<TLInputStickerSetShortName> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetShortName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetAnimatedEmoji
 */
export class TLInputStickerSetAnimatedEmoji extends Message$1<TLInputStickerSetAnimatedEmoji> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetAnimatedEmoji>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetAnimatedEmoji";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetAnimatedEmoji {
    return new TLInputStickerSetAnimatedEmoji().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetAnimatedEmoji {
    return new TLInputStickerSetAnimatedEmoji().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetAnimatedEmoji {
    return new TLInputStickerSetAnimatedEmoji().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetAnimatedEmoji | PlainMessage<TLInputStickerSetAnimatedEmoji> | undefined, b: TLInputStickerSetAnimatedEmoji | PlainMessage<TLInputStickerSetAnimatedEmoji> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetAnimatedEmoji, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetDice
 */
export class TLInputStickerSetDice extends Message$1<TLInputStickerSetDice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetDice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetDice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetDice {
    return new TLInputStickerSetDice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetDice {
    return new TLInputStickerSetDice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetDice {
    return new TLInputStickerSetDice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetDice | PlainMessage<TLInputStickerSetDice> | undefined, b: TLInputStickerSetDice | PlainMessage<TLInputStickerSetDice> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetDice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetAnimatedEmojiAnimations
 */
export class TLInputStickerSetAnimatedEmojiAnimations extends Message$1<TLInputStickerSetAnimatedEmojiAnimations> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetAnimatedEmojiAnimations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetAnimatedEmojiAnimations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetAnimatedEmojiAnimations {
    return new TLInputStickerSetAnimatedEmojiAnimations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetAnimatedEmojiAnimations {
    return new TLInputStickerSetAnimatedEmojiAnimations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetAnimatedEmojiAnimations {
    return new TLInputStickerSetAnimatedEmojiAnimations().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetAnimatedEmojiAnimations | PlainMessage<TLInputStickerSetAnimatedEmojiAnimations> | undefined, b: TLInputStickerSetAnimatedEmojiAnimations | PlainMessage<TLInputStickerSetAnimatedEmojiAnimations> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetAnimatedEmojiAnimations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetPremiumGifts
 */
export class TLInputStickerSetPremiumGifts extends Message$1<TLInputStickerSetPremiumGifts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetPremiumGifts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetPremiumGifts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetPremiumGifts {
    return new TLInputStickerSetPremiumGifts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetPremiumGifts {
    return new TLInputStickerSetPremiumGifts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetPremiumGifts {
    return new TLInputStickerSetPremiumGifts().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetPremiumGifts | PlainMessage<TLInputStickerSetPremiumGifts> | undefined, b: TLInputStickerSetPremiumGifts | PlainMessage<TLInputStickerSetPremiumGifts> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetPremiumGifts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiGenericAnimations
 */
export class TLInputStickerSetEmojiGenericAnimations extends Message$1<TLInputStickerSetEmojiGenericAnimations> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetEmojiGenericAnimations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiGenericAnimations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetEmojiGenericAnimations {
    return new TLInputStickerSetEmojiGenericAnimations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiGenericAnimations {
    return new TLInputStickerSetEmojiGenericAnimations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiGenericAnimations {
    return new TLInputStickerSetEmojiGenericAnimations().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetEmojiGenericAnimations | PlainMessage<TLInputStickerSetEmojiGenericAnimations> | undefined, b: TLInputStickerSetEmojiGenericAnimations | PlainMessage<TLInputStickerSetEmojiGenericAnimations> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetEmojiGenericAnimations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiDefaultStatuses
 */
export class TLInputStickerSetEmojiDefaultStatuses extends Message$1<TLInputStickerSetEmojiDefaultStatuses> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetEmojiDefaultStatuses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiDefaultStatuses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetEmojiDefaultStatuses {
    return new TLInputStickerSetEmojiDefaultStatuses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiDefaultStatuses {
    return new TLInputStickerSetEmojiDefaultStatuses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiDefaultStatuses {
    return new TLInputStickerSetEmojiDefaultStatuses().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetEmojiDefaultStatuses | PlainMessage<TLInputStickerSetEmojiDefaultStatuses> | undefined, b: TLInputStickerSetEmojiDefaultStatuses | PlainMessage<TLInputStickerSetEmojiDefaultStatuses> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetEmojiDefaultStatuses, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiDefaultTopicIcons
 */
export class TLInputStickerSetEmojiDefaultTopicIcons extends Message$1<TLInputStickerSetEmojiDefaultTopicIcons> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet data2 = 1;
   */
  data2: InputStickerSet[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetEmojiDefaultTopicIcons>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetEmojiDefaultTopicIcons";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetEmojiDefaultTopicIcons {
    return new TLInputStickerSetEmojiDefaultTopicIcons().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiDefaultTopicIcons {
    return new TLInputStickerSetEmojiDefaultTopicIcons().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetEmojiDefaultTopicIcons {
    return new TLInputStickerSetEmojiDefaultTopicIcons().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetEmojiDefaultTopicIcons | PlainMessage<TLInputStickerSetEmojiDefaultTopicIcons> | undefined, b: TLInputStickerSetEmojiDefaultTopicIcons | PlainMessage<TLInputStickerSetEmojiDefaultTopicIcons> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetEmojiDefaultTopicIcons, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputStickerSetItem
 */
export class InputStickerSetItem extends Message$1<InputStickerSetItem> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument document = 3;
   */
  document: InputDocument[] = [];

  /**
   * @generated from field: string emoji = 4;
   */
  emoji = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MaskCoords mask_coords = 5;
   */
  maskCoords: MaskCoords[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue keywords = 6;
   */
  keywords: StringValue[] = [];

  constructor(data?: PartialMessage<InputStickerSetItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputStickerSetItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "document", kind: "message", T: InputDocument, repeated: true },
    { no: 4, name: "emoji", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "mask_coords", kind: "message", T: MaskCoords, repeated: true },
    { no: 6, name: "keywords", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputStickerSetItem {
    return new InputStickerSetItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputStickerSetItem {
    return new InputStickerSetItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputStickerSetItem {
    return new InputStickerSetItem().fromJsonString(jsonString, options);
  }

  static equals(a: InputStickerSetItem | PlainMessage<InputStickerSetItem> | undefined, b: InputStickerSetItem | PlainMessage<InputStickerSetItem> | undefined): boolean {
    return proto3.util.equals(InputStickerSetItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetItem
 */
export class TLInputStickerSetItem extends Message$1<TLInputStickerSetItem> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSetItem data2 = 1;
   */
  data2: InputStickerSetItem[] = [];

  constructor(data?: PartialMessage<TLInputStickerSetItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickerSetItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickerSetItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickerSetItem {
    return new TLInputStickerSetItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickerSetItem {
    return new TLInputStickerSetItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickerSetItem {
    return new TLInputStickerSetItem().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickerSetItem | PlainMessage<TLInputStickerSetItem> | undefined, b: TLInputStickerSetItem | PlainMessage<TLInputStickerSetItem> | undefined): boolean {
    return proto3.util.equals(TLInputStickerSetItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputStickeredMedia
 */
export class InputStickeredMedia extends Message$1<InputStickeredMedia> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPhoto id_INPUTPHOTO = 3;
   */
  idINPUTPHOTO: InputPhoto[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument id_INPUTDOCUMENT = 4;
   */
  idINPUTDOCUMENT: InputDocument[] = [];

  constructor(data?: PartialMessage<InputStickeredMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputStickeredMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id_INPUTPHOTO", kind: "message", T: InputPhoto, repeated: true },
    { no: 4, name: "id_INPUTDOCUMENT", kind: "message", T: InputDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputStickeredMedia {
    return new InputStickeredMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputStickeredMedia {
    return new InputStickeredMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputStickeredMedia {
    return new InputStickeredMedia().fromJsonString(jsonString, options);
  }

  static equals(a: InputStickeredMedia | PlainMessage<InputStickeredMedia> | undefined, b: InputStickeredMedia | PlainMessage<InputStickeredMedia> | undefined): boolean {
    return proto3.util.equals(InputStickeredMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickeredMediaPhoto
 */
export class TLInputStickeredMediaPhoto extends Message$1<TLInputStickeredMediaPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickeredMedia data2 = 1;
   */
  data2: InputStickeredMedia[] = [];

  constructor(data?: PartialMessage<TLInputStickeredMediaPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickeredMediaPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickeredMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickeredMediaPhoto {
    return new TLInputStickeredMediaPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickeredMediaPhoto {
    return new TLInputStickeredMediaPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickeredMediaPhoto {
    return new TLInputStickeredMediaPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickeredMediaPhoto | PlainMessage<TLInputStickeredMediaPhoto> | undefined, b: TLInputStickeredMediaPhoto | PlainMessage<TLInputStickeredMediaPhoto> | undefined): boolean {
    return proto3.util.equals(TLInputStickeredMediaPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStickeredMediaDocument
 */
export class TLInputStickeredMediaDocument extends Message$1<TLInputStickeredMediaDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickeredMedia data2 = 1;
   */
  data2: InputStickeredMedia[] = [];

  constructor(data?: PartialMessage<TLInputStickeredMediaDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStickeredMediaDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStickeredMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStickeredMediaDocument {
    return new TLInputStickeredMediaDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStickeredMediaDocument {
    return new TLInputStickeredMediaDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStickeredMediaDocument {
    return new TLInputStickeredMediaDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStickeredMediaDocument | PlainMessage<TLInputStickeredMediaDocument> | undefined, b: TLInputStickeredMediaDocument | PlainMessage<TLInputStickeredMediaDocument> | undefined): boolean {
    return proto3.util.equals(TLInputStickeredMediaDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputStorePaymentPurpose
 */
export class InputStorePaymentPurpose extends Message$1<InputStorePaymentPurpose> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool restore = 3;
   */
  restore = false;

  /**
   * @generated from field: bool upgrade = 4;
   */
  upgrade = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id = 5;
   */
  userId: InputUser[] = [];

  /**
   * @generated from field: string currency = 6;
   */
  currency = "";

  /**
   * @generated from field: int64 amount = 7;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<InputStorePaymentPurpose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputStorePaymentPurpose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "restore", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "upgrade", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_id", kind: "message", T: InputUser, repeated: true },
    { no: 6, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputStorePaymentPurpose {
    return new InputStorePaymentPurpose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputStorePaymentPurpose {
    return new InputStorePaymentPurpose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputStorePaymentPurpose {
    return new InputStorePaymentPurpose().fromJsonString(jsonString, options);
  }

  static equals(a: InputStorePaymentPurpose | PlainMessage<InputStorePaymentPurpose> | undefined, b: InputStorePaymentPurpose | PlainMessage<InputStorePaymentPurpose> | undefined): boolean {
    return proto3.util.equals(InputStorePaymentPurpose, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStorePaymentPremiumSubscription
 */
export class TLInputStorePaymentPremiumSubscription extends Message$1<TLInputStorePaymentPremiumSubscription> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStorePaymentPurpose data2 = 1;
   */
  data2: InputStorePaymentPurpose[] = [];

  constructor(data?: PartialMessage<TLInputStorePaymentPremiumSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStorePaymentPremiumSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStorePaymentPurpose, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStorePaymentPremiumSubscription {
    return new TLInputStorePaymentPremiumSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStorePaymentPremiumSubscription {
    return new TLInputStorePaymentPremiumSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStorePaymentPremiumSubscription {
    return new TLInputStorePaymentPremiumSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStorePaymentPremiumSubscription | PlainMessage<TLInputStorePaymentPremiumSubscription> | undefined, b: TLInputStorePaymentPremiumSubscription | PlainMessage<TLInputStorePaymentPremiumSubscription> | undefined): boolean {
    return proto3.util.equals(TLInputStorePaymentPremiumSubscription, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputStorePaymentGiftPremium
 */
export class TLInputStorePaymentGiftPremium extends Message$1<TLInputStorePaymentGiftPremium> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStorePaymentPurpose data2 = 1;
   */
  data2: InputStorePaymentPurpose[] = [];

  constructor(data?: PartialMessage<TLInputStorePaymentGiftPremium>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputStorePaymentGiftPremium";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputStorePaymentPurpose, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputStorePaymentGiftPremium {
    return new TLInputStorePaymentGiftPremium().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputStorePaymentGiftPremium {
    return new TLInputStorePaymentGiftPremium().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputStorePaymentGiftPremium {
    return new TLInputStorePaymentGiftPremium().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputStorePaymentGiftPremium | PlainMessage<TLInputStorePaymentGiftPremium> | undefined, b: TLInputStorePaymentGiftPremium | PlainMessage<TLInputStorePaymentGiftPremium> | undefined): boolean {
    return proto3.util.equals(TLInputStorePaymentGiftPremium, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputTheme
 */
export class InputTheme extends Message$1<InputTheme> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string slug = 5;
   */
  slug = "";

  constructor(data?: PartialMessage<InputTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputTheme {
    return new InputTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputTheme {
    return new InputTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputTheme {
    return new InputTheme().fromJsonString(jsonString, options);
  }

  static equals(a: InputTheme | PlainMessage<InputTheme> | undefined, b: InputTheme | PlainMessage<InputTheme> | undefined): boolean {
    return proto3.util.equals(InputTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputTheme
 */
export class TLInputTheme extends Message$1<TLInputTheme> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputTheme data2 = 1;
   */
  data2: InputTheme[] = [];

  constructor(data?: PartialMessage<TLInputTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputTheme {
    return new TLInputTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputTheme {
    return new TLInputTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputTheme {
    return new TLInputTheme().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputTheme | PlainMessage<TLInputTheme> | undefined, b: TLInputTheme | PlainMessage<TLInputTheme> | undefined): boolean {
    return proto3.util.equals(TLInputTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputThemeSlug
 */
export class TLInputThemeSlug extends Message$1<TLInputThemeSlug> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputTheme data2 = 1;
   */
  data2: InputTheme[] = [];

  constructor(data?: PartialMessage<TLInputThemeSlug>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputThemeSlug";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputTheme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputThemeSlug {
    return new TLInputThemeSlug().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputThemeSlug {
    return new TLInputThemeSlug().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputThemeSlug {
    return new TLInputThemeSlug().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputThemeSlug | PlainMessage<TLInputThemeSlug> | undefined, b: TLInputThemeSlug | PlainMessage<TLInputThemeSlug> | undefined): boolean {
    return proto3.util.equals(TLInputThemeSlug, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputThemeSettings
 */
export class InputThemeSettings extends Message$1<InputThemeSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool message_colors_animated = 3;
   */
  messageColorsAnimated = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme base_theme = 4;
   */
  baseTheme: BaseTheme[] = [];

  /**
   * @generated from field: int32 accent_color = 5;
   */
  accentColor = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value outbox_accent_color = 6;
   */
  outboxAccentColor: Int32Value[] = [];

  /**
   * @generated from field: int32 message_colors = 7;
   */
  messageColors = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWallPaper wallpaper = 8;
   */
  wallpaper: InputWallPaper[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaperSettings wallpaper_settings = 9;
   */
  wallpaperSettings: WallPaperSettings[] = [];

  constructor(data?: PartialMessage<InputThemeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputThemeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message_colors_animated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "base_theme", kind: "message", T: BaseTheme, repeated: true },
    { no: 5, name: "accent_color", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "outbox_accent_color", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "message_colors", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "wallpaper", kind: "message", T: InputWallPaper, repeated: true },
    { no: 9, name: "wallpaper_settings", kind: "message", T: WallPaperSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputThemeSettings {
    return new InputThemeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputThemeSettings {
    return new InputThemeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputThemeSettings {
    return new InputThemeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: InputThemeSettings | PlainMessage<InputThemeSettings> | undefined, b: InputThemeSettings | PlainMessage<InputThemeSettings> | undefined): boolean {
    return proto3.util.equals(InputThemeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputThemeSettings
 */
export class TLInputThemeSettings extends Message$1<TLInputThemeSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputThemeSettings data2 = 1;
   */
  data2: InputThemeSettings[] = [];

  constructor(data?: PartialMessage<TLInputThemeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputThemeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputThemeSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputThemeSettings {
    return new TLInputThemeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputThemeSettings {
    return new TLInputThemeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputThemeSettings {
    return new TLInputThemeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputThemeSettings | PlainMessage<TLInputThemeSettings> | undefined, b: TLInputThemeSettings | PlainMessage<TLInputThemeSettings> | undefined): boolean {
    return proto3.util.equals(TLInputThemeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputUser
 */
export class InputUser extends Message$1<InputUser> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputPeer peer = 5;
   */
  peer: InputPeer[] = [];

  /**
   * @generated from field: int32 msg_id = 6;
   */
  msgId = 0;

  constructor(data?: PartialMessage<InputUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "peer", kind: "message", T: InputPeer, repeated: true },
    { no: 6, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputUser {
    return new InputUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputUser {
    return new InputUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputUser {
    return new InputUser().fromJsonString(jsonString, options);
  }

  static equals(a: InputUser | PlainMessage<InputUser> | undefined, b: InputUser | PlainMessage<InputUser> | undefined): boolean {
    return proto3.util.equals(InputUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputUserEmpty
 */
export class TLInputUserEmpty extends Message$1<TLInputUserEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser data2 = 1;
   */
  data2: InputUser[] = [];

  constructor(data?: PartialMessage<TLInputUserEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputUserEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputUserEmpty {
    return new TLInputUserEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputUserEmpty {
    return new TLInputUserEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputUserEmpty {
    return new TLInputUserEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputUserEmpty | PlainMessage<TLInputUserEmpty> | undefined, b: TLInputUserEmpty | PlainMessage<TLInputUserEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputUserEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputUserSelf
 */
export class TLInputUserSelf extends Message$1<TLInputUserSelf> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser data2 = 1;
   */
  data2: InputUser[] = [];

  constructor(data?: PartialMessage<TLInputUserSelf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputUserSelf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputUserSelf {
    return new TLInputUserSelf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputUserSelf {
    return new TLInputUserSelf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputUserSelf {
    return new TLInputUserSelf().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputUserSelf | PlainMessage<TLInputUserSelf> | undefined, b: TLInputUserSelf | PlainMessage<TLInputUserSelf> | undefined): boolean {
    return proto3.util.equals(TLInputUserSelf, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputUser
 */
export class TLInputUser extends Message$1<TLInputUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser data2 = 1;
   */
  data2: InputUser[] = [];

  constructor(data?: PartialMessage<TLInputUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputUser {
    return new TLInputUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputUser {
    return new TLInputUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputUser {
    return new TLInputUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputUser | PlainMessage<TLInputUser> | undefined, b: TLInputUser | PlainMessage<TLInputUser> | undefined): boolean {
    return proto3.util.equals(TLInputUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputUserFromMessage
 */
export class TLInputUserFromMessage extends Message$1<TLInputUserFromMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser data2 = 1;
   */
  data2: InputUser[] = [];

  constructor(data?: PartialMessage<TLInputUserFromMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputUserFromMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputUserFromMessage {
    return new TLInputUserFromMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputUserFromMessage {
    return new TLInputUserFromMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputUserFromMessage {
    return new TLInputUserFromMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputUserFromMessage | PlainMessage<TLInputUserFromMessage> | undefined, b: TLInputUserFromMessage | PlainMessage<TLInputUserFromMessage> | undefined): boolean {
    return proto3.util.equals(TLInputUserFromMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputWallPaper
 */
export class InputWallPaper extends Message$1<InputWallPaper> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string slug = 5;
   */
  slug = "";

  constructor(data?: PartialMessage<InputWallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputWallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputWallPaper {
    return new InputWallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputWallPaper {
    return new InputWallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputWallPaper {
    return new InputWallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: InputWallPaper | PlainMessage<InputWallPaper> | undefined, b: InputWallPaper | PlainMessage<InputWallPaper> | undefined): boolean {
    return proto3.util.equals(InputWallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaper
 */
export class TLInputWallPaper extends Message$1<TLInputWallPaper> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWallPaper data2 = 1;
   */
  data2: InputWallPaper[] = [];

  constructor(data?: PartialMessage<TLInputWallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWallPaper {
    return new TLInputWallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWallPaper {
    return new TLInputWallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWallPaper {
    return new TLInputWallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWallPaper | PlainMessage<TLInputWallPaper> | undefined, b: TLInputWallPaper | PlainMessage<TLInputWallPaper> | undefined): boolean {
    return proto3.util.equals(TLInputWallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaperSlug
 */
export class TLInputWallPaperSlug extends Message$1<TLInputWallPaperSlug> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWallPaper data2 = 1;
   */
  data2: InputWallPaper[] = [];

  constructor(data?: PartialMessage<TLInputWallPaperSlug>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaperSlug";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWallPaperSlug {
    return new TLInputWallPaperSlug().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWallPaperSlug {
    return new TLInputWallPaperSlug().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWallPaperSlug {
    return new TLInputWallPaperSlug().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWallPaperSlug | PlainMessage<TLInputWallPaperSlug> | undefined, b: TLInputWallPaperSlug | PlainMessage<TLInputWallPaperSlug> | undefined): boolean {
    return proto3.util.equals(TLInputWallPaperSlug, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaperNoFile
 */
export class TLInputWallPaperNoFile extends Message$1<TLInputWallPaperNoFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWallPaper data2 = 1;
   */
  data2: InputWallPaper[] = [];

  constructor(data?: PartialMessage<TLInputWallPaperNoFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWallPaperNoFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWallPaperNoFile {
    return new TLInputWallPaperNoFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWallPaperNoFile {
    return new TLInputWallPaperNoFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWallPaperNoFile {
    return new TLInputWallPaperNoFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWallPaperNoFile | PlainMessage<TLInputWallPaperNoFile> | undefined, b: TLInputWallPaperNoFile | PlainMessage<TLInputWallPaperNoFile> | undefined): boolean {
    return proto3.util.equals(TLInputWallPaperNoFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputWebDocument
 */
export class InputWebDocument extends Message$1<InputWebDocument> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int32 size2 = 4;
   */
  size2 = 0;

  /**
   * @generated from field: string mime_type = 5;
   */
  mimeType = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute attributes = 6;
   */
  attributes: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<InputWebDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputWebDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "attributes", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputWebDocument {
    return new InputWebDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputWebDocument {
    return new InputWebDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputWebDocument {
    return new InputWebDocument().fromJsonString(jsonString, options);
  }

  static equals(a: InputWebDocument | PlainMessage<InputWebDocument> | undefined, b: InputWebDocument | PlainMessage<InputWebDocument> | undefined): boolean {
    return proto3.util.equals(InputWebDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWebDocument
 */
export class TLInputWebDocument extends Message$1<TLInputWebDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebDocument data2 = 1;
   */
  data2: InputWebDocument[] = [];

  constructor(data?: PartialMessage<TLInputWebDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWebDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWebDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWebDocument {
    return new TLInputWebDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWebDocument {
    return new TLInputWebDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWebDocument {
    return new TLInputWebDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWebDocument | PlainMessage<TLInputWebDocument> | undefined, b: TLInputWebDocument | PlainMessage<TLInputWebDocument> | undefined): boolean {
    return proto3.util.equals(TLInputWebDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.InputWebFileLocation
 */
export class InputWebFileLocation extends Message$1<InputWebFileLocation> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGeoPoint geo_point = 5;
   */
  geoPoint: InputGeoPoint[] = [];

  /**
   * @generated from field: int32 w = 6;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 7;
   */
  h = 0;

  /**
   * @generated from field: int32 zoom = 8;
   */
  zoom = 0;

  /**
   * @generated from field: int32 scale = 9;
   */
  scale = 0;

  /**
   * @generated from field: bool small = 10;
   */
  small = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputDocument document = 11;
   */
  document: InputDocument[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 12;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue performer = 13;
   */
  performer: StringValue[] = [];

  constructor(data?: PartialMessage<InputWebFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.InputWebFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "geo_point", kind: "message", T: InputGeoPoint, repeated: true },
    { no: 6, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "zoom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "scale", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "small", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "document", kind: "message", T: InputDocument, repeated: true },
    { no: 12, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 13, name: "performer", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputWebFileLocation {
    return new InputWebFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputWebFileLocation {
    return new InputWebFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputWebFileLocation {
    return new InputWebFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: InputWebFileLocation | PlainMessage<InputWebFileLocation> | undefined, b: InputWebFileLocation | PlainMessage<InputWebFileLocation> | undefined): boolean {
    return proto3.util.equals(InputWebFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileLocation
 */
export class TLInputWebFileLocation extends Message$1<TLInputWebFileLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebFileLocation data2 = 1;
   */
  data2: InputWebFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputWebFileLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWebFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWebFileLocation {
    return new TLInputWebFileLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWebFileLocation {
    return new TLInputWebFileLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWebFileLocation {
    return new TLInputWebFileLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWebFileLocation | PlainMessage<TLInputWebFileLocation> | undefined, b: TLInputWebFileLocation | PlainMessage<TLInputWebFileLocation> | undefined): boolean {
    return proto3.util.equals(TLInputWebFileLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileGeoPointLocation
 */
export class TLInputWebFileGeoPointLocation extends Message$1<TLInputWebFileGeoPointLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebFileLocation data2 = 1;
   */
  data2: InputWebFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputWebFileGeoPointLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileGeoPointLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWebFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWebFileGeoPointLocation {
    return new TLInputWebFileGeoPointLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWebFileGeoPointLocation {
    return new TLInputWebFileGeoPointLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWebFileGeoPointLocation {
    return new TLInputWebFileGeoPointLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWebFileGeoPointLocation | PlainMessage<TLInputWebFileGeoPointLocation> | undefined, b: TLInputWebFileGeoPointLocation | PlainMessage<TLInputWebFileGeoPointLocation> | undefined): boolean {
    return proto3.util.equals(TLInputWebFileGeoPointLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileAudioAlbumThumbLocation
 */
export class TLInputWebFileAudioAlbumThumbLocation extends Message$1<TLInputWebFileAudioAlbumThumbLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputWebFileLocation data2 = 1;
   */
  data2: InputWebFileLocation[] = [];

  constructor(data?: PartialMessage<TLInputWebFileAudioAlbumThumbLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputWebFileAudioAlbumThumbLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: InputWebFileLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputWebFileAudioAlbumThumbLocation {
    return new TLInputWebFileAudioAlbumThumbLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputWebFileAudioAlbumThumbLocation {
    return new TLInputWebFileAudioAlbumThumbLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputWebFileAudioAlbumThumbLocation {
    return new TLInputWebFileAudioAlbumThumbLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputWebFileAudioAlbumThumbLocation | PlainMessage<TLInputWebFileAudioAlbumThumbLocation> | undefined, b: TLInputWebFileAudioAlbumThumbLocation | PlainMessage<TLInputWebFileAudioAlbumThumbLocation> | undefined): boolean {
    return proto3.util.equals(TLInputWebFileAudioAlbumThumbLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Invoice
 */
export class Invoice extends Message$1<Invoice> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool test = 3;
   */
  test = false;

  /**
   * @generated from field: bool name_requested = 4;
   */
  nameRequested = false;

  /**
   * @generated from field: bool phone_requested = 5;
   */
  phoneRequested = false;

  /**
   * @generated from field: bool email_requested = 6;
   */
  emailRequested = false;

  /**
   * @generated from field: bool shipping_address_requested = 7;
   */
  shippingAddressRequested = false;

  /**
   * @generated from field: bool flexible = 8;
   */
  flexible = false;

  /**
   * @generated from field: bool phone_to_provider = 9;
   */
  phoneToProvider = false;

  /**
   * @generated from field: bool email_to_provider = 10;
   */
  emailToProvider = false;

  /**
   * @generated from field: bool recurring = 11;
   */
  recurring = false;

  /**
   * @generated from field: string currency = 12;
   */
  currency = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LabeledPrice prices = 13;
   */
  prices: LabeledPrice[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value max_tip_amount = 14;
   */
  maxTipAmount: Int64Value[] = [];

  /**
   * @generated from field: int64 suggested_tip_amounts = 15;
   */
  suggestedTipAmounts = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.StringValue terms_url = 16;
   */
  termsUrl: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue recurring_terms_url = 17;
   */
  recurringTermsUrl: StringValue[] = [];

  constructor(data?: PartialMessage<Invoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Invoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "test", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "phone_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "email_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "shipping_address_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "flexible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "phone_to_provider", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "email_to_provider", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "recurring", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "prices", kind: "message", T: LabeledPrice, repeated: true },
    { no: 14, name: "max_tip_amount", kind: "message", T: Int64Value, repeated: true },
    { no: 15, name: "suggested_tip_amounts", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "terms_url", kind: "message", T: StringValue, repeated: true },
    { no: 17, name: "recurring_terms_url", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invoice {
    return new Invoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invoice {
    return new Invoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invoice {
    return new Invoice().fromJsonString(jsonString, options);
  }

  static equals(a: Invoice | PlainMessage<Invoice> | undefined, b: Invoice | PlainMessage<Invoice> | undefined): boolean {
    return proto3.util.equals(Invoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInvoice
 */
export class TLInvoice extends Message$1<TLInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Invoice data2 = 1;
   */
  data2: Invoice[] = [];

  constructor(data?: PartialMessage<TLInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Invoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInvoice {
    return new TLInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInvoice {
    return new TLInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInvoice {
    return new TLInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInvoice | PlainMessage<TLInvoice> | undefined, b: TLInvoice | PlainMessage<TLInvoice> | undefined): boolean {
    return proto3.util.equals(TLInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.JSONObjectValue
 */
export class JSONObjectValue extends Message$1<JSONObjectValue> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue value = 4;
   */
  value: JSONValue[] = [];

  constructor(data?: PartialMessage<JSONObjectValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.JSONObjectValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONObjectValue {
    return new JSONObjectValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONObjectValue {
    return new JSONObjectValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONObjectValue {
    return new JSONObjectValue().fromJsonString(jsonString, options);
  }

  static equals(a: JSONObjectValue | PlainMessage<JSONObjectValue> | undefined, b: JSONObjectValue | PlainMessage<JSONObjectValue> | undefined): boolean {
    return proto3.util.equals(JSONObjectValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonObjectValue
 */
export class TLJsonObjectValue extends Message$1<TLJsonObjectValue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONObjectValue data2 = 1;
   */
  data2: JSONObjectValue[] = [];

  constructor(data?: PartialMessage<TLJsonObjectValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonObjectValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONObjectValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonObjectValue {
    return new TLJsonObjectValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonObjectValue {
    return new TLJsonObjectValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonObjectValue {
    return new TLJsonObjectValue().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonObjectValue | PlainMessage<TLJsonObjectValue> | undefined, b: TLJsonObjectValue | PlainMessage<TLJsonObjectValue> | undefined): boolean {
    return proto3.util.equals(TLJsonObjectValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.JSONValue
 */
export class JSONValue extends Message$1<JSONValue> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool value_BOOL = 3;
   */
  valueBOOL: Bool[] = [];

  /**
   * @generated from field: float value_FLOAT64 = 4;
   */
  valueFLOAT64 = 0;

  /**
   * @generated from field: string value_STRING = 5;
   */
  valueSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue value_VECTORJSONVALUE = 6;
   */
  valueVECTORJSONVALUE: JSONValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONObjectValue value_VECTORJSONOBJECTVALUE = 7;
   */
  valueVECTORJSONOBJECTVALUE: JSONObjectValue[] = [];

  constructor(data?: PartialMessage<JSONValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.JSONValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "value_BOOL", kind: "message", T: Bool, repeated: true },
    { no: 4, name: "value_FLOAT64", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "value_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "value_VECTORJSONVALUE", kind: "message", T: JSONValue, repeated: true },
    { no: 7, name: "value_VECTORJSONOBJECTVALUE", kind: "message", T: JSONObjectValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONValue {
    return new JSONValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONValue {
    return new JSONValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONValue {
    return new JSONValue().fromJsonString(jsonString, options);
  }

  static equals(a: JSONValue | PlainMessage<JSONValue> | undefined, b: JSONValue | PlainMessage<JSONValue> | undefined): boolean {
    return proto3.util.equals(JSONValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonNull
 */
export class TLJsonNull extends Message$1<TLJsonNull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonNull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonNull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonNull {
    return new TLJsonNull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonNull {
    return new TLJsonNull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonNull {
    return new TLJsonNull().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonNull | PlainMessage<TLJsonNull> | undefined, b: TLJsonNull | PlainMessage<TLJsonNull> | undefined): boolean {
    return proto3.util.equals(TLJsonNull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonBool
 */
export class TLJsonBool extends Message$1<TLJsonBool> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonBool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonBool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonBool {
    return new TLJsonBool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonBool {
    return new TLJsonBool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonBool {
    return new TLJsonBool().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonBool | PlainMessage<TLJsonBool> | undefined, b: TLJsonBool | PlainMessage<TLJsonBool> | undefined): boolean {
    return proto3.util.equals(TLJsonBool, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonNumber
 */
export class TLJsonNumber extends Message$1<TLJsonNumber> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonNumber {
    return new TLJsonNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonNumber {
    return new TLJsonNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonNumber {
    return new TLJsonNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonNumber | PlainMessage<TLJsonNumber> | undefined, b: TLJsonNumber | PlainMessage<TLJsonNumber> | undefined): boolean {
    return proto3.util.equals(TLJsonNumber, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonString
 */
export class TLJsonString extends Message$1<TLJsonString> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonString {
    return new TLJsonString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonString {
    return new TLJsonString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonString {
    return new TLJsonString().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonString | PlainMessage<TLJsonString> | undefined, b: TLJsonString | PlainMessage<TLJsonString> | undefined): boolean {
    return proto3.util.equals(TLJsonString, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonArray
 */
export class TLJsonArray extends Message$1<TLJsonArray> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonArray {
    return new TLJsonArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonArray {
    return new TLJsonArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonArray {
    return new TLJsonArray().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonArray | PlainMessage<TLJsonArray> | undefined, b: TLJsonArray | PlainMessage<TLJsonArray> | undefined): boolean {
    return proto3.util.equals(TLJsonArray, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLJsonObject
 */
export class TLJsonObject extends Message$1<TLJsonObject> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue data2 = 1;
   */
  data2: JSONValue[] = [];

  constructor(data?: PartialMessage<TLJsonObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLJsonObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLJsonObject {
    return new TLJsonObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLJsonObject {
    return new TLJsonObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLJsonObject {
    return new TLJsonObject().fromJsonString(jsonString, options);
  }

  static equals(a: TLJsonObject | PlainMessage<TLJsonObject> | undefined, b: TLJsonObject | PlainMessage<TLJsonObject> | undefined): boolean {
    return proto3.util.equals(TLJsonObject, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.KeyboardButton
 */
export class KeyboardButton extends Message$1<KeyboardButton> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: bool requires_password = 5;
   */
  requiresPassword = false;

  /**
   * @generated from field: bytes data = 6;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bool same_peer = 7;
   */
  samePeer = false;

  /**
   * @generated from field: string query = 8;
   */
  query = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType peer_types = 9;
   */
  peerTypes: InlineQueryPeerType[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue fwd_text = 10;
   */
  fwdText: StringValue[] = [];

  /**
   * @generated from field: int32 button_id = 11;
   */
  buttonId = 0;

  /**
   * @generated from field: bool request_write_access = 12;
   */
  requestWriteAccess = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser bot = 13;
   */
  bot: InputUser[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool quiz = 14;
   */
  quiz: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id_INPUTUSER = 15;
   */
  userIdINPUTUSER: InputUser[] = [];

  /**
   * @generated from field: int64 user_id_INT64 = 16;
   */
  userIdINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RequestPeerType peer_type = 17;
   */
  peerType: RequestPeerType[] = [];

  constructor(data?: PartialMessage<KeyboardButton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.KeyboardButton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "requires_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "same_peer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "peer_types", kind: "message", T: InlineQueryPeerType, repeated: true },
    { no: 10, name: "fwd_text", kind: "message", T: StringValue, repeated: true },
    { no: 11, name: "button_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "request_write_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "bot", kind: "message", T: InputUser, repeated: true },
    { no: 14, name: "quiz", kind: "message", T: Bool, repeated: true },
    { no: 15, name: "user_id_INPUTUSER", kind: "message", T: InputUser, repeated: true },
    { no: 16, name: "user_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "peer_type", kind: "message", T: RequestPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyboardButton {
    return new KeyboardButton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyboardButton {
    return new KeyboardButton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyboardButton {
    return new KeyboardButton().fromJsonString(jsonString, options);
  }

  static equals(a: KeyboardButton | PlainMessage<KeyboardButton> | undefined, b: KeyboardButton | PlainMessage<KeyboardButton> | undefined): boolean {
    return proto3.util.equals(KeyboardButton, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButton
 */
export class TLKeyboardButton extends Message$1<TLKeyboardButton> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButton {
    return new TLKeyboardButton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButton {
    return new TLKeyboardButton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButton {
    return new TLKeyboardButton().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButton | PlainMessage<TLKeyboardButton> | undefined, b: TLKeyboardButton | PlainMessage<TLKeyboardButton> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButton, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUrl
 */
export class TLKeyboardButtonUrl extends Message$1<TLKeyboardButtonUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonUrl {
    return new TLKeyboardButtonUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonUrl {
    return new TLKeyboardButtonUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonUrl {
    return new TLKeyboardButtonUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonUrl | PlainMessage<TLKeyboardButtonUrl> | undefined, b: TLKeyboardButtonUrl | PlainMessage<TLKeyboardButtonUrl> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonCallback
 */
export class TLKeyboardButtonCallback extends Message$1<TLKeyboardButtonCallback> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonCallback {
    return new TLKeyboardButtonCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonCallback {
    return new TLKeyboardButtonCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonCallback {
    return new TLKeyboardButtonCallback().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonCallback | PlainMessage<TLKeyboardButtonCallback> | undefined, b: TLKeyboardButtonCallback | PlainMessage<TLKeyboardButtonCallback> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonCallback, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPhone
 */
export class TLKeyboardButtonRequestPhone extends Message$1<TLKeyboardButtonRequestPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonRequestPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonRequestPhone {
    return new TLKeyboardButtonRequestPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPhone {
    return new TLKeyboardButtonRequestPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPhone {
    return new TLKeyboardButtonRequestPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonRequestPhone | PlainMessage<TLKeyboardButtonRequestPhone> | undefined, b: TLKeyboardButtonRequestPhone | PlainMessage<TLKeyboardButtonRequestPhone> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonRequestPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestGeoLocation
 */
export class TLKeyboardButtonRequestGeoLocation extends Message$1<TLKeyboardButtonRequestGeoLocation> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonRequestGeoLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestGeoLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonRequestGeoLocation {
    return new TLKeyboardButtonRequestGeoLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestGeoLocation {
    return new TLKeyboardButtonRequestGeoLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestGeoLocation {
    return new TLKeyboardButtonRequestGeoLocation().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonRequestGeoLocation | PlainMessage<TLKeyboardButtonRequestGeoLocation> | undefined, b: TLKeyboardButtonRequestGeoLocation | PlainMessage<TLKeyboardButtonRequestGeoLocation> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonRequestGeoLocation, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonSwitchInline
 */
export class TLKeyboardButtonSwitchInline extends Message$1<TLKeyboardButtonSwitchInline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonSwitchInline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonSwitchInline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonSwitchInline {
    return new TLKeyboardButtonSwitchInline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonSwitchInline {
    return new TLKeyboardButtonSwitchInline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonSwitchInline {
    return new TLKeyboardButtonSwitchInline().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonSwitchInline | PlainMessage<TLKeyboardButtonSwitchInline> | undefined, b: TLKeyboardButtonSwitchInline | PlainMessage<TLKeyboardButtonSwitchInline> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonSwitchInline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonGame
 */
export class TLKeyboardButtonGame extends Message$1<TLKeyboardButtonGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonGame {
    return new TLKeyboardButtonGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonGame {
    return new TLKeyboardButtonGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonGame {
    return new TLKeyboardButtonGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonGame | PlainMessage<TLKeyboardButtonGame> | undefined, b: TLKeyboardButtonGame | PlainMessage<TLKeyboardButtonGame> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonBuy
 */
export class TLKeyboardButtonBuy extends Message$1<TLKeyboardButtonBuy> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonBuy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonBuy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonBuy {
    return new TLKeyboardButtonBuy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonBuy {
    return new TLKeyboardButtonBuy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonBuy {
    return new TLKeyboardButtonBuy().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonBuy | PlainMessage<TLKeyboardButtonBuy> | undefined, b: TLKeyboardButtonBuy | PlainMessage<TLKeyboardButtonBuy> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonBuy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUrlAuth
 */
export class TLKeyboardButtonUrlAuth extends Message$1<TLKeyboardButtonUrlAuth> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonUrlAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUrlAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonUrlAuth {
    return new TLKeyboardButtonUrlAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonUrlAuth {
    return new TLKeyboardButtonUrlAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonUrlAuth {
    return new TLKeyboardButtonUrlAuth().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonUrlAuth | PlainMessage<TLKeyboardButtonUrlAuth> | undefined, b: TLKeyboardButtonUrlAuth | PlainMessage<TLKeyboardButtonUrlAuth> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonUrlAuth, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputKeyboardButtonUrlAuth
 */
export class TLInputKeyboardButtonUrlAuth extends Message$1<TLInputKeyboardButtonUrlAuth> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLInputKeyboardButtonUrlAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputKeyboardButtonUrlAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputKeyboardButtonUrlAuth {
    return new TLInputKeyboardButtonUrlAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputKeyboardButtonUrlAuth {
    return new TLInputKeyboardButtonUrlAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputKeyboardButtonUrlAuth {
    return new TLInputKeyboardButtonUrlAuth().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputKeyboardButtonUrlAuth | PlainMessage<TLInputKeyboardButtonUrlAuth> | undefined, b: TLInputKeyboardButtonUrlAuth | PlainMessage<TLInputKeyboardButtonUrlAuth> | undefined): boolean {
    return proto3.util.equals(TLInputKeyboardButtonUrlAuth, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPoll
 */
export class TLKeyboardButtonRequestPoll extends Message$1<TLKeyboardButtonRequestPoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonRequestPoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonRequestPoll {
    return new TLKeyboardButtonRequestPoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPoll {
    return new TLKeyboardButtonRequestPoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPoll {
    return new TLKeyboardButtonRequestPoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonRequestPoll | PlainMessage<TLKeyboardButtonRequestPoll> | undefined, b: TLKeyboardButtonRequestPoll | PlainMessage<TLKeyboardButtonRequestPoll> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonRequestPoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputKeyboardButtonUserProfile
 */
export class TLInputKeyboardButtonUserProfile extends Message$1<TLInputKeyboardButtonUserProfile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLInputKeyboardButtonUserProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputKeyboardButtonUserProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputKeyboardButtonUserProfile {
    return new TLInputKeyboardButtonUserProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputKeyboardButtonUserProfile {
    return new TLInputKeyboardButtonUserProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputKeyboardButtonUserProfile {
    return new TLInputKeyboardButtonUserProfile().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputKeyboardButtonUserProfile | PlainMessage<TLInputKeyboardButtonUserProfile> | undefined, b: TLInputKeyboardButtonUserProfile | PlainMessage<TLInputKeyboardButtonUserProfile> | undefined): boolean {
    return proto3.util.equals(TLInputKeyboardButtonUserProfile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUserProfile
 */
export class TLKeyboardButtonUserProfile extends Message$1<TLKeyboardButtonUserProfile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonUserProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonUserProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonUserProfile {
    return new TLKeyboardButtonUserProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonUserProfile {
    return new TLKeyboardButtonUserProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonUserProfile {
    return new TLKeyboardButtonUserProfile().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonUserProfile | PlainMessage<TLKeyboardButtonUserProfile> | undefined, b: TLKeyboardButtonUserProfile | PlainMessage<TLKeyboardButtonUserProfile> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonUserProfile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonWebView
 */
export class TLKeyboardButtonWebView extends Message$1<TLKeyboardButtonWebView> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonWebView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonWebView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonWebView {
    return new TLKeyboardButtonWebView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonWebView {
    return new TLKeyboardButtonWebView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonWebView {
    return new TLKeyboardButtonWebView().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonWebView | PlainMessage<TLKeyboardButtonWebView> | undefined, b: TLKeyboardButtonWebView | PlainMessage<TLKeyboardButtonWebView> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonWebView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonSimpleWebView
 */
export class TLKeyboardButtonSimpleWebView extends Message$1<TLKeyboardButtonSimpleWebView> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonSimpleWebView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonSimpleWebView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonSimpleWebView {
    return new TLKeyboardButtonSimpleWebView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonSimpleWebView {
    return new TLKeyboardButtonSimpleWebView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonSimpleWebView {
    return new TLKeyboardButtonSimpleWebView().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonSimpleWebView | PlainMessage<TLKeyboardButtonSimpleWebView> | undefined, b: TLKeyboardButtonSimpleWebView | PlainMessage<TLKeyboardButtonSimpleWebView> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonSimpleWebView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPeer
 */
export class TLKeyboardButtonRequestPeer extends Message$1<TLKeyboardButtonRequestPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton data2 = 1;
   */
  data2: KeyboardButton[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonRequestPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRequestPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonRequestPeer {
    return new TLKeyboardButtonRequestPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPeer {
    return new TLKeyboardButtonRequestPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonRequestPeer {
    return new TLKeyboardButtonRequestPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonRequestPeer | PlainMessage<TLKeyboardButtonRequestPeer> | undefined, b: TLKeyboardButtonRequestPeer | PlainMessage<TLKeyboardButtonRequestPeer> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonRequestPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.KeyboardButtonRow
 */
export class KeyboardButtonRow extends Message$1<KeyboardButtonRow> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButton buttons = 3;
   */
  buttons: KeyboardButton[] = [];

  constructor(data?: PartialMessage<KeyboardButtonRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.KeyboardButtonRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "buttons", kind: "message", T: KeyboardButton, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyboardButtonRow {
    return new KeyboardButtonRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyboardButtonRow {
    return new KeyboardButtonRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyboardButtonRow {
    return new KeyboardButtonRow().fromJsonString(jsonString, options);
  }

  static equals(a: KeyboardButtonRow | PlainMessage<KeyboardButtonRow> | undefined, b: KeyboardButtonRow | PlainMessage<KeyboardButtonRow> | undefined): boolean {
    return proto3.util.equals(KeyboardButtonRow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRow
 */
export class TLKeyboardButtonRow extends Message$1<TLKeyboardButtonRow> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButtonRow data2 = 1;
   */
  data2: KeyboardButtonRow[] = [];

  constructor(data?: PartialMessage<TLKeyboardButtonRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLKeyboardButtonRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: KeyboardButtonRow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLKeyboardButtonRow {
    return new TLKeyboardButtonRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLKeyboardButtonRow {
    return new TLKeyboardButtonRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLKeyboardButtonRow {
    return new TLKeyboardButtonRow().fromJsonString(jsonString, options);
  }

  static equals(a: TLKeyboardButtonRow | PlainMessage<TLKeyboardButtonRow> | undefined, b: TLKeyboardButtonRow | PlainMessage<TLKeyboardButtonRow> | undefined): boolean {
    return proto3.util.equals(TLKeyboardButtonRow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.LabeledPrice
 */
export class LabeledPrice extends Message$1<LabeledPrice> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * @generated from field: int64 amount = 4;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<LabeledPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.LabeledPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabeledPrice {
    return new LabeledPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabeledPrice {
    return new LabeledPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabeledPrice {
    return new LabeledPrice().fromJsonString(jsonString, options);
  }

  static equals(a: LabeledPrice | PlainMessage<LabeledPrice> | undefined, b: LabeledPrice | PlainMessage<LabeledPrice> | undefined): boolean {
    return proto3.util.equals(LabeledPrice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLabeledPrice
 */
export class TLLabeledPrice extends Message$1<TLLabeledPrice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LabeledPrice data2 = 1;
   */
  data2: LabeledPrice[] = [];

  constructor(data?: PartialMessage<TLLabeledPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLabeledPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LabeledPrice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLabeledPrice {
    return new TLLabeledPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLabeledPrice {
    return new TLLabeledPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLabeledPrice {
    return new TLLabeledPrice().fromJsonString(jsonString, options);
  }

  static equals(a: TLLabeledPrice | PlainMessage<TLLabeledPrice> | undefined, b: TLLabeledPrice | PlainMessage<TLLabeledPrice> | undefined): boolean {
    return proto3.util.equals(TLLabeledPrice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.LangPackDifference
 */
export class LangPackDifference extends Message$1<LangPackDifference> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string lang_code = 3;
   */
  langCode = "";

  /**
   * @generated from field: int32 from_version = 4;
   */
  fromVersion = 0;

  /**
   * @generated from field: int32 version = 5;
   */
  version = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackString strings = 6;
   */
  strings: LangPackString[] = [];

  constructor(data?: PartialMessage<LangPackDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.LangPackDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "from_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "strings", kind: "message", T: LangPackString, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LangPackDifference {
    return new LangPackDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LangPackDifference {
    return new LangPackDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LangPackDifference {
    return new LangPackDifference().fromJsonString(jsonString, options);
  }

  static equals(a: LangPackDifference | PlainMessage<LangPackDifference> | undefined, b: LangPackDifference | PlainMessage<LangPackDifference> | undefined): boolean {
    return proto3.util.equals(LangPackDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLangPackDifference
 */
export class TLLangPackDifference extends Message$1<TLLangPackDifference> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackDifference data2 = 1;
   */
  data2: LangPackDifference[] = [];

  constructor(data?: PartialMessage<TLLangPackDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLangPackDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LangPackDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLangPackDifference {
    return new TLLangPackDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLangPackDifference {
    return new TLLangPackDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLangPackDifference {
    return new TLLangPackDifference().fromJsonString(jsonString, options);
  }

  static equals(a: TLLangPackDifference | PlainMessage<TLLangPackDifference> | undefined, b: TLLangPackDifference | PlainMessage<TLLangPackDifference> | undefined): boolean {
    return proto3.util.equals(TLLangPackDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.LangPackLanguage
 */
export class LangPackLanguage extends Message$1<LangPackLanguage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool official = 3;
   */
  official = false;

  /**
   * @generated from field: bool rtl = 4;
   */
  rtl = false;

  /**
   * @generated from field: bool beta = 5;
   */
  beta = false;

  /**
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * @generated from field: string native_name = 7;
   */
  nativeName = "";

  /**
   * @generated from field: string lang_code = 8;
   */
  langCode = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue base_lang_code = 9;
   */
  baseLangCode: StringValue[] = [];

  /**
   * @generated from field: string plural_code = 10;
   */
  pluralCode = "";

  /**
   * @generated from field: int32 strings_count = 11;
   */
  stringsCount = 0;

  /**
   * @generated from field: int32 translated_count = 12;
   */
  translatedCount = 0;

  /**
   * @generated from field: string translations_url = 13;
   */
  translationsUrl = "";

  constructor(data?: PartialMessage<LangPackLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.LangPackLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "official", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "rtl", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "beta", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "native_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "base_lang_code", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "plural_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "strings_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "translated_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "translations_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LangPackLanguage {
    return new LangPackLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LangPackLanguage {
    return new LangPackLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LangPackLanguage {
    return new LangPackLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: LangPackLanguage | PlainMessage<LangPackLanguage> | undefined, b: LangPackLanguage | PlainMessage<LangPackLanguage> | undefined): boolean {
    return proto3.util.equals(LangPackLanguage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLangPackLanguage
 */
export class TLLangPackLanguage extends Message$1<TLLangPackLanguage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackLanguage data2 = 1;
   */
  data2: LangPackLanguage[] = [];

  constructor(data?: PartialMessage<TLLangPackLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLangPackLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LangPackLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLangPackLanguage {
    return new TLLangPackLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLangPackLanguage {
    return new TLLangPackLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLangPackLanguage {
    return new TLLangPackLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: TLLangPackLanguage | PlainMessage<TLLangPackLanguage> | undefined, b: TLLangPackLanguage | PlainMessage<TLLangPackLanguage> | undefined): boolean {
    return proto3.util.equals(TLLangPackLanguage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.LangPackString
 */
export class LangPackString extends Message$1<LangPackString> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue zero_value = 5;
   */
  zeroValue: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue one_value = 6;
   */
  oneValue: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue two_value = 7;
   */
  twoValue: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue few_value = 8;
   */
  fewValue: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue many_value = 9;
   */
  manyValue: StringValue[] = [];

  /**
   * @generated from field: string other_value = 10;
   */
  otherValue = "";

  constructor(data?: PartialMessage<LangPackString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.LangPackString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "zero_value", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "one_value", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "two_value", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "few_value", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "many_value", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "other_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LangPackString {
    return new LangPackString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LangPackString {
    return new LangPackString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LangPackString {
    return new LangPackString().fromJsonString(jsonString, options);
  }

  static equals(a: LangPackString | PlainMessage<LangPackString> | undefined, b: LangPackString | PlainMessage<LangPackString> | undefined): boolean {
    return proto3.util.equals(LangPackString, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLangPackString
 */
export class TLLangPackString extends Message$1<TLLangPackString> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackString data2 = 1;
   */
  data2: LangPackString[] = [];

  constructor(data?: PartialMessage<TLLangPackString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLangPackString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LangPackString, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLangPackString {
    return new TLLangPackString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLangPackString {
    return new TLLangPackString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLangPackString {
    return new TLLangPackString().fromJsonString(jsonString, options);
  }

  static equals(a: TLLangPackString | PlainMessage<TLLangPackString> | undefined, b: TLLangPackString | PlainMessage<TLLangPackString> | undefined): boolean {
    return proto3.util.equals(TLLangPackString, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLangPackStringPluralized
 */
export class TLLangPackStringPluralized extends Message$1<TLLangPackStringPluralized> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackString data2 = 1;
   */
  data2: LangPackString[] = [];

  constructor(data?: PartialMessage<TLLangPackStringPluralized>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLangPackStringPluralized";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LangPackString, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLangPackStringPluralized {
    return new TLLangPackStringPluralized().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLangPackStringPluralized {
    return new TLLangPackStringPluralized().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLangPackStringPluralized {
    return new TLLangPackStringPluralized().fromJsonString(jsonString, options);
  }

  static equals(a: TLLangPackStringPluralized | PlainMessage<TLLangPackStringPluralized> | undefined, b: TLLangPackStringPluralized | PlainMessage<TLLangPackStringPluralized> | undefined): boolean {
    return proto3.util.equals(TLLangPackStringPluralized, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLLangPackStringDeleted
 */
export class TLLangPackStringDeleted extends Message$1<TLLangPackStringDeleted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackString data2 = 1;
   */
  data2: LangPackString[] = [];

  constructor(data?: PartialMessage<TLLangPackStringDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLLangPackStringDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: LangPackString, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLLangPackStringDeleted {
    return new TLLangPackStringDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLLangPackStringDeleted {
    return new TLLangPackStringDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLLangPackStringDeleted {
    return new TLLangPackStringDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: TLLangPackStringDeleted | PlainMessage<TLLangPackStringDeleted> | undefined, b: TLLangPackStringDeleted | PlainMessage<TLLangPackStringDeleted> | undefined): boolean {
    return proto3.util.equals(TLLangPackStringDeleted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MaskCoords
 */
export class MaskCoords extends Message$1<MaskCoords> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 n = 3;
   */
  n = 0;

  /**
   * @generated from field: float x = 4;
   */
  x = 0;

  /**
   * @generated from field: float y = 5;
   */
  y = 0;

  /**
   * @generated from field: float zoom = 6;
   */
  zoom = 0;

  constructor(data?: PartialMessage<MaskCoords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MaskCoords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "n", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "zoom", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaskCoords {
    return new MaskCoords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaskCoords {
    return new MaskCoords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaskCoords {
    return new MaskCoords().fromJsonString(jsonString, options);
  }

  static equals(a: MaskCoords | PlainMessage<MaskCoords> | undefined, b: MaskCoords | PlainMessage<MaskCoords> | undefined): boolean {
    return proto3.util.equals(MaskCoords, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMaskCoords
 */
export class TLMaskCoords extends Message$1<TLMaskCoords> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MaskCoords data2 = 1;
   */
  data2: MaskCoords[] = [];

  constructor(data?: PartialMessage<TLMaskCoords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMaskCoords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MaskCoords, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMaskCoords {
    return new TLMaskCoords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMaskCoords {
    return new TLMaskCoords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMaskCoords {
    return new TLMaskCoords().fromJsonString(jsonString, options);
  }

  static equals(a: TLMaskCoords | PlainMessage<TLMaskCoords> | undefined, b: TLMaskCoords | PlainMessage<TLMaskCoords> | undefined): boolean {
    return proto3.util.equals(TLMaskCoords, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MediaArea
 */
export class MediaArea extends Message$1<MediaArea> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaAreaCoordinates coordinates = 3;
   */
  coordinates: MediaAreaCoordinates[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo = 4;
   */
  geo: GeoPoint[] = [];

  /**
   * @generated from field: string title = 5;
   */
  title = "";

  /**
   * @generated from field: string address = 6;
   */
  address = "";

  /**
   * @generated from field: string provider = 7;
   */
  provider = "";

  /**
   * @generated from field: string venue_id = 8;
   */
  venueId = "";

  /**
   * @generated from field: string venue_type = 9;
   */
  venueType = "";

  /**
   * @generated from field: int64 query_id = 10;
   */
  queryId = protoInt64.zero;

  /**
   * @generated from field: string result_id = 11;
   */
  resultId = "";

  /**
   * @generated from field: bool dark = 12;
   */
  dark = false;

  /**
   * @generated from field: bool flipped = 13;
   */
  flipped = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reaction = 14;
   */
  reaction: Reaction[] = [];

  constructor(data?: PartialMessage<MediaArea>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MediaArea";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "coordinates", kind: "message", T: MediaAreaCoordinates, repeated: true },
    { no: 4, name: "geo", kind: "message", T: GeoPoint, repeated: true },
    { no: 5, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "venue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "result_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "dark", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "flipped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "reaction", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaArea {
    return new MediaArea().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaArea {
    return new MediaArea().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaArea {
    return new MediaArea().fromJsonString(jsonString, options);
  }

  static equals(a: MediaArea | PlainMessage<MediaArea> | undefined, b: MediaArea | PlainMessage<MediaArea> | undefined): boolean {
    return proto3.util.equals(MediaArea, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaVenue
 */
export class TLMediaAreaVenue extends Message$1<TLMediaAreaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaArea data2 = 1;
   */
  data2: MediaArea[] = [];

  constructor(data?: PartialMessage<TLMediaAreaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MediaArea, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMediaAreaVenue {
    return new TLMediaAreaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMediaAreaVenue {
    return new TLMediaAreaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMediaAreaVenue {
    return new TLMediaAreaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLMediaAreaVenue | PlainMessage<TLMediaAreaVenue> | undefined, b: TLMediaAreaVenue | PlainMessage<TLMediaAreaVenue> | undefined): boolean {
    return proto3.util.equals(TLMediaAreaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMediaAreaVenue
 */
export class TLInputMediaAreaVenue extends Message$1<TLInputMediaAreaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaArea data2 = 1;
   */
  data2: MediaArea[] = [];

  constructor(data?: PartialMessage<TLInputMediaAreaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMediaAreaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MediaArea, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMediaAreaVenue {
    return new TLInputMediaAreaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMediaAreaVenue {
    return new TLInputMediaAreaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMediaAreaVenue {
    return new TLInputMediaAreaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMediaAreaVenue | PlainMessage<TLInputMediaAreaVenue> | undefined, b: TLInputMediaAreaVenue | PlainMessage<TLInputMediaAreaVenue> | undefined): boolean {
    return proto3.util.equals(TLInputMediaAreaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaGeoPoint
 */
export class TLMediaAreaGeoPoint extends Message$1<TLMediaAreaGeoPoint> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaArea data2 = 1;
   */
  data2: MediaArea[] = [];

  constructor(data?: PartialMessage<TLMediaAreaGeoPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaGeoPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MediaArea, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMediaAreaGeoPoint {
    return new TLMediaAreaGeoPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMediaAreaGeoPoint {
    return new TLMediaAreaGeoPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMediaAreaGeoPoint {
    return new TLMediaAreaGeoPoint().fromJsonString(jsonString, options);
  }

  static equals(a: TLMediaAreaGeoPoint | PlainMessage<TLMediaAreaGeoPoint> | undefined, b: TLMediaAreaGeoPoint | PlainMessage<TLMediaAreaGeoPoint> | undefined): boolean {
    return proto3.util.equals(TLMediaAreaGeoPoint, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaSuggestedReaction
 */
export class TLMediaAreaSuggestedReaction extends Message$1<TLMediaAreaSuggestedReaction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaArea data2 = 1;
   */
  data2: MediaArea[] = [];

  constructor(data?: PartialMessage<TLMediaAreaSuggestedReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaSuggestedReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MediaArea, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMediaAreaSuggestedReaction {
    return new TLMediaAreaSuggestedReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMediaAreaSuggestedReaction {
    return new TLMediaAreaSuggestedReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMediaAreaSuggestedReaction {
    return new TLMediaAreaSuggestedReaction().fromJsonString(jsonString, options);
  }

  static equals(a: TLMediaAreaSuggestedReaction | PlainMessage<TLMediaAreaSuggestedReaction> | undefined, b: TLMediaAreaSuggestedReaction | PlainMessage<TLMediaAreaSuggestedReaction> | undefined): boolean {
    return proto3.util.equals(TLMediaAreaSuggestedReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MediaAreaCoordinates
 */
export class MediaAreaCoordinates extends Message$1<MediaAreaCoordinates> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float x = 3;
   */
  x = 0;

  /**
   * @generated from field: float y = 4;
   */
  y = 0;

  /**
   * @generated from field: float w = 5;
   */
  w = 0;

  /**
   * @generated from field: float h = 6;
   */
  h = 0;

  /**
   * @generated from field: float rotation = 7;
   */
  rotation = 0;

  constructor(data?: PartialMessage<MediaAreaCoordinates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MediaAreaCoordinates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "w", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "h", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "rotation", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaAreaCoordinates {
    return new MediaAreaCoordinates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaAreaCoordinates {
    return new MediaAreaCoordinates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaAreaCoordinates {
    return new MediaAreaCoordinates().fromJsonString(jsonString, options);
  }

  static equals(a: MediaAreaCoordinates | PlainMessage<MediaAreaCoordinates> | undefined, b: MediaAreaCoordinates | PlainMessage<MediaAreaCoordinates> | undefined): boolean {
    return proto3.util.equals(MediaAreaCoordinates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaCoordinates
 */
export class TLMediaAreaCoordinates extends Message$1<TLMediaAreaCoordinates> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaAreaCoordinates data2 = 1;
   */
  data2: MediaAreaCoordinates[] = [];

  constructor(data?: PartialMessage<TLMediaAreaCoordinates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMediaAreaCoordinates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MediaAreaCoordinates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMediaAreaCoordinates {
    return new TLMediaAreaCoordinates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMediaAreaCoordinates {
    return new TLMediaAreaCoordinates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMediaAreaCoordinates {
    return new TLMediaAreaCoordinates().fromJsonString(jsonString, options);
  }

  static equals(a: TLMediaAreaCoordinates | PlainMessage<TLMediaAreaCoordinates> | undefined, b: TLMediaAreaCoordinates | PlainMessage<TLMediaAreaCoordinates> | undefined): boolean {
    return proto3.util.equals(TLMediaAreaCoordinates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer_id = 4;
   */
  peerId: Peer[] = [];

  /**
   * @generated from field: bool out = 5;
   */
  out = false;

  /**
   * @generated from field: bool mentioned = 6;
   */
  mentioned = false;

  /**
   * @generated from field: bool media_unread = 7;
   */
  mediaUnread = false;

  /**
   * @generated from field: bool silent = 8;
   */
  silent = false;

  /**
   * @generated from field: bool post = 9;
   */
  post = false;

  /**
   * @generated from field: bool from_scheduled = 10;
   */
  fromScheduled = false;

  /**
   * @generated from field: bool legacy = 11;
   */
  legacy = false;

  /**
   * @generated from field: bool edit_hide = 12;
   */
  editHide = false;

  /**
   * @generated from field: bool pinned = 13;
   */
  pinned = false;

  /**
   * @generated from field: bool noforwards = 14;
   */
  noforwards = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 15;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageFwdHeader fwd_from = 16;
   */
  fwdFrom: MessageFwdHeader[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value via_bot_id = 17;
   */
  viaBotId: Int64Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader reply_to = 18;
   */
  replyTo: MessageReplyHeader[] = [];

  /**
   * @generated from field: int32 date = 19;
   */
  date = 0;

  /**
   * @generated from field: string message = 20;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia media = 21;
   */
  media: MessageMedia[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup reply_markup = 22;
   */
  replyMarkup: ReplyMarkup[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 23;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value views = 24;
   */
  views: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value forwards = 25;
   */
  forwards: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplies replies = 26;
   */
  replies: MessageReplies[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value edit_date = 27;
   */
  editDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue post_author = 28;
   */
  postAuthor: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value grouped_id = 29;
   */
  groupedId: Int64Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReactions reactions = 30;
   */
  reactions: MessageReactions[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RestrictionReason restriction_reason = 31;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 32;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction action = 33;
   */
  action: MessageAction[] = [];

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "peer_id", kind: "message", T: Peer, repeated: true },
    { no: 5, name: "out", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "mentioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "media_unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "silent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "post", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "from_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "legacy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "edit_hide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "noforwards", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 16, name: "fwd_from", kind: "message", T: MessageFwdHeader, repeated: true },
    { no: 17, name: "via_bot_id", kind: "message", T: Int64Value, repeated: true },
    { no: 18, name: "reply_to", kind: "message", T: MessageReplyHeader, repeated: true },
    { no: 19, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "media", kind: "message", T: MessageMedia, repeated: true },
    { no: 22, name: "reply_markup", kind: "message", T: ReplyMarkup, repeated: true },
    { no: 23, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 24, name: "views", kind: "message", T: Int32Value, repeated: true },
    { no: 25, name: "forwards", kind: "message", T: Int32Value, repeated: true },
    { no: 26, name: "replies", kind: "message", T: MessageReplies, repeated: true },
    { no: 27, name: "edit_date", kind: "message", T: Int32Value, repeated: true },
    { no: 28, name: "post_author", kind: "message", T: StringValue, repeated: true },
    { no: 29, name: "grouped_id", kind: "message", T: Int64Value, repeated: true },
    { no: 30, name: "reactions", kind: "message", T: MessageReactions, repeated: true },
    { no: 31, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 32, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 33, name: "action", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEmpty
 */
export class TLMessageEmpty extends Message$1<TLMessageEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message data2 = 1;
   */
  data2: Message[] = [];

  constructor(data?: PartialMessage<TLMessageEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEmpty {
    return new TLMessageEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEmpty {
    return new TLMessageEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEmpty {
    return new TLMessageEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEmpty | PlainMessage<TLMessageEmpty> | undefined, b: TLMessageEmpty | PlainMessage<TLMessageEmpty> | undefined): boolean {
    return proto3.util.equals(TLMessageEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessage
 */
export class TLMessage extends Message$1<TLMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message data2 = 1;
   */
  data2: Message[] = [];

  constructor(data?: PartialMessage<TLMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessage {
    return new TLMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessage {
    return new TLMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessage {
    return new TLMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessage | PlainMessage<TLMessage> | undefined, b: TLMessage | PlainMessage<TLMessage> | undefined): boolean {
    return proto3.util.equals(TLMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageService
 */
export class TLMessageService extends Message$1<TLMessageService> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message data2 = 1;
   */
  data2: Message[] = [];

  constructor(data?: PartialMessage<TLMessageService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageService {
    return new TLMessageService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageService {
    return new TLMessageService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageService {
    return new TLMessageService().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageService | PlainMessage<TLMessageService> | undefined, b: TLMessageService | PlainMessage<TLMessageService> | undefined): boolean {
    return proto3.util.equals(TLMessageService, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageAction
 */
export class MessageAction extends Message$1<MessageAction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string title_STRING = 3;
   */
  titleSTRING = "";

  /**
   * @generated from field: int64 users = 4;
   */
  users = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 5;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: int64 user_id = 6;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 inviter_id = 7;
   */
  inviterId = protoInt64.zero;

  /**
   * @generated from field: int64 channel_id = 8;
   */
  channelId = protoInt64.zero;

  /**
   * @generated from field: int64 chat_id = 9;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: int64 game_id = 10;
   */
  gameId = protoInt64.zero;

  /**
   * @generated from field: int32 score = 11;
   */
  score = 0;

  /**
   * @generated from field: bool recurring_init = 12;
   */
  recurringInit = false;

  /**
   * @generated from field: bool recurring_used = 13;
   */
  recurringUsed = false;

  /**
   * @generated from field: string currency = 14;
   */
  currency = "";

  /**
   * @generated from field: int64 total_amount = 15;
   */
  totalAmount = protoInt64.zero;

  /**
   * @generated from field: bytes payload = 16;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo info = 17;
   */
  info: PaymentRequestedInfo[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue shipping_option_id = 18;
   */
  shippingOptionId: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentCharge charge = 19;
   */
  charge: PaymentCharge[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue invoice_slug = 20;
   */
  invoiceSlug: StringValue[] = [];

  /**
   * @generated from field: bool video = 21;
   */
  video = false;

  /**
   * @generated from field: int64 call_id = 22;
   */
  callId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason reason = 23;
   */
  reason: PhoneCallDiscardReason[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value duration = 24;
   */
  duration: Int32Value[] = [];

  /**
   * @generated from field: string message = 25;
   */
  message = "";

  /**
   * @generated from field: bool attach_menu = 26;
   */
  attachMenu = false;

  /**
   * @generated from field: bool from_request = 27;
   */
  fromRequest = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue domain_FLAGSTRING = 28;
   */
  domainFLAGSTRING: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotApp app = 29;
   */
  app: BotApp[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValue values = 30;
   */
  values: SecureValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureCredentialsEncrypted credentials = 31;
   */
  credentials: SecureCredentialsEncrypted[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType types = 32;
   */
  types: SecureValueType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 33;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer to_id = 34;
   */
  toId: Peer[] = [];

  /**
   * @generated from field: int32 distance = 35;
   */
  distance = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call = 36;
   */
  call: InputGroupCall[] = [];

  /**
   * @generated from field: int32 period = 37;
   */
  period = 0;

  /**
   * @generated from field: repeated google.protobuf.Int64Value auto_setting_from = 38;
   */
  autoSettingFrom: Int64Value[] = [];

  /**
   * @generated from field: int32 schedule_date = 39;
   */
  scheduleDate = 0;

  /**
   * @generated from field: string emoticon = 40;
   */
  emoticon = "";

  /**
   * @generated from field: string text = 41;
   */
  text = "";

  /**
   * @generated from field: string data = 42;
   */
  data = "";

  /**
   * @generated from field: int64 amount = 43;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: int32 months = 44;
   */
  months = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue crypto_currency = 45;
   */
  cryptoCurrency: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value crypto_amount = 46;
   */
  cryptoAmount: Int64Value[] = [];

  /**
   * @generated from field: int32 icon_color = 47;
   */
  iconColor = 0;

  /**
   * @generated from field: repeated google.protobuf.Int64Value icon_emoji_id = 48;
   */
  iconEmojiId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue title_FLAGSTRING = 49;
   */
  titleFLAGSTRING: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool closed = 50;
   */
  closed: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool hidden = 51;
   */
  hidden: Bool[] = [];

  /**
   * @generated from field: int32 button_id = 52;
   */
  buttonId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 53;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper wallpaper = 54;
   */
  wallpaper: WallPaper[] = [];

  /**
   * @generated from field: string domain_STRING = 55;
   */
  domainSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BizDataRaw biz_data = 56;
   */
  bizData: BizDataRaw[] = [];

  /**
   * @generated from field: string title = 100;
   */
  title = "";

  constructor(data?: PartialMessage<MessageAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "title_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "users", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 6, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "inviter_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "channel_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "game_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "recurring_init", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "recurring_used", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "total_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 17, name: "info", kind: "message", T: PaymentRequestedInfo, repeated: true },
    { no: 18, name: "shipping_option_id", kind: "message", T: StringValue, repeated: true },
    { no: 19, name: "charge", kind: "message", T: PaymentCharge, repeated: true },
    { no: 20, name: "invoice_slug", kind: "message", T: StringValue, repeated: true },
    { no: 21, name: "video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "call_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "reason", kind: "message", T: PhoneCallDiscardReason, repeated: true },
    { no: 24, name: "duration", kind: "message", T: Int32Value, repeated: true },
    { no: 25, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "from_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 28, name: "domain_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
    { no: 29, name: "app", kind: "message", T: BotApp, repeated: true },
    { no: 30, name: "values", kind: "message", T: SecureValue, repeated: true },
    { no: 31, name: "credentials", kind: "message", T: SecureCredentialsEncrypted, repeated: true },
    { no: 32, name: "types", kind: "message", T: SecureValueType, repeated: true },
    { no: 33, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 34, name: "to_id", kind: "message", T: Peer, repeated: true },
    { no: 35, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 36, name: "call", kind: "message", T: InputGroupCall, repeated: true },
    { no: 37, name: "period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 38, name: "auto_setting_from", kind: "message", T: Int64Value, repeated: true },
    { no: 39, name: "schedule_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 40, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 41, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 42, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 43, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 44, name: "months", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 45, name: "crypto_currency", kind: "message", T: StringValue, repeated: true },
    { no: 46, name: "crypto_amount", kind: "message", T: Int64Value, repeated: true },
    { no: 47, name: "icon_color", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 48, name: "icon_emoji_id", kind: "message", T: Int64Value, repeated: true },
    { no: 49, name: "title_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
    { no: 50, name: "closed", kind: "message", T: Bool, repeated: true },
    { no: 51, name: "hidden", kind: "message", T: Bool, repeated: true },
    { no: 52, name: "button_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 53, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 54, name: "wallpaper", kind: "message", T: WallPaper, repeated: true },
    { no: 55, name: "domain_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 56, name: "biz_data", kind: "message", T: BizDataRaw, repeated: true },
    { no: 100, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageAction {
    return new MessageAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageAction {
    return new MessageAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageAction {
    return new MessageAction().fromJsonString(jsonString, options);
  }

  static equals(a: MessageAction | PlainMessage<MessageAction> | undefined, b: MessageAction | PlainMessage<MessageAction> | undefined): boolean {
    return proto3.util.equals(MessageAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionEmpty
 */
export class TLMessageActionEmpty extends Message$1<TLMessageActionEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionEmpty {
    return new TLMessageActionEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionEmpty {
    return new TLMessageActionEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionEmpty {
    return new TLMessageActionEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionEmpty | PlainMessage<TLMessageActionEmpty> | undefined, b: TLMessageActionEmpty | PlainMessage<TLMessageActionEmpty> | undefined): boolean {
    return proto3.util.equals(TLMessageActionEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatCreate
 */
export class TLMessageActionChatCreate extends Message$1<TLMessageActionChatCreate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatCreate {
    return new TLMessageActionChatCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatCreate {
    return new TLMessageActionChatCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatCreate {
    return new TLMessageActionChatCreate().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatCreate | PlainMessage<TLMessageActionChatCreate> | undefined, b: TLMessageActionChatCreate | PlainMessage<TLMessageActionChatCreate> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatCreate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatEditTitle
 */
export class TLMessageActionChatEditTitle extends Message$1<TLMessageActionChatEditTitle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatEditTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatEditTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatEditTitle {
    return new TLMessageActionChatEditTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatEditTitle {
    return new TLMessageActionChatEditTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatEditTitle {
    return new TLMessageActionChatEditTitle().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatEditTitle | PlainMessage<TLMessageActionChatEditTitle> | undefined, b: TLMessageActionChatEditTitle | PlainMessage<TLMessageActionChatEditTitle> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatEditTitle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatEditPhoto
 */
export class TLMessageActionChatEditPhoto extends Message$1<TLMessageActionChatEditPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatEditPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatEditPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatEditPhoto {
    return new TLMessageActionChatEditPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatEditPhoto {
    return new TLMessageActionChatEditPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatEditPhoto {
    return new TLMessageActionChatEditPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatEditPhoto | PlainMessage<TLMessageActionChatEditPhoto> | undefined, b: TLMessageActionChatEditPhoto | PlainMessage<TLMessageActionChatEditPhoto> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatEditPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatDeletePhoto
 */
export class TLMessageActionChatDeletePhoto extends Message$1<TLMessageActionChatDeletePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatDeletePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatDeletePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatDeletePhoto {
    return new TLMessageActionChatDeletePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatDeletePhoto {
    return new TLMessageActionChatDeletePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatDeletePhoto {
    return new TLMessageActionChatDeletePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatDeletePhoto | PlainMessage<TLMessageActionChatDeletePhoto> | undefined, b: TLMessageActionChatDeletePhoto | PlainMessage<TLMessageActionChatDeletePhoto> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatDeletePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatAddUser
 */
export class TLMessageActionChatAddUser extends Message$1<TLMessageActionChatAddUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatAddUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatAddUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatAddUser {
    return new TLMessageActionChatAddUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatAddUser {
    return new TLMessageActionChatAddUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatAddUser {
    return new TLMessageActionChatAddUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatAddUser | PlainMessage<TLMessageActionChatAddUser> | undefined, b: TLMessageActionChatAddUser | PlainMessage<TLMessageActionChatAddUser> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatAddUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatDeleteUser
 */
export class TLMessageActionChatDeleteUser extends Message$1<TLMessageActionChatDeleteUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatDeleteUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatDeleteUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatDeleteUser {
    return new TLMessageActionChatDeleteUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatDeleteUser {
    return new TLMessageActionChatDeleteUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatDeleteUser {
    return new TLMessageActionChatDeleteUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatDeleteUser | PlainMessage<TLMessageActionChatDeleteUser> | undefined, b: TLMessageActionChatDeleteUser | PlainMessage<TLMessageActionChatDeleteUser> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatDeleteUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatJoinedByLink
 */
export class TLMessageActionChatJoinedByLink extends Message$1<TLMessageActionChatJoinedByLink> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatJoinedByLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatJoinedByLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatJoinedByLink {
    return new TLMessageActionChatJoinedByLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatJoinedByLink {
    return new TLMessageActionChatJoinedByLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatJoinedByLink {
    return new TLMessageActionChatJoinedByLink().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatJoinedByLink | PlainMessage<TLMessageActionChatJoinedByLink> | undefined, b: TLMessageActionChatJoinedByLink | PlainMessage<TLMessageActionChatJoinedByLink> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatJoinedByLink, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChannelCreate
 */
export class TLMessageActionChannelCreate extends Message$1<TLMessageActionChannelCreate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChannelCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChannelCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChannelCreate {
    return new TLMessageActionChannelCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChannelCreate {
    return new TLMessageActionChannelCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChannelCreate {
    return new TLMessageActionChannelCreate().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChannelCreate | PlainMessage<TLMessageActionChannelCreate> | undefined, b: TLMessageActionChannelCreate | PlainMessage<TLMessageActionChannelCreate> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChannelCreate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatMigrateTo
 */
export class TLMessageActionChatMigrateTo extends Message$1<TLMessageActionChatMigrateTo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatMigrateTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatMigrateTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatMigrateTo {
    return new TLMessageActionChatMigrateTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatMigrateTo {
    return new TLMessageActionChatMigrateTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatMigrateTo {
    return new TLMessageActionChatMigrateTo().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatMigrateTo | PlainMessage<TLMessageActionChatMigrateTo> | undefined, b: TLMessageActionChatMigrateTo | PlainMessage<TLMessageActionChatMigrateTo> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatMigrateTo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChannelMigrateFrom
 */
export class TLMessageActionChannelMigrateFrom extends Message$1<TLMessageActionChannelMigrateFrom> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChannelMigrateFrom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChannelMigrateFrom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChannelMigrateFrom {
    return new TLMessageActionChannelMigrateFrom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChannelMigrateFrom {
    return new TLMessageActionChannelMigrateFrom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChannelMigrateFrom {
    return new TLMessageActionChannelMigrateFrom().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChannelMigrateFrom | PlainMessage<TLMessageActionChannelMigrateFrom> | undefined, b: TLMessageActionChannelMigrateFrom | PlainMessage<TLMessageActionChannelMigrateFrom> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChannelMigrateFrom, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPinMessage
 */
export class TLMessageActionPinMessage extends Message$1<TLMessageActionPinMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionPinMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPinMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionPinMessage {
    return new TLMessageActionPinMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionPinMessage {
    return new TLMessageActionPinMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionPinMessage {
    return new TLMessageActionPinMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionPinMessage | PlainMessage<TLMessageActionPinMessage> | undefined, b: TLMessageActionPinMessage | PlainMessage<TLMessageActionPinMessage> | undefined): boolean {
    return proto3.util.equals(TLMessageActionPinMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionHistoryClear
 */
export class TLMessageActionHistoryClear extends Message$1<TLMessageActionHistoryClear> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionHistoryClear>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionHistoryClear";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionHistoryClear {
    return new TLMessageActionHistoryClear().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionHistoryClear {
    return new TLMessageActionHistoryClear().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionHistoryClear {
    return new TLMessageActionHistoryClear().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionHistoryClear | PlainMessage<TLMessageActionHistoryClear> | undefined, b: TLMessageActionHistoryClear | PlainMessage<TLMessageActionHistoryClear> | undefined): boolean {
    return proto3.util.equals(TLMessageActionHistoryClear, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGameScore
 */
export class TLMessageActionGameScore extends Message$1<TLMessageActionGameScore> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionGameScore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGameScore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionGameScore {
    return new TLMessageActionGameScore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionGameScore {
    return new TLMessageActionGameScore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionGameScore {
    return new TLMessageActionGameScore().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionGameScore | PlainMessage<TLMessageActionGameScore> | undefined, b: TLMessageActionGameScore | PlainMessage<TLMessageActionGameScore> | undefined): boolean {
    return proto3.util.equals(TLMessageActionGameScore, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPaymentSentMe
 */
export class TLMessageActionPaymentSentMe extends Message$1<TLMessageActionPaymentSentMe> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionPaymentSentMe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPaymentSentMe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionPaymentSentMe {
    return new TLMessageActionPaymentSentMe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionPaymentSentMe {
    return new TLMessageActionPaymentSentMe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionPaymentSentMe {
    return new TLMessageActionPaymentSentMe().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionPaymentSentMe | PlainMessage<TLMessageActionPaymentSentMe> | undefined, b: TLMessageActionPaymentSentMe | PlainMessage<TLMessageActionPaymentSentMe> | undefined): boolean {
    return proto3.util.equals(TLMessageActionPaymentSentMe, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPaymentSent
 */
export class TLMessageActionPaymentSent extends Message$1<TLMessageActionPaymentSent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionPaymentSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPaymentSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionPaymentSent {
    return new TLMessageActionPaymentSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionPaymentSent {
    return new TLMessageActionPaymentSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionPaymentSent {
    return new TLMessageActionPaymentSent().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionPaymentSent | PlainMessage<TLMessageActionPaymentSent> | undefined, b: TLMessageActionPaymentSent | PlainMessage<TLMessageActionPaymentSent> | undefined): boolean {
    return proto3.util.equals(TLMessageActionPaymentSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPhoneCall
 */
export class TLMessageActionPhoneCall extends Message$1<TLMessageActionPhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionPhoneCall {
    return new TLMessageActionPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionPhoneCall {
    return new TLMessageActionPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionPhoneCall {
    return new TLMessageActionPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionPhoneCall | PlainMessage<TLMessageActionPhoneCall> | undefined, b: TLMessageActionPhoneCall | PlainMessage<TLMessageActionPhoneCall> | undefined): boolean {
    return proto3.util.equals(TLMessageActionPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionScreenshotTaken
 */
export class TLMessageActionScreenshotTaken extends Message$1<TLMessageActionScreenshotTaken> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionScreenshotTaken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionScreenshotTaken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionScreenshotTaken {
    return new TLMessageActionScreenshotTaken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionScreenshotTaken {
    return new TLMessageActionScreenshotTaken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionScreenshotTaken {
    return new TLMessageActionScreenshotTaken().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionScreenshotTaken | PlainMessage<TLMessageActionScreenshotTaken> | undefined, b: TLMessageActionScreenshotTaken | PlainMessage<TLMessageActionScreenshotTaken> | undefined): boolean {
    return proto3.util.equals(TLMessageActionScreenshotTaken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionCustomAction
 */
export class TLMessageActionCustomAction extends Message$1<TLMessageActionCustomAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionCustomAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionCustomAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionCustomAction {
    return new TLMessageActionCustomAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionCustomAction {
    return new TLMessageActionCustomAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionCustomAction {
    return new TLMessageActionCustomAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionCustomAction | PlainMessage<TLMessageActionCustomAction> | undefined, b: TLMessageActionCustomAction | PlainMessage<TLMessageActionCustomAction> | undefined): boolean {
    return proto3.util.equals(TLMessageActionCustomAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionBotAllowed
 */
export class TLMessageActionBotAllowed extends Message$1<TLMessageActionBotAllowed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionBotAllowed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionBotAllowed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionBotAllowed {
    return new TLMessageActionBotAllowed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionBotAllowed {
    return new TLMessageActionBotAllowed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionBotAllowed {
    return new TLMessageActionBotAllowed().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionBotAllowed | PlainMessage<TLMessageActionBotAllowed> | undefined, b: TLMessageActionBotAllowed | PlainMessage<TLMessageActionBotAllowed> | undefined): boolean {
    return proto3.util.equals(TLMessageActionBotAllowed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSecureValuesSentMe
 */
export class TLMessageActionSecureValuesSentMe extends Message$1<TLMessageActionSecureValuesSentMe> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSecureValuesSentMe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSecureValuesSentMe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSecureValuesSentMe {
    return new TLMessageActionSecureValuesSentMe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSecureValuesSentMe {
    return new TLMessageActionSecureValuesSentMe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSecureValuesSentMe {
    return new TLMessageActionSecureValuesSentMe().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSecureValuesSentMe | PlainMessage<TLMessageActionSecureValuesSentMe> | undefined, b: TLMessageActionSecureValuesSentMe | PlainMessage<TLMessageActionSecureValuesSentMe> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSecureValuesSentMe, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSecureValuesSent
 */
export class TLMessageActionSecureValuesSent extends Message$1<TLMessageActionSecureValuesSent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSecureValuesSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSecureValuesSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSecureValuesSent {
    return new TLMessageActionSecureValuesSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSecureValuesSent {
    return new TLMessageActionSecureValuesSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSecureValuesSent {
    return new TLMessageActionSecureValuesSent().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSecureValuesSent | PlainMessage<TLMessageActionSecureValuesSent> | undefined, b: TLMessageActionSecureValuesSent | PlainMessage<TLMessageActionSecureValuesSent> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSecureValuesSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionContactSignUp
 */
export class TLMessageActionContactSignUp extends Message$1<TLMessageActionContactSignUp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionContactSignUp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionContactSignUp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionContactSignUp {
    return new TLMessageActionContactSignUp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionContactSignUp {
    return new TLMessageActionContactSignUp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionContactSignUp {
    return new TLMessageActionContactSignUp().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionContactSignUp | PlainMessage<TLMessageActionContactSignUp> | undefined, b: TLMessageActionContactSignUp | PlainMessage<TLMessageActionContactSignUp> | undefined): boolean {
    return proto3.util.equals(TLMessageActionContactSignUp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGeoProximityReached
 */
export class TLMessageActionGeoProximityReached extends Message$1<TLMessageActionGeoProximityReached> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionGeoProximityReached>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGeoProximityReached";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionGeoProximityReached {
    return new TLMessageActionGeoProximityReached().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionGeoProximityReached {
    return new TLMessageActionGeoProximityReached().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionGeoProximityReached {
    return new TLMessageActionGeoProximityReached().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionGeoProximityReached | PlainMessage<TLMessageActionGeoProximityReached> | undefined, b: TLMessageActionGeoProximityReached | PlainMessage<TLMessageActionGeoProximityReached> | undefined): boolean {
    return proto3.util.equals(TLMessageActionGeoProximityReached, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGroupCall
 */
export class TLMessageActionGroupCall extends Message$1<TLMessageActionGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionGroupCall {
    return new TLMessageActionGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionGroupCall {
    return new TLMessageActionGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionGroupCall {
    return new TLMessageActionGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionGroupCall | PlainMessage<TLMessageActionGroupCall> | undefined, b: TLMessageActionGroupCall | PlainMessage<TLMessageActionGroupCall> | undefined): boolean {
    return proto3.util.equals(TLMessageActionGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionInviteToGroupCall
 */
export class TLMessageActionInviteToGroupCall extends Message$1<TLMessageActionInviteToGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionInviteToGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionInviteToGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionInviteToGroupCall {
    return new TLMessageActionInviteToGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionInviteToGroupCall {
    return new TLMessageActionInviteToGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionInviteToGroupCall {
    return new TLMessageActionInviteToGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionInviteToGroupCall | PlainMessage<TLMessageActionInviteToGroupCall> | undefined, b: TLMessageActionInviteToGroupCall | PlainMessage<TLMessageActionInviteToGroupCall> | undefined): boolean {
    return proto3.util.equals(TLMessageActionInviteToGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetMessagesTTL
 */
export class TLMessageActionSetMessagesTTL extends Message$1<TLMessageActionSetMessagesTTL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSetMessagesTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetMessagesTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSetMessagesTTL {
    return new TLMessageActionSetMessagesTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSetMessagesTTL {
    return new TLMessageActionSetMessagesTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSetMessagesTTL {
    return new TLMessageActionSetMessagesTTL().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSetMessagesTTL | PlainMessage<TLMessageActionSetMessagesTTL> | undefined, b: TLMessageActionSetMessagesTTL | PlainMessage<TLMessageActionSetMessagesTTL> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSetMessagesTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGroupCallScheduled
 */
export class TLMessageActionGroupCallScheduled extends Message$1<TLMessageActionGroupCallScheduled> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionGroupCallScheduled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGroupCallScheduled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionGroupCallScheduled {
    return new TLMessageActionGroupCallScheduled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionGroupCallScheduled {
    return new TLMessageActionGroupCallScheduled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionGroupCallScheduled {
    return new TLMessageActionGroupCallScheduled().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionGroupCallScheduled | PlainMessage<TLMessageActionGroupCallScheduled> | undefined, b: TLMessageActionGroupCallScheduled | PlainMessage<TLMessageActionGroupCallScheduled> | undefined): boolean {
    return proto3.util.equals(TLMessageActionGroupCallScheduled, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetChatTheme
 */
export class TLMessageActionSetChatTheme extends Message$1<TLMessageActionSetChatTheme> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSetChatTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetChatTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSetChatTheme {
    return new TLMessageActionSetChatTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSetChatTheme {
    return new TLMessageActionSetChatTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSetChatTheme {
    return new TLMessageActionSetChatTheme().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSetChatTheme | PlainMessage<TLMessageActionSetChatTheme> | undefined, b: TLMessageActionSetChatTheme | PlainMessage<TLMessageActionSetChatTheme> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSetChatTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatJoinedByRequest
 */
export class TLMessageActionChatJoinedByRequest extends Message$1<TLMessageActionChatJoinedByRequest> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionChatJoinedByRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionChatJoinedByRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionChatJoinedByRequest {
    return new TLMessageActionChatJoinedByRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionChatJoinedByRequest {
    return new TLMessageActionChatJoinedByRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionChatJoinedByRequest {
    return new TLMessageActionChatJoinedByRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionChatJoinedByRequest | PlainMessage<TLMessageActionChatJoinedByRequest> | undefined, b: TLMessageActionChatJoinedByRequest | PlainMessage<TLMessageActionChatJoinedByRequest> | undefined): boolean {
    return proto3.util.equals(TLMessageActionChatJoinedByRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionWebViewDataSentMe
 */
export class TLMessageActionWebViewDataSentMe extends Message$1<TLMessageActionWebViewDataSentMe> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionWebViewDataSentMe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionWebViewDataSentMe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionWebViewDataSentMe {
    return new TLMessageActionWebViewDataSentMe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionWebViewDataSentMe {
    return new TLMessageActionWebViewDataSentMe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionWebViewDataSentMe {
    return new TLMessageActionWebViewDataSentMe().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionWebViewDataSentMe | PlainMessage<TLMessageActionWebViewDataSentMe> | undefined, b: TLMessageActionWebViewDataSentMe | PlainMessage<TLMessageActionWebViewDataSentMe> | undefined): boolean {
    return proto3.util.equals(TLMessageActionWebViewDataSentMe, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionWebViewDataSent
 */
export class TLMessageActionWebViewDataSent extends Message$1<TLMessageActionWebViewDataSent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionWebViewDataSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionWebViewDataSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionWebViewDataSent {
    return new TLMessageActionWebViewDataSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionWebViewDataSent {
    return new TLMessageActionWebViewDataSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionWebViewDataSent {
    return new TLMessageActionWebViewDataSent().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionWebViewDataSent | PlainMessage<TLMessageActionWebViewDataSent> | undefined, b: TLMessageActionWebViewDataSent | PlainMessage<TLMessageActionWebViewDataSent> | undefined): boolean {
    return proto3.util.equals(TLMessageActionWebViewDataSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGiftPremium
 */
export class TLMessageActionGiftPremium extends Message$1<TLMessageActionGiftPremium> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionGiftPremium>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionGiftPremium";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionGiftPremium {
    return new TLMessageActionGiftPremium().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionGiftPremium {
    return new TLMessageActionGiftPremium().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionGiftPremium {
    return new TLMessageActionGiftPremium().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionGiftPremium | PlainMessage<TLMessageActionGiftPremium> | undefined, b: TLMessageActionGiftPremium | PlainMessage<TLMessageActionGiftPremium> | undefined): boolean {
    return proto3.util.equals(TLMessageActionGiftPremium, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionTopicCreate
 */
export class TLMessageActionTopicCreate extends Message$1<TLMessageActionTopicCreate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionTopicCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionTopicCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionTopicCreate {
    return new TLMessageActionTopicCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionTopicCreate {
    return new TLMessageActionTopicCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionTopicCreate {
    return new TLMessageActionTopicCreate().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionTopicCreate | PlainMessage<TLMessageActionTopicCreate> | undefined, b: TLMessageActionTopicCreate | PlainMessage<TLMessageActionTopicCreate> | undefined): boolean {
    return proto3.util.equals(TLMessageActionTopicCreate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionTopicEdit
 */
export class TLMessageActionTopicEdit extends Message$1<TLMessageActionTopicEdit> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionTopicEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionTopicEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionTopicEdit {
    return new TLMessageActionTopicEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionTopicEdit {
    return new TLMessageActionTopicEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionTopicEdit {
    return new TLMessageActionTopicEdit().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionTopicEdit | PlainMessage<TLMessageActionTopicEdit> | undefined, b: TLMessageActionTopicEdit | PlainMessage<TLMessageActionTopicEdit> | undefined): boolean {
    return proto3.util.equals(TLMessageActionTopicEdit, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSuggestProfilePhoto
 */
export class TLMessageActionSuggestProfilePhoto extends Message$1<TLMessageActionSuggestProfilePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSuggestProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSuggestProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSuggestProfilePhoto {
    return new TLMessageActionSuggestProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSuggestProfilePhoto {
    return new TLMessageActionSuggestProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSuggestProfilePhoto {
    return new TLMessageActionSuggestProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSuggestProfilePhoto | PlainMessage<TLMessageActionSuggestProfilePhoto> | undefined, b: TLMessageActionSuggestProfilePhoto | PlainMessage<TLMessageActionSuggestProfilePhoto> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSuggestProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionRequestedPeer
 */
export class TLMessageActionRequestedPeer extends Message$1<TLMessageActionRequestedPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionRequestedPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionRequestedPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionRequestedPeer {
    return new TLMessageActionRequestedPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionRequestedPeer {
    return new TLMessageActionRequestedPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionRequestedPeer {
    return new TLMessageActionRequestedPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionRequestedPeer | PlainMessage<TLMessageActionRequestedPeer> | undefined, b: TLMessageActionRequestedPeer | PlainMessage<TLMessageActionRequestedPeer> | undefined): boolean {
    return proto3.util.equals(TLMessageActionRequestedPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetChatWallPaper
 */
export class TLMessageActionSetChatWallPaper extends Message$1<TLMessageActionSetChatWallPaper> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSetChatWallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetChatWallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSetChatWallPaper {
    return new TLMessageActionSetChatWallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSetChatWallPaper {
    return new TLMessageActionSetChatWallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSetChatWallPaper {
    return new TLMessageActionSetChatWallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSetChatWallPaper | PlainMessage<TLMessageActionSetChatWallPaper> | undefined, b: TLMessageActionSetChatWallPaper | PlainMessage<TLMessageActionSetChatWallPaper> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSetChatWallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetSameChatWallPaper
 */
export class TLMessageActionSetSameChatWallPaper extends Message$1<TLMessageActionSetSameChatWallPaper> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionSetSameChatWallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionSetSameChatWallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionSetSameChatWallPaper {
    return new TLMessageActionSetSameChatWallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionSetSameChatWallPaper {
    return new TLMessageActionSetSameChatWallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionSetSameChatWallPaper {
    return new TLMessageActionSetSameChatWallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionSetSameChatWallPaper | PlainMessage<TLMessageActionSetSameChatWallPaper> | undefined, b: TLMessageActionSetSameChatWallPaper | PlainMessage<TLMessageActionSetSameChatWallPaper> | undefined): boolean {
    return proto3.util.equals(TLMessageActionSetSameChatWallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionAttachMenuBotAllowed
 */
export class TLMessageActionAttachMenuBotAllowed extends Message$1<TLMessageActionAttachMenuBotAllowed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionAttachMenuBotAllowed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionAttachMenuBotAllowed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionAttachMenuBotAllowed {
    return new TLMessageActionAttachMenuBotAllowed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionAttachMenuBotAllowed {
    return new TLMessageActionAttachMenuBotAllowed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionAttachMenuBotAllowed {
    return new TLMessageActionAttachMenuBotAllowed().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionAttachMenuBotAllowed | PlainMessage<TLMessageActionAttachMenuBotAllowed> | undefined, b: TLMessageActionAttachMenuBotAllowed | PlainMessage<TLMessageActionAttachMenuBotAllowed> | undefined): boolean {
    return proto3.util.equals(TLMessageActionAttachMenuBotAllowed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageActionBizDataRaw
 */
export class TLMessageActionBizDataRaw extends Message$1<TLMessageActionBizDataRaw> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageAction data2 = 1;
   */
  data2: MessageAction[] = [];

  constructor(data?: PartialMessage<TLMessageActionBizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageActionBizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageActionBizDataRaw {
    return new TLMessageActionBizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageActionBizDataRaw {
    return new TLMessageActionBizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageActionBizDataRaw {
    return new TLMessageActionBizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageActionBizDataRaw | PlainMessage<TLMessageActionBizDataRaw> | undefined, b: TLMessageActionBizDataRaw | PlainMessage<TLMessageActionBizDataRaw> | undefined): boolean {
    return proto3.util.equals(TLMessageActionBizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageBox
 */
export class MessageBox extends Message$1<MessageBox> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 message_id = 4;
   */
  messageId = 0;

  /**
   * @generated from field: int64 sender_user_id = 5;
   */
  senderUserId = protoInt64.zero;

  /**
   * @generated from field: int32 peer_type = 6;
   */
  peerType = 0;

  /**
   * @generated from field: int64 peer_id = 7;
   */
  peerId = protoInt64.zero;

  /**
   * @generated from field: int64 random_id = 8;
   */
  randomId = protoInt64.zero;

  /**
   * @generated from field: int64 dialog_id1 = 9;
   */
  dialogId1 = protoInt64.zero;

  /**
   * @generated from field: int64 dialog_id2 = 10;
   */
  dialogId2 = protoInt64.zero;

  /**
   * @generated from field: int64 dialog_message_id = 11;
   */
  dialogMessageId = protoInt64.zero;

  /**
   * @generated from field: int32 message_filter_type = 12;
   */
  messageFilterType = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message message = 13;
   */
  message: Message[] = [];

  /**
   * @generated from field: bool mentioned = 14;
   */
  mentioned = false;

  /**
   * @generated from field: bool media_unread = 15;
   */
  mediaUnread = false;

  /**
   * @generated from field: bool pinned = 16;
   */
  pinned = false;

  /**
   * @generated from field: int32 pts = 17;
   */
  pts = 0;

  /**
   * @generated from field: int32 pts_count = 18;
   */
  ptsCount = 0;

  /**
   * @generated from field: int32 views = 19;
   */
  views = 0;

  /**
   * @generated from field: int64 reply_owner_id = 20;
   */
  replyOwnerId = protoInt64.zero;

  /**
   * @generated from field: int32 forwards = 21;
   */
  forwards = 0;

  /**
   * @generated from field: string reaction = 22;
   */
  reaction = "";

  /**
   * @generated from field: int64 comment_group_id = 23;
   */
  commentGroupId = protoInt64.zero;

  /**
   * @generated from field: int32 comment_group_msg_id = 24;
   */
  commentGroupMsgId = 0;

  /**
   * @generated from field: int32 reply_to_msg_id = 25;
   */
  replyToMsgId = 0;

  /**
   * @generated from field: int32 reply_to_top_id = 26;
   */
  replyToTopId = 0;

  /**
   * @generated from field: int32 ttl_period = 27;
   */
  ttlPeriod = 0;

  /**
   * @generated from field: bool has_reaction = 28;
   */
  hasReaction = false;

  constructor(data?: PartialMessage<MessageBox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageBox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "sender_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "peer_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "peer_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "random_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "dialog_id1", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "dialog_id2", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "dialog_message_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "message_filter_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "message", kind: "message", T: Message, repeated: true },
    { no: 14, name: "mentioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "media_unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "views", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "reply_owner_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "forwards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "comment_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "comment_group_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "reply_to_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "reply_to_top_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 27, name: "ttl_period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 28, name: "has_reaction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageBox {
    return new MessageBox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageBox {
    return new MessageBox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageBox {
    return new MessageBox().fromJsonString(jsonString, options);
  }

  static equals(a: MessageBox | PlainMessage<MessageBox> | undefined, b: MessageBox | PlainMessage<MessageBox> | undefined): boolean {
    return proto3.util.equals(MessageBox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageBox
 */
export class TLMessageBox extends Message$1<TLMessageBox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageBox data2 = 1;
   */
  data2: MessageBox[] = [];

  constructor(data?: PartialMessage<TLMessageBox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageBox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageBox, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageBox {
    return new TLMessageBox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageBox {
    return new TLMessageBox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageBox {
    return new TLMessageBox().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageBox | PlainMessage<TLMessageBox> | undefined, b: TLMessageBox | PlainMessage<TLMessageBox> | undefined): boolean {
    return proto3.util.equals(TLMessageBox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageBoxList
 */
export class MessageBoxList extends Message$1<MessageBoxList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageBox box_list = 3;
   */
  boxList: MessageBox[] = [];

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<MessageBoxList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageBoxList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "box_list", kind: "message", T: MessageBox, repeated: true },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageBoxList {
    return new MessageBoxList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageBoxList {
    return new MessageBoxList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageBoxList {
    return new MessageBoxList().fromJsonString(jsonString, options);
  }

  static equals(a: MessageBoxList | PlainMessage<MessageBoxList> | undefined, b: MessageBoxList | PlainMessage<MessageBoxList> | undefined): boolean {
    return proto3.util.equals(MessageBoxList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageBoxList
 */
export class TLMessageBoxList extends Message$1<TLMessageBoxList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageBoxList data2 = 1;
   */
  data2: MessageBoxList[] = [];

  constructor(data?: PartialMessage<TLMessageBoxList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageBoxList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageBoxList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageBoxList {
    return new TLMessageBoxList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageBoxList {
    return new TLMessageBoxList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageBoxList {
    return new TLMessageBoxList().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageBoxList | PlainMessage<TLMessageBoxList> | undefined, b: TLMessageBoxList | PlainMessage<TLMessageBoxList> | undefined): boolean {
    return proto3.util.equals(TLMessageBoxList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageBoxListSlice
 */
export class TLMessageBoxListSlice extends Message$1<TLMessageBoxListSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageBoxList data2 = 1;
   */
  data2: MessageBoxList[] = [];

  constructor(data?: PartialMessage<TLMessageBoxListSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageBoxListSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageBoxList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageBoxListSlice {
    return new TLMessageBoxListSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageBoxListSlice {
    return new TLMessageBoxListSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageBoxListSlice {
    return new TLMessageBoxListSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageBoxListSlice | PlainMessage<TLMessageBoxListSlice> | undefined, b: TLMessageBoxListSlice | PlainMessage<TLMessageBoxListSlice> | undefined): boolean {
    return proto3.util.equals(TLMessageBoxListSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageEntity
 */
export class MessageEntity extends Message$1<MessageEntity> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  /**
   * @generated from field: int32 length = 4;
   */
  length = 0;

  /**
   * @generated from field: string language = 5;
   */
  language = "";

  /**
   * @generated from field: string url = 6;
   */
  url = "";

  /**
   * @generated from field: int64 user_id_INT64 = 7;
   */
  userIdINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputUser user_id_INPUTUSER = 8;
   */
  userIdINPUTUSER: InputUser[] = [];

  /**
   * @generated from field: int64 document_id = 9;
   */
  documentId = protoInt64.zero;

  constructor(data?: PartialMessage<MessageEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "user_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "user_id_INPUTUSER", kind: "message", T: InputUser, repeated: true },
    { no: 9, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageEntity {
    return new MessageEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageEntity {
    return new MessageEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageEntity {
    return new MessageEntity().fromJsonString(jsonString, options);
  }

  static equals(a: MessageEntity | PlainMessage<MessageEntity> | undefined, b: MessageEntity | PlainMessage<MessageEntity> | undefined): boolean {
    return proto3.util.equals(MessageEntity, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUnknown
 */
export class TLMessageEntityUnknown extends Message$1<TLMessageEntityUnknown> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityUnknown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUnknown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityUnknown {
    return new TLMessageEntityUnknown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityUnknown {
    return new TLMessageEntityUnknown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityUnknown {
    return new TLMessageEntityUnknown().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityUnknown | PlainMessage<TLMessageEntityUnknown> | undefined, b: TLMessageEntityUnknown | PlainMessage<TLMessageEntityUnknown> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityUnknown, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityMention
 */
export class TLMessageEntityMention extends Message$1<TLMessageEntityMention> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityMention>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityMention";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityMention {
    return new TLMessageEntityMention().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityMention {
    return new TLMessageEntityMention().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityMention {
    return new TLMessageEntityMention().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityMention | PlainMessage<TLMessageEntityMention> | undefined, b: TLMessageEntityMention | PlainMessage<TLMessageEntityMention> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityMention, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityHashtag
 */
export class TLMessageEntityHashtag extends Message$1<TLMessageEntityHashtag> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityHashtag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityHashtag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityHashtag {
    return new TLMessageEntityHashtag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityHashtag {
    return new TLMessageEntityHashtag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityHashtag {
    return new TLMessageEntityHashtag().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityHashtag | PlainMessage<TLMessageEntityHashtag> | undefined, b: TLMessageEntityHashtag | PlainMessage<TLMessageEntityHashtag> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityHashtag, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBotCommand
 */
export class TLMessageEntityBotCommand extends Message$1<TLMessageEntityBotCommand> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityBotCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBotCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityBotCommand {
    return new TLMessageEntityBotCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityBotCommand {
    return new TLMessageEntityBotCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityBotCommand {
    return new TLMessageEntityBotCommand().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityBotCommand | PlainMessage<TLMessageEntityBotCommand> | undefined, b: TLMessageEntityBotCommand | PlainMessage<TLMessageEntityBotCommand> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityBotCommand, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUrl
 */
export class TLMessageEntityUrl extends Message$1<TLMessageEntityUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityUrl {
    return new TLMessageEntityUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityUrl {
    return new TLMessageEntityUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityUrl {
    return new TLMessageEntityUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityUrl | PlainMessage<TLMessageEntityUrl> | undefined, b: TLMessageEntityUrl | PlainMessage<TLMessageEntityUrl> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityEmail
 */
export class TLMessageEntityEmail extends Message$1<TLMessageEntityEmail> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityEmail {
    return new TLMessageEntityEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityEmail {
    return new TLMessageEntityEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityEmail {
    return new TLMessageEntityEmail().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityEmail | PlainMessage<TLMessageEntityEmail> | undefined, b: TLMessageEntityEmail | PlainMessage<TLMessageEntityEmail> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityEmail, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBold
 */
export class TLMessageEntityBold extends Message$1<TLMessageEntityBold> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityBold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityBold {
    return new TLMessageEntityBold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityBold {
    return new TLMessageEntityBold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityBold {
    return new TLMessageEntityBold().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityBold | PlainMessage<TLMessageEntityBold> | undefined, b: TLMessageEntityBold | PlainMessage<TLMessageEntityBold> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityBold, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityItalic
 */
export class TLMessageEntityItalic extends Message$1<TLMessageEntityItalic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityItalic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityItalic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityItalic {
    return new TLMessageEntityItalic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityItalic {
    return new TLMessageEntityItalic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityItalic {
    return new TLMessageEntityItalic().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityItalic | PlainMessage<TLMessageEntityItalic> | undefined, b: TLMessageEntityItalic | PlainMessage<TLMessageEntityItalic> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityItalic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCode
 */
export class TLMessageEntityCode extends Message$1<TLMessageEntityCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityCode {
    return new TLMessageEntityCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityCode {
    return new TLMessageEntityCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityCode {
    return new TLMessageEntityCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityCode | PlainMessage<TLMessageEntityCode> | undefined, b: TLMessageEntityCode | PlainMessage<TLMessageEntityCode> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityPre
 */
export class TLMessageEntityPre extends Message$1<TLMessageEntityPre> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityPre>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityPre";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityPre {
    return new TLMessageEntityPre().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityPre {
    return new TLMessageEntityPre().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityPre {
    return new TLMessageEntityPre().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityPre | PlainMessage<TLMessageEntityPre> | undefined, b: TLMessageEntityPre | PlainMessage<TLMessageEntityPre> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityPre, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityTextUrl
 */
export class TLMessageEntityTextUrl extends Message$1<TLMessageEntityTextUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityTextUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityTextUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityTextUrl {
    return new TLMessageEntityTextUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityTextUrl {
    return new TLMessageEntityTextUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityTextUrl {
    return new TLMessageEntityTextUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityTextUrl | PlainMessage<TLMessageEntityTextUrl> | undefined, b: TLMessageEntityTextUrl | PlainMessage<TLMessageEntityTextUrl> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityTextUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityMentionName
 */
export class TLMessageEntityMentionName extends Message$1<TLMessageEntityMentionName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityMentionName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityMentionName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityMentionName {
    return new TLMessageEntityMentionName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityMentionName {
    return new TLMessageEntityMentionName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityMentionName {
    return new TLMessageEntityMentionName().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityMentionName | PlainMessage<TLMessageEntityMentionName> | undefined, b: TLMessageEntityMentionName | PlainMessage<TLMessageEntityMentionName> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityMentionName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessageEntityMentionName
 */
export class TLInputMessageEntityMentionName extends Message$1<TLInputMessageEntityMentionName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLInputMessageEntityMentionName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessageEntityMentionName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessageEntityMentionName {
    return new TLInputMessageEntityMentionName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessageEntityMentionName {
    return new TLInputMessageEntityMentionName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessageEntityMentionName {
    return new TLInputMessageEntityMentionName().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessageEntityMentionName | PlainMessage<TLInputMessageEntityMentionName> | undefined, b: TLInputMessageEntityMentionName | PlainMessage<TLInputMessageEntityMentionName> | undefined): boolean {
    return proto3.util.equals(TLInputMessageEntityMentionName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityPhone
 */
export class TLMessageEntityPhone extends Message$1<TLMessageEntityPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityPhone {
    return new TLMessageEntityPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityPhone {
    return new TLMessageEntityPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityPhone {
    return new TLMessageEntityPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityPhone | PlainMessage<TLMessageEntityPhone> | undefined, b: TLMessageEntityPhone | PlainMessage<TLMessageEntityPhone> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCashtag
 */
export class TLMessageEntityCashtag extends Message$1<TLMessageEntityCashtag> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityCashtag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCashtag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityCashtag {
    return new TLMessageEntityCashtag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityCashtag {
    return new TLMessageEntityCashtag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityCashtag {
    return new TLMessageEntityCashtag().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityCashtag | PlainMessage<TLMessageEntityCashtag> | undefined, b: TLMessageEntityCashtag | PlainMessage<TLMessageEntityCashtag> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityCashtag, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUnderline
 */
export class TLMessageEntityUnderline extends Message$1<TLMessageEntityUnderline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityUnderline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityUnderline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityUnderline {
    return new TLMessageEntityUnderline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityUnderline {
    return new TLMessageEntityUnderline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityUnderline {
    return new TLMessageEntityUnderline().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityUnderline | PlainMessage<TLMessageEntityUnderline> | undefined, b: TLMessageEntityUnderline | PlainMessage<TLMessageEntityUnderline> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityUnderline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityStrike
 */
export class TLMessageEntityStrike extends Message$1<TLMessageEntityStrike> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityStrike>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityStrike";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityStrike {
    return new TLMessageEntityStrike().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityStrike {
    return new TLMessageEntityStrike().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityStrike {
    return new TLMessageEntityStrike().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityStrike | PlainMessage<TLMessageEntityStrike> | undefined, b: TLMessageEntityStrike | PlainMessage<TLMessageEntityStrike> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityStrike, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBlockquote
 */
export class TLMessageEntityBlockquote extends Message$1<TLMessageEntityBlockquote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityBlockquote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBlockquote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityBlockquote {
    return new TLMessageEntityBlockquote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityBlockquote {
    return new TLMessageEntityBlockquote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityBlockquote {
    return new TLMessageEntityBlockquote().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityBlockquote | PlainMessage<TLMessageEntityBlockquote> | undefined, b: TLMessageEntityBlockquote | PlainMessage<TLMessageEntityBlockquote> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityBlockquote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBankCard
 */
export class TLMessageEntityBankCard extends Message$1<TLMessageEntityBankCard> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityBankCard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityBankCard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityBankCard {
    return new TLMessageEntityBankCard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityBankCard {
    return new TLMessageEntityBankCard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityBankCard {
    return new TLMessageEntityBankCard().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityBankCard | PlainMessage<TLMessageEntityBankCard> | undefined, b: TLMessageEntityBankCard | PlainMessage<TLMessageEntityBankCard> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityBankCard, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntitySpoiler
 */
export class TLMessageEntitySpoiler extends Message$1<TLMessageEntitySpoiler> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntitySpoiler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntitySpoiler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntitySpoiler {
    return new TLMessageEntitySpoiler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntitySpoiler {
    return new TLMessageEntitySpoiler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntitySpoiler {
    return new TLMessageEntitySpoiler().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntitySpoiler | PlainMessage<TLMessageEntitySpoiler> | undefined, b: TLMessageEntitySpoiler | PlainMessage<TLMessageEntitySpoiler> | undefined): boolean {
    return proto3.util.equals(TLMessageEntitySpoiler, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCustomEmoji
 */
export class TLMessageEntityCustomEmoji extends Message$1<TLMessageEntityCustomEmoji> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity data2 = 1;
   */
  data2: MessageEntity[] = [];

  constructor(data?: PartialMessage<TLMessageEntityCustomEmoji>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageEntityCustomEmoji";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageEntityCustomEmoji {
    return new TLMessageEntityCustomEmoji().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageEntityCustomEmoji {
    return new TLMessageEntityCustomEmoji().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageEntityCustomEmoji {
    return new TLMessageEntityCustomEmoji().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageEntityCustomEmoji | PlainMessage<TLMessageEntityCustomEmoji> | undefined, b: TLMessageEntityCustomEmoji | PlainMessage<TLMessageEntityCustomEmoji> | undefined): boolean {
    return proto3.util.equals(TLMessageEntityCustomEmoji, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia
 */
export class MessageExtendedMedia extends Message$1<MessageExtendedMedia> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value w = 3;
   */
  w: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value h = 4;
   */
  h: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize thumb = 5;
   */
  thumb: PhotoSize[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value video_duration = 6;
   */
  videoDuration: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia media = 7;
   */
  media: MessageMedia[] = [];

  constructor(data?: PartialMessage<MessageExtendedMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "w", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "h", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "thumb", kind: "message", T: PhotoSize, repeated: true },
    { no: 6, name: "video_duration", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "media", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageExtendedMedia {
    return new MessageExtendedMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageExtendedMedia {
    return new MessageExtendedMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageExtendedMedia {
    return new MessageExtendedMedia().fromJsonString(jsonString, options);
  }

  static equals(a: MessageExtendedMedia | PlainMessage<MessageExtendedMedia> | undefined, b: MessageExtendedMedia | PlainMessage<MessageExtendedMedia> | undefined): boolean {
    return proto3.util.equals(MessageExtendedMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageExtendedMediaPreview
 */
export class TLMessageExtendedMediaPreview extends Message$1<TLMessageExtendedMediaPreview> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia data2 = 1;
   */
  data2: MessageExtendedMedia[] = [];

  constructor(data?: PartialMessage<TLMessageExtendedMediaPreview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageExtendedMediaPreview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageExtendedMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageExtendedMediaPreview {
    return new TLMessageExtendedMediaPreview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageExtendedMediaPreview {
    return new TLMessageExtendedMediaPreview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageExtendedMediaPreview {
    return new TLMessageExtendedMediaPreview().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageExtendedMediaPreview | PlainMessage<TLMessageExtendedMediaPreview> | undefined, b: TLMessageExtendedMediaPreview | PlainMessage<TLMessageExtendedMediaPreview> | undefined): boolean {
    return proto3.util.equals(TLMessageExtendedMediaPreview, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageExtendedMedia
 */
export class TLMessageExtendedMedia extends Message$1<TLMessageExtendedMedia> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia data2 = 1;
   */
  data2: MessageExtendedMedia[] = [];

  constructor(data?: PartialMessage<TLMessageExtendedMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageExtendedMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageExtendedMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageExtendedMedia {
    return new TLMessageExtendedMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageExtendedMedia {
    return new TLMessageExtendedMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageExtendedMedia {
    return new TLMessageExtendedMedia().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageExtendedMedia | PlainMessage<TLMessageExtendedMedia> | undefined, b: TLMessageExtendedMedia | PlainMessage<TLMessageExtendedMedia> | undefined): boolean {
    return proto3.util.equals(TLMessageExtendedMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageFwdHeader
 */
export class MessageFwdHeader extends Message$1<MessageFwdHeader> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool imported = 3;
   */
  imported = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 4;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue from_name = 5;
   */
  fromName: StringValue[] = [];

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value channel_post = 7;
   */
  channelPost: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue post_author = 8;
   */
  postAuthor: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer saved_from_peer = 9;
   */
  savedFromPeer: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value saved_from_msg_id = 10;
   */
  savedFromMsgId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue psa_type = 11;
   */
  psaType: StringValue[] = [];

  constructor(data?: PartialMessage<MessageFwdHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageFwdHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "imported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 5, name: "from_name", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "channel_post", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "post_author", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "saved_from_peer", kind: "message", T: Peer, repeated: true },
    { no: 10, name: "saved_from_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "psa_type", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageFwdHeader {
    return new MessageFwdHeader().fromJsonString(jsonString, options);
  }

  static equals(a: MessageFwdHeader | PlainMessage<MessageFwdHeader> | undefined, b: MessageFwdHeader | PlainMessage<MessageFwdHeader> | undefined): boolean {
    return proto3.util.equals(MessageFwdHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageFwdHeader
 */
export class TLMessageFwdHeader extends Message$1<TLMessageFwdHeader> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageFwdHeader data2 = 1;
   */
  data2: MessageFwdHeader[] = [];

  constructor(data?: PartialMessage<TLMessageFwdHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageFwdHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageFwdHeader, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageFwdHeader {
    return new TLMessageFwdHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageFwdHeader {
    return new TLMessageFwdHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageFwdHeader {
    return new TLMessageFwdHeader().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageFwdHeader | PlainMessage<TLMessageFwdHeader> | undefined, b: TLMessageFwdHeader | PlainMessage<TLMessageFwdHeader> | undefined): boolean {
    return proto3.util.equals(TLMessageFwdHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageInteractionCounters
 */
export class MessageInteractionCounters extends Message$1<MessageInteractionCounters> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 msg_id = 3;
   */
  msgId = 0;

  /**
   * @generated from field: int32 views = 4;
   */
  views = 0;

  /**
   * @generated from field: int32 forwards = 5;
   */
  forwards = 0;

  constructor(data?: PartialMessage<MessageInteractionCounters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageInteractionCounters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "views", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "forwards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageInteractionCounters {
    return new MessageInteractionCounters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageInteractionCounters {
    return new MessageInteractionCounters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageInteractionCounters {
    return new MessageInteractionCounters().fromJsonString(jsonString, options);
  }

  static equals(a: MessageInteractionCounters | PlainMessage<MessageInteractionCounters> | undefined, b: MessageInteractionCounters | PlainMessage<MessageInteractionCounters> | undefined): boolean {
    return proto3.util.equals(MessageInteractionCounters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageInteractionCounters
 */
export class TLMessageInteractionCounters extends Message$1<TLMessageInteractionCounters> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageInteractionCounters data2 = 1;
   */
  data2: MessageInteractionCounters[] = [];

  constructor(data?: PartialMessage<TLMessageInteractionCounters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageInteractionCounters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageInteractionCounters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageInteractionCounters {
    return new TLMessageInteractionCounters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageInteractionCounters {
    return new TLMessageInteractionCounters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageInteractionCounters {
    return new TLMessageInteractionCounters().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageInteractionCounters | PlainMessage<TLMessageInteractionCounters> | undefined, b: TLMessageInteractionCounters | PlainMessage<TLMessageInteractionCounters> | undefined): boolean {
    return proto3.util.equals(TLMessageInteractionCounters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageMedia
 */
export class MessageMedia extends Message$1<MessageMedia> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool spoiler = 3;
   */
  spoiler = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo_FLAGPHOTO = 4;
   */
  photoFLAGPHOTO: Photo[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_seconds = 5;
   */
  ttlSeconds: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo = 6;
   */
  geo: GeoPoint[] = [];

  /**
   * @generated from field: string phone_number = 7;
   */
  phoneNumber = "";

  /**
   * @generated from field: string first_name = 8;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 9;
   */
  lastName = "";

  /**
   * @generated from field: string vcard = 10;
   */
  vcard = "";

  /**
   * @generated from field: int64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: bool nopremium = 12;
   */
  nopremium = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 13;
   */
  document: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document alt_document = 14;
   */
  altDocument: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage webpage = 15;
   */
  webpage: WebPage[] = [];

  /**
   * @generated from field: string title = 16;
   */
  title = "";

  /**
   * @generated from field: string address = 17;
   */
  address = "";

  /**
   * @generated from field: string provider = 18;
   */
  provider = "";

  /**
   * @generated from field: string venue_id = 19;
   */
  venueId = "";

  /**
   * @generated from field: string venue_type = 20;
   */
  venueType = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Game game = 21;
   */
  game: Game[] = [];

  /**
   * @generated from field: bool shipping_address_requested = 22;
   */
  shippingAddressRequested = false;

  /**
   * @generated from field: bool test = 23;
   */
  test = false;

  /**
   * @generated from field: string description = 24;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument photo_FLAGWEBDOCUMENT = 25;
   */
  photoFLAGWEBDOCUMENT: WebDocument[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value receipt_msg_id = 26;
   */
  receiptMsgId: Int32Value[] = [];

  /**
   * @generated from field: string currency = 27;
   */
  currency = "";

  /**
   * @generated from field: int64 total_amount = 28;
   */
  totalAmount = protoInt64.zero;

  /**
   * @generated from field: string start_param = 29;
   */
  startParam = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia extended_media = 30;
   */
  extendedMedia: MessageExtendedMedia[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value heading = 31;
   */
  heading: Int32Value[] = [];

  /**
   * @generated from field: int32 period = 32;
   */
  period = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value proximity_notification_radius = 33;
   */
  proximityNotificationRadius: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Poll poll = 34;
   */
  poll: Poll[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollResults results = 35;
   */
  results: PollResults[] = [];

  /**
   * @generated from field: int32 value = 36;
   */
  value = 0;

  /**
   * @generated from field: string emoticon = 37;
   */
  emoticon = "";

  /**
   * @generated from field: bool via_mention = 38;
   */
  viaMention = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 39;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 id = 40;
   */
  id = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem story = 41;
   */
  story: StoryItem[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BizDataRaw biz_data = 42;
   */
  bizData: BizDataRaw[] = [];

  constructor(data?: PartialMessage<MessageMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "spoiler", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "photo_FLAGPHOTO", kind: "message", T: Photo, repeated: true },
    { no: 5, name: "ttl_seconds", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "geo", kind: "message", T: GeoPoint, repeated: true },
    { no: 7, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "vcard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "nopremium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "document", kind: "message", T: Document, repeated: true },
    { no: 14, name: "alt_document", kind: "message", T: Document, repeated: true },
    { no: 15, name: "webpage", kind: "message", T: WebPage, repeated: true },
    { no: 16, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "venue_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "game", kind: "message", T: Game, repeated: true },
    { no: 22, name: "shipping_address_requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "test", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "photo_FLAGWEBDOCUMENT", kind: "message", T: WebDocument, repeated: true },
    { no: 26, name: "receipt_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 27, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "total_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 29, name: "start_param", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "extended_media", kind: "message", T: MessageExtendedMedia, repeated: true },
    { no: 31, name: "heading", kind: "message", T: Int32Value, repeated: true },
    { no: 32, name: "period", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 33, name: "proximity_notification_radius", kind: "message", T: Int32Value, repeated: true },
    { no: 34, name: "poll", kind: "message", T: Poll, repeated: true },
    { no: 35, name: "results", kind: "message", T: PollResults, repeated: true },
    { no: 36, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 37, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 38, name: "via_mention", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 39, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 40, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 41, name: "story", kind: "message", T: StoryItem, repeated: true },
    { no: 42, name: "biz_data", kind: "message", T: BizDataRaw, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageMedia {
    return new MessageMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageMedia {
    return new MessageMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageMedia {
    return new MessageMedia().fromJsonString(jsonString, options);
  }

  static equals(a: MessageMedia | PlainMessage<MessageMedia> | undefined, b: MessageMedia | PlainMessage<MessageMedia> | undefined): boolean {
    return proto3.util.equals(MessageMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaEmpty
 */
export class TLMessageMediaEmpty extends Message$1<TLMessageMediaEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaEmpty {
    return new TLMessageMediaEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaEmpty {
    return new TLMessageMediaEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaEmpty {
    return new TLMessageMediaEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaEmpty | PlainMessage<TLMessageMediaEmpty> | undefined, b: TLMessageMediaEmpty | PlainMessage<TLMessageMediaEmpty> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaPhoto
 */
export class TLMessageMediaPhoto extends Message$1<TLMessageMediaPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaPhoto {
    return new TLMessageMediaPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaPhoto {
    return new TLMessageMediaPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaPhoto {
    return new TLMessageMediaPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaPhoto | PlainMessage<TLMessageMediaPhoto> | undefined, b: TLMessageMediaPhoto | PlainMessage<TLMessageMediaPhoto> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGeo
 */
export class TLMessageMediaGeo extends Message$1<TLMessageMediaGeo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaGeo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGeo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaGeo {
    return new TLMessageMediaGeo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaGeo {
    return new TLMessageMediaGeo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaGeo {
    return new TLMessageMediaGeo().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaGeo | PlainMessage<TLMessageMediaGeo> | undefined, b: TLMessageMediaGeo | PlainMessage<TLMessageMediaGeo> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaGeo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaContact
 */
export class TLMessageMediaContact extends Message$1<TLMessageMediaContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaContact {
    return new TLMessageMediaContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaContact {
    return new TLMessageMediaContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaContact {
    return new TLMessageMediaContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaContact | PlainMessage<TLMessageMediaContact> | undefined, b: TLMessageMediaContact | PlainMessage<TLMessageMediaContact> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaUnsupported
 */
export class TLMessageMediaUnsupported extends Message$1<TLMessageMediaUnsupported> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaUnsupported>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaUnsupported";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaUnsupported {
    return new TLMessageMediaUnsupported().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaUnsupported {
    return new TLMessageMediaUnsupported().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaUnsupported {
    return new TLMessageMediaUnsupported().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaUnsupported | PlainMessage<TLMessageMediaUnsupported> | undefined, b: TLMessageMediaUnsupported | PlainMessage<TLMessageMediaUnsupported> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaUnsupported, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaDocument
 */
export class TLMessageMediaDocument extends Message$1<TLMessageMediaDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaDocument {
    return new TLMessageMediaDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaDocument {
    return new TLMessageMediaDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaDocument {
    return new TLMessageMediaDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaDocument | PlainMessage<TLMessageMediaDocument> | undefined, b: TLMessageMediaDocument | PlainMessage<TLMessageMediaDocument> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaWebPage
 */
export class TLMessageMediaWebPage extends Message$1<TLMessageMediaWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaWebPage {
    return new TLMessageMediaWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaWebPage {
    return new TLMessageMediaWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaWebPage {
    return new TLMessageMediaWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaWebPage | PlainMessage<TLMessageMediaWebPage> | undefined, b: TLMessageMediaWebPage | PlainMessage<TLMessageMediaWebPage> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaVenue
 */
export class TLMessageMediaVenue extends Message$1<TLMessageMediaVenue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaVenue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaVenue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaVenue {
    return new TLMessageMediaVenue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaVenue {
    return new TLMessageMediaVenue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaVenue {
    return new TLMessageMediaVenue().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaVenue | PlainMessage<TLMessageMediaVenue> | undefined, b: TLMessageMediaVenue | PlainMessage<TLMessageMediaVenue> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaVenue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGame
 */
export class TLMessageMediaGame extends Message$1<TLMessageMediaGame> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaGame {
    return new TLMessageMediaGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaGame {
    return new TLMessageMediaGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaGame {
    return new TLMessageMediaGame().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaGame | PlainMessage<TLMessageMediaGame> | undefined, b: TLMessageMediaGame | PlainMessage<TLMessageMediaGame> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaGame, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaInvoice
 */
export class TLMessageMediaInvoice extends Message$1<TLMessageMediaInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaInvoice {
    return new TLMessageMediaInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaInvoice {
    return new TLMessageMediaInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaInvoice {
    return new TLMessageMediaInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaInvoice | PlainMessage<TLMessageMediaInvoice> | undefined, b: TLMessageMediaInvoice | PlainMessage<TLMessageMediaInvoice> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGeoLive
 */
export class TLMessageMediaGeoLive extends Message$1<TLMessageMediaGeoLive> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaGeoLive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaGeoLive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaGeoLive {
    return new TLMessageMediaGeoLive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaGeoLive {
    return new TLMessageMediaGeoLive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaGeoLive {
    return new TLMessageMediaGeoLive().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaGeoLive | PlainMessage<TLMessageMediaGeoLive> | undefined, b: TLMessageMediaGeoLive | PlainMessage<TLMessageMediaGeoLive> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaGeoLive, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaPoll
 */
export class TLMessageMediaPoll extends Message$1<TLMessageMediaPoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaPoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaPoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaPoll {
    return new TLMessageMediaPoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaPoll {
    return new TLMessageMediaPoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaPoll {
    return new TLMessageMediaPoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaPoll | PlainMessage<TLMessageMediaPoll> | undefined, b: TLMessageMediaPoll | PlainMessage<TLMessageMediaPoll> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaPoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaDice
 */
export class TLMessageMediaDice extends Message$1<TLMessageMediaDice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaDice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaDice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaDice {
    return new TLMessageMediaDice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaDice {
    return new TLMessageMediaDice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaDice {
    return new TLMessageMediaDice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaDice | PlainMessage<TLMessageMediaDice> | undefined, b: TLMessageMediaDice | PlainMessage<TLMessageMediaDice> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaDice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaStory
 */
export class TLMessageMediaStory extends Message$1<TLMessageMediaStory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaStory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaStory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaStory {
    return new TLMessageMediaStory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaStory {
    return new TLMessageMediaStory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaStory {
    return new TLMessageMediaStory().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaStory | PlainMessage<TLMessageMediaStory> | undefined, b: TLMessageMediaStory | PlainMessage<TLMessageMediaStory> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaStory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaBizDataRaw
 */
export class TLMessageMediaBizDataRaw extends Message$1<TLMessageMediaBizDataRaw> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia data2 = 1;
   */
  data2: MessageMedia[] = [];

  constructor(data?: PartialMessage<TLMessageMediaBizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageMediaBizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageMedia, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageMediaBizDataRaw {
    return new TLMessageMediaBizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageMediaBizDataRaw {
    return new TLMessageMediaBizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageMediaBizDataRaw {
    return new TLMessageMediaBizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageMediaBizDataRaw | PlainMessage<TLMessageMediaBizDataRaw> | undefined, b: TLMessageMediaBizDataRaw | PlainMessage<TLMessageMediaBizDataRaw> | undefined): boolean {
    return proto3.util.equals(TLMessageMediaBizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagePeerReaction
 */
export class MessagePeerReaction extends Message$1<MessagePeerReaction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool big = 3;
   */
  big = false;

  /**
   * @generated from field: bool unread = 4;
   */
  unread = false;

  /**
   * @generated from field: bool my = 5;
   */
  my = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer_id = 6;
   */
  peerId: Peer[] = [];

  /**
   * @generated from field: int32 date = 7;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reaction_REACTION = 8;
   */
  reactionREACTION: Reaction[] = [];

  /**
   * @generated from field: string reaction_STRING = 9;
   */
  reactionSTRING = "";

  /**
   * @generated from field: string reaction = 100;
   */
  reaction = "";

  constructor(data?: PartialMessage<MessagePeerReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagePeerReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "big", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "my", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "peer_id", kind: "message", T: Peer, repeated: true },
    { no: 7, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "reaction_REACTION", kind: "message", T: Reaction, repeated: true },
    { no: 9, name: "reaction_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagePeerReaction {
    return new MessagePeerReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagePeerReaction {
    return new MessagePeerReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagePeerReaction {
    return new MessagePeerReaction().fromJsonString(jsonString, options);
  }

  static equals(a: MessagePeerReaction | PlainMessage<MessagePeerReaction> | undefined, b: MessagePeerReaction | PlainMessage<MessagePeerReaction> | undefined): boolean {
    return proto3.util.equals(MessagePeerReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerReaction
 */
export class TLMessagePeerReaction extends Message$1<TLMessagePeerReaction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerReaction data2 = 1;
   */
  data2: MessagePeerReaction[] = [];

  constructor(data?: PartialMessage<TLMessagePeerReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagePeerReaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagePeerReaction {
    return new TLMessagePeerReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagePeerReaction {
    return new TLMessagePeerReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagePeerReaction {
    return new TLMessagePeerReaction().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagePeerReaction | PlainMessage<TLMessagePeerReaction> | undefined, b: TLMessagePeerReaction | PlainMessage<TLMessagePeerReaction> | undefined): boolean {
    return proto3.util.equals(TLMessagePeerReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote
 */
export class MessagePeerVote extends Message$1<MessagePeerVote> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: bytes option = 4;
   */
  option = new Uint8Array(0);

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: bytes options = 6;
   */
  options = new Uint8Array(0);

  constructor(data?: PartialMessage<MessagePeerVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "option", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagePeerVote {
    return new MessagePeerVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagePeerVote {
    return new MessagePeerVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagePeerVote {
    return new MessagePeerVote().fromJsonString(jsonString, options);
  }

  static equals(a: MessagePeerVote | PlainMessage<MessagePeerVote> | undefined, b: MessagePeerVote | PlainMessage<MessagePeerVote> | undefined): boolean {
    return proto3.util.equals(MessagePeerVote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVote
 */
export class TLMessagePeerVote extends Message$1<TLMessagePeerVote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote data2 = 1;
   */
  data2: MessagePeerVote[] = [];

  constructor(data?: PartialMessage<TLMessagePeerVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagePeerVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagePeerVote {
    return new TLMessagePeerVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagePeerVote {
    return new TLMessagePeerVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagePeerVote {
    return new TLMessagePeerVote().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagePeerVote | PlainMessage<TLMessagePeerVote> | undefined, b: TLMessagePeerVote | PlainMessage<TLMessagePeerVote> | undefined): boolean {
    return proto3.util.equals(TLMessagePeerVote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVoteInputOption
 */
export class TLMessagePeerVoteInputOption extends Message$1<TLMessagePeerVoteInputOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote data2 = 1;
   */
  data2: MessagePeerVote[] = [];

  constructor(data?: PartialMessage<TLMessagePeerVoteInputOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVoteInputOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagePeerVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagePeerVoteInputOption {
    return new TLMessagePeerVoteInputOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagePeerVoteInputOption {
    return new TLMessagePeerVoteInputOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagePeerVoteInputOption {
    return new TLMessagePeerVoteInputOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagePeerVoteInputOption | PlainMessage<TLMessagePeerVoteInputOption> | undefined, b: TLMessagePeerVoteInputOption | PlainMessage<TLMessagePeerVoteInputOption> | undefined): boolean {
    return proto3.util.equals(TLMessagePeerVoteInputOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVoteMultiple
 */
export class TLMessagePeerVoteMultiple extends Message$1<TLMessagePeerVoteMultiple> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote data2 = 1;
   */
  data2: MessagePeerVote[] = [];

  constructor(data?: PartialMessage<TLMessagePeerVoteMultiple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagePeerVoteMultiple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagePeerVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagePeerVoteMultiple {
    return new TLMessagePeerVoteMultiple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagePeerVoteMultiple {
    return new TLMessagePeerVoteMultiple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagePeerVoteMultiple {
    return new TLMessagePeerVoteMultiple().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagePeerVoteMultiple | PlainMessage<TLMessagePeerVoteMultiple> | undefined, b: TLMessagePeerVoteMultiple | PlainMessage<TLMessagePeerVoteMultiple> | undefined): boolean {
    return proto3.util.equals(TLMessagePeerVoteMultiple, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageRange
 */
export class MessageRange extends Message$1<MessageRange> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 min_id = 3;
   */
  minId = 0;

  /**
   * @generated from field: int32 max_id = 4;
   */
  maxId = 0;

  constructor(data?: PartialMessage<MessageRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "min_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRange {
    return new MessageRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRange {
    return new MessageRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRange {
    return new MessageRange().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRange | PlainMessage<MessageRange> | undefined, b: MessageRange | PlainMessage<MessageRange> | undefined): boolean {
    return proto3.util.equals(MessageRange, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageRange
 */
export class TLMessageRange extends Message$1<TLMessageRange> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageRange data2 = 1;
   */
  data2: MessageRange[] = [];

  constructor(data?: PartialMessage<TLMessageRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageRange {
    return new TLMessageRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageRange {
    return new TLMessageRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageRange {
    return new TLMessageRange().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageRange | PlainMessage<TLMessageRange> | undefined, b: TLMessageRange | PlainMessage<TLMessageRange> | undefined): boolean {
    return proto3.util.equals(TLMessageRange, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageReactions
 */
export class MessageReactions extends Message$1<MessageReactions> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool min = 3;
   */
  min = false;

  /**
   * @generated from field: bool can_see_list = 4;
   */
  canSeeList = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReactionCount results = 5;
   */
  results: ReactionCount[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerReaction recent_reactions = 6;
   */
  recentReactions: MessagePeerReaction[] = [];

  constructor(data?: PartialMessage<MessageReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "can_see_list", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "results", kind: "message", T: ReactionCount, repeated: true },
    { no: 6, name: "recent_reactions", kind: "message", T: MessagePeerReaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReactions {
    return new MessageReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReactions {
    return new MessageReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReactions {
    return new MessageReactions().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReactions | PlainMessage<MessageReactions> | undefined, b: MessageReactions | PlainMessage<MessageReactions> | undefined): boolean {
    return proto3.util.equals(MessageReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageReactions
 */
export class TLMessageReactions extends Message$1<TLMessageReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReactions data2 = 1;
   */
  data2: MessageReactions[] = [];

  constructor(data?: PartialMessage<TLMessageReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageReactions {
    return new TLMessageReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageReactions {
    return new TLMessageReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageReactions {
    return new TLMessageReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageReactions | PlainMessage<TLMessageReactions> | undefined, b: TLMessageReactions | PlainMessage<TLMessageReactions> | undefined): boolean {
    return proto3.util.equals(TLMessageReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageReplies
 */
export class MessageReplies extends Message$1<MessageReplies> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool comments = 3;
   */
  comments = false;

  /**
   * @generated from field: int32 replies = 4;
   */
  replies = 0;

  /**
   * @generated from field: int32 replies_pts = 5;
   */
  repliesPts = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer recent_repliers = 6;
   */
  recentRepliers: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value channel_id = 7;
   */
  channelId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value max_id = 8;
   */
  maxId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value read_max_id = 9;
   */
  readMaxId: Int32Value[] = [];

  constructor(data?: PartialMessage<MessageReplies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageReplies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "comments", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "replies", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "replies_pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "recent_repliers", kind: "message", T: Peer, repeated: true },
    { no: 7, name: "channel_id", kind: "message", T: Int64Value, repeated: true },
    { no: 8, name: "max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "read_max_id", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReplies {
    return new MessageReplies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReplies {
    return new MessageReplies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReplies {
    return new MessageReplies().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReplies | PlainMessage<MessageReplies> | undefined, b: MessageReplies | PlainMessage<MessageReplies> | undefined): boolean {
    return proto3.util.equals(MessageReplies, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageReplies
 */
export class TLMessageReplies extends Message$1<TLMessageReplies> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplies data2 = 1;
   */
  data2: MessageReplies[] = [];

  constructor(data?: PartialMessage<TLMessageReplies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageReplies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageReplies, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageReplies {
    return new TLMessageReplies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageReplies {
    return new TLMessageReplies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageReplies {
    return new TLMessageReplies().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageReplies | PlainMessage<TLMessageReplies> | undefined, b: TLMessageReplies | PlainMessage<TLMessageReplies> | undefined): boolean {
    return proto3.util.equals(TLMessageReplies, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader
 */
export class MessageReplyHeader extends Message$1<MessageReplyHeader> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool reply_to_scheduled = 3;
   */
  replyToScheduled = false;

  /**
   * @generated from field: bool forum_topic = 4;
   */
  forumTopic = false;

  /**
   * @generated from field: int32 reply_to_msg_id = 5;
   */
  replyToMsgId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer reply_to_peer_id = 6;
   */
  replyToPeerId: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value reply_to_top_id = 7;
   */
  replyToTopId: Int32Value[] = [];

  /**
   * @generated from field: int64 user_id = 8;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 story_id = 9;
   */
  storyId = 0;

  constructor(data?: PartialMessage<MessageReplyHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "reply_to_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "forum_topic", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "reply_to_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "reply_to_peer_id", kind: "message", T: Peer, repeated: true },
    { no: 7, name: "reply_to_top_id", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "story_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageReplyHeader {
    return new MessageReplyHeader().fromJsonString(jsonString, options);
  }

  static equals(a: MessageReplyHeader | PlainMessage<MessageReplyHeader> | undefined, b: MessageReplyHeader | PlainMessage<MessageReplyHeader> | undefined): boolean {
    return proto3.util.equals(MessageReplyHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageReplyHeader
 */
export class TLMessageReplyHeader extends Message$1<TLMessageReplyHeader> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader data2 = 1;
   */
  data2: MessageReplyHeader[] = [];

  constructor(data?: PartialMessage<TLMessageReplyHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageReplyHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageReplyHeader, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageReplyHeader {
    return new TLMessageReplyHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageReplyHeader {
    return new TLMessageReplyHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageReplyHeader {
    return new TLMessageReplyHeader().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageReplyHeader | PlainMessage<TLMessageReplyHeader> | undefined, b: TLMessageReplyHeader | PlainMessage<TLMessageReplyHeader> | undefined): boolean {
    return proto3.util.equals(TLMessageReplyHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageReplyStoryHeader
 */
export class TLMessageReplyStoryHeader extends Message$1<TLMessageReplyStoryHeader> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader data2 = 1;
   */
  data2: MessageReplyHeader[] = [];

  constructor(data?: PartialMessage<TLMessageReplyStoryHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageReplyStoryHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageReplyHeader, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageReplyStoryHeader {
    return new TLMessageReplyStoryHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageReplyStoryHeader {
    return new TLMessageReplyStoryHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageReplyStoryHeader {
    return new TLMessageReplyStoryHeader().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageReplyStoryHeader | PlainMessage<TLMessageReplyStoryHeader> | undefined, b: TLMessageReplyStoryHeader | PlainMessage<TLMessageReplyStoryHeader> | undefined): boolean {
    return proto3.util.equals(TLMessageReplyStoryHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageUserVote
 */
export class MessageUserVote extends Message$1<MessageUserVote> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: bytes option = 4;
   */
  option = new Uint8Array(0);

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: bytes options = 6;
   */
  options = new Uint8Array(0);

  constructor(data?: PartialMessage<MessageUserVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageUserVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "option", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageUserVote {
    return new MessageUserVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageUserVote {
    return new MessageUserVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageUserVote {
    return new MessageUserVote().fromJsonString(jsonString, options);
  }

  static equals(a: MessageUserVote | PlainMessage<MessageUserVote> | undefined, b: MessageUserVote | PlainMessage<MessageUserVote> | undefined): boolean {
    return proto3.util.equals(MessageUserVote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVote
 */
export class TLMessageUserVote extends Message$1<TLMessageUserVote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageUserVote data2 = 1;
   */
  data2: MessageUserVote[] = [];

  constructor(data?: PartialMessage<TLMessageUserVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageUserVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageUserVote {
    return new TLMessageUserVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageUserVote {
    return new TLMessageUserVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageUserVote {
    return new TLMessageUserVote().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageUserVote | PlainMessage<TLMessageUserVote> | undefined, b: TLMessageUserVote | PlainMessage<TLMessageUserVote> | undefined): boolean {
    return proto3.util.equals(TLMessageUserVote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVoteInputOption
 */
export class TLMessageUserVoteInputOption extends Message$1<TLMessageUserVoteInputOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageUserVote data2 = 1;
   */
  data2: MessageUserVote[] = [];

  constructor(data?: PartialMessage<TLMessageUserVoteInputOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVoteInputOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageUserVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageUserVoteInputOption {
    return new TLMessageUserVoteInputOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageUserVoteInputOption {
    return new TLMessageUserVoteInputOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageUserVoteInputOption {
    return new TLMessageUserVoteInputOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageUserVoteInputOption | PlainMessage<TLMessageUserVoteInputOption> | undefined, b: TLMessageUserVoteInputOption | PlainMessage<TLMessageUserVoteInputOption> | undefined): boolean {
    return proto3.util.equals(TLMessageUserVoteInputOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVoteMultiple
 */
export class TLMessageUserVoteMultiple extends Message$1<TLMessageUserVoteMultiple> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageUserVote data2 = 1;
   */
  data2: MessageUserVote[] = [];

  constructor(data?: PartialMessage<TLMessageUserVoteMultiple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageUserVoteMultiple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageUserVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageUserVoteMultiple {
    return new TLMessageUserVoteMultiple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageUserVoteMultiple {
    return new TLMessageUserVoteMultiple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageUserVoteMultiple {
    return new TLMessageUserVoteMultiple().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageUserVoteMultiple | PlainMessage<TLMessageUserVoteMultiple> | undefined, b: TLMessageUserVoteMultiple | PlainMessage<TLMessageUserVoteMultiple> | undefined): boolean {
    return proto3.util.equals(TLMessageUserVoteMultiple, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessageViews
 */
export class MessageViews extends Message$1<MessageViews> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value views = 3;
   */
  views: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value forwards = 4;
   */
  forwards: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplies replies = 5;
   */
  replies: MessageReplies[] = [];

  constructor(data?: PartialMessage<MessageViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessageViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "views", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "forwards", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "replies", kind: "message", T: MessageReplies, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageViews {
    return new MessageViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageViews {
    return new MessageViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageViews {
    return new MessageViews().fromJsonString(jsonString, options);
  }

  static equals(a: MessageViews | PlainMessage<MessageViews> | undefined, b: MessageViews | PlainMessage<MessageViews> | undefined): boolean {
    return proto3.util.equals(MessageViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessageViews
 */
export class TLMessageViews extends Message$1<TLMessageViews> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageViews data2 = 1;
   */
  data2: MessageViews[] = [];

  constructor(data?: PartialMessage<TLMessageViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessageViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessageViews, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessageViews {
    return new TLMessageViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessageViews {
    return new TLMessageViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessageViews {
    return new TLMessageViews().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessageViews | PlainMessage<TLMessageViews> | undefined, b: TLMessageViews | PlainMessage<TLMessageViews> | undefined): boolean {
    return proto3.util.equals(TLMessageViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesFilter
 */
export class MessagesFilter extends Message$1<MessagesFilter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool missed = 3;
   */
  missed = false;

  constructor(data?: PartialMessage<MessagesFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "missed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesFilter {
    return new MessagesFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesFilter {
    return new MessagesFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesFilter {
    return new MessagesFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesFilter | PlainMessage<MessagesFilter> | undefined, b: MessagesFilter | PlainMessage<MessagesFilter> | undefined): boolean {
    return proto3.util.equals(MessagesFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterEmpty
 */
export class TLInputMessagesFilterEmpty extends Message$1<TLInputMessagesFilterEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterEmpty {
    return new TLInputMessagesFilterEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterEmpty {
    return new TLInputMessagesFilterEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterEmpty {
    return new TLInputMessagesFilterEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterEmpty | PlainMessage<TLInputMessagesFilterEmpty> | undefined, b: TLInputMessagesFilterEmpty | PlainMessage<TLInputMessagesFilterEmpty> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhotos
 */
export class TLInputMessagesFilterPhotos extends Message$1<TLInputMessagesFilterPhotos> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterPhotos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhotos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterPhotos {
    return new TLInputMessagesFilterPhotos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhotos {
    return new TLInputMessagesFilterPhotos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhotos {
    return new TLInputMessagesFilterPhotos().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterPhotos | PlainMessage<TLInputMessagesFilterPhotos> | undefined, b: TLInputMessagesFilterPhotos | PlainMessage<TLInputMessagesFilterPhotos> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterPhotos, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterVideo
 */
export class TLInputMessagesFilterVideo extends Message$1<TLInputMessagesFilterVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterVideo {
    return new TLInputMessagesFilterVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterVideo {
    return new TLInputMessagesFilterVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterVideo {
    return new TLInputMessagesFilterVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterVideo | PlainMessage<TLInputMessagesFilterVideo> | undefined, b: TLInputMessagesFilterVideo | PlainMessage<TLInputMessagesFilterVideo> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhotoVideo
 */
export class TLInputMessagesFilterPhotoVideo extends Message$1<TLInputMessagesFilterPhotoVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterPhotoVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhotoVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterPhotoVideo {
    return new TLInputMessagesFilterPhotoVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhotoVideo {
    return new TLInputMessagesFilterPhotoVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhotoVideo {
    return new TLInputMessagesFilterPhotoVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterPhotoVideo | PlainMessage<TLInputMessagesFilterPhotoVideo> | undefined, b: TLInputMessagesFilterPhotoVideo | PlainMessage<TLInputMessagesFilterPhotoVideo> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterPhotoVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterDocument
 */
export class TLInputMessagesFilterDocument extends Message$1<TLInputMessagesFilterDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterDocument {
    return new TLInputMessagesFilterDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterDocument {
    return new TLInputMessagesFilterDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterDocument {
    return new TLInputMessagesFilterDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterDocument | PlainMessage<TLInputMessagesFilterDocument> | undefined, b: TLInputMessagesFilterDocument | PlainMessage<TLInputMessagesFilterDocument> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterUrl
 */
export class TLInputMessagesFilterUrl extends Message$1<TLInputMessagesFilterUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterUrl {
    return new TLInputMessagesFilterUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterUrl {
    return new TLInputMessagesFilterUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterUrl {
    return new TLInputMessagesFilterUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterUrl | PlainMessage<TLInputMessagesFilterUrl> | undefined, b: TLInputMessagesFilterUrl | PlainMessage<TLInputMessagesFilterUrl> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterGif
 */
export class TLInputMessagesFilterGif extends Message$1<TLInputMessagesFilterGif> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterGif>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterGif";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterGif {
    return new TLInputMessagesFilterGif().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterGif {
    return new TLInputMessagesFilterGif().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterGif {
    return new TLInputMessagesFilterGif().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterGif | PlainMessage<TLInputMessagesFilterGif> | undefined, b: TLInputMessagesFilterGif | PlainMessage<TLInputMessagesFilterGif> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterGif, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterVoice
 */
export class TLInputMessagesFilterVoice extends Message$1<TLInputMessagesFilterVoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterVoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterVoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterVoice {
    return new TLInputMessagesFilterVoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterVoice {
    return new TLInputMessagesFilterVoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterVoice {
    return new TLInputMessagesFilterVoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterVoice | PlainMessage<TLInputMessagesFilterVoice> | undefined, b: TLInputMessagesFilterVoice | PlainMessage<TLInputMessagesFilterVoice> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterVoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterMusic
 */
export class TLInputMessagesFilterMusic extends Message$1<TLInputMessagesFilterMusic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterMusic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterMusic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterMusic {
    return new TLInputMessagesFilterMusic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterMusic {
    return new TLInputMessagesFilterMusic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterMusic {
    return new TLInputMessagesFilterMusic().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterMusic | PlainMessage<TLInputMessagesFilterMusic> | undefined, b: TLInputMessagesFilterMusic | PlainMessage<TLInputMessagesFilterMusic> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterMusic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterChatPhotos
 */
export class TLInputMessagesFilterChatPhotos extends Message$1<TLInputMessagesFilterChatPhotos> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterChatPhotos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterChatPhotos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterChatPhotos {
    return new TLInputMessagesFilterChatPhotos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterChatPhotos {
    return new TLInputMessagesFilterChatPhotos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterChatPhotos {
    return new TLInputMessagesFilterChatPhotos().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterChatPhotos | PlainMessage<TLInputMessagesFilterChatPhotos> | undefined, b: TLInputMessagesFilterChatPhotos | PlainMessage<TLInputMessagesFilterChatPhotos> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterChatPhotos, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhoneCalls
 */
export class TLInputMessagesFilterPhoneCalls extends Message$1<TLInputMessagesFilterPhoneCalls> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterPhoneCalls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPhoneCalls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterPhoneCalls {
    return new TLInputMessagesFilterPhoneCalls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhoneCalls {
    return new TLInputMessagesFilterPhoneCalls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPhoneCalls {
    return new TLInputMessagesFilterPhoneCalls().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterPhoneCalls | PlainMessage<TLInputMessagesFilterPhoneCalls> | undefined, b: TLInputMessagesFilterPhoneCalls | PlainMessage<TLInputMessagesFilterPhoneCalls> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterPhoneCalls, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterRoundVoice
 */
export class TLInputMessagesFilterRoundVoice extends Message$1<TLInputMessagesFilterRoundVoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterRoundVoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterRoundVoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterRoundVoice {
    return new TLInputMessagesFilterRoundVoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterRoundVoice {
    return new TLInputMessagesFilterRoundVoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterRoundVoice {
    return new TLInputMessagesFilterRoundVoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterRoundVoice | PlainMessage<TLInputMessagesFilterRoundVoice> | undefined, b: TLInputMessagesFilterRoundVoice | PlainMessage<TLInputMessagesFilterRoundVoice> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterRoundVoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterRoundVideo
 */
export class TLInputMessagesFilterRoundVideo extends Message$1<TLInputMessagesFilterRoundVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterRoundVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterRoundVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterRoundVideo {
    return new TLInputMessagesFilterRoundVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterRoundVideo {
    return new TLInputMessagesFilterRoundVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterRoundVideo {
    return new TLInputMessagesFilterRoundVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterRoundVideo | PlainMessage<TLInputMessagesFilterRoundVideo> | undefined, b: TLInputMessagesFilterRoundVideo | PlainMessage<TLInputMessagesFilterRoundVideo> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterRoundVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterMyMentions
 */
export class TLInputMessagesFilterMyMentions extends Message$1<TLInputMessagesFilterMyMentions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterMyMentions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterMyMentions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterMyMentions {
    return new TLInputMessagesFilterMyMentions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterMyMentions {
    return new TLInputMessagesFilterMyMentions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterMyMentions {
    return new TLInputMessagesFilterMyMentions().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterMyMentions | PlainMessage<TLInputMessagesFilterMyMentions> | undefined, b: TLInputMessagesFilterMyMentions | PlainMessage<TLInputMessagesFilterMyMentions> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterMyMentions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterGeo
 */
export class TLInputMessagesFilterGeo extends Message$1<TLInputMessagesFilterGeo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterGeo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterGeo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterGeo {
    return new TLInputMessagesFilterGeo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterGeo {
    return new TLInputMessagesFilterGeo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterGeo {
    return new TLInputMessagesFilterGeo().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterGeo | PlainMessage<TLInputMessagesFilterGeo> | undefined, b: TLInputMessagesFilterGeo | PlainMessage<TLInputMessagesFilterGeo> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterGeo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterContacts
 */
export class TLInputMessagesFilterContacts extends Message$1<TLInputMessagesFilterContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterContacts {
    return new TLInputMessagesFilterContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterContacts {
    return new TLInputMessagesFilterContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterContacts {
    return new TLInputMessagesFilterContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterContacts | PlainMessage<TLInputMessagesFilterContacts> | undefined, b: TLInputMessagesFilterContacts | PlainMessage<TLInputMessagesFilterContacts> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPinned
 */
export class TLInputMessagesFilterPinned extends Message$1<TLInputMessagesFilterPinned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter data2 = 1;
   */
  data2: MessagesFilter[] = [];

  constructor(data?: PartialMessage<TLInputMessagesFilterPinned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputMessagesFilterPinned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputMessagesFilterPinned {
    return new TLInputMessagesFilterPinned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPinned {
    return new TLInputMessagesFilterPinned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputMessagesFilterPinned {
    return new TLInputMessagesFilterPinned().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputMessagesFilterPinned | PlainMessage<TLInputMessagesFilterPinned> | undefined, b: TLInputMessagesFilterPinned | PlainMessage<TLInputMessagesFilterPinned> | undefined): boolean {
    return proto3.util.equals(TLInputMessagesFilterPinned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MutableChat
 */
export class MutableChat extends Message$1<MutableChat> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableChat chat = 3;
   */
  chat: ImmutableChat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableChatParticipant chat_participants = 4;
   */
  chatParticipants: ImmutableChatParticipant[] = [];

  constructor(data?: PartialMessage<MutableChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MutableChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chat", kind: "message", T: ImmutableChat, repeated: true },
    { no: 4, name: "chat_participants", kind: "message", T: ImmutableChatParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutableChat {
    return new MutableChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutableChat {
    return new MutableChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutableChat {
    return new MutableChat().fromJsonString(jsonString, options);
  }

  static equals(a: MutableChat | PlainMessage<MutableChat> | undefined, b: MutableChat | PlainMessage<MutableChat> | undefined): boolean {
    return proto3.util.equals(MutableChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMutableChat
 */
export class TLMutableChat extends Message$1<TLMutableChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MutableChat data2 = 1;
   */
  data2: MutableChat[] = [];

  constructor(data?: PartialMessage<TLMutableChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMutableChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MutableChat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMutableChat {
    return new TLMutableChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMutableChat {
    return new TLMutableChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMutableChat {
    return new TLMutableChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLMutableChat | PlainMessage<TLMutableChat> | undefined, b: TLMutableChat | PlainMessage<TLMutableChat> | undefined): boolean {
    return proto3.util.equals(TLMutableChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MutableUsers
 */
export class MutableUsers extends Message$1<MutableUsers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImmutableUser users = 3;
   */
  users: ImmutableUser[] = [];

  constructor(data?: PartialMessage<MutableUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MutableUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "users", kind: "message", T: ImmutableUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutableUsers {
    return new MutableUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutableUsers {
    return new MutableUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutableUsers {
    return new MutableUsers().fromJsonString(jsonString, options);
  }

  static equals(a: MutableUsers | PlainMessage<MutableUsers> | undefined, b: MutableUsers | PlainMessage<MutableUsers> | undefined): boolean {
    return proto3.util.equals(MutableUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMutableUsers
 */
export class TLMutableUsers extends Message$1<TLMutableUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MutableUsers data2 = 1;
   */
  data2: MutableUsers[] = [];

  constructor(data?: PartialMessage<TLMutableUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMutableUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MutableUsers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMutableUsers {
    return new TLMutableUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMutableUsers {
    return new TLMutableUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMutableUsers {
    return new TLMutableUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMutableUsers | PlainMessage<TLMutableUsers> | undefined, b: TLMutableUsers | PlainMessage<TLMutableUsers> | undefined): boolean {
    return proto3.util.equals(TLMutableUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.NearestDc
 */
export class NearestDc extends Message$1<NearestDc> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string country = 3;
   */
  country = "";

  /**
   * @generated from field: int32 this_dc = 4;
   */
  thisDc = 0;

  /**
   * @generated from field: int32 nearest_dc = 5;
   */
  nearestDc = 0;

  constructor(data?: PartialMessage<NearestDc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.NearestDc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "this_dc", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "nearest_dc", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NearestDc {
    return new NearestDc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NearestDc {
    return new NearestDc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NearestDc {
    return new NearestDc().fromJsonString(jsonString, options);
  }

  static equals(a: NearestDc | PlainMessage<NearestDc> | undefined, b: NearestDc | PlainMessage<NearestDc> | undefined): boolean {
    return proto3.util.equals(NearestDc, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNearestDc
 */
export class TLNearestDc extends Message$1<TLNearestDc> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NearestDc data2 = 1;
   */
  data2: NearestDc[] = [];

  constructor(data?: PartialMessage<TLNearestDc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNearestDc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NearestDc, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNearestDc {
    return new TLNearestDc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNearestDc {
    return new TLNearestDc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNearestDc {
    return new TLNearestDc().fromJsonString(jsonString, options);
  }

  static equals(a: TLNearestDc | PlainMessage<TLNearestDc> | undefined, b: TLNearestDc | PlainMessage<TLNearestDc> | undefined): boolean {
    return proto3.util.equals(TLNearestDc, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.NotificationSound
 */
export class NotificationSound extends Message$1<NotificationSound> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string data = 4;
   */
  data = "";

  /**
   * @generated from field: int64 id = 5;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<NotificationSound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.NotificationSound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationSound {
    return new NotificationSound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationSound {
    return new NotificationSound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationSound {
    return new NotificationSound().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationSound | PlainMessage<NotificationSound> | undefined, b: NotificationSound | PlainMessage<NotificationSound> | undefined): boolean {
    return proto3.util.equals(NotificationSound, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundDefault
 */
export class TLNotificationSoundDefault extends Message$1<TLNotificationSoundDefault> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound data2 = 1;
   */
  data2: NotificationSound[] = [];

  constructor(data?: PartialMessage<TLNotificationSoundDefault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundDefault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotificationSound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotificationSoundDefault {
    return new TLNotificationSoundDefault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotificationSoundDefault {
    return new TLNotificationSoundDefault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotificationSoundDefault {
    return new TLNotificationSoundDefault().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotificationSoundDefault | PlainMessage<TLNotificationSoundDefault> | undefined, b: TLNotificationSoundDefault | PlainMessage<TLNotificationSoundDefault> | undefined): boolean {
    return proto3.util.equals(TLNotificationSoundDefault, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundNone
 */
export class TLNotificationSoundNone extends Message$1<TLNotificationSoundNone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound data2 = 1;
   */
  data2: NotificationSound[] = [];

  constructor(data?: PartialMessage<TLNotificationSoundNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotificationSound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotificationSoundNone {
    return new TLNotificationSoundNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotificationSoundNone {
    return new TLNotificationSoundNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotificationSoundNone {
    return new TLNotificationSoundNone().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotificationSoundNone | PlainMessage<TLNotificationSoundNone> | undefined, b: TLNotificationSoundNone | PlainMessage<TLNotificationSoundNone> | undefined): boolean {
    return proto3.util.equals(TLNotificationSoundNone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundLocal
 */
export class TLNotificationSoundLocal extends Message$1<TLNotificationSoundLocal> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound data2 = 1;
   */
  data2: NotificationSound[] = [];

  constructor(data?: PartialMessage<TLNotificationSoundLocal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundLocal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotificationSound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotificationSoundLocal {
    return new TLNotificationSoundLocal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotificationSoundLocal {
    return new TLNotificationSoundLocal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotificationSoundLocal {
    return new TLNotificationSoundLocal().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotificationSoundLocal | PlainMessage<TLNotificationSoundLocal> | undefined, b: TLNotificationSoundLocal | PlainMessage<TLNotificationSoundLocal> | undefined): boolean {
    return proto3.util.equals(TLNotificationSoundLocal, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundRingtone
 */
export class TLNotificationSoundRingtone extends Message$1<TLNotificationSoundRingtone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound data2 = 1;
   */
  data2: NotificationSound[] = [];

  constructor(data?: PartialMessage<TLNotificationSoundRingtone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotificationSoundRingtone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotificationSound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotificationSoundRingtone {
    return new TLNotificationSoundRingtone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotificationSoundRingtone {
    return new TLNotificationSoundRingtone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotificationSoundRingtone {
    return new TLNotificationSoundRingtone().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotificationSoundRingtone | PlainMessage<TLNotificationSoundRingtone> | undefined, b: TLNotificationSoundRingtone | PlainMessage<TLNotificationSoundRingtone> | undefined): boolean {
    return proto3.util.equals(TLNotificationSoundRingtone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.NotifyPeer
 */
export class NotifyPeer extends Message$1<NotifyPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 top_msg_id = 4;
   */
  topMsgId = 0;

  constructor(data?: PartialMessage<NotifyPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.NotifyPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "top_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotifyPeer {
    return new NotifyPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotifyPeer {
    return new NotifyPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotifyPeer {
    return new NotifyPeer().fromJsonString(jsonString, options);
  }

  static equals(a: NotifyPeer | PlainMessage<NotifyPeer> | undefined, b: NotifyPeer | PlainMessage<NotifyPeer> | undefined): boolean {
    return proto3.util.equals(NotifyPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotifyPeer
 */
export class TLNotifyPeer extends Message$1<TLNotifyPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer data2 = 1;
   */
  data2: NotifyPeer[] = [];

  constructor(data?: PartialMessage<TLNotifyPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotifyPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotifyPeer {
    return new TLNotifyPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotifyPeer {
    return new TLNotifyPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotifyPeer {
    return new TLNotifyPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotifyPeer | PlainMessage<TLNotifyPeer> | undefined, b: TLNotifyPeer | PlainMessage<TLNotifyPeer> | undefined): boolean {
    return proto3.util.equals(TLNotifyPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotifyUsers
 */
export class TLNotifyUsers extends Message$1<TLNotifyUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer data2 = 1;
   */
  data2: NotifyPeer[] = [];

  constructor(data?: PartialMessage<TLNotifyUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotifyUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotifyUsers {
    return new TLNotifyUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotifyUsers {
    return new TLNotifyUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotifyUsers {
    return new TLNotifyUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotifyUsers | PlainMessage<TLNotifyUsers> | undefined, b: TLNotifyUsers | PlainMessage<TLNotifyUsers> | undefined): boolean {
    return proto3.util.equals(TLNotifyUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotifyChats
 */
export class TLNotifyChats extends Message$1<TLNotifyChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer data2 = 1;
   */
  data2: NotifyPeer[] = [];

  constructor(data?: PartialMessage<TLNotifyChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotifyChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotifyChats {
    return new TLNotifyChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotifyChats {
    return new TLNotifyChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotifyChats {
    return new TLNotifyChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotifyChats | PlainMessage<TLNotifyChats> | undefined, b: TLNotifyChats | PlainMessage<TLNotifyChats> | undefined): boolean {
    return proto3.util.equals(TLNotifyChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotifyBroadcasts
 */
export class TLNotifyBroadcasts extends Message$1<TLNotifyBroadcasts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer data2 = 1;
   */
  data2: NotifyPeer[] = [];

  constructor(data?: PartialMessage<TLNotifyBroadcasts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotifyBroadcasts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotifyBroadcasts {
    return new TLNotifyBroadcasts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotifyBroadcasts {
    return new TLNotifyBroadcasts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotifyBroadcasts {
    return new TLNotifyBroadcasts().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotifyBroadcasts | PlainMessage<TLNotifyBroadcasts> | undefined, b: TLNotifyBroadcasts | PlainMessage<TLNotifyBroadcasts> | undefined): boolean {
    return proto3.util.equals(TLNotifyBroadcasts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLNotifyForumTopic
 */
export class TLNotifyForumTopic extends Message$1<TLNotifyForumTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer data2 = 1;
   */
  data2: NotifyPeer[] = [];

  constructor(data?: PartialMessage<TLNotifyForumTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLNotifyForumTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: NotifyPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLNotifyForumTopic {
    return new TLNotifyForumTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLNotifyForumTopic {
    return new TLNotifyForumTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLNotifyForumTopic {
    return new TLNotifyForumTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLNotifyForumTopic | PlainMessage<TLNotifyForumTopic> | undefined, b: TLNotifyForumTopic | PlainMessage<TLNotifyForumTopic> | undefined): boolean {
    return proto3.util.equals(TLNotifyForumTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Page
 */
export class Page extends Message$1<Page> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool part = 3;
   */
  part = false;

  /**
   * @generated from field: bool rtl = 4;
   */
  rtl = false;

  /**
   * @generated from field: bool v2 = 5;
   */
  v2 = false;

  /**
   * @generated from field: string url = 6;
   */
  url = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock blocks = 7;
   */
  blocks: PageBlock[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photos = 8;
   */
  photos: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document documents = 9;
   */
  documents: Document[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value views = 10;
   */
  views: Int32Value[] = [];

  constructor(data?: PartialMessage<Page>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Page";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "part", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "rtl", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "v2", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "blocks", kind: "message", T: PageBlock, repeated: true },
    { no: 8, name: "photos", kind: "message", T: Photo, repeated: true },
    { no: 9, name: "documents", kind: "message", T: Document, repeated: true },
    { no: 10, name: "views", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Page {
    return new Page().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJsonString(jsonString, options);
  }

  static equals(a: Page | PlainMessage<Page> | undefined, b: Page | PlainMessage<Page> | undefined): boolean {
    return proto3.util.equals(Page, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPage
 */
export class TLPage extends Message$1<TLPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Page data2 = 1;
   */
  data2: Page[] = [];

  constructor(data?: PartialMessage<TLPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Page, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPage {
    return new TLPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPage {
    return new TLPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPage {
    return new TLPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLPage | PlainMessage<TLPage> | undefined, b: TLPage | PlainMessage<TLPage> | undefined): boolean {
    return proto3.util.equals(TLPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageBlock
 */
export class PageBlock extends Message$1<PageBlock> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text = 3;
   */
  text: RichText[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText author_RICHTEXT = 4;
   */
  authorRICHTEXT: RichText[] = [];

  /**
   * @generated from field: int32 published_date = 5;
   */
  publishedDate = 0;

  /**
   * @generated from field: string language = 6;
   */
  language = "";

  /**
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListItem items_VECTORPAGELISTITEM = 8;
   */
  itemsVECTORPAGELISTITEM: PageListItem[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText caption_RICHTEXT = 9;
   */
  captionRICHTEXT: RichText[] = [];

  /**
   * @generated from field: int64 photo_id = 10;
   */
  photoId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageCaption caption_PAGECAPTION = 11;
   */
  captionPAGECAPTION: PageCaption[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue url_FLAGSTRING = 12;
   */
  urlFLAGSTRING: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value webpage_id_FLAGINT64 = 13;
   */
  webpageIdFLAGINT64: Int64Value[] = [];

  /**
   * @generated from field: bool autoplay = 14;
   */
  autoplay = false;

  /**
   * @generated from field: bool loop = 15;
   */
  loop = false;

  /**
   * @generated from field: int64 video_id = 16;
   */
  videoId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock cover = 17;
   */
  cover: PageBlock[] = [];

  /**
   * @generated from field: bool full_width = 18;
   */
  fullWidth = false;

  /**
   * @generated from field: bool allow_scrolling = 19;
   */
  allowScrolling = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue html = 20;
   */
  html: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value poster_photo_id = 21;
   */
  posterPhotoId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value w_FLAGINT32 = 22;
   */
  wFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value h_FLAGINT32 = 23;
   */
  hFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: string url_STRING = 24;
   */
  urlSTRING = "";

  /**
   * @generated from field: int64 webpage_id_INT64 = 25;
   */
  webpageIdINT64 = protoInt64.zero;

  /**
   * @generated from field: int64 author_photo_id = 26;
   */
  authorPhotoId = protoInt64.zero;

  /**
   * @generated from field: string author_STRING = 27;
   */
  authorSTRING = "";

  /**
   * @generated from field: int32 date = 28;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock blocks = 29;
   */
  blocks: PageBlock[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock items_VECTORPAGEBLOCK = 30;
   */
  itemsVECTORPAGEBLOCK: PageBlock[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat channel = 31;
   */
  channel: Chat[] = [];

  /**
   * @generated from field: int64 audio_id = 32;
   */
  audioId = protoInt64.zero;

  /**
   * @generated from field: bool bordered = 33;
   */
  bordered = false;

  /**
   * @generated from field: bool striped = 34;
   */
  striped = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText title = 35;
   */
  title: RichText[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageTableRow rows = 36;
   */
  rows: PageTableRow[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListOrderedItem items_VECTORPAGELISTORDEREDITEM = 37;
   */
  itemsVECTORPAGELISTORDEREDITEM: PageListOrderedItem[] = [];

  /**
   * @generated from field: bool open = 38;
   */
  open = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageRelatedArticle articles = 39;
   */
  articles: PageRelatedArticle[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo = 40;
   */
  geo: GeoPoint[] = [];

  /**
   * @generated from field: int32 zoom = 41;
   */
  zoom = 0;

  /**
   * @generated from field: int32 w_INT32 = 42;
   */
  wINT32 = 0;

  /**
   * @generated from field: int32 h_INT32 = 43;
   */
  hINT32 = 0;

  constructor(data?: PartialMessage<PageBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "message", T: RichText, repeated: true },
    { no: 4, name: "author_RICHTEXT", kind: "message", T: RichText, repeated: true },
    { no: 5, name: "published_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "items_VECTORPAGELISTITEM", kind: "message", T: PageListItem, repeated: true },
    { no: 9, name: "caption_RICHTEXT", kind: "message", T: RichText, repeated: true },
    { no: 10, name: "photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "caption_PAGECAPTION", kind: "message", T: PageCaption, repeated: true },
    { no: 12, name: "url_FLAGSTRING", kind: "message", T: StringValue, repeated: true },
    { no: 13, name: "webpage_id_FLAGINT64", kind: "message", T: Int64Value, repeated: true },
    { no: 14, name: "autoplay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "loop", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "video_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "cover", kind: "message", T: PageBlock, repeated: true },
    { no: 18, name: "full_width", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "allow_scrolling", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "html", kind: "message", T: StringValue, repeated: true },
    { no: 21, name: "poster_photo_id", kind: "message", T: Int64Value, repeated: true },
    { no: 22, name: "w_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 23, name: "h_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 24, name: "url_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "webpage_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 26, name: "author_photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 27, name: "author_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 29, name: "blocks", kind: "message", T: PageBlock, repeated: true },
    { no: 30, name: "items_VECTORPAGEBLOCK", kind: "message", T: PageBlock, repeated: true },
    { no: 31, name: "channel", kind: "message", T: Chat, repeated: true },
    { no: 32, name: "audio_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 33, name: "bordered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 34, name: "striped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 35, name: "title", kind: "message", T: RichText, repeated: true },
    { no: 36, name: "rows", kind: "message", T: PageTableRow, repeated: true },
    { no: 37, name: "items_VECTORPAGELISTORDEREDITEM", kind: "message", T: PageListOrderedItem, repeated: true },
    { no: 38, name: "open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 39, name: "articles", kind: "message", T: PageRelatedArticle, repeated: true },
    { no: 40, name: "geo", kind: "message", T: GeoPoint, repeated: true },
    { no: 41, name: "zoom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 42, name: "w_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 43, name: "h_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageBlock {
    return new PageBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageBlock {
    return new PageBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageBlock {
    return new PageBlock().fromJsonString(jsonString, options);
  }

  static equals(a: PageBlock | PlainMessage<PageBlock> | undefined, b: PageBlock | PlainMessage<PageBlock> | undefined): boolean {
    return proto3.util.equals(PageBlock, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockUnsupported
 */
export class TLPageBlockUnsupported extends Message$1<TLPageBlockUnsupported> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockUnsupported>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockUnsupported";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockUnsupported {
    return new TLPageBlockUnsupported().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockUnsupported {
    return new TLPageBlockUnsupported().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockUnsupported {
    return new TLPageBlockUnsupported().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockUnsupported | PlainMessage<TLPageBlockUnsupported> | undefined, b: TLPageBlockUnsupported | PlainMessage<TLPageBlockUnsupported> | undefined): boolean {
    return proto3.util.equals(TLPageBlockUnsupported, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockTitle
 */
export class TLPageBlockTitle extends Message$1<TLPageBlockTitle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockTitle {
    return new TLPageBlockTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockTitle {
    return new TLPageBlockTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockTitle {
    return new TLPageBlockTitle().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockTitle | PlainMessage<TLPageBlockTitle> | undefined, b: TLPageBlockTitle | PlainMessage<TLPageBlockTitle> | undefined): boolean {
    return proto3.util.equals(TLPageBlockTitle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSubtitle
 */
export class TLPageBlockSubtitle extends Message$1<TLPageBlockSubtitle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockSubtitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSubtitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockSubtitle {
    return new TLPageBlockSubtitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockSubtitle {
    return new TLPageBlockSubtitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockSubtitle {
    return new TLPageBlockSubtitle().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockSubtitle | PlainMessage<TLPageBlockSubtitle> | undefined, b: TLPageBlockSubtitle | PlainMessage<TLPageBlockSubtitle> | undefined): boolean {
    return proto3.util.equals(TLPageBlockSubtitle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAuthorDate
 */
export class TLPageBlockAuthorDate extends Message$1<TLPageBlockAuthorDate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockAuthorDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAuthorDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockAuthorDate {
    return new TLPageBlockAuthorDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockAuthorDate {
    return new TLPageBlockAuthorDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockAuthorDate {
    return new TLPageBlockAuthorDate().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockAuthorDate | PlainMessage<TLPageBlockAuthorDate> | undefined, b: TLPageBlockAuthorDate | PlainMessage<TLPageBlockAuthorDate> | undefined): boolean {
    return proto3.util.equals(TLPageBlockAuthorDate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockHeader
 */
export class TLPageBlockHeader extends Message$1<TLPageBlockHeader> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockHeader {
    return new TLPageBlockHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockHeader {
    return new TLPageBlockHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockHeader {
    return new TLPageBlockHeader().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockHeader | PlainMessage<TLPageBlockHeader> | undefined, b: TLPageBlockHeader | PlainMessage<TLPageBlockHeader> | undefined): boolean {
    return proto3.util.equals(TLPageBlockHeader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSubheader
 */
export class TLPageBlockSubheader extends Message$1<TLPageBlockSubheader> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockSubheader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSubheader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockSubheader {
    return new TLPageBlockSubheader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockSubheader {
    return new TLPageBlockSubheader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockSubheader {
    return new TLPageBlockSubheader().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockSubheader | PlainMessage<TLPageBlockSubheader> | undefined, b: TLPageBlockSubheader | PlainMessage<TLPageBlockSubheader> | undefined): boolean {
    return proto3.util.equals(TLPageBlockSubheader, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockParagraph
 */
export class TLPageBlockParagraph extends Message$1<TLPageBlockParagraph> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockParagraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockParagraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockParagraph {
    return new TLPageBlockParagraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockParagraph {
    return new TLPageBlockParagraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockParagraph {
    return new TLPageBlockParagraph().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockParagraph | PlainMessage<TLPageBlockParagraph> | undefined, b: TLPageBlockParagraph | PlainMessage<TLPageBlockParagraph> | undefined): boolean {
    return proto3.util.equals(TLPageBlockParagraph, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPreformatted
 */
export class TLPageBlockPreformatted extends Message$1<TLPageBlockPreformatted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockPreformatted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPreformatted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockPreformatted {
    return new TLPageBlockPreformatted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockPreformatted {
    return new TLPageBlockPreformatted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockPreformatted {
    return new TLPageBlockPreformatted().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockPreformatted | PlainMessage<TLPageBlockPreformatted> | undefined, b: TLPageBlockPreformatted | PlainMessage<TLPageBlockPreformatted> | undefined): boolean {
    return proto3.util.equals(TLPageBlockPreformatted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockFooter
 */
export class TLPageBlockFooter extends Message$1<TLPageBlockFooter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockFooter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockFooter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockFooter {
    return new TLPageBlockFooter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockFooter {
    return new TLPageBlockFooter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockFooter {
    return new TLPageBlockFooter().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockFooter | PlainMessage<TLPageBlockFooter> | undefined, b: TLPageBlockFooter | PlainMessage<TLPageBlockFooter> | undefined): boolean {
    return proto3.util.equals(TLPageBlockFooter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockDivider
 */
export class TLPageBlockDivider extends Message$1<TLPageBlockDivider> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockDivider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockDivider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockDivider {
    return new TLPageBlockDivider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockDivider {
    return new TLPageBlockDivider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockDivider {
    return new TLPageBlockDivider().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockDivider | PlainMessage<TLPageBlockDivider> | undefined, b: TLPageBlockDivider | PlainMessage<TLPageBlockDivider> | undefined): boolean {
    return proto3.util.equals(TLPageBlockDivider, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAnchor
 */
export class TLPageBlockAnchor extends Message$1<TLPageBlockAnchor> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockAnchor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAnchor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockAnchor {
    return new TLPageBlockAnchor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockAnchor {
    return new TLPageBlockAnchor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockAnchor {
    return new TLPageBlockAnchor().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockAnchor | PlainMessage<TLPageBlockAnchor> | undefined, b: TLPageBlockAnchor | PlainMessage<TLPageBlockAnchor> | undefined): boolean {
    return proto3.util.equals(TLPageBlockAnchor, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockList
 */
export class TLPageBlockList extends Message$1<TLPageBlockList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockList {
    return new TLPageBlockList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockList {
    return new TLPageBlockList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockList {
    return new TLPageBlockList().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockList | PlainMessage<TLPageBlockList> | undefined, b: TLPageBlockList | PlainMessage<TLPageBlockList> | undefined): boolean {
    return proto3.util.equals(TLPageBlockList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockBlockquote
 */
export class TLPageBlockBlockquote extends Message$1<TLPageBlockBlockquote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockBlockquote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockBlockquote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockBlockquote {
    return new TLPageBlockBlockquote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockBlockquote {
    return new TLPageBlockBlockquote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockBlockquote {
    return new TLPageBlockBlockquote().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockBlockquote | PlainMessage<TLPageBlockBlockquote> | undefined, b: TLPageBlockBlockquote | PlainMessage<TLPageBlockBlockquote> | undefined): boolean {
    return proto3.util.equals(TLPageBlockBlockquote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPullquote
 */
export class TLPageBlockPullquote extends Message$1<TLPageBlockPullquote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockPullquote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPullquote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockPullquote {
    return new TLPageBlockPullquote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockPullquote {
    return new TLPageBlockPullquote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockPullquote {
    return new TLPageBlockPullquote().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockPullquote | PlainMessage<TLPageBlockPullquote> | undefined, b: TLPageBlockPullquote | PlainMessage<TLPageBlockPullquote> | undefined): boolean {
    return proto3.util.equals(TLPageBlockPullquote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPhoto
 */
export class TLPageBlockPhoto extends Message$1<TLPageBlockPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockPhoto {
    return new TLPageBlockPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockPhoto {
    return new TLPageBlockPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockPhoto {
    return new TLPageBlockPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockPhoto | PlainMessage<TLPageBlockPhoto> | undefined, b: TLPageBlockPhoto | PlainMessage<TLPageBlockPhoto> | undefined): boolean {
    return proto3.util.equals(TLPageBlockPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockVideo
 */
export class TLPageBlockVideo extends Message$1<TLPageBlockVideo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockVideo {
    return new TLPageBlockVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockVideo {
    return new TLPageBlockVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockVideo {
    return new TLPageBlockVideo().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockVideo | PlainMessage<TLPageBlockVideo> | undefined, b: TLPageBlockVideo | PlainMessage<TLPageBlockVideo> | undefined): boolean {
    return proto3.util.equals(TLPageBlockVideo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockCover
 */
export class TLPageBlockCover extends Message$1<TLPageBlockCover> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockCover>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockCover";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockCover {
    return new TLPageBlockCover().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockCover {
    return new TLPageBlockCover().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockCover {
    return new TLPageBlockCover().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockCover | PlainMessage<TLPageBlockCover> | undefined, b: TLPageBlockCover | PlainMessage<TLPageBlockCover> | undefined): boolean {
    return proto3.util.equals(TLPageBlockCover, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockEmbed
 */
export class TLPageBlockEmbed extends Message$1<TLPageBlockEmbed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockEmbed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockEmbed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockEmbed {
    return new TLPageBlockEmbed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockEmbed {
    return new TLPageBlockEmbed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockEmbed {
    return new TLPageBlockEmbed().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockEmbed | PlainMessage<TLPageBlockEmbed> | undefined, b: TLPageBlockEmbed | PlainMessage<TLPageBlockEmbed> | undefined): boolean {
    return proto3.util.equals(TLPageBlockEmbed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockEmbedPost
 */
export class TLPageBlockEmbedPost extends Message$1<TLPageBlockEmbedPost> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockEmbedPost>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockEmbedPost";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockEmbedPost {
    return new TLPageBlockEmbedPost().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockEmbedPost {
    return new TLPageBlockEmbedPost().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockEmbedPost {
    return new TLPageBlockEmbedPost().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockEmbedPost | PlainMessage<TLPageBlockEmbedPost> | undefined, b: TLPageBlockEmbedPost | PlainMessage<TLPageBlockEmbedPost> | undefined): boolean {
    return proto3.util.equals(TLPageBlockEmbedPost, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockCollage
 */
export class TLPageBlockCollage extends Message$1<TLPageBlockCollage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockCollage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockCollage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockCollage {
    return new TLPageBlockCollage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockCollage {
    return new TLPageBlockCollage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockCollage {
    return new TLPageBlockCollage().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockCollage | PlainMessage<TLPageBlockCollage> | undefined, b: TLPageBlockCollage | PlainMessage<TLPageBlockCollage> | undefined): boolean {
    return proto3.util.equals(TLPageBlockCollage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSlideshow
 */
export class TLPageBlockSlideshow extends Message$1<TLPageBlockSlideshow> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockSlideshow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockSlideshow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockSlideshow {
    return new TLPageBlockSlideshow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockSlideshow {
    return new TLPageBlockSlideshow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockSlideshow {
    return new TLPageBlockSlideshow().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockSlideshow | PlainMessage<TLPageBlockSlideshow> | undefined, b: TLPageBlockSlideshow | PlainMessage<TLPageBlockSlideshow> | undefined): boolean {
    return proto3.util.equals(TLPageBlockSlideshow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockChannel
 */
export class TLPageBlockChannel extends Message$1<TLPageBlockChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockChannel {
    return new TLPageBlockChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockChannel {
    return new TLPageBlockChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockChannel {
    return new TLPageBlockChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockChannel | PlainMessage<TLPageBlockChannel> | undefined, b: TLPageBlockChannel | PlainMessage<TLPageBlockChannel> | undefined): boolean {
    return proto3.util.equals(TLPageBlockChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAudio
 */
export class TLPageBlockAudio extends Message$1<TLPageBlockAudio> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockAudio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockAudio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockAudio {
    return new TLPageBlockAudio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockAudio {
    return new TLPageBlockAudio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockAudio {
    return new TLPageBlockAudio().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockAudio | PlainMessage<TLPageBlockAudio> | undefined, b: TLPageBlockAudio | PlainMessage<TLPageBlockAudio> | undefined): boolean {
    return proto3.util.equals(TLPageBlockAudio, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockKicker
 */
export class TLPageBlockKicker extends Message$1<TLPageBlockKicker> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockKicker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockKicker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockKicker {
    return new TLPageBlockKicker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockKicker {
    return new TLPageBlockKicker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockKicker {
    return new TLPageBlockKicker().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockKicker | PlainMessage<TLPageBlockKicker> | undefined, b: TLPageBlockKicker | PlainMessage<TLPageBlockKicker> | undefined): boolean {
    return proto3.util.equals(TLPageBlockKicker, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockTable
 */
export class TLPageBlockTable extends Message$1<TLPageBlockTable> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockTable {
    return new TLPageBlockTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockTable {
    return new TLPageBlockTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockTable {
    return new TLPageBlockTable().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockTable | PlainMessage<TLPageBlockTable> | undefined, b: TLPageBlockTable | PlainMessage<TLPageBlockTable> | undefined): boolean {
    return proto3.util.equals(TLPageBlockTable, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockOrderedList
 */
export class TLPageBlockOrderedList extends Message$1<TLPageBlockOrderedList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockOrderedList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockOrderedList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockOrderedList {
    return new TLPageBlockOrderedList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockOrderedList {
    return new TLPageBlockOrderedList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockOrderedList {
    return new TLPageBlockOrderedList().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockOrderedList | PlainMessage<TLPageBlockOrderedList> | undefined, b: TLPageBlockOrderedList | PlainMessage<TLPageBlockOrderedList> | undefined): boolean {
    return proto3.util.equals(TLPageBlockOrderedList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockDetails
 */
export class TLPageBlockDetails extends Message$1<TLPageBlockDetails> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockDetails {
    return new TLPageBlockDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockDetails {
    return new TLPageBlockDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockDetails {
    return new TLPageBlockDetails().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockDetails | PlainMessage<TLPageBlockDetails> | undefined, b: TLPageBlockDetails | PlainMessage<TLPageBlockDetails> | undefined): boolean {
    return proto3.util.equals(TLPageBlockDetails, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockRelatedArticles
 */
export class TLPageBlockRelatedArticles extends Message$1<TLPageBlockRelatedArticles> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockRelatedArticles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockRelatedArticles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockRelatedArticles {
    return new TLPageBlockRelatedArticles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockRelatedArticles {
    return new TLPageBlockRelatedArticles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockRelatedArticles {
    return new TLPageBlockRelatedArticles().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockRelatedArticles | PlainMessage<TLPageBlockRelatedArticles> | undefined, b: TLPageBlockRelatedArticles | PlainMessage<TLPageBlockRelatedArticles> | undefined): boolean {
    return proto3.util.equals(TLPageBlockRelatedArticles, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageBlockMap
 */
export class TLPageBlockMap extends Message$1<TLPageBlockMap> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock data2 = 1;
   */
  data2: PageBlock[] = [];

  constructor(data?: PartialMessage<TLPageBlockMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageBlockMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageBlockMap {
    return new TLPageBlockMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageBlockMap {
    return new TLPageBlockMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageBlockMap {
    return new TLPageBlockMap().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageBlockMap | PlainMessage<TLPageBlockMap> | undefined, b: TLPageBlockMap | PlainMessage<TLPageBlockMap> | undefined): boolean {
    return proto3.util.equals(TLPageBlockMap, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageCaption
 */
export class PageCaption extends Message$1<PageCaption> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text = 3;
   */
  text: RichText[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText credit = 4;
   */
  credit: RichText[] = [];

  constructor(data?: PartialMessage<PageCaption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageCaption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "message", T: RichText, repeated: true },
    { no: 4, name: "credit", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageCaption {
    return new PageCaption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageCaption {
    return new PageCaption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageCaption {
    return new PageCaption().fromJsonString(jsonString, options);
  }

  static equals(a: PageCaption | PlainMessage<PageCaption> | undefined, b: PageCaption | PlainMessage<PageCaption> | undefined): boolean {
    return proto3.util.equals(PageCaption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageCaption
 */
export class TLPageCaption extends Message$1<TLPageCaption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageCaption data2 = 1;
   */
  data2: PageCaption[] = [];

  constructor(data?: PartialMessage<TLPageCaption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageCaption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageCaption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageCaption {
    return new TLPageCaption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageCaption {
    return new TLPageCaption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageCaption {
    return new TLPageCaption().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageCaption | PlainMessage<TLPageCaption> | undefined, b: TLPageCaption | PlainMessage<TLPageCaption> | undefined): boolean {
    return proto3.util.equals(TLPageCaption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageListItem
 */
export class PageListItem extends Message$1<PageListItem> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text = 3;
   */
  text: RichText[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock blocks = 4;
   */
  blocks: PageBlock[] = [];

  constructor(data?: PartialMessage<PageListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "message", T: RichText, repeated: true },
    { no: 4, name: "blocks", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageListItem {
    return new PageListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageListItem {
    return new PageListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageListItem {
    return new PageListItem().fromJsonString(jsonString, options);
  }

  static equals(a: PageListItem | PlainMessage<PageListItem> | undefined, b: PageListItem | PlainMessage<PageListItem> | undefined): boolean {
    return proto3.util.equals(PageListItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageListItemText
 */
export class TLPageListItemText extends Message$1<TLPageListItemText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListItem data2 = 1;
   */
  data2: PageListItem[] = [];

  constructor(data?: PartialMessage<TLPageListItemText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageListItemText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageListItemText {
    return new TLPageListItemText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageListItemText {
    return new TLPageListItemText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageListItemText {
    return new TLPageListItemText().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageListItemText | PlainMessage<TLPageListItemText> | undefined, b: TLPageListItemText | PlainMessage<TLPageListItemText> | undefined): boolean {
    return proto3.util.equals(TLPageListItemText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageListItemBlocks
 */
export class TLPageListItemBlocks extends Message$1<TLPageListItemBlocks> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListItem data2 = 1;
   */
  data2: PageListItem[] = [];

  constructor(data?: PartialMessage<TLPageListItemBlocks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageListItemBlocks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageListItemBlocks {
    return new TLPageListItemBlocks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageListItemBlocks {
    return new TLPageListItemBlocks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageListItemBlocks {
    return new TLPageListItemBlocks().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageListItemBlocks | PlainMessage<TLPageListItemBlocks> | undefined, b: TLPageListItemBlocks | PlainMessage<TLPageListItemBlocks> | undefined): boolean {
    return proto3.util.equals(TLPageListItemBlocks, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageListOrderedItem
 */
export class PageListOrderedItem extends Message$1<PageListOrderedItem> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string num = 3;
   */
  num = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text = 4;
   */
  text: RichText[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageBlock blocks = 5;
   */
  blocks: PageBlock[] = [];

  constructor(data?: PartialMessage<PageListOrderedItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageListOrderedItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "num", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "text", kind: "message", T: RichText, repeated: true },
    { no: 5, name: "blocks", kind: "message", T: PageBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageListOrderedItem {
    return new PageListOrderedItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageListOrderedItem {
    return new PageListOrderedItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageListOrderedItem {
    return new PageListOrderedItem().fromJsonString(jsonString, options);
  }

  static equals(a: PageListOrderedItem | PlainMessage<PageListOrderedItem> | undefined, b: PageListOrderedItem | PlainMessage<PageListOrderedItem> | undefined): boolean {
    return proto3.util.equals(PageListOrderedItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageListOrderedItemText
 */
export class TLPageListOrderedItemText extends Message$1<TLPageListOrderedItemText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListOrderedItem data2 = 1;
   */
  data2: PageListOrderedItem[] = [];

  constructor(data?: PartialMessage<TLPageListOrderedItemText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageListOrderedItemText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageListOrderedItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageListOrderedItemText {
    return new TLPageListOrderedItemText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageListOrderedItemText {
    return new TLPageListOrderedItemText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageListOrderedItemText {
    return new TLPageListOrderedItemText().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageListOrderedItemText | PlainMessage<TLPageListOrderedItemText> | undefined, b: TLPageListOrderedItemText | PlainMessage<TLPageListOrderedItemText> | undefined): boolean {
    return proto3.util.equals(TLPageListOrderedItemText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageListOrderedItemBlocks
 */
export class TLPageListOrderedItemBlocks extends Message$1<TLPageListOrderedItemBlocks> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageListOrderedItem data2 = 1;
   */
  data2: PageListOrderedItem[] = [];

  constructor(data?: PartialMessage<TLPageListOrderedItemBlocks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageListOrderedItemBlocks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageListOrderedItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageListOrderedItemBlocks {
    return new TLPageListOrderedItemBlocks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageListOrderedItemBlocks {
    return new TLPageListOrderedItemBlocks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageListOrderedItemBlocks {
    return new TLPageListOrderedItemBlocks().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageListOrderedItemBlocks | PlainMessage<TLPageListOrderedItemBlocks> | undefined, b: TLPageListOrderedItemBlocks | PlainMessage<TLPageListOrderedItemBlocks> | undefined): boolean {
    return proto3.util.equals(TLPageListOrderedItemBlocks, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageRelatedArticle
 */
export class PageRelatedArticle extends Message$1<PageRelatedArticle> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int64 webpage_id = 4;
   */
  webpageId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 5;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue description = 6;
   */
  description: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value photo_id = 7;
   */
  photoId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue author = 8;
   */
  author: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value published_date = 9;
   */
  publishedDate: Int32Value[] = [];

  constructor(data?: PartialMessage<PageRelatedArticle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageRelatedArticle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "webpage_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "description", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "photo_id", kind: "message", T: Int64Value, repeated: true },
    { no: 8, name: "author", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "published_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageRelatedArticle {
    return new PageRelatedArticle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageRelatedArticle {
    return new PageRelatedArticle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageRelatedArticle {
    return new PageRelatedArticle().fromJsonString(jsonString, options);
  }

  static equals(a: PageRelatedArticle | PlainMessage<PageRelatedArticle> | undefined, b: PageRelatedArticle | PlainMessage<PageRelatedArticle> | undefined): boolean {
    return proto3.util.equals(PageRelatedArticle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageRelatedArticle
 */
export class TLPageRelatedArticle extends Message$1<TLPageRelatedArticle> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageRelatedArticle data2 = 1;
   */
  data2: PageRelatedArticle[] = [];

  constructor(data?: PartialMessage<TLPageRelatedArticle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageRelatedArticle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageRelatedArticle, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageRelatedArticle {
    return new TLPageRelatedArticle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageRelatedArticle {
    return new TLPageRelatedArticle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageRelatedArticle {
    return new TLPageRelatedArticle().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageRelatedArticle | PlainMessage<TLPageRelatedArticle> | undefined, b: TLPageRelatedArticle | PlainMessage<TLPageRelatedArticle> | undefined): boolean {
    return proto3.util.equals(TLPageRelatedArticle, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageTableCell
 */
export class PageTableCell extends Message$1<PageTableCell> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool header = 3;
   */
  header = false;

  /**
   * @generated from field: bool align_center = 4;
   */
  alignCenter = false;

  /**
   * @generated from field: bool align_right = 5;
   */
  alignRight = false;

  /**
   * @generated from field: bool valign_middle = 6;
   */
  valignMiddle = false;

  /**
   * @generated from field: bool valign_bottom = 7;
   */
  valignBottom = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text = 8;
   */
  text: RichText[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value colspan = 9;
   */
  colspan: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value rowspan = 10;
   */
  rowspan: Int32Value[] = [];

  constructor(data?: PartialMessage<PageTableCell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageTableCell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "header", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "align_center", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "align_right", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "valign_middle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "valign_bottom", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "text", kind: "message", T: RichText, repeated: true },
    { no: 9, name: "colspan", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "rowspan", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageTableCell {
    return new PageTableCell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageTableCell {
    return new PageTableCell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageTableCell {
    return new PageTableCell().fromJsonString(jsonString, options);
  }

  static equals(a: PageTableCell | PlainMessage<PageTableCell> | undefined, b: PageTableCell | PlainMessage<PageTableCell> | undefined): boolean {
    return proto3.util.equals(PageTableCell, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageTableCell
 */
export class TLPageTableCell extends Message$1<TLPageTableCell> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageTableCell data2 = 1;
   */
  data2: PageTableCell[] = [];

  constructor(data?: PartialMessage<TLPageTableCell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageTableCell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageTableCell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageTableCell {
    return new TLPageTableCell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageTableCell {
    return new TLPageTableCell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageTableCell {
    return new TLPageTableCell().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageTableCell | PlainMessage<TLPageTableCell> | undefined, b: TLPageTableCell | PlainMessage<TLPageTableCell> | undefined): boolean {
    return proto3.util.equals(TLPageTableCell, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PageTableRow
 */
export class PageTableRow extends Message$1<PageTableRow> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageTableCell cells = 3;
   */
  cells: PageTableCell[] = [];

  constructor(data?: PartialMessage<PageTableRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PageTableRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "cells", kind: "message", T: PageTableCell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageTableRow {
    return new PageTableRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageTableRow {
    return new PageTableRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageTableRow {
    return new PageTableRow().fromJsonString(jsonString, options);
  }

  static equals(a: PageTableRow | PlainMessage<PageTableRow> | undefined, b: PageTableRow | PlainMessage<PageTableRow> | undefined): boolean {
    return proto3.util.equals(PageTableRow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPageTableRow
 */
export class TLPageTableRow extends Message$1<TLPageTableRow> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PageTableRow data2 = 1;
   */
  data2: PageTableRow[] = [];

  constructor(data?: PartialMessage<TLPageTableRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPageTableRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PageTableRow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPageTableRow {
    return new TLPageTableRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPageTableRow {
    return new TLPageTableRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPageTableRow {
    return new TLPageTableRow().fromJsonString(jsonString, options);
  }

  static equals(a: TLPageTableRow | PlainMessage<TLPageTableRow> | undefined, b: TLPageTableRow | PlainMessage<TLPageTableRow> | undefined): boolean {
    return proto3.util.equals(TLPageTableRow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo
 */
export class PasswordKdfAlgo extends Message$1<PasswordKdfAlgo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes salt1 = 3;
   */
  salt1 = new Uint8Array(0);

  /**
   * @generated from field: bytes salt2 = 4;
   */
  salt2 = new Uint8Array(0);

  /**
   * @generated from field: int32 g = 5;
   */
  g = 0;

  /**
   * @generated from field: bytes p = 6;
   */
  p = new Uint8Array(0);

  constructor(data?: PartialMessage<PasswordKdfAlgo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "salt1", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "salt2", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "g", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "p", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PasswordKdfAlgo {
    return new PasswordKdfAlgo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PasswordKdfAlgo {
    return new PasswordKdfAlgo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PasswordKdfAlgo {
    return new PasswordKdfAlgo().fromJsonString(jsonString, options);
  }

  static equals(a: PasswordKdfAlgo | PlainMessage<PasswordKdfAlgo> | undefined, b: PasswordKdfAlgo | PlainMessage<PasswordKdfAlgo> | undefined): boolean {
    return proto3.util.equals(PasswordKdfAlgo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPasswordKdfAlgoUnknown
 */
export class TLPasswordKdfAlgoUnknown extends Message$1<TLPasswordKdfAlgoUnknown> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo data2 = 1;
   */
  data2: PasswordKdfAlgo[] = [];

  constructor(data?: PartialMessage<TLPasswordKdfAlgoUnknown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPasswordKdfAlgoUnknown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PasswordKdfAlgo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPasswordKdfAlgoUnknown {
    return new TLPasswordKdfAlgoUnknown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPasswordKdfAlgoUnknown {
    return new TLPasswordKdfAlgoUnknown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPasswordKdfAlgoUnknown {
    return new TLPasswordKdfAlgoUnknown().fromJsonString(jsonString, options);
  }

  static equals(a: TLPasswordKdfAlgoUnknown | PlainMessage<TLPasswordKdfAlgoUnknown> | undefined, b: TLPasswordKdfAlgoUnknown | PlainMessage<TLPasswordKdfAlgoUnknown> | undefined): boolean {
    return proto3.util.equals(TLPasswordKdfAlgoUnknown, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPasswordKdfAlgoModPow
 */
export class TLPasswordKdfAlgoModPow extends Message$1<TLPasswordKdfAlgoModPow> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo data2 = 1;
   */
  data2: PasswordKdfAlgo[] = [];

  constructor(data?: PartialMessage<TLPasswordKdfAlgoModPow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPasswordKdfAlgoModPow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PasswordKdfAlgo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPasswordKdfAlgoModPow {
    return new TLPasswordKdfAlgoModPow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPasswordKdfAlgoModPow {
    return new TLPasswordKdfAlgoModPow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPasswordKdfAlgoModPow {
    return new TLPasswordKdfAlgoModPow().fromJsonString(jsonString, options);
  }

  static equals(a: TLPasswordKdfAlgoModPow | PlainMessage<TLPasswordKdfAlgoModPow> | undefined, b: TLPasswordKdfAlgoModPow | PlainMessage<TLPasswordKdfAlgoModPow> | undefined): boolean {
    return proto3.util.equals(TLPasswordKdfAlgoModPow, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentCharge
 */
export class PaymentCharge extends Message$1<PaymentCharge> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string provider_charge_id = 4;
   */
  providerChargeId = "";

  constructor(data?: PartialMessage<PaymentCharge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentCharge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provider_charge_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentCharge {
    return new PaymentCharge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentCharge {
    return new PaymentCharge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentCharge {
    return new PaymentCharge().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentCharge | PlainMessage<PaymentCharge> | undefined, b: PaymentCharge | PlainMessage<PaymentCharge> | undefined): boolean {
    return proto3.util.equals(PaymentCharge, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentCharge
 */
export class TLPaymentCharge extends Message$1<TLPaymentCharge> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentCharge data2 = 1;
   */
  data2: PaymentCharge[] = [];

  constructor(data?: PartialMessage<TLPaymentCharge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentCharge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentCharge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentCharge {
    return new TLPaymentCharge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentCharge {
    return new TLPaymentCharge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentCharge {
    return new TLPaymentCharge().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentCharge | PlainMessage<TLPaymentCharge> | undefined, b: TLPaymentCharge | PlainMessage<TLPaymentCharge> | undefined): boolean {
    return proto3.util.equals(TLPaymentCharge, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentFormMethod
 */
export class PaymentFormMethod extends Message$1<PaymentFormMethod> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  constructor(data?: PartialMessage<PaymentFormMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentFormMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentFormMethod {
    return new PaymentFormMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentFormMethod {
    return new PaymentFormMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentFormMethod {
    return new PaymentFormMethod().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentFormMethod | PlainMessage<PaymentFormMethod> | undefined, b: PaymentFormMethod | PlainMessage<PaymentFormMethod> | undefined): boolean {
    return proto3.util.equals(PaymentFormMethod, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentFormMethod
 */
export class TLPaymentFormMethod extends Message$1<TLPaymentFormMethod> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentFormMethod data2 = 1;
   */
  data2: PaymentFormMethod[] = [];

  constructor(data?: PartialMessage<TLPaymentFormMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentFormMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentFormMethod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentFormMethod {
    return new TLPaymentFormMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentFormMethod {
    return new TLPaymentFormMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentFormMethod {
    return new TLPaymentFormMethod().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentFormMethod | PlainMessage<TLPaymentFormMethod> | undefined, b: TLPaymentFormMethod | PlainMessage<TLPaymentFormMethod> | undefined): boolean {
    return proto3.util.equals(TLPaymentFormMethod, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo
 */
export class PaymentRequestedInfo extends Message$1<PaymentRequestedInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.StringValue name = 3;
   */
  name: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue phone = 4;
   */
  phone: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue email = 5;
   */
  email: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PostAddress shipping_address = 6;
   */
  shippingAddress: PostAddress[] = [];

  constructor(data?: PartialMessage<PaymentRequestedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "name", kind: "message", T: StringValue, repeated: true },
    { no: 4, name: "phone", kind: "message", T: StringValue, repeated: true },
    { no: 5, name: "email", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "shipping_address", kind: "message", T: PostAddress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentRequestedInfo {
    return new PaymentRequestedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentRequestedInfo {
    return new PaymentRequestedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentRequestedInfo {
    return new PaymentRequestedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentRequestedInfo | PlainMessage<PaymentRequestedInfo> | undefined, b: PaymentRequestedInfo | PlainMessage<PaymentRequestedInfo> | undefined): boolean {
    return proto3.util.equals(PaymentRequestedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentRequestedInfo
 */
export class TLPaymentRequestedInfo extends Message$1<TLPaymentRequestedInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo data2 = 1;
   */
  data2: PaymentRequestedInfo[] = [];

  constructor(data?: PartialMessage<TLPaymentRequestedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentRequestedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentRequestedInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentRequestedInfo {
    return new TLPaymentRequestedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentRequestedInfo {
    return new TLPaymentRequestedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentRequestedInfo {
    return new TLPaymentRequestedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentRequestedInfo | PlainMessage<TLPaymentRequestedInfo> | undefined, b: TLPaymentRequestedInfo | PlainMessage<TLPaymentRequestedInfo> | undefined): boolean {
    return proto3.util.equals(TLPaymentRequestedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentSavedCredentials
 */
export class PaymentSavedCredentials extends Message$1<PaymentSavedCredentials> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  constructor(data?: PartialMessage<PaymentSavedCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentSavedCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentSavedCredentials {
    return new PaymentSavedCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentSavedCredentials {
    return new PaymentSavedCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentSavedCredentials {
    return new PaymentSavedCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentSavedCredentials | PlainMessage<PaymentSavedCredentials> | undefined, b: PaymentSavedCredentials | PlainMessage<PaymentSavedCredentials> | undefined): boolean {
    return proto3.util.equals(PaymentSavedCredentials, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentSavedCredentialsCard
 */
export class TLPaymentSavedCredentialsCard extends Message$1<TLPaymentSavedCredentialsCard> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentSavedCredentials data2 = 1;
   */
  data2: PaymentSavedCredentials[] = [];

  constructor(data?: PartialMessage<TLPaymentSavedCredentialsCard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentSavedCredentialsCard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentSavedCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentSavedCredentialsCard {
    return new TLPaymentSavedCredentialsCard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentSavedCredentialsCard {
    return new TLPaymentSavedCredentialsCard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentSavedCredentialsCard {
    return new TLPaymentSavedCredentialsCard().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentSavedCredentialsCard | PlainMessage<TLPaymentSavedCredentialsCard> | undefined, b: TLPaymentSavedCredentialsCard | PlainMessage<TLPaymentSavedCredentialsCard> | undefined): boolean {
    return proto3.util.equals(TLPaymentSavedCredentialsCard, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Peer
 */
export class Peer extends Message$1<Peer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 chat_id = 4;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: int64 channel_id = 5;
   */
  channelId = protoInt64.zero;

  constructor(data?: PartialMessage<Peer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Peer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "channel_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Peer {
    return new Peer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJsonString(jsonString, options);
  }

  static equals(a: Peer | PlainMessage<Peer> | undefined, b: Peer | PlainMessage<Peer> | undefined): boolean {
    return proto3.util.equals(Peer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerUser
 */
export class TLPeerUser extends Message$1<TLPeerUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer data2 = 1;
   */
  data2: Peer[] = [];

  constructor(data?: PartialMessage<TLPeerUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerUser {
    return new TLPeerUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerUser {
    return new TLPeerUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerUser {
    return new TLPeerUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerUser | PlainMessage<TLPeerUser> | undefined, b: TLPeerUser | PlainMessage<TLPeerUser> | undefined): boolean {
    return proto3.util.equals(TLPeerUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerChat
 */
export class TLPeerChat extends Message$1<TLPeerChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer data2 = 1;
   */
  data2: Peer[] = [];

  constructor(data?: PartialMessage<TLPeerChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerChat {
    return new TLPeerChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerChat {
    return new TLPeerChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerChat {
    return new TLPeerChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerChat | PlainMessage<TLPeerChat> | undefined, b: TLPeerChat | PlainMessage<TLPeerChat> | undefined): boolean {
    return proto3.util.equals(TLPeerChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerChannel
 */
export class TLPeerChannel extends Message$1<TLPeerChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer data2 = 1;
   */
  data2: Peer[] = [];

  constructor(data?: PartialMessage<TLPeerChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerChannel {
    return new TLPeerChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerChannel {
    return new TLPeerChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerChannel {
    return new TLPeerChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerChannel | PlainMessage<TLPeerChannel> | undefined, b: TLPeerChannel | PlainMessage<TLPeerChannel> | undefined): boolean {
    return proto3.util.equals(TLPeerChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerBlocked
 */
export class PeerBlocked extends Message$1<PeerBlocked> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer_id = 3;
   */
  peerId: Peer[] = [];

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  constructor(data?: PartialMessage<PeerBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer_id", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerBlocked {
    return new PeerBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerBlocked {
    return new PeerBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerBlocked {
    return new PeerBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: PeerBlocked | PlainMessage<PeerBlocked> | undefined, b: PeerBlocked | PlainMessage<PeerBlocked> | undefined): boolean {
    return proto3.util.equals(PeerBlocked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerBlocked
 */
export class TLPeerBlocked extends Message$1<TLPeerBlocked> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerBlocked data2 = 1;
   */
  data2: PeerBlocked[] = [];

  constructor(data?: PartialMessage<TLPeerBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerBlocked, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerBlocked {
    return new TLPeerBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerBlocked {
    return new TLPeerBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerBlocked {
    return new TLPeerBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerBlocked | PlainMessage<TLPeerBlocked> | undefined, b: TLPeerBlocked | PlainMessage<TLPeerBlocked> | undefined): boolean {
    return proto3.util.equals(TLPeerBlocked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerLocated
 */
export class PeerLocated extends Message$1<PeerLocated> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 expires = 4;
   */
  expires = 0;

  /**
   * @generated from field: int32 distance = 5;
   */
  distance = 0;

  constructor(data?: PartialMessage<PeerLocated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerLocated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerLocated {
    return new PeerLocated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerLocated {
    return new PeerLocated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerLocated {
    return new PeerLocated().fromJsonString(jsonString, options);
  }

  static equals(a: PeerLocated | PlainMessage<PeerLocated> | undefined, b: PeerLocated | PlainMessage<PeerLocated> | undefined): boolean {
    return proto3.util.equals(PeerLocated, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerLocated
 */
export class TLPeerLocated extends Message$1<TLPeerLocated> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerLocated data2 = 1;
   */
  data2: PeerLocated[] = [];

  constructor(data?: PartialMessage<TLPeerLocated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerLocated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerLocated, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerLocated {
    return new TLPeerLocated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerLocated {
    return new TLPeerLocated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerLocated {
    return new TLPeerLocated().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerLocated | PlainMessage<TLPeerLocated> | undefined, b: TLPeerLocated | PlainMessage<TLPeerLocated> | undefined): boolean {
    return proto3.util.equals(TLPeerLocated, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerSelfLocated
 */
export class TLPeerSelfLocated extends Message$1<TLPeerSelfLocated> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerLocated data2 = 1;
   */
  data2: PeerLocated[] = [];

  constructor(data?: PartialMessage<TLPeerSelfLocated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerSelfLocated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerLocated, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerSelfLocated {
    return new TLPeerSelfLocated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerSelfLocated {
    return new TLPeerSelfLocated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerSelfLocated {
    return new TLPeerSelfLocated().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerSelfLocated | PlainMessage<TLPeerSelfLocated> | undefined, b: TLPeerSelfLocated | PlainMessage<TLPeerSelfLocated> | undefined): boolean {
    return proto3.util.equals(TLPeerSelfLocated, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings
 */
export class PeerNotifySettings extends Message$1<PeerNotifySettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool show_previews = 3;
   */
  showPreviews: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool silent = 4;
   */
  silent: Bool[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value mute_until = 5;
   */
  muteUntil: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound ios_sound = 6;
   */
  iosSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound android_sound = 7;
   */
  androidSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound other_sound = 8;
   */
  otherSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool stories_muted = 9;
   */
  storiesMuted: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool stories_hide_sender = 10;
   */
  storiesHideSender: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound stories_ios_sound = 11;
   */
  storiesIosSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound stories_android_sound = 12;
   */
  storiesAndroidSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotificationSound stories_other_sound = 13;
   */
  storiesOtherSound: NotificationSound[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue sound = 14;
   */
  sound: StringValue[] = [];

  constructor(data?: PartialMessage<PeerNotifySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "show_previews", kind: "message", T: Bool, repeated: true },
    { no: 4, name: "silent", kind: "message", T: Bool, repeated: true },
    { no: 5, name: "mute_until", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "ios_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 7, name: "android_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 8, name: "other_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 9, name: "stories_muted", kind: "message", T: Bool, repeated: true },
    { no: 10, name: "stories_hide_sender", kind: "message", T: Bool, repeated: true },
    { no: 11, name: "stories_ios_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 12, name: "stories_android_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 13, name: "stories_other_sound", kind: "message", T: NotificationSound, repeated: true },
    { no: 14, name: "sound", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerNotifySettings {
    return new PeerNotifySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerNotifySettings {
    return new PeerNotifySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerNotifySettings {
    return new PeerNotifySettings().fromJsonString(jsonString, options);
  }

  static equals(a: PeerNotifySettings | PlainMessage<PeerNotifySettings> | undefined, b: PeerNotifySettings | PlainMessage<PeerNotifySettings> | undefined): boolean {
    return proto3.util.equals(PeerNotifySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerNotifySettings
 */
export class TLPeerNotifySettings extends Message$1<TLPeerNotifySettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings data2 = 1;
   */
  data2: PeerNotifySettings[] = [];

  constructor(data?: PartialMessage<TLPeerNotifySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerNotifySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerNotifySettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerNotifySettings {
    return new TLPeerNotifySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerNotifySettings {
    return new TLPeerNotifySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerNotifySettings {
    return new TLPeerNotifySettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerNotifySettings | PlainMessage<TLPeerNotifySettings> | undefined, b: TLPeerNotifySettings | PlainMessage<TLPeerNotifySettings> | undefined): boolean {
    return proto3.util.equals(TLPeerNotifySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerSettings
 */
export class PeerSettings extends Message$1<PeerSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool report_spam = 3;
   */
  reportSpam = false;

  /**
   * @generated from field: bool add_contact = 4;
   */
  addContact = false;

  /**
   * @generated from field: bool block_contact = 5;
   */
  blockContact = false;

  /**
   * @generated from field: bool share_contact = 6;
   */
  shareContact = false;

  /**
   * @generated from field: bool need_contacts_exception = 7;
   */
  needContactsException = false;

  /**
   * @generated from field: bool report_geo = 8;
   */
  reportGeo = false;

  /**
   * @generated from field: bool autoarchived = 9;
   */
  autoarchived = false;

  /**
   * @generated from field: bool invite_members = 10;
   */
  inviteMembers = false;

  /**
   * @generated from field: bool request_chat_broadcast = 11;
   */
  requestChatBroadcast = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value geo_distance = 12;
   */
  geoDistance: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue request_chat_title = 13;
   */
  requestChatTitle: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value request_chat_date = 14;
   */
  requestChatDate: Int32Value[] = [];

  constructor(data?: PartialMessage<PeerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "report_spam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "add_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "block_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "share_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "need_contacts_exception", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "report_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "autoarchived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "invite_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "request_chat_broadcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "geo_distance", kind: "message", T: Int32Value, repeated: true },
    { no: 13, name: "request_chat_title", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "request_chat_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerSettings {
    return new PeerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerSettings {
    return new PeerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerSettings {
    return new PeerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: PeerSettings | PlainMessage<PeerSettings> | undefined, b: PeerSettings | PlainMessage<PeerSettings> | undefined): boolean {
    return proto3.util.equals(PeerSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerSettings
 */
export class TLPeerSettings extends Message$1<TLPeerSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerSettings data2 = 1;
   */
  data2: PeerSettings[] = [];

  constructor(data?: PartialMessage<TLPeerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerSettings {
    return new TLPeerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerSettings {
    return new TLPeerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerSettings {
    return new TLPeerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerSettings | PlainMessage<TLPeerSettings> | undefined, b: TLPeerSettings | PlainMessage<TLPeerSettings> | undefined): boolean {
    return proto3.util.equals(TLPeerSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerStories
 */
export class PeerStories extends Message$1<PeerStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value max_read_id = 4;
   */
  maxReadId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem stories = 5;
   */
  stories: StoryItem[] = [];

  constructor(data?: PartialMessage<PeerStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "max_read_id", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "stories", kind: "message", T: StoryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerStories {
    return new PeerStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerStories {
    return new PeerStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerStories {
    return new PeerStories().fromJsonString(jsonString, options);
  }

  static equals(a: PeerStories | PlainMessage<PeerStories> | undefined, b: PeerStories | PlainMessage<PeerStories> | undefined): boolean {
    return proto3.util.equals(PeerStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerStories
 */
export class TLPeerStories extends Message$1<TLPeerStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerStories data2 = 1;
   */
  data2: PeerStories[] = [];

  constructor(data?: PartialMessage<TLPeerStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerStories {
    return new TLPeerStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerStories {
    return new TLPeerStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerStories {
    return new TLPeerStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerStories | PlainMessage<TLPeerStories> | undefined, b: TLPeerStories | PlainMessage<TLPeerStories> | undefined): boolean {
    return proto3.util.equals(TLPeerStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PeerUtil
 */
export class PeerUtil extends Message$1<PeerUtil> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 self_id = 3;
   */
  selfId = protoInt64.zero;

  /**
   * @generated from field: int32 peer_type = 4;
   */
  peerType = 0;

  /**
   * @generated from field: int64 peer_id = 5;
   */
  peerId = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 6;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<PeerUtil>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PeerUtil";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "self_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "peer_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "peer_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerUtil {
    return new PeerUtil().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerUtil {
    return new PeerUtil().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerUtil {
    return new PeerUtil().fromJsonString(jsonString, options);
  }

  static equals(a: PeerUtil | PlainMessage<PeerUtil> | undefined, b: PeerUtil | PlainMessage<PeerUtil> | undefined): boolean {
    return proto3.util.equals(PeerUtil, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPeerUtil
 */
export class TLPeerUtil extends Message$1<TLPeerUtil> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerUtil data2 = 1;
   */
  data2: PeerUtil[] = [];

  constructor(data?: PartialMessage<TLPeerUtil>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPeerUtil";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PeerUtil, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPeerUtil {
    return new TLPeerUtil().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPeerUtil {
    return new TLPeerUtil().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPeerUtil {
    return new TLPeerUtil().fromJsonString(jsonString, options);
  }

  static equals(a: TLPeerUtil | PlainMessage<TLPeerUtil> | undefined, b: TLPeerUtil | PlainMessage<TLPeerUtil> | undefined): boolean {
    return proto3.util.equals(TLPeerUtil, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneCall
 */
export class PhoneCall extends Message$1<PhoneCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool video = 4;
   */
  video = false;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  /**
   * @generated from field: int64 admin_id = 7;
   */
  adminId = protoInt64.zero;

  /**
   * @generated from field: int64 participant_id = 8;
   */
  participantId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallProtocol protocol = 9;
   */
  protocol: PhoneCallProtocol[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value receive_date = 10;
   */
  receiveDate: Int32Value[] = [];

  /**
   * @generated from field: bytes g_a_hash = 11;
   */
  gAHash = new Uint8Array(0);

  /**
   * @generated from field: bytes g_b = 12;
   */
  gB = new Uint8Array(0);

  /**
   * @generated from field: bool p2p_allowed = 13;
   */
  p2pAllowed = false;

  /**
   * @generated from field: bytes g_a_or_b = 14;
   */
  gAOrB = new Uint8Array(0);

  /**
   * @generated from field: int64 key_fingerprint = 15;
   */
  keyFingerprint = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneConnection connections = 16;
   */
  connections: PhoneConnection[] = [];

  /**
   * @generated from field: int32 start_date = 17;
   */
  startDate = 0;

  /**
   * @generated from field: bool need_rating = 18;
   */
  needRating = false;

  /**
   * @generated from field: bool need_debug = 19;
   */
  needDebug = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason reason = 20;
   */
  reason: PhoneCallDiscardReason[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value duration = 21;
   */
  duration: Int32Value[] = [];

  constructor(data?: PartialMessage<PhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "admin_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "participant_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "protocol", kind: "message", T: PhoneCallProtocol, repeated: true },
    { no: 10, name: "receive_date", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "g_a_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "g_b", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "p2p_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "g_a_or_b", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 15, name: "key_fingerprint", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "connections", kind: "message", T: PhoneConnection, repeated: true },
    { no: 17, name: "start_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "need_rating", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "need_debug", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "reason", kind: "message", T: PhoneCallDiscardReason, repeated: true },
    { no: 21, name: "duration", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneCall {
    return new PhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneCall {
    return new PhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneCall {
    return new PhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneCall | PlainMessage<PhoneCall> | undefined, b: PhoneCall | PlainMessage<PhoneCall> | undefined): boolean {
    return proto3.util.equals(PhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallEmpty
 */
export class TLPhoneCallEmpty extends Message$1<TLPhoneCallEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCallEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallEmpty {
    return new TLPhoneCallEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallEmpty {
    return new TLPhoneCallEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallEmpty {
    return new TLPhoneCallEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallEmpty | PlainMessage<TLPhoneCallEmpty> | undefined, b: TLPhoneCallEmpty | PlainMessage<TLPhoneCallEmpty> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallWaiting
 */
export class TLPhoneCallWaiting extends Message$1<TLPhoneCallWaiting> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCallWaiting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallWaiting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallWaiting {
    return new TLPhoneCallWaiting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallWaiting {
    return new TLPhoneCallWaiting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallWaiting {
    return new TLPhoneCallWaiting().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallWaiting | PlainMessage<TLPhoneCallWaiting> | undefined, b: TLPhoneCallWaiting | PlainMessage<TLPhoneCallWaiting> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallWaiting, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallRequested
 */
export class TLPhoneCallRequested extends Message$1<TLPhoneCallRequested> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCallRequested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallRequested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallRequested {
    return new TLPhoneCallRequested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallRequested {
    return new TLPhoneCallRequested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallRequested {
    return new TLPhoneCallRequested().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallRequested | PlainMessage<TLPhoneCallRequested> | undefined, b: TLPhoneCallRequested | PlainMessage<TLPhoneCallRequested> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallRequested, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallAccepted
 */
export class TLPhoneCallAccepted extends Message$1<TLPhoneCallAccepted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCallAccepted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallAccepted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallAccepted {
    return new TLPhoneCallAccepted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallAccepted {
    return new TLPhoneCallAccepted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallAccepted {
    return new TLPhoneCallAccepted().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallAccepted | PlainMessage<TLPhoneCallAccepted> | undefined, b: TLPhoneCallAccepted | PlainMessage<TLPhoneCallAccepted> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallAccepted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCall
 */
export class TLPhoneCall extends Message$1<TLPhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCall {
    return new TLPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCall {
    return new TLPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCall {
    return new TLPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCall | PlainMessage<TLPhoneCall> | undefined, b: TLPhoneCall | PlainMessage<TLPhoneCall> | undefined): boolean {
    return proto3.util.equals(TLPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscarded
 */
export class TLPhoneCallDiscarded extends Message$1<TLPhoneCallDiscarded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall data2 = 1;
   */
  data2: PhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhoneCallDiscarded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscarded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallDiscarded {
    return new TLPhoneCallDiscarded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallDiscarded {
    return new TLPhoneCallDiscarded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallDiscarded {
    return new TLPhoneCallDiscarded().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallDiscarded | PlainMessage<TLPhoneCallDiscarded> | undefined, b: TLPhoneCallDiscarded | PlainMessage<TLPhoneCallDiscarded> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallDiscarded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason
 */
export class PhoneCallDiscardReason extends Message$1<PhoneCallDiscardReason> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<PhoneCallDiscardReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneCallDiscardReason {
    return new PhoneCallDiscardReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneCallDiscardReason {
    return new PhoneCallDiscardReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneCallDiscardReason {
    return new PhoneCallDiscardReason().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneCallDiscardReason | PlainMessage<PhoneCallDiscardReason> | undefined, b: PhoneCallDiscardReason | PlainMessage<PhoneCallDiscardReason> | undefined): boolean {
    return proto3.util.equals(PhoneCallDiscardReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonMissed
 */
export class TLPhoneCallDiscardReasonMissed extends Message$1<TLPhoneCallDiscardReasonMissed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason data2 = 1;
   */
  data2: PhoneCallDiscardReason[] = [];

  constructor(data?: PartialMessage<TLPhoneCallDiscardReasonMissed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonMissed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCallDiscardReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallDiscardReasonMissed {
    return new TLPhoneCallDiscardReasonMissed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonMissed {
    return new TLPhoneCallDiscardReasonMissed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonMissed {
    return new TLPhoneCallDiscardReasonMissed().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallDiscardReasonMissed | PlainMessage<TLPhoneCallDiscardReasonMissed> | undefined, b: TLPhoneCallDiscardReasonMissed | PlainMessage<TLPhoneCallDiscardReasonMissed> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallDiscardReasonMissed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonDisconnect
 */
export class TLPhoneCallDiscardReasonDisconnect extends Message$1<TLPhoneCallDiscardReasonDisconnect> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason data2 = 1;
   */
  data2: PhoneCallDiscardReason[] = [];

  constructor(data?: PartialMessage<TLPhoneCallDiscardReasonDisconnect>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonDisconnect";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCallDiscardReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallDiscardReasonDisconnect {
    return new TLPhoneCallDiscardReasonDisconnect().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonDisconnect {
    return new TLPhoneCallDiscardReasonDisconnect().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonDisconnect {
    return new TLPhoneCallDiscardReasonDisconnect().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallDiscardReasonDisconnect | PlainMessage<TLPhoneCallDiscardReasonDisconnect> | undefined, b: TLPhoneCallDiscardReasonDisconnect | PlainMessage<TLPhoneCallDiscardReasonDisconnect> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallDiscardReasonDisconnect, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonHangup
 */
export class TLPhoneCallDiscardReasonHangup extends Message$1<TLPhoneCallDiscardReasonHangup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason data2 = 1;
   */
  data2: PhoneCallDiscardReason[] = [];

  constructor(data?: PartialMessage<TLPhoneCallDiscardReasonHangup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonHangup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCallDiscardReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallDiscardReasonHangup {
    return new TLPhoneCallDiscardReasonHangup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonHangup {
    return new TLPhoneCallDiscardReasonHangup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonHangup {
    return new TLPhoneCallDiscardReasonHangup().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallDiscardReasonHangup | PlainMessage<TLPhoneCallDiscardReasonHangup> | undefined, b: TLPhoneCallDiscardReasonHangup | PlainMessage<TLPhoneCallDiscardReasonHangup> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallDiscardReasonHangup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonBusy
 */
export class TLPhoneCallDiscardReasonBusy extends Message$1<TLPhoneCallDiscardReasonBusy> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallDiscardReason data2 = 1;
   */
  data2: PhoneCallDiscardReason[] = [];

  constructor(data?: PartialMessage<TLPhoneCallDiscardReasonBusy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallDiscardReasonBusy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCallDiscardReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallDiscardReasonBusy {
    return new TLPhoneCallDiscardReasonBusy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonBusy {
    return new TLPhoneCallDiscardReasonBusy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallDiscardReasonBusy {
    return new TLPhoneCallDiscardReasonBusy().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallDiscardReasonBusy | PlainMessage<TLPhoneCallDiscardReasonBusy> | undefined, b: TLPhoneCallDiscardReasonBusy | PlainMessage<TLPhoneCallDiscardReasonBusy> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallDiscardReasonBusy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneCallProtocol
 */
export class PhoneCallProtocol extends Message$1<PhoneCallProtocol> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool udp_p2p = 3;
   */
  udpP2p = false;

  /**
   * @generated from field: bool udp_reflector = 4;
   */
  udpReflector = false;

  /**
   * @generated from field: int32 min_layer = 5;
   */
  minLayer = 0;

  /**
   * @generated from field: int32 max_layer = 6;
   */
  maxLayer = 0;

  /**
   * @generated from field: string library_versions = 7;
   */
  libraryVersions = "";

  constructor(data?: PartialMessage<PhoneCallProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneCallProtocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "udp_p2p", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "udp_reflector", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "min_layer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "max_layer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "library_versions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneCallProtocol {
    return new PhoneCallProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneCallProtocol {
    return new PhoneCallProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneCallProtocol {
    return new PhoneCallProtocol().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneCallProtocol | PlainMessage<PhoneCallProtocol> | undefined, b: PhoneCallProtocol | PlainMessage<PhoneCallProtocol> | undefined): boolean {
    return proto3.util.equals(PhoneCallProtocol, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallProtocol
 */
export class TLPhoneCallProtocol extends Message$1<TLPhoneCallProtocol> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCallProtocol data2 = 1;
   */
  data2: PhoneCallProtocol[] = [];

  constructor(data?: PartialMessage<TLPhoneCallProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneCallProtocol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneCallProtocol, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneCallProtocol {
    return new TLPhoneCallProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneCallProtocol {
    return new TLPhoneCallProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneCallProtocol {
    return new TLPhoneCallProtocol().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneCallProtocol | PlainMessage<TLPhoneCallProtocol> | undefined, b: TLPhoneCallProtocol | PlainMessage<TLPhoneCallProtocol> | undefined): boolean {
    return proto3.util.equals(TLPhoneCallProtocol, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneConnection
 */
export class PhoneConnection extends Message$1<PhoneConnection> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool tcp = 3;
   */
  tcp = false;

  /**
   * @generated from field: int64 id = 4;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string ip = 5;
   */
  ip = "";

  /**
   * @generated from field: string ipv6 = 6;
   */
  ipv6 = "";

  /**
   * @generated from field: int32 port = 7;
   */
  port = 0;

  /**
   * @generated from field: bytes peer_tag = 8;
   */
  peerTag = new Uint8Array(0);

  /**
   * @generated from field: bool turn = 9;
   */
  turn = false;

  /**
   * @generated from field: bool stun = 10;
   */
  stun = false;

  /**
   * @generated from field: string username = 11;
   */
  username = "";

  /**
   * @generated from field: string password = 12;
   */
  password = "";

  constructor(data?: PartialMessage<PhoneConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "tcp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ipv6", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "peer_tag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "turn", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "stun", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneConnection {
    return new PhoneConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneConnection {
    return new PhoneConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneConnection {
    return new PhoneConnection().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneConnection | PlainMessage<PhoneConnection> | undefined, b: PhoneConnection | PlainMessage<PhoneConnection> | undefined): boolean {
    return proto3.util.equals(PhoneConnection, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneConnection
 */
export class TLPhoneConnection extends Message$1<TLPhoneConnection> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneConnection data2 = 1;
   */
  data2: PhoneConnection[] = [];

  constructor(data?: PartialMessage<TLPhoneConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneConnection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneConnection {
    return new TLPhoneConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneConnection {
    return new TLPhoneConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneConnection {
    return new TLPhoneConnection().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneConnection | PlainMessage<TLPhoneConnection> | undefined, b: TLPhoneConnection | PlainMessage<TLPhoneConnection> | undefined): boolean {
    return proto3.util.equals(TLPhoneConnection, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneConnectionWebrtc
 */
export class TLPhoneConnectionWebrtc extends Message$1<TLPhoneConnectionWebrtc> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneConnection data2 = 1;
   */
  data2: PhoneConnection[] = [];

  constructor(data?: PartialMessage<TLPhoneConnectionWebrtc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneConnectionWebrtc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneConnection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneConnectionWebrtc {
    return new TLPhoneConnectionWebrtc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneConnectionWebrtc {
    return new TLPhoneConnectionWebrtc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneConnectionWebrtc {
    return new TLPhoneConnectionWebrtc().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneConnectionWebrtc | PlainMessage<TLPhoneConnectionWebrtc> | undefined, b: TLPhoneConnectionWebrtc | PlainMessage<TLPhoneConnectionWebrtc> | undefined): boolean {
    return proto3.util.equals(TLPhoneConnectionWebrtc, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Photo
 */
export class Photo extends Message$1<Photo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool has_stickers = 4;
   */
  hasStickers = false;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 6;
   */
  fileReference = new Uint8Array(0);

  /**
   * @generated from field: int32 date = 7;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize sizes = 8;
   */
  sizes: PhotoSize[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize video_sizes = 9;
   */
  videoSizes: VideoSize[] = [];

  /**
   * @generated from field: int32 dc_id = 10;
   */
  dcId = 0;

  constructor(data?: PartialMessage<Photo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Photo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "has_stickers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sizes", kind: "message", T: PhotoSize, repeated: true },
    { no: 9, name: "video_sizes", kind: "message", T: VideoSize, repeated: true },
    { no: 10, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Photo {
    return new Photo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJsonString(jsonString, options);
  }

  static equals(a: Photo | PlainMessage<Photo> | undefined, b: Photo | PlainMessage<Photo> | undefined): boolean {
    return proto3.util.equals(Photo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoEmpty
 */
export class TLPhotoEmpty extends Message$1<TLPhotoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo data2 = 1;
   */
  data2: Photo[] = [];

  constructor(data?: PartialMessage<TLPhotoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Photo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoEmpty {
    return new TLPhotoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoEmpty {
    return new TLPhotoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoEmpty {
    return new TLPhotoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoEmpty | PlainMessage<TLPhotoEmpty> | undefined, b: TLPhotoEmpty | PlainMessage<TLPhotoEmpty> | undefined): boolean {
    return proto3.util.equals(TLPhotoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoto
 */
export class TLPhoto extends Message$1<TLPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo data2 = 1;
   */
  data2: Photo[] = [];

  constructor(data?: PartialMessage<TLPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Photo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoto {
    return new TLPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoto {
    return new TLPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoto {
    return new TLPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoto | PlainMessage<TLPhoto> | undefined, b: TLPhoto | PlainMessage<TLPhoto> | undefined): boolean {
    return proto3.util.equals(TLPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhotoSize
 */
export class PhotoSize extends Message$1<PhotoSize> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: int32 w = 4;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 5;
   */
  h = 0;

  /**
   * @generated from field: int32 size2 = 6;
   */
  size2 = 0;

  /**
   * @generated from field: bytes bytes = 7;
   */
  bytes = new Uint8Array(0);

  /**
   * @generated from field: int32 sizes = 8;
   */
  sizes = 0;

  constructor(data?: PartialMessage<PhotoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhotoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "sizes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotoSize {
    return new PhotoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotoSize {
    return new PhotoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotoSize {
    return new PhotoSize().fromJsonString(jsonString, options);
  }

  static equals(a: PhotoSize | PlainMessage<PhotoSize> | undefined, b: PhotoSize | PlainMessage<PhotoSize> | undefined): boolean {
    return proto3.util.equals(PhotoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoSizeEmpty
 */
export class TLPhotoSizeEmpty extends Message$1<TLPhotoSizeEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoSizeEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoSizeEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoSizeEmpty {
    return new TLPhotoSizeEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoSizeEmpty {
    return new TLPhotoSizeEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoSizeEmpty {
    return new TLPhotoSizeEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoSizeEmpty | PlainMessage<TLPhotoSizeEmpty> | undefined, b: TLPhotoSizeEmpty | PlainMessage<TLPhotoSizeEmpty> | undefined): boolean {
    return proto3.util.equals(TLPhotoSizeEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoSize
 */
export class TLPhotoSize extends Message$1<TLPhotoSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoSize {
    return new TLPhotoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoSize {
    return new TLPhotoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoSize {
    return new TLPhotoSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoSize | PlainMessage<TLPhotoSize> | undefined, b: TLPhotoSize | PlainMessage<TLPhotoSize> | undefined): boolean {
    return proto3.util.equals(TLPhotoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoCachedSize
 */
export class TLPhotoCachedSize extends Message$1<TLPhotoCachedSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoCachedSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoCachedSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoCachedSize {
    return new TLPhotoCachedSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoCachedSize {
    return new TLPhotoCachedSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoCachedSize {
    return new TLPhotoCachedSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoCachedSize | PlainMessage<TLPhotoCachedSize> | undefined, b: TLPhotoCachedSize | PlainMessage<TLPhotoCachedSize> | undefined): boolean {
    return proto3.util.equals(TLPhotoCachedSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoStrippedSize
 */
export class TLPhotoStrippedSize extends Message$1<TLPhotoStrippedSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoStrippedSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoStrippedSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoStrippedSize {
    return new TLPhotoStrippedSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoStrippedSize {
    return new TLPhotoStrippedSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoStrippedSize {
    return new TLPhotoStrippedSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoStrippedSize | PlainMessage<TLPhotoStrippedSize> | undefined, b: TLPhotoStrippedSize | PlainMessage<TLPhotoStrippedSize> | undefined): boolean {
    return proto3.util.equals(TLPhotoStrippedSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoSizeProgressive
 */
export class TLPhotoSizeProgressive extends Message$1<TLPhotoSizeProgressive> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoSizeProgressive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoSizeProgressive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoSizeProgressive {
    return new TLPhotoSizeProgressive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoSizeProgressive {
    return new TLPhotoSizeProgressive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoSizeProgressive {
    return new TLPhotoSizeProgressive().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoSizeProgressive | PlainMessage<TLPhotoSizeProgressive> | undefined, b: TLPhotoSizeProgressive | PlainMessage<TLPhotoSizeProgressive> | undefined): boolean {
    return proto3.util.equals(TLPhotoSizeProgressive, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotoPathSize
 */
export class TLPhotoPathSize extends Message$1<TLPhotoPathSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize data2 = 1;
   */
  data2: PhotoSize[] = [];

  constructor(data?: PartialMessage<TLPhotoPathSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotoPathSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotoPathSize {
    return new TLPhotoPathSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotoPathSize {
    return new TLPhotoPathSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotoPathSize {
    return new TLPhotoPathSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotoPathSize | PlainMessage<TLPhotoPathSize> | undefined, b: TLPhotoPathSize | PlainMessage<TLPhotoPathSize> | undefined): boolean {
    return proto3.util.equals(TLPhotoPathSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Poll
 */
export class Poll extends Message$1<Poll> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool closed = 4;
   */
  closed = false;

  /**
   * @generated from field: bool public_voters = 5;
   */
  publicVoters = false;

  /**
   * @generated from field: bool multiple_choice = 6;
   */
  multipleChoice = false;

  /**
   * @generated from field: bool quiz = 7;
   */
  quiz = false;

  /**
   * @generated from field: string question = 8;
   */
  question = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollAnswer answers = 9;
   */
  answers: PollAnswer[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value close_period = 10;
   */
  closePeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value close_date = 11;
   */
  closeDate: Int32Value[] = [];

  constructor(data?: PartialMessage<Poll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Poll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "public_voters", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "multiple_choice", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "quiz", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "question", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "answers", kind: "message", T: PollAnswer, repeated: true },
    { no: 10, name: "close_period", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "close_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Poll {
    return new Poll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Poll {
    return new Poll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Poll {
    return new Poll().fromJsonString(jsonString, options);
  }

  static equals(a: Poll | PlainMessage<Poll> | undefined, b: Poll | PlainMessage<Poll> | undefined): boolean {
    return proto3.util.equals(Poll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPoll
 */
export class TLPoll extends Message$1<TLPoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Poll data2 = 1;
   */
  data2: Poll[] = [];

  constructor(data?: PartialMessage<TLPoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Poll, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPoll {
    return new TLPoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPoll {
    return new TLPoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPoll {
    return new TLPoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLPoll | PlainMessage<TLPoll> | undefined, b: TLPoll | PlainMessage<TLPoll> | undefined): boolean {
    return proto3.util.equals(TLPoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PollAnswer
 */
export class PollAnswer extends Message$1<PollAnswer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: bytes option = 4;
   */
  option = new Uint8Array(0);

  constructor(data?: PartialMessage<PollAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PollAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "option", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PollAnswer {
    return new PollAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PollAnswer {
    return new PollAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PollAnswer {
    return new PollAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: PollAnswer | PlainMessage<PollAnswer> | undefined, b: PollAnswer | PlainMessage<PollAnswer> | undefined): boolean {
    return proto3.util.equals(PollAnswer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPollAnswer
 */
export class TLPollAnswer extends Message$1<TLPollAnswer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollAnswer data2 = 1;
   */
  data2: PollAnswer[] = [];

  constructor(data?: PartialMessage<TLPollAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPollAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PollAnswer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPollAnswer {
    return new TLPollAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPollAnswer {
    return new TLPollAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPollAnswer {
    return new TLPollAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: TLPollAnswer | PlainMessage<TLPollAnswer> | undefined, b: TLPollAnswer | PlainMessage<TLPollAnswer> | undefined): boolean {
    return proto3.util.equals(TLPollAnswer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PollAnswerVoters
 */
export class PollAnswerVoters extends Message$1<PollAnswerVoters> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool chosen = 3;
   */
  chosen = false;

  /**
   * @generated from field: bool correct = 4;
   */
  correct = false;

  /**
   * @generated from field: bytes option = 5;
   */
  option = new Uint8Array(0);

  /**
   * @generated from field: int32 voters = 6;
   */
  voters = 0;

  constructor(data?: PartialMessage<PollAnswerVoters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PollAnswerVoters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chosen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "correct", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "option", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "voters", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PollAnswerVoters {
    return new PollAnswerVoters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PollAnswerVoters {
    return new PollAnswerVoters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PollAnswerVoters {
    return new PollAnswerVoters().fromJsonString(jsonString, options);
  }

  static equals(a: PollAnswerVoters | PlainMessage<PollAnswerVoters> | undefined, b: PollAnswerVoters | PlainMessage<PollAnswerVoters> | undefined): boolean {
    return proto3.util.equals(PollAnswerVoters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPollAnswerVoters
 */
export class TLPollAnswerVoters extends Message$1<TLPollAnswerVoters> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollAnswerVoters data2 = 1;
   */
  data2: PollAnswerVoters[] = [];

  constructor(data?: PartialMessage<TLPollAnswerVoters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPollAnswerVoters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PollAnswerVoters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPollAnswerVoters {
    return new TLPollAnswerVoters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPollAnswerVoters {
    return new TLPollAnswerVoters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPollAnswerVoters {
    return new TLPollAnswerVoters().fromJsonString(jsonString, options);
  }

  static equals(a: TLPollAnswerVoters | PlainMessage<TLPollAnswerVoters> | undefined, b: TLPollAnswerVoters | PlainMessage<TLPollAnswerVoters> | undefined): boolean {
    return proto3.util.equals(TLPollAnswerVoters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PollResults
 */
export class PollResults extends Message$1<PollResults> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool min = 3;
   */
  min = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollAnswerVoters results = 4;
   */
  results: PollAnswerVoters[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value total_voters = 5;
   */
  totalVoters: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer recent_voters_FLAGVECTORPEER = 6;
   */
  recentVotersFLAGVECTORPEER: Peer[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue solution = 7;
   */
  solution: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity solution_entities = 8;
   */
  solutionEntities: MessageEntity[] = [];

  /**
   * @generated from field: int64 recent_voters_FLAGVECTORINT64 = 9;
   */
  recentVotersFLAGVECTORINT64 = protoInt64.zero;

  constructor(data?: PartialMessage<PollResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PollResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "results", kind: "message", T: PollAnswerVoters, repeated: true },
    { no: 5, name: "total_voters", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "recent_voters_FLAGVECTORPEER", kind: "message", T: Peer, repeated: true },
    { no: 7, name: "solution", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "solution_entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 9, name: "recent_voters_FLAGVECTORINT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PollResults {
    return new PollResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PollResults {
    return new PollResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PollResults {
    return new PollResults().fromJsonString(jsonString, options);
  }

  static equals(a: PollResults | PlainMessage<PollResults> | undefined, b: PollResults | PlainMessage<PollResults> | undefined): boolean {
    return proto3.util.equals(PollResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPollResults
 */
export class TLPollResults extends Message$1<TLPollResults> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollResults data2 = 1;
   */
  data2: PollResults[] = [];

  constructor(data?: PartialMessage<TLPollResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPollResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PollResults, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPollResults {
    return new TLPollResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPollResults {
    return new TLPollResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPollResults {
    return new TLPollResults().fromJsonString(jsonString, options);
  }

  static equals(a: TLPollResults | PlainMessage<TLPollResults> | undefined, b: TLPollResults | PlainMessage<TLPollResults> | undefined): boolean {
    return proto3.util.equals(TLPollResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PopularContact
 */
export class PopularContact extends Message$1<PopularContact> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 client_id = 3;
   */
  clientId = protoInt64.zero;

  /**
   * @generated from field: int32 importers = 4;
   */
  importers = 0;

  constructor(data?: PartialMessage<PopularContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PopularContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "client_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "importers", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PopularContact {
    return new PopularContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PopularContact {
    return new PopularContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PopularContact {
    return new PopularContact().fromJsonString(jsonString, options);
  }

  static equals(a: PopularContact | PlainMessage<PopularContact> | undefined, b: PopularContact | PlainMessage<PopularContact> | undefined): boolean {
    return proto3.util.equals(PopularContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPopularContact
 */
export class TLPopularContact extends Message$1<TLPopularContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PopularContact data2 = 1;
   */
  data2: PopularContact[] = [];

  constructor(data?: PartialMessage<TLPopularContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPopularContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PopularContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPopularContact {
    return new TLPopularContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPopularContact {
    return new TLPopularContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPopularContact {
    return new TLPopularContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLPopularContact | PlainMessage<TLPopularContact> | undefined, b: TLPopularContact | PlainMessage<TLPopularContact> | undefined): boolean {
    return proto3.util.equals(TLPopularContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PostAddress
 */
export class PostAddress extends Message$1<PostAddress> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string street_line1 = 3;
   */
  streetLine1 = "";

  /**
   * @generated from field: string street_line2 = 4;
   */
  streetLine2 = "";

  /**
   * @generated from field: string city = 5;
   */
  city = "";

  /**
   * @generated from field: string state = 6;
   */
  state = "";

  /**
   * @generated from field: string country_iso2 = 7;
   */
  countryIso2 = "";

  /**
   * @generated from field: string post_code = 8;
   */
  postCode = "";

  constructor(data?: PartialMessage<PostAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PostAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "street_line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "street_line2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "country_iso2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "post_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAddress {
    return new PostAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAddress {
    return new PostAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAddress {
    return new PostAddress().fromJsonString(jsonString, options);
  }

  static equals(a: PostAddress | PlainMessage<PostAddress> | undefined, b: PostAddress | PlainMessage<PostAddress> | undefined): boolean {
    return proto3.util.equals(PostAddress, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPostAddress
 */
export class TLPostAddress extends Message$1<TLPostAddress> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PostAddress data2 = 1;
   */
  data2: PostAddress[] = [];

  constructor(data?: PartialMessage<TLPostAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPostAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PostAddress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPostAddress {
    return new TLPostAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPostAddress {
    return new TLPostAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPostAddress {
    return new TLPostAddress().fromJsonString(jsonString, options);
  }

  static equals(a: TLPostAddress | PlainMessage<TLPostAddress> | undefined, b: TLPostAddress | PlainMessage<TLPostAddress> | undefined): boolean {
    return proto3.util.equals(TLPostAddress, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PredefinedUser
 */
export class PredefinedUser extends Message$1<PredefinedUser> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string phone = 3;
   */
  phone = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue first_name = 4;
   */
  firstName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue last_name = 5;
   */
  lastName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue username = 6;
   */
  username: StringValue[] = [];

  /**
   * @generated from field: string code = 7;
   */
  code = "";

  /**
   * @generated from field: bool verified = 8;
   */
  verified = false;

  /**
   * @generated from field: repeated google.protobuf.Int64Value registered_user_id = 9;
   */
  registeredUserId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value last_seen_at = 10;
   */
  lastSeenAt: Int32Value[] = [];

  /**
   * @generated from field: bool banned = 11;
   */
  banned = false;

  constructor(data?: PartialMessage<PredefinedUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PredefinedUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_name", kind: "message", T: StringValue, repeated: true },
    { no: 5, name: "last_name", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "username", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "registered_user_id", kind: "message", T: Int64Value, repeated: true },
    { no: 10, name: "last_seen_at", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "banned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PredefinedUser {
    return new PredefinedUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PredefinedUser {
    return new PredefinedUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PredefinedUser {
    return new PredefinedUser().fromJsonString(jsonString, options);
  }

  static equals(a: PredefinedUser | PlainMessage<PredefinedUser> | undefined, b: PredefinedUser | PlainMessage<PredefinedUser> | undefined): boolean {
    return proto3.util.equals(PredefinedUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPredefinedUser
 */
export class TLPredefinedUser extends Message$1<TLPredefinedUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PredefinedUser data2 = 1;
   */
  data2: PredefinedUser[] = [];

  constructor(data?: PartialMessage<TLPredefinedUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPredefinedUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PredefinedUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPredefinedUser {
    return new TLPredefinedUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPredefinedUser {
    return new TLPredefinedUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPredefinedUser {
    return new TLPredefinedUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLPredefinedUser | PlainMessage<TLPredefinedUser> | undefined, b: TLPredefinedUser | PlainMessage<TLPredefinedUser> | undefined): boolean {
    return proto3.util.equals(TLPredefinedUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PremiumGiftOption
 */
export class PremiumGiftOption extends Message$1<PremiumGiftOption> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 months = 3;
   */
  months = 0;

  /**
   * @generated from field: string currency = 4;
   */
  currency = "";

  /**
   * @generated from field: int64 amount = 5;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string bot_url = 6;
   */
  botUrl = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue store_product = 7;
   */
  storeProduct: StringValue[] = [];

  constructor(data?: PartialMessage<PremiumGiftOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PremiumGiftOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "months", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "bot_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "store_product", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PremiumGiftOption {
    return new PremiumGiftOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PremiumGiftOption {
    return new PremiumGiftOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PremiumGiftOption {
    return new PremiumGiftOption().fromJsonString(jsonString, options);
  }

  static equals(a: PremiumGiftOption | PlainMessage<PremiumGiftOption> | undefined, b: PremiumGiftOption | PlainMessage<PremiumGiftOption> | undefined): boolean {
    return proto3.util.equals(PremiumGiftOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPremiumGiftOption
 */
export class TLPremiumGiftOption extends Message$1<TLPremiumGiftOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PremiumGiftOption data2 = 1;
   */
  data2: PremiumGiftOption[] = [];

  constructor(data?: PartialMessage<TLPremiumGiftOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPremiumGiftOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PremiumGiftOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPremiumGiftOption {
    return new TLPremiumGiftOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPremiumGiftOption {
    return new TLPremiumGiftOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPremiumGiftOption {
    return new TLPremiumGiftOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLPremiumGiftOption | PlainMessage<TLPremiumGiftOption> | undefined, b: TLPremiumGiftOption | PlainMessage<TLPremiumGiftOption> | undefined): boolean {
    return proto3.util.equals(TLPremiumGiftOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PremiumSubscriptionOption
 */
export class PremiumSubscriptionOption extends Message$1<PremiumSubscriptionOption> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool current = 3;
   */
  current = false;

  /**
   * @generated from field: bool can_purchase_upgrade = 4;
   */
  canPurchaseUpgrade = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue transaction = 5;
   */
  transaction: StringValue[] = [];

  /**
   * @generated from field: int32 months = 6;
   */
  months = 0;

  /**
   * @generated from field: string currency = 7;
   */
  currency = "";

  /**
   * @generated from field: int64 amount = 8;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string bot_url = 9;
   */
  botUrl = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue store_product = 10;
   */
  storeProduct: StringValue[] = [];

  constructor(data?: PartialMessage<PremiumSubscriptionOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PremiumSubscriptionOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "current", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "can_purchase_upgrade", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "transaction", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "months", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "bot_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "store_product", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PremiumSubscriptionOption {
    return new PremiumSubscriptionOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PremiumSubscriptionOption {
    return new PremiumSubscriptionOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PremiumSubscriptionOption {
    return new PremiumSubscriptionOption().fromJsonString(jsonString, options);
  }

  static equals(a: PremiumSubscriptionOption | PlainMessage<PremiumSubscriptionOption> | undefined, b: PremiumSubscriptionOption | PlainMessage<PremiumSubscriptionOption> | undefined): boolean {
    return proto3.util.equals(PremiumSubscriptionOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPremiumSubscriptionOption
 */
export class TLPremiumSubscriptionOption extends Message$1<TLPremiumSubscriptionOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PremiumSubscriptionOption data2 = 1;
   */
  data2: PremiumSubscriptionOption[] = [];

  constructor(data?: PartialMessage<TLPremiumSubscriptionOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPremiumSubscriptionOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PremiumSubscriptionOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPremiumSubscriptionOption {
    return new TLPremiumSubscriptionOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPremiumSubscriptionOption {
    return new TLPremiumSubscriptionOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPremiumSubscriptionOption {
    return new TLPremiumSubscriptionOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLPremiumSubscriptionOption | PlainMessage<TLPremiumSubscriptionOption> | undefined, b: TLPremiumSubscriptionOption | PlainMessage<TLPremiumSubscriptionOption> | undefined): boolean {
    return proto3.util.equals(TLPremiumSubscriptionOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PrivacyKey
 */
export class PrivacyKey extends Message$1<PrivacyKey> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<PrivacyKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PrivacyKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyKey {
    return new PrivacyKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyKey {
    return new PrivacyKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyKey {
    return new PrivacyKey().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyKey | PlainMessage<PrivacyKey> | undefined, b: PrivacyKey | PlainMessage<PrivacyKey> | undefined): boolean {
    return proto3.util.equals(PrivacyKey, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyStatusTimestamp
 */
export class TLPrivacyKeyStatusTimestamp extends Message$1<TLPrivacyKeyStatusTimestamp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyStatusTimestamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyStatusTimestamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyStatusTimestamp {
    return new TLPrivacyKeyStatusTimestamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyStatusTimestamp {
    return new TLPrivacyKeyStatusTimestamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyStatusTimestamp {
    return new TLPrivacyKeyStatusTimestamp().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyStatusTimestamp | PlainMessage<TLPrivacyKeyStatusTimestamp> | undefined, b: TLPrivacyKeyStatusTimestamp | PlainMessage<TLPrivacyKeyStatusTimestamp> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyStatusTimestamp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyChatInvite
 */
export class TLPrivacyKeyChatInvite extends Message$1<TLPrivacyKeyChatInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyChatInvite {
    return new TLPrivacyKeyChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyChatInvite {
    return new TLPrivacyKeyChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyChatInvite {
    return new TLPrivacyKeyChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyChatInvite | PlainMessage<TLPrivacyKeyChatInvite> | undefined, b: TLPrivacyKeyChatInvite | PlainMessage<TLPrivacyKeyChatInvite> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneCall
 */
export class TLPrivacyKeyPhoneCall extends Message$1<TLPrivacyKeyPhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyPhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyPhoneCall {
    return new TLPrivacyKeyPhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneCall {
    return new TLPrivacyKeyPhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneCall {
    return new TLPrivacyKeyPhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyPhoneCall | PlainMessage<TLPrivacyKeyPhoneCall> | undefined, b: TLPrivacyKeyPhoneCall | PlainMessage<TLPrivacyKeyPhoneCall> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyPhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneP2P
 */
export class TLPrivacyKeyPhoneP2P extends Message$1<TLPrivacyKeyPhoneP2P> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyPhoneP2P>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneP2P";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyPhoneP2P {
    return new TLPrivacyKeyPhoneP2P().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneP2P {
    return new TLPrivacyKeyPhoneP2P().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneP2P {
    return new TLPrivacyKeyPhoneP2P().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyPhoneP2P | PlainMessage<TLPrivacyKeyPhoneP2P> | undefined, b: TLPrivacyKeyPhoneP2P | PlainMessage<TLPrivacyKeyPhoneP2P> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyPhoneP2P, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyForwards
 */
export class TLPrivacyKeyForwards extends Message$1<TLPrivacyKeyForwards> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyForwards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyForwards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyForwards {
    return new TLPrivacyKeyForwards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyForwards {
    return new TLPrivacyKeyForwards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyForwards {
    return new TLPrivacyKeyForwards().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyForwards | PlainMessage<TLPrivacyKeyForwards> | undefined, b: TLPrivacyKeyForwards | PlainMessage<TLPrivacyKeyForwards> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyForwards, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyProfilePhoto
 */
export class TLPrivacyKeyProfilePhoto extends Message$1<TLPrivacyKeyProfilePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyProfilePhoto {
    return new TLPrivacyKeyProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyProfilePhoto {
    return new TLPrivacyKeyProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyProfilePhoto {
    return new TLPrivacyKeyProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyProfilePhoto | PlainMessage<TLPrivacyKeyProfilePhoto> | undefined, b: TLPrivacyKeyProfilePhoto | PlainMessage<TLPrivacyKeyProfilePhoto> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneNumber
 */
export class TLPrivacyKeyPhoneNumber extends Message$1<TLPrivacyKeyPhoneNumber> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyPhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyPhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyPhoneNumber {
    return new TLPrivacyKeyPhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneNumber {
    return new TLPrivacyKeyPhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyPhoneNumber {
    return new TLPrivacyKeyPhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyPhoneNumber | PlainMessage<TLPrivacyKeyPhoneNumber> | undefined, b: TLPrivacyKeyPhoneNumber | PlainMessage<TLPrivacyKeyPhoneNumber> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyPhoneNumber, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyAddedByPhone
 */
export class TLPrivacyKeyAddedByPhone extends Message$1<TLPrivacyKeyAddedByPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyAddedByPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyAddedByPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyAddedByPhone {
    return new TLPrivacyKeyAddedByPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyAddedByPhone {
    return new TLPrivacyKeyAddedByPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyAddedByPhone {
    return new TLPrivacyKeyAddedByPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyAddedByPhone | PlainMessage<TLPrivacyKeyAddedByPhone> | undefined, b: TLPrivacyKeyAddedByPhone | PlainMessage<TLPrivacyKeyAddedByPhone> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyAddedByPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyVoiceMessages
 */
export class TLPrivacyKeyVoiceMessages extends Message$1<TLPrivacyKeyVoiceMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyVoiceMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyVoiceMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyVoiceMessages {
    return new TLPrivacyKeyVoiceMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyVoiceMessages {
    return new TLPrivacyKeyVoiceMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyVoiceMessages {
    return new TLPrivacyKeyVoiceMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyVoiceMessages | PlainMessage<TLPrivacyKeyVoiceMessages> | undefined, b: TLPrivacyKeyVoiceMessages | PlainMessage<TLPrivacyKeyVoiceMessages> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyVoiceMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyAbout
 */
export class TLPrivacyKeyAbout extends Message$1<TLPrivacyKeyAbout> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey data2 = 1;
   */
  data2: PrivacyKey[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyAbout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyAbout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyAbout {
    return new TLPrivacyKeyAbout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyAbout {
    return new TLPrivacyKeyAbout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyAbout {
    return new TLPrivacyKeyAbout().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyAbout | PlainMessage<TLPrivacyKeyAbout> | undefined, b: TLPrivacyKeyAbout | PlainMessage<TLPrivacyKeyAbout> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyAbout, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PrivacyKeyRules
 */
export class PrivacyKeyRules extends Message$1<PrivacyKeyRules> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 key = 3;
   */
  key = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule rules = 4;
   */
  rules: PrivacyRule[] = [];

  constructor(data?: PartialMessage<PrivacyKeyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PrivacyKeyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "key", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "rules", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyKeyRules | PlainMessage<PrivacyKeyRules> | undefined, b: PrivacyKeyRules | PlainMessage<PrivacyKeyRules> | undefined): boolean {
    return proto3.util.equals(PrivacyKeyRules, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyRules
 */
export class TLPrivacyKeyRules extends Message$1<TLPrivacyKeyRules> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKeyRules data2 = 1;
   */
  data2: PrivacyKeyRules[] = [];

  constructor(data?: PartialMessage<TLPrivacyKeyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyKeyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyKeyRules, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyKeyRules {
    return new TLPrivacyKeyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyKeyRules {
    return new TLPrivacyKeyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyKeyRules {
    return new TLPrivacyKeyRules().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyKeyRules | PlainMessage<TLPrivacyKeyRules> | undefined, b: TLPrivacyKeyRules | PlainMessage<TLPrivacyKeyRules> | undefined): boolean {
    return proto3.util.equals(TLPrivacyKeyRules, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PrivacyRule
 */
export class PrivacyRule extends Message$1<PrivacyRule> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 users = 3;
   */
  users = protoInt64.zero;

  /**
   * @generated from field: int64 chats = 4;
   */
  chats = protoInt64.zero;

  constructor(data?: PartialMessage<PrivacyRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PrivacyRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "users", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chats", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyRule {
    return new PrivacyRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyRule {
    return new PrivacyRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyRule {
    return new PrivacyRule().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyRule | PlainMessage<PrivacyRule> | undefined, b: PrivacyRule | PlainMessage<PrivacyRule> | undefined): boolean {
    return proto3.util.equals(PrivacyRule, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowContacts
 */
export class TLPrivacyValueAllowContacts extends Message$1<TLPrivacyValueAllowContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueAllowContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueAllowContacts {
    return new TLPrivacyValueAllowContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowContacts {
    return new TLPrivacyValueAllowContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowContacts {
    return new TLPrivacyValueAllowContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueAllowContacts | PlainMessage<TLPrivacyValueAllowContacts> | undefined, b: TLPrivacyValueAllowContacts | PlainMessage<TLPrivacyValueAllowContacts> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueAllowContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowAll
 */
export class TLPrivacyValueAllowAll extends Message$1<TLPrivacyValueAllowAll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueAllowAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueAllowAll {
    return new TLPrivacyValueAllowAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowAll {
    return new TLPrivacyValueAllowAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowAll {
    return new TLPrivacyValueAllowAll().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueAllowAll | PlainMessage<TLPrivacyValueAllowAll> | undefined, b: TLPrivacyValueAllowAll | PlainMessage<TLPrivacyValueAllowAll> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueAllowAll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowUsers
 */
export class TLPrivacyValueAllowUsers extends Message$1<TLPrivacyValueAllowUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueAllowUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueAllowUsers {
    return new TLPrivacyValueAllowUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowUsers {
    return new TLPrivacyValueAllowUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowUsers {
    return new TLPrivacyValueAllowUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueAllowUsers | PlainMessage<TLPrivacyValueAllowUsers> | undefined, b: TLPrivacyValueAllowUsers | PlainMessage<TLPrivacyValueAllowUsers> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueAllowUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowContacts
 */
export class TLPrivacyValueDisallowContacts extends Message$1<TLPrivacyValueDisallowContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueDisallowContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueDisallowContacts {
    return new TLPrivacyValueDisallowContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowContacts {
    return new TLPrivacyValueDisallowContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowContacts {
    return new TLPrivacyValueDisallowContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueDisallowContacts | PlainMessage<TLPrivacyValueDisallowContacts> | undefined, b: TLPrivacyValueDisallowContacts | PlainMessage<TLPrivacyValueDisallowContacts> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueDisallowContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowAll
 */
export class TLPrivacyValueDisallowAll extends Message$1<TLPrivacyValueDisallowAll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueDisallowAll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowAll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueDisallowAll {
    return new TLPrivacyValueDisallowAll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowAll {
    return new TLPrivacyValueDisallowAll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowAll {
    return new TLPrivacyValueDisallowAll().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueDisallowAll | PlainMessage<TLPrivacyValueDisallowAll> | undefined, b: TLPrivacyValueDisallowAll | PlainMessage<TLPrivacyValueDisallowAll> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueDisallowAll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowUsers
 */
export class TLPrivacyValueDisallowUsers extends Message$1<TLPrivacyValueDisallowUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueDisallowUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueDisallowUsers {
    return new TLPrivacyValueDisallowUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowUsers {
    return new TLPrivacyValueDisallowUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowUsers {
    return new TLPrivacyValueDisallowUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueDisallowUsers | PlainMessage<TLPrivacyValueDisallowUsers> | undefined, b: TLPrivacyValueDisallowUsers | PlainMessage<TLPrivacyValueDisallowUsers> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueDisallowUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowChatParticipants
 */
export class TLPrivacyValueAllowChatParticipants extends Message$1<TLPrivacyValueAllowChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueAllowChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueAllowChatParticipants {
    return new TLPrivacyValueAllowChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowChatParticipants {
    return new TLPrivacyValueAllowChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowChatParticipants {
    return new TLPrivacyValueAllowChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueAllowChatParticipants | PlainMessage<TLPrivacyValueAllowChatParticipants> | undefined, b: TLPrivacyValueAllowChatParticipants | PlainMessage<TLPrivacyValueAllowChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueAllowChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowChatParticipants
 */
export class TLPrivacyValueDisallowChatParticipants extends Message$1<TLPrivacyValueDisallowChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueDisallowChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueDisallowChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueDisallowChatParticipants {
    return new TLPrivacyValueDisallowChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowChatParticipants {
    return new TLPrivacyValueDisallowChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueDisallowChatParticipants {
    return new TLPrivacyValueDisallowChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueDisallowChatParticipants | PlainMessage<TLPrivacyValueDisallowChatParticipants> | undefined, b: TLPrivacyValueDisallowChatParticipants | PlainMessage<TLPrivacyValueDisallowChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueDisallowChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowCloseFriends
 */
export class TLPrivacyValueAllowCloseFriends extends Message$1<TLPrivacyValueAllowCloseFriends> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule data2 = 1;
   */
  data2: PrivacyRule[] = [];

  constructor(data?: PartialMessage<TLPrivacyValueAllowCloseFriends>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPrivacyValueAllowCloseFriends";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPrivacyValueAllowCloseFriends {
    return new TLPrivacyValueAllowCloseFriends().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowCloseFriends {
    return new TLPrivacyValueAllowCloseFriends().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPrivacyValueAllowCloseFriends {
    return new TLPrivacyValueAllowCloseFriends().fromJsonString(jsonString, options);
  }

  static equals(a: TLPrivacyValueAllowCloseFriends | PlainMessage<TLPrivacyValueAllowCloseFriends> | undefined, b: TLPrivacyValueAllowCloseFriends | PlainMessage<TLPrivacyValueAllowCloseFriends> | undefined): boolean {
    return proto3.util.equals(TLPrivacyValueAllowCloseFriends, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Reaction
 */
export class Reaction extends Message$1<Reaction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string emoticon = 3;
   */
  emoticon = "";

  /**
   * @generated from field: int64 document_id = 4;
   */
  documentId = protoInt64.zero;

  constructor(data?: PartialMessage<Reaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Reaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reaction {
    return new Reaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJsonString(jsonString, options);
  }

  static equals(a: Reaction | PlainMessage<Reaction> | undefined, b: Reaction | PlainMessage<Reaction> | undefined): boolean {
    return proto3.util.equals(Reaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReactionEmpty
 */
export class TLReactionEmpty extends Message$1<TLReactionEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction data2 = 1;
   */
  data2: Reaction[] = [];

  constructor(data?: PartialMessage<TLReactionEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReactionEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReactionEmpty {
    return new TLReactionEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReactionEmpty {
    return new TLReactionEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReactionEmpty {
    return new TLReactionEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLReactionEmpty | PlainMessage<TLReactionEmpty> | undefined, b: TLReactionEmpty | PlainMessage<TLReactionEmpty> | undefined): boolean {
    return proto3.util.equals(TLReactionEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReactionEmoji
 */
export class TLReactionEmoji extends Message$1<TLReactionEmoji> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction data2 = 1;
   */
  data2: Reaction[] = [];

  constructor(data?: PartialMessage<TLReactionEmoji>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReactionEmoji";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReactionEmoji {
    return new TLReactionEmoji().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReactionEmoji {
    return new TLReactionEmoji().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReactionEmoji {
    return new TLReactionEmoji().fromJsonString(jsonString, options);
  }

  static equals(a: TLReactionEmoji | PlainMessage<TLReactionEmoji> | undefined, b: TLReactionEmoji | PlainMessage<TLReactionEmoji> | undefined): boolean {
    return proto3.util.equals(TLReactionEmoji, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReactionCustomEmoji
 */
export class TLReactionCustomEmoji extends Message$1<TLReactionCustomEmoji> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction data2 = 1;
   */
  data2: Reaction[] = [];

  constructor(data?: PartialMessage<TLReactionCustomEmoji>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReactionCustomEmoji";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReactionCustomEmoji {
    return new TLReactionCustomEmoji().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReactionCustomEmoji {
    return new TLReactionCustomEmoji().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReactionCustomEmoji {
    return new TLReactionCustomEmoji().fromJsonString(jsonString, options);
  }

  static equals(a: TLReactionCustomEmoji | PlainMessage<TLReactionCustomEmoji> | undefined, b: TLReactionCustomEmoji | PlainMessage<TLReactionCustomEmoji> | undefined): boolean {
    return proto3.util.equals(TLReactionCustomEmoji, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ReactionCount
 */
export class ReactionCount extends Message$1<ReactionCount> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value chosen_order = 3;
   */
  chosenOrder: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reaction_REACTION = 4;
   */
  reactionREACTION: Reaction[] = [];

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  /**
   * @generated from field: bool chosen = 6;
   */
  chosen = false;

  /**
   * @generated from field: string reaction_STRING = 7;
   */
  reactionSTRING = "";

  /**
   * @generated from field: string reaction = 100;
   */
  reaction = "";

  constructor(data?: PartialMessage<ReactionCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ReactionCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chosen_order", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "reaction_REACTION", kind: "message", T: Reaction, repeated: true },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "chosen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "reaction_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "reaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactionCount {
    return new ReactionCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactionCount {
    return new ReactionCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactionCount {
    return new ReactionCount().fromJsonString(jsonString, options);
  }

  static equals(a: ReactionCount | PlainMessage<ReactionCount> | undefined, b: ReactionCount | PlainMessage<ReactionCount> | undefined): boolean {
    return proto3.util.equals(ReactionCount, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReactionCount
 */
export class TLReactionCount extends Message$1<TLReactionCount> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReactionCount data2 = 1;
   */
  data2: ReactionCount[] = [];

  constructor(data?: PartialMessage<TLReactionCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReactionCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReactionCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReactionCount {
    return new TLReactionCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReactionCount {
    return new TLReactionCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReactionCount {
    return new TLReactionCount().fromJsonString(jsonString, options);
  }

  static equals(a: TLReactionCount | PlainMessage<TLReactionCount> | undefined, b: TLReactionCount | PlainMessage<TLReactionCount> | undefined): boolean {
    return proto3.util.equals(TLReactionCount, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ReadParticipantDate
 */
export class ReadParticipantDate extends Message$1<ReadParticipantDate> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  constructor(data?: PartialMessage<ReadParticipantDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ReadParticipantDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadParticipantDate {
    return new ReadParticipantDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadParticipantDate {
    return new ReadParticipantDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadParticipantDate {
    return new ReadParticipantDate().fromJsonString(jsonString, options);
  }

  static equals(a: ReadParticipantDate | PlainMessage<ReadParticipantDate> | undefined, b: ReadParticipantDate | PlainMessage<ReadParticipantDate> | undefined): boolean {
    return proto3.util.equals(ReadParticipantDate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReadParticipantDate
 */
export class TLReadParticipantDate extends Message$1<TLReadParticipantDate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReadParticipantDate data2 = 1;
   */
  data2: ReadParticipantDate[] = [];

  constructor(data?: PartialMessage<TLReadParticipantDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReadParticipantDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReadParticipantDate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReadParticipantDate {
    return new TLReadParticipantDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReadParticipantDate {
    return new TLReadParticipantDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReadParticipantDate {
    return new TLReadParticipantDate().fromJsonString(jsonString, options);
  }

  static equals(a: TLReadParticipantDate | PlainMessage<TLReadParticipantDate> | undefined, b: TLReadParticipantDate | PlainMessage<TLReadParticipantDate> | undefined): boolean {
    return proto3.util.equals(TLReadParticipantDate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ReceivedNotifyMessage
 */
export class ReceivedNotifyMessage extends Message$1<ReceivedNotifyMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: int32 flags = 4;
   */
  flags = 0;

  constructor(data?: PartialMessage<ReceivedNotifyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ReceivedNotifyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "flags", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceivedNotifyMessage {
    return new ReceivedNotifyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceivedNotifyMessage {
    return new ReceivedNotifyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceivedNotifyMessage {
    return new ReceivedNotifyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ReceivedNotifyMessage | PlainMessage<ReceivedNotifyMessage> | undefined, b: ReceivedNotifyMessage | PlainMessage<ReceivedNotifyMessage> | undefined): boolean {
    return proto3.util.equals(ReceivedNotifyMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReceivedNotifyMessage
 */
export class TLReceivedNotifyMessage extends Message$1<TLReceivedNotifyMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReceivedNotifyMessage data2 = 1;
   */
  data2: ReceivedNotifyMessage[] = [];

  constructor(data?: PartialMessage<TLReceivedNotifyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReceivedNotifyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReceivedNotifyMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReceivedNotifyMessage {
    return new TLReceivedNotifyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReceivedNotifyMessage {
    return new TLReceivedNotifyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReceivedNotifyMessage {
    return new TLReceivedNotifyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLReceivedNotifyMessage | PlainMessage<TLReceivedNotifyMessage> | undefined, b: TLReceivedNotifyMessage | PlainMessage<TLReceivedNotifyMessage> | undefined): boolean {
    return proto3.util.equals(TLReceivedNotifyMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl
 */
export class RecentMeUrl extends Message$1<RecentMeUrl> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 chat_id = 5;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInvite chat_invite = 6;
   */
  chatInvite: ChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered set = 7;
   */
  set: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<RecentMeUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "chat_invite", kind: "message", T: ChatInvite, repeated: true },
    { no: 7, name: "set", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecentMeUrl {
    return new RecentMeUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecentMeUrl {
    return new RecentMeUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecentMeUrl {
    return new RecentMeUrl().fromJsonString(jsonString, options);
  }

  static equals(a: RecentMeUrl | PlainMessage<RecentMeUrl> | undefined, b: RecentMeUrl | PlainMessage<RecentMeUrl> | undefined): boolean {
    return proto3.util.equals(RecentMeUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlUnknown
 */
export class TLRecentMeUrlUnknown extends Message$1<TLRecentMeUrlUnknown> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl data2 = 1;
   */
  data2: RecentMeUrl[] = [];

  constructor(data?: PartialMessage<TLRecentMeUrlUnknown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlUnknown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RecentMeUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRecentMeUrlUnknown {
    return new TLRecentMeUrlUnknown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRecentMeUrlUnknown {
    return new TLRecentMeUrlUnknown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRecentMeUrlUnknown {
    return new TLRecentMeUrlUnknown().fromJsonString(jsonString, options);
  }

  static equals(a: TLRecentMeUrlUnknown | PlainMessage<TLRecentMeUrlUnknown> | undefined, b: TLRecentMeUrlUnknown | PlainMessage<TLRecentMeUrlUnknown> | undefined): boolean {
    return proto3.util.equals(TLRecentMeUrlUnknown, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlUser
 */
export class TLRecentMeUrlUser extends Message$1<TLRecentMeUrlUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl data2 = 1;
   */
  data2: RecentMeUrl[] = [];

  constructor(data?: PartialMessage<TLRecentMeUrlUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RecentMeUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRecentMeUrlUser {
    return new TLRecentMeUrlUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRecentMeUrlUser {
    return new TLRecentMeUrlUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRecentMeUrlUser {
    return new TLRecentMeUrlUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLRecentMeUrlUser | PlainMessage<TLRecentMeUrlUser> | undefined, b: TLRecentMeUrlUser | PlainMessage<TLRecentMeUrlUser> | undefined): boolean {
    return proto3.util.equals(TLRecentMeUrlUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlChat
 */
export class TLRecentMeUrlChat extends Message$1<TLRecentMeUrlChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl data2 = 1;
   */
  data2: RecentMeUrl[] = [];

  constructor(data?: PartialMessage<TLRecentMeUrlChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RecentMeUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRecentMeUrlChat {
    return new TLRecentMeUrlChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRecentMeUrlChat {
    return new TLRecentMeUrlChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRecentMeUrlChat {
    return new TLRecentMeUrlChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLRecentMeUrlChat | PlainMessage<TLRecentMeUrlChat> | undefined, b: TLRecentMeUrlChat | PlainMessage<TLRecentMeUrlChat> | undefined): boolean {
    return proto3.util.equals(TLRecentMeUrlChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlChatInvite
 */
export class TLRecentMeUrlChatInvite extends Message$1<TLRecentMeUrlChatInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl data2 = 1;
   */
  data2: RecentMeUrl[] = [];

  constructor(data?: PartialMessage<TLRecentMeUrlChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RecentMeUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRecentMeUrlChatInvite {
    return new TLRecentMeUrlChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRecentMeUrlChatInvite {
    return new TLRecentMeUrlChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRecentMeUrlChatInvite {
    return new TLRecentMeUrlChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLRecentMeUrlChatInvite | PlainMessage<TLRecentMeUrlChatInvite> | undefined, b: TLRecentMeUrlChatInvite | PlainMessage<TLRecentMeUrlChatInvite> | undefined): boolean {
    return proto3.util.equals(TLRecentMeUrlChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlStickerSet
 */
export class TLRecentMeUrlStickerSet extends Message$1<TLRecentMeUrlStickerSet> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl data2 = 1;
   */
  data2: RecentMeUrl[] = [];

  constructor(data?: PartialMessage<TLRecentMeUrlStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRecentMeUrlStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RecentMeUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRecentMeUrlStickerSet {
    return new TLRecentMeUrlStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRecentMeUrlStickerSet {
    return new TLRecentMeUrlStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRecentMeUrlStickerSet {
    return new TLRecentMeUrlStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: TLRecentMeUrlStickerSet | PlainMessage<TLRecentMeUrlStickerSet> | undefined, b: TLRecentMeUrlStickerSet | PlainMessage<TLRecentMeUrlStickerSet> | undefined): boolean {
    return proto3.util.equals(TLRecentMeUrlStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup
 */
export class ReplyMarkup extends Message$1<ReplyMarkup> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool selective = 3;
   */
  selective = false;

  /**
   * @generated from field: bool single_use = 4;
   */
  singleUse = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue placeholder = 5;
   */
  placeholder: StringValue[] = [];

  /**
   * @generated from field: bool resize = 6;
   */
  resize = false;

  /**
   * @generated from field: bool persistent = 7;
   */
  persistent = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.KeyboardButtonRow rows = 8;
   */
  rows: KeyboardButtonRow[] = [];

  constructor(data?: PartialMessage<ReplyMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "selective", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "single_use", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "placeholder", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "resize", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "persistent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "rows", kind: "message", T: KeyboardButtonRow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyMarkup {
    return new ReplyMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyMarkup | PlainMessage<ReplyMarkup> | undefined, b: ReplyMarkup | PlainMessage<ReplyMarkup> | undefined): boolean {
    return proto3.util.equals(ReplyMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardHide
 */
export class TLReplyKeyboardHide extends Message$1<TLReplyKeyboardHide> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup data2 = 1;
   */
  data2: ReplyMarkup[] = [];

  constructor(data?: PartialMessage<TLReplyKeyboardHide>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardHide";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReplyMarkup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReplyKeyboardHide {
    return new TLReplyKeyboardHide().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReplyKeyboardHide {
    return new TLReplyKeyboardHide().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReplyKeyboardHide {
    return new TLReplyKeyboardHide().fromJsonString(jsonString, options);
  }

  static equals(a: TLReplyKeyboardHide | PlainMessage<TLReplyKeyboardHide> | undefined, b: TLReplyKeyboardHide | PlainMessage<TLReplyKeyboardHide> | undefined): boolean {
    return proto3.util.equals(TLReplyKeyboardHide, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardForceReply
 */
export class TLReplyKeyboardForceReply extends Message$1<TLReplyKeyboardForceReply> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup data2 = 1;
   */
  data2: ReplyMarkup[] = [];

  constructor(data?: PartialMessage<TLReplyKeyboardForceReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardForceReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReplyMarkup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReplyKeyboardForceReply {
    return new TLReplyKeyboardForceReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReplyKeyboardForceReply {
    return new TLReplyKeyboardForceReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReplyKeyboardForceReply {
    return new TLReplyKeyboardForceReply().fromJsonString(jsonString, options);
  }

  static equals(a: TLReplyKeyboardForceReply | PlainMessage<TLReplyKeyboardForceReply> | undefined, b: TLReplyKeyboardForceReply | PlainMessage<TLReplyKeyboardForceReply> | undefined): boolean {
    return proto3.util.equals(TLReplyKeyboardForceReply, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardMarkup
 */
export class TLReplyKeyboardMarkup extends Message$1<TLReplyKeyboardMarkup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup data2 = 1;
   */
  data2: ReplyMarkup[] = [];

  constructor(data?: PartialMessage<TLReplyKeyboardMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReplyKeyboardMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReplyMarkup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReplyKeyboardMarkup {
    return new TLReplyKeyboardMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReplyKeyboardMarkup {
    return new TLReplyKeyboardMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReplyKeyboardMarkup {
    return new TLReplyKeyboardMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: TLReplyKeyboardMarkup | PlainMessage<TLReplyKeyboardMarkup> | undefined, b: TLReplyKeyboardMarkup | PlainMessage<TLReplyKeyboardMarkup> | undefined): boolean {
    return proto3.util.equals(TLReplyKeyboardMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLReplyInlineMarkup
 */
export class TLReplyInlineMarkup extends Message$1<TLReplyInlineMarkup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReplyMarkup data2 = 1;
   */
  data2: ReplyMarkup[] = [];

  constructor(data?: PartialMessage<TLReplyInlineMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLReplyInlineMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReplyMarkup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLReplyInlineMarkup {
    return new TLReplyInlineMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLReplyInlineMarkup {
    return new TLReplyInlineMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLReplyInlineMarkup {
    return new TLReplyInlineMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: TLReplyInlineMarkup | PlainMessage<TLReplyInlineMarkup> | undefined, b: TLReplyInlineMarkup | PlainMessage<TLReplyInlineMarkup> | undefined): boolean {
    return proto3.util.equals(TLReplyInlineMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ReportReason
 */
export class ReportReason extends Message$1<ReportReason> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<ReportReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ReportReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportReason {
    return new ReportReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportReason {
    return new ReportReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportReason {
    return new ReportReason().fromJsonString(jsonString, options);
  }

  static equals(a: ReportReason | PlainMessage<ReportReason> | undefined, b: ReportReason | PlainMessage<ReportReason> | undefined): boolean {
    return proto3.util.equals(ReportReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonSpam
 */
export class TLInputReportReasonSpam extends Message$1<TLInputReportReasonSpam> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonSpam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonSpam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonSpam {
    return new TLInputReportReasonSpam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonSpam {
    return new TLInputReportReasonSpam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonSpam {
    return new TLInputReportReasonSpam().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonSpam | PlainMessage<TLInputReportReasonSpam> | undefined, b: TLInputReportReasonSpam | PlainMessage<TLInputReportReasonSpam> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonSpam, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonViolence
 */
export class TLInputReportReasonViolence extends Message$1<TLInputReportReasonViolence> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonViolence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonViolence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonViolence {
    return new TLInputReportReasonViolence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonViolence {
    return new TLInputReportReasonViolence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonViolence {
    return new TLInputReportReasonViolence().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonViolence | PlainMessage<TLInputReportReasonViolence> | undefined, b: TLInputReportReasonViolence | PlainMessage<TLInputReportReasonViolence> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonViolence, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonPornography
 */
export class TLInputReportReasonPornography extends Message$1<TLInputReportReasonPornography> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonPornography>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonPornography";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonPornography {
    return new TLInputReportReasonPornography().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonPornography {
    return new TLInputReportReasonPornography().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonPornography {
    return new TLInputReportReasonPornography().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonPornography | PlainMessage<TLInputReportReasonPornography> | undefined, b: TLInputReportReasonPornography | PlainMessage<TLInputReportReasonPornography> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonPornography, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonChildAbuse
 */
export class TLInputReportReasonChildAbuse extends Message$1<TLInputReportReasonChildAbuse> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonChildAbuse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonChildAbuse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonChildAbuse {
    return new TLInputReportReasonChildAbuse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonChildAbuse {
    return new TLInputReportReasonChildAbuse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonChildAbuse {
    return new TLInputReportReasonChildAbuse().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonChildAbuse | PlainMessage<TLInputReportReasonChildAbuse> | undefined, b: TLInputReportReasonChildAbuse | PlainMessage<TLInputReportReasonChildAbuse> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonChildAbuse, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonOther
 */
export class TLInputReportReasonOther extends Message$1<TLInputReportReasonOther> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonOther>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonOther";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonOther {
    return new TLInputReportReasonOther().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonOther {
    return new TLInputReportReasonOther().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonOther {
    return new TLInputReportReasonOther().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonOther | PlainMessage<TLInputReportReasonOther> | undefined, b: TLInputReportReasonOther | PlainMessage<TLInputReportReasonOther> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonOther, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonCopyright
 */
export class TLInputReportReasonCopyright extends Message$1<TLInputReportReasonCopyright> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonCopyright>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonCopyright";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonCopyright {
    return new TLInputReportReasonCopyright().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonCopyright {
    return new TLInputReportReasonCopyright().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonCopyright {
    return new TLInputReportReasonCopyright().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonCopyright | PlainMessage<TLInputReportReasonCopyright> | undefined, b: TLInputReportReasonCopyright | PlainMessage<TLInputReportReasonCopyright> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonCopyright, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonGeoIrrelevant
 */
export class TLInputReportReasonGeoIrrelevant extends Message$1<TLInputReportReasonGeoIrrelevant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonGeoIrrelevant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonGeoIrrelevant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonGeoIrrelevant {
    return new TLInputReportReasonGeoIrrelevant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonGeoIrrelevant {
    return new TLInputReportReasonGeoIrrelevant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonGeoIrrelevant {
    return new TLInputReportReasonGeoIrrelevant().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonGeoIrrelevant | PlainMessage<TLInputReportReasonGeoIrrelevant> | undefined, b: TLInputReportReasonGeoIrrelevant | PlainMessage<TLInputReportReasonGeoIrrelevant> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonGeoIrrelevant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonFake
 */
export class TLInputReportReasonFake extends Message$1<TLInputReportReasonFake> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonFake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonFake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonFake {
    return new TLInputReportReasonFake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonFake {
    return new TLInputReportReasonFake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonFake {
    return new TLInputReportReasonFake().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonFake | PlainMessage<TLInputReportReasonFake> | undefined, b: TLInputReportReasonFake | PlainMessage<TLInputReportReasonFake> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonFake, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonIllegalDrugs
 */
export class TLInputReportReasonIllegalDrugs extends Message$1<TLInputReportReasonIllegalDrugs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonIllegalDrugs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonIllegalDrugs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonIllegalDrugs {
    return new TLInputReportReasonIllegalDrugs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonIllegalDrugs {
    return new TLInputReportReasonIllegalDrugs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonIllegalDrugs {
    return new TLInputReportReasonIllegalDrugs().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonIllegalDrugs | PlainMessage<TLInputReportReasonIllegalDrugs> | undefined, b: TLInputReportReasonIllegalDrugs | PlainMessage<TLInputReportReasonIllegalDrugs> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonIllegalDrugs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonPersonalDetails
 */
export class TLInputReportReasonPersonalDetails extends Message$1<TLInputReportReasonPersonalDetails> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReportReason data2 = 1;
   */
  data2: ReportReason[] = [];

  constructor(data?: PartialMessage<TLInputReportReasonPersonalDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLInputReportReasonPersonalDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ReportReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLInputReportReasonPersonalDetails {
    return new TLInputReportReasonPersonalDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLInputReportReasonPersonalDetails {
    return new TLInputReportReasonPersonalDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLInputReportReasonPersonalDetails {
    return new TLInputReportReasonPersonalDetails().fromJsonString(jsonString, options);
  }

  static equals(a: TLInputReportReasonPersonalDetails | PlainMessage<TLInputReportReasonPersonalDetails> | undefined, b: TLInputReportReasonPersonalDetails | PlainMessage<TLInputReportReasonPersonalDetails> | undefined): boolean {
    return proto3.util.equals(TLInputReportReasonPersonalDetails, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.RequestPeerType
 */
export class RequestPeerType extends Message$1<RequestPeerType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool bot = 3;
   */
  bot: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool premium = 4;
   */
  premium: Bool[] = [];

  /**
   * @generated from field: bool creator = 5;
   */
  creator = false;

  /**
   * @generated from field: bool bot_participant = 6;
   */
  botParticipant = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool has_username = 7;
   */
  hasUsername: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool forum = 8;
   */
  forum: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights user_admin_rights = 9;
   */
  userAdminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights bot_admin_rights = 10;
   */
  botAdminRights: ChatAdminRights[] = [];

  constructor(data?: PartialMessage<RequestPeerType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.RequestPeerType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "bot", kind: "message", T: Bool, repeated: true },
    { no: 4, name: "premium", kind: "message", T: Bool, repeated: true },
    { no: 5, name: "creator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "bot_participant", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "has_username", kind: "message", T: Bool, repeated: true },
    { no: 8, name: "forum", kind: "message", T: Bool, repeated: true },
    { no: 9, name: "user_admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 10, name: "bot_admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestPeerType {
    return new RequestPeerType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestPeerType {
    return new RequestPeerType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestPeerType {
    return new RequestPeerType().fromJsonString(jsonString, options);
  }

  static equals(a: RequestPeerType | PlainMessage<RequestPeerType> | undefined, b: RequestPeerType | PlainMessage<RequestPeerType> | undefined): boolean {
    return proto3.util.equals(RequestPeerType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeUser
 */
export class TLRequestPeerTypeUser extends Message$1<TLRequestPeerTypeUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RequestPeerType data2 = 1;
   */
  data2: RequestPeerType[] = [];

  constructor(data?: PartialMessage<TLRequestPeerTypeUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RequestPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRequestPeerTypeUser {
    return new TLRequestPeerTypeUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRequestPeerTypeUser {
    return new TLRequestPeerTypeUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRequestPeerTypeUser {
    return new TLRequestPeerTypeUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLRequestPeerTypeUser | PlainMessage<TLRequestPeerTypeUser> | undefined, b: TLRequestPeerTypeUser | PlainMessage<TLRequestPeerTypeUser> | undefined): boolean {
    return proto3.util.equals(TLRequestPeerTypeUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeChat
 */
export class TLRequestPeerTypeChat extends Message$1<TLRequestPeerTypeChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RequestPeerType data2 = 1;
   */
  data2: RequestPeerType[] = [];

  constructor(data?: PartialMessage<TLRequestPeerTypeChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RequestPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRequestPeerTypeChat {
    return new TLRequestPeerTypeChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRequestPeerTypeChat {
    return new TLRequestPeerTypeChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRequestPeerTypeChat {
    return new TLRequestPeerTypeChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLRequestPeerTypeChat | PlainMessage<TLRequestPeerTypeChat> | undefined, b: TLRequestPeerTypeChat | PlainMessage<TLRequestPeerTypeChat> | undefined): boolean {
    return proto3.util.equals(TLRequestPeerTypeChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeBroadcast
 */
export class TLRequestPeerTypeBroadcast extends Message$1<TLRequestPeerTypeBroadcast> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RequestPeerType data2 = 1;
   */
  data2: RequestPeerType[] = [];

  constructor(data?: PartialMessage<TLRequestPeerTypeBroadcast>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRequestPeerTypeBroadcast";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RequestPeerType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRequestPeerTypeBroadcast {
    return new TLRequestPeerTypeBroadcast().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRequestPeerTypeBroadcast {
    return new TLRequestPeerTypeBroadcast().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRequestPeerTypeBroadcast {
    return new TLRequestPeerTypeBroadcast().fromJsonString(jsonString, options);
  }

  static equals(a: TLRequestPeerTypeBroadcast | PlainMessage<TLRequestPeerTypeBroadcast> | undefined, b: TLRequestPeerTypeBroadcast | PlainMessage<TLRequestPeerTypeBroadcast> | undefined): boolean {
    return proto3.util.equals(TLRequestPeerTypeBroadcast, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.RestrictionReason
 */
export class RestrictionReason extends Message$1<RestrictionReason> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string platform = 3;
   */
  platform = "";

  /**
   * @generated from field: string reason = 4;
   */
  reason = "";

  /**
   * @generated from field: string text = 5;
   */
  text = "";

  constructor(data?: PartialMessage<RestrictionReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.RestrictionReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestrictionReason {
    return new RestrictionReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJsonString(jsonString, options);
  }

  static equals(a: RestrictionReason | PlainMessage<RestrictionReason> | undefined, b: RestrictionReason | PlainMessage<RestrictionReason> | undefined): boolean {
    return proto3.util.equals(RestrictionReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLRestrictionReason
 */
export class TLRestrictionReason extends Message$1<TLRestrictionReason> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RestrictionReason data2 = 1;
   */
  data2: RestrictionReason[] = [];

  constructor(data?: PartialMessage<TLRestrictionReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLRestrictionReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RestrictionReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLRestrictionReason {
    return new TLRestrictionReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLRestrictionReason {
    return new TLRestrictionReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLRestrictionReason {
    return new TLRestrictionReason().fromJsonString(jsonString, options);
  }

  static equals(a: TLRestrictionReason | PlainMessage<TLRestrictionReason> | undefined, b: TLRestrictionReason | PlainMessage<TLRestrictionReason> | undefined): boolean {
    return proto3.util.equals(TLRestrictionReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.RichText
 */
export class RichText extends Message$1<RichText> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text_STRING = 3;
   */
  textSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText text_RICHTEXT = 4;
   */
  textRICHTEXT: RichText[] = [];

  /**
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * @generated from field: int64 webpage_id = 6;
   */
  webpageId = protoInt64.zero;

  /**
   * @generated from field: string email = 7;
   */
  email = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText texts = 8;
   */
  texts: RichText[] = [];

  /**
   * @generated from field: string phone = 9;
   */
  phone = "";

  /**
   * @generated from field: int64 document_id = 10;
   */
  documentId = protoInt64.zero;

  /**
   * @generated from field: int32 w = 11;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 12;
   */
  h = 0;

  /**
   * @generated from field: string name = 13;
   */
  name = "";

  constructor(data?: PartialMessage<RichText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.RichText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "text_RICHTEXT", kind: "message", T: RichText, repeated: true },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "webpage_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "texts", kind: "message", T: RichText, repeated: true },
    { no: 9, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RichText {
    return new RichText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RichText {
    return new RichText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RichText {
    return new RichText().fromJsonString(jsonString, options);
  }

  static equals(a: RichText | PlainMessage<RichText> | undefined, b: RichText | PlainMessage<RichText> | undefined): boolean {
    return proto3.util.equals(RichText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextEmpty
 */
export class TLTextEmpty extends Message$1<TLTextEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextEmpty {
    return new TLTextEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextEmpty {
    return new TLTextEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextEmpty {
    return new TLTextEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextEmpty | PlainMessage<TLTextEmpty> | undefined, b: TLTextEmpty | PlainMessage<TLTextEmpty> | undefined): boolean {
    return proto3.util.equals(TLTextEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextPlain
 */
export class TLTextPlain extends Message$1<TLTextPlain> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextPlain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextPlain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextPlain {
    return new TLTextPlain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextPlain {
    return new TLTextPlain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextPlain {
    return new TLTextPlain().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextPlain | PlainMessage<TLTextPlain> | undefined, b: TLTextPlain | PlainMessage<TLTextPlain> | undefined): boolean {
    return proto3.util.equals(TLTextPlain, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextBold
 */
export class TLTextBold extends Message$1<TLTextBold> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextBold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextBold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextBold {
    return new TLTextBold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextBold {
    return new TLTextBold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextBold {
    return new TLTextBold().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextBold | PlainMessage<TLTextBold> | undefined, b: TLTextBold | PlainMessage<TLTextBold> | undefined): boolean {
    return proto3.util.equals(TLTextBold, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextItalic
 */
export class TLTextItalic extends Message$1<TLTextItalic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextItalic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextItalic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextItalic {
    return new TLTextItalic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextItalic {
    return new TLTextItalic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextItalic {
    return new TLTextItalic().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextItalic | PlainMessage<TLTextItalic> | undefined, b: TLTextItalic | PlainMessage<TLTextItalic> | undefined): boolean {
    return proto3.util.equals(TLTextItalic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextUnderline
 */
export class TLTextUnderline extends Message$1<TLTextUnderline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextUnderline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextUnderline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextUnderline {
    return new TLTextUnderline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextUnderline {
    return new TLTextUnderline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextUnderline {
    return new TLTextUnderline().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextUnderline | PlainMessage<TLTextUnderline> | undefined, b: TLTextUnderline | PlainMessage<TLTextUnderline> | undefined): boolean {
    return proto3.util.equals(TLTextUnderline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextStrike
 */
export class TLTextStrike extends Message$1<TLTextStrike> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextStrike>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextStrike";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextStrike {
    return new TLTextStrike().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextStrike {
    return new TLTextStrike().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextStrike {
    return new TLTextStrike().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextStrike | PlainMessage<TLTextStrike> | undefined, b: TLTextStrike | PlainMessage<TLTextStrike> | undefined): boolean {
    return proto3.util.equals(TLTextStrike, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextFixed
 */
export class TLTextFixed extends Message$1<TLTextFixed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextFixed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextFixed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextFixed {
    return new TLTextFixed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextFixed {
    return new TLTextFixed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextFixed {
    return new TLTextFixed().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextFixed | PlainMessage<TLTextFixed> | undefined, b: TLTextFixed | PlainMessage<TLTextFixed> | undefined): boolean {
    return proto3.util.equals(TLTextFixed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextUrl
 */
export class TLTextUrl extends Message$1<TLTextUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextUrl {
    return new TLTextUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextUrl {
    return new TLTextUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextUrl {
    return new TLTextUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextUrl | PlainMessage<TLTextUrl> | undefined, b: TLTextUrl | PlainMessage<TLTextUrl> | undefined): boolean {
    return proto3.util.equals(TLTextUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextEmail
 */
export class TLTextEmail extends Message$1<TLTextEmail> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextEmail {
    return new TLTextEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextEmail {
    return new TLTextEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextEmail {
    return new TLTextEmail().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextEmail | PlainMessage<TLTextEmail> | undefined, b: TLTextEmail | PlainMessage<TLTextEmail> | undefined): boolean {
    return proto3.util.equals(TLTextEmail, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextConcat
 */
export class TLTextConcat extends Message$1<TLTextConcat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextConcat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextConcat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextConcat {
    return new TLTextConcat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextConcat {
    return new TLTextConcat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextConcat {
    return new TLTextConcat().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextConcat | PlainMessage<TLTextConcat> | undefined, b: TLTextConcat | PlainMessage<TLTextConcat> | undefined): boolean {
    return proto3.util.equals(TLTextConcat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextSubscript
 */
export class TLTextSubscript extends Message$1<TLTextSubscript> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextSubscript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextSubscript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextSubscript {
    return new TLTextSubscript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextSubscript {
    return new TLTextSubscript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextSubscript {
    return new TLTextSubscript().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextSubscript | PlainMessage<TLTextSubscript> | undefined, b: TLTextSubscript | PlainMessage<TLTextSubscript> | undefined): boolean {
    return proto3.util.equals(TLTextSubscript, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextSuperscript
 */
export class TLTextSuperscript extends Message$1<TLTextSuperscript> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextSuperscript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextSuperscript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextSuperscript {
    return new TLTextSuperscript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextSuperscript {
    return new TLTextSuperscript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextSuperscript {
    return new TLTextSuperscript().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextSuperscript | PlainMessage<TLTextSuperscript> | undefined, b: TLTextSuperscript | PlainMessage<TLTextSuperscript> | undefined): boolean {
    return proto3.util.equals(TLTextSuperscript, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextMarked
 */
export class TLTextMarked extends Message$1<TLTextMarked> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextMarked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextMarked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextMarked {
    return new TLTextMarked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextMarked {
    return new TLTextMarked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextMarked {
    return new TLTextMarked().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextMarked | PlainMessage<TLTextMarked> | undefined, b: TLTextMarked | PlainMessage<TLTextMarked> | undefined): boolean {
    return proto3.util.equals(TLTextMarked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextPhone
 */
export class TLTextPhone extends Message$1<TLTextPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextPhone {
    return new TLTextPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextPhone {
    return new TLTextPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextPhone {
    return new TLTextPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextPhone | PlainMessage<TLTextPhone> | undefined, b: TLTextPhone | PlainMessage<TLTextPhone> | undefined): boolean {
    return proto3.util.equals(TLTextPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextImage
 */
export class TLTextImage extends Message$1<TLTextImage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextImage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextImage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextImage {
    return new TLTextImage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextImage {
    return new TLTextImage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextImage {
    return new TLTextImage().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextImage | PlainMessage<TLTextImage> | undefined, b: TLTextImage | PlainMessage<TLTextImage> | undefined): boolean {
    return proto3.util.equals(TLTextImage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextAnchor
 */
export class TLTextAnchor extends Message$1<TLTextAnchor> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RichText data2 = 1;
   */
  data2: RichText[] = [];

  constructor(data?: PartialMessage<TLTextAnchor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextAnchor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: RichText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextAnchor {
    return new TLTextAnchor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextAnchor {
    return new TLTextAnchor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextAnchor {
    return new TLTextAnchor().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextAnchor | PlainMessage<TLTextAnchor> | undefined, b: TLTextAnchor | PlainMessage<TLTextAnchor> | undefined): boolean {
    return proto3.util.equals(TLTextAnchor, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SavedContact
 */
export class SavedContact extends Message$1<SavedContact> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string phone = 3;
   */
  phone = "";

  /**
   * @generated from field: string first_name = 4;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 5;
   */
  lastName = "";

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  constructor(data?: PartialMessage<SavedContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SavedContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SavedContact {
    return new SavedContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SavedContact {
    return new SavedContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SavedContact {
    return new SavedContact().fromJsonString(jsonString, options);
  }

  static equals(a: SavedContact | PlainMessage<SavedContact> | undefined, b: SavedContact | PlainMessage<SavedContact> | undefined): boolean {
    return proto3.util.equals(SavedContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSavedPhoneContact
 */
export class TLSavedPhoneContact extends Message$1<TLSavedPhoneContact> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SavedContact data2 = 1;
   */
  data2: SavedContact[] = [];

  constructor(data?: PartialMessage<TLSavedPhoneContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSavedPhoneContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SavedContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSavedPhoneContact {
    return new TLSavedPhoneContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSavedPhoneContact {
    return new TLSavedPhoneContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSavedPhoneContact {
    return new TLSavedPhoneContact().fromJsonString(jsonString, options);
  }

  static equals(a: TLSavedPhoneContact | PlainMessage<TLSavedPhoneContact> | undefined, b: TLSavedPhoneContact | PlainMessage<TLSavedPhoneContact> | undefined): boolean {
    return proto3.util.equals(TLSavedPhoneContact, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SearchResultsCalendarPeriod
 */
export class SearchResultsCalendarPeriod extends Message$1<SearchResultsCalendarPeriod> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 date = 3;
   */
  date = 0;

  /**
   * @generated from field: int32 min_msg_id = 4;
   */
  minMsgId = 0;

  /**
   * @generated from field: int32 max_msg_id = 5;
   */
  maxMsgId = 0;

  /**
   * @generated from field: int32 count = 6;
   */
  count = 0;

  constructor(data?: PartialMessage<SearchResultsCalendarPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SearchResultsCalendarPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "min_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "max_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResultsCalendarPeriod {
    return new SearchResultsCalendarPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultsCalendarPeriod {
    return new SearchResultsCalendarPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResultsCalendarPeriod {
    return new SearchResultsCalendarPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResultsCalendarPeriod | PlainMessage<SearchResultsCalendarPeriod> | undefined, b: SearchResultsCalendarPeriod | PlainMessage<SearchResultsCalendarPeriod> | undefined): boolean {
    return proto3.util.equals(SearchResultsCalendarPeriod, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSearchResultsCalendarPeriod
 */
export class TLSearchResultsCalendarPeriod extends Message$1<TLSearchResultsCalendarPeriod> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SearchResultsCalendarPeriod data2 = 1;
   */
  data2: SearchResultsCalendarPeriod[] = [];

  constructor(data?: PartialMessage<TLSearchResultsCalendarPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSearchResultsCalendarPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SearchResultsCalendarPeriod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSearchResultsCalendarPeriod {
    return new TLSearchResultsCalendarPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSearchResultsCalendarPeriod {
    return new TLSearchResultsCalendarPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSearchResultsCalendarPeriod {
    return new TLSearchResultsCalendarPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: TLSearchResultsCalendarPeriod | PlainMessage<TLSearchResultsCalendarPeriod> | undefined, b: TLSearchResultsCalendarPeriod | PlainMessage<TLSearchResultsCalendarPeriod> | undefined): boolean {
    return proto3.util.equals(TLSearchResultsCalendarPeriod, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SearchResultsPosition
 */
export class SearchResultsPosition extends Message$1<SearchResultsPosition> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 msg_id = 3;
   */
  msgId = 0;

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  /**
   * @generated from field: int32 offset = 5;
   */
  offset = 0;

  constructor(data?: PartialMessage<SearchResultsPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SearchResultsPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResultsPosition {
    return new SearchResultsPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultsPosition {
    return new SearchResultsPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResultsPosition {
    return new SearchResultsPosition().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResultsPosition | PlainMessage<SearchResultsPosition> | undefined, b: SearchResultsPosition | PlainMessage<SearchResultsPosition> | undefined): boolean {
    return proto3.util.equals(SearchResultsPosition, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSearchResultPosition
 */
export class TLSearchResultPosition extends Message$1<TLSearchResultPosition> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SearchResultsPosition data2 = 1;
   */
  data2: SearchResultsPosition[] = [];

  constructor(data?: PartialMessage<TLSearchResultPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSearchResultPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SearchResultsPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSearchResultPosition {
    return new TLSearchResultPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSearchResultPosition {
    return new TLSearchResultPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSearchResultPosition {
    return new TLSearchResultPosition().fromJsonString(jsonString, options);
  }

  static equals(a: TLSearchResultPosition | PlainMessage<TLSearchResultPosition> | undefined, b: TLSearchResultPosition | PlainMessage<TLSearchResultPosition> | undefined): boolean {
    return proto3.util.equals(TLSearchResultPosition, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureCredentialsEncrypted
 */
export class SecureCredentialsEncrypted extends Message$1<SecureCredentialsEncrypted> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bytes hash = 4;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: bytes secret = 5;
   */
  secret = new Uint8Array(0);

  constructor(data?: PartialMessage<SecureCredentialsEncrypted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureCredentialsEncrypted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureCredentialsEncrypted {
    return new SecureCredentialsEncrypted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureCredentialsEncrypted {
    return new SecureCredentialsEncrypted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureCredentialsEncrypted {
    return new SecureCredentialsEncrypted().fromJsonString(jsonString, options);
  }

  static equals(a: SecureCredentialsEncrypted | PlainMessage<SecureCredentialsEncrypted> | undefined, b: SecureCredentialsEncrypted | PlainMessage<SecureCredentialsEncrypted> | undefined): boolean {
    return proto3.util.equals(SecureCredentialsEncrypted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureCredentialsEncrypted
 */
export class TLSecureCredentialsEncrypted extends Message$1<TLSecureCredentialsEncrypted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureCredentialsEncrypted data2 = 1;
   */
  data2: SecureCredentialsEncrypted[] = [];

  constructor(data?: PartialMessage<TLSecureCredentialsEncrypted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureCredentialsEncrypted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureCredentialsEncrypted, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureCredentialsEncrypted {
    return new TLSecureCredentialsEncrypted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureCredentialsEncrypted {
    return new TLSecureCredentialsEncrypted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureCredentialsEncrypted {
    return new TLSecureCredentialsEncrypted().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureCredentialsEncrypted | PlainMessage<TLSecureCredentialsEncrypted> | undefined, b: TLSecureCredentialsEncrypted | PlainMessage<TLSecureCredentialsEncrypted> | undefined): boolean {
    return proto3.util.equals(TLSecureCredentialsEncrypted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureData
 */
export class SecureData extends Message$1<SecureData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bytes data_hash = 4;
   */
  dataHash = new Uint8Array(0);

  /**
   * @generated from field: bytes secret = 5;
   */
  secret = new Uint8Array(0);

  constructor(data?: PartialMessage<SecureData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "data_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureData {
    return new SecureData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureData {
    return new SecureData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureData {
    return new SecureData().fromJsonString(jsonString, options);
  }

  static equals(a: SecureData | PlainMessage<SecureData> | undefined, b: SecureData | PlainMessage<SecureData> | undefined): boolean {
    return proto3.util.equals(SecureData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureData
 */
export class TLSecureData extends Message$1<TLSecureData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureData data2 = 1;
   */
  data2: SecureData[] = [];

  constructor(data?: PartialMessage<TLSecureData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureData {
    return new TLSecureData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureData {
    return new TLSecureData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureData {
    return new TLSecureData().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureData | PlainMessage<TLSecureData> | undefined, b: TLSecureData | PlainMessage<TLSecureData> | undefined): boolean {
    return proto3.util.equals(TLSecureData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureFile
 */
export class SecureFile extends Message$1<SecureFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int64 size2_INT64 = 5;
   */
  size2INT64 = protoInt64.zero;

  /**
   * @generated from field: int32 dc_id = 6;
   */
  dcId = 0;

  /**
   * @generated from field: int32 date = 7;
   */
  date = 0;

  /**
   * @generated from field: bytes file_hash = 8;
   */
  fileHash = new Uint8Array(0);

  /**
   * @generated from field: bytes secret = 9;
   */
  secret = new Uint8Array(0);

  /**
   * @generated from field: int32 size2_INT32 = 10;
   */
  size2INT32 = 0;

  constructor(data?: PartialMessage<SecureFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "size2_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "file_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "size2_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureFile {
    return new SecureFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureFile {
    return new SecureFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureFile {
    return new SecureFile().fromJsonString(jsonString, options);
  }

  static equals(a: SecureFile | PlainMessage<SecureFile> | undefined, b: SecureFile | PlainMessage<SecureFile> | undefined): boolean {
    return proto3.util.equals(SecureFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureFileEmpty
 */
export class TLSecureFileEmpty extends Message$1<TLSecureFileEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile data2 = 1;
   */
  data2: SecureFile[] = [];

  constructor(data?: PartialMessage<TLSecureFileEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureFileEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureFileEmpty {
    return new TLSecureFileEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureFileEmpty {
    return new TLSecureFileEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureFileEmpty {
    return new TLSecureFileEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureFileEmpty | PlainMessage<TLSecureFileEmpty> | undefined, b: TLSecureFileEmpty | PlainMessage<TLSecureFileEmpty> | undefined): boolean {
    return proto3.util.equals(TLSecureFileEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureFile
 */
export class TLSecureFile extends Message$1<TLSecureFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile data2 = 1;
   */
  data2: SecureFile[] = [];

  constructor(data?: PartialMessage<TLSecureFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureFile {
    return new TLSecureFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureFile {
    return new TLSecureFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureFile {
    return new TLSecureFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureFile | PlainMessage<TLSecureFile> | undefined, b: TLSecureFile | PlainMessage<TLSecureFile> | undefined): boolean {
    return proto3.util.equals(TLSecureFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo
 */
export class SecurePasswordKdfAlgo extends Message$1<SecurePasswordKdfAlgo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes salt = 3;
   */
  salt = new Uint8Array(0);

  constructor(data?: PartialMessage<SecurePasswordKdfAlgo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurePasswordKdfAlgo {
    return new SecurePasswordKdfAlgo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurePasswordKdfAlgo {
    return new SecurePasswordKdfAlgo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurePasswordKdfAlgo {
    return new SecurePasswordKdfAlgo().fromJsonString(jsonString, options);
  }

  static equals(a: SecurePasswordKdfAlgo | PlainMessage<SecurePasswordKdfAlgo> | undefined, b: SecurePasswordKdfAlgo | PlainMessage<SecurePasswordKdfAlgo> | undefined): boolean {
    return proto3.util.equals(SecurePasswordKdfAlgo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoUnknown
 */
export class TLSecurePasswordKdfAlgoUnknown extends Message$1<TLSecurePasswordKdfAlgoUnknown> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo data2 = 1;
   */
  data2: SecurePasswordKdfAlgo[] = [];

  constructor(data?: PartialMessage<TLSecurePasswordKdfAlgoUnknown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoUnknown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecurePasswordKdfAlgo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecurePasswordKdfAlgoUnknown {
    return new TLSecurePasswordKdfAlgoUnknown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoUnknown {
    return new TLSecurePasswordKdfAlgoUnknown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoUnknown {
    return new TLSecurePasswordKdfAlgoUnknown().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecurePasswordKdfAlgoUnknown | PlainMessage<TLSecurePasswordKdfAlgoUnknown> | undefined, b: TLSecurePasswordKdfAlgoUnknown | PlainMessage<TLSecurePasswordKdfAlgoUnknown> | undefined): boolean {
    return proto3.util.equals(TLSecurePasswordKdfAlgoUnknown, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoPBKDF2
 */
export class TLSecurePasswordKdfAlgoPBKDF2 extends Message$1<TLSecurePasswordKdfAlgoPBKDF2> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo data2 = 1;
   */
  data2: SecurePasswordKdfAlgo[] = [];

  constructor(data?: PartialMessage<TLSecurePasswordKdfAlgoPBKDF2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoPBKDF2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecurePasswordKdfAlgo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecurePasswordKdfAlgoPBKDF2 {
    return new TLSecurePasswordKdfAlgoPBKDF2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoPBKDF2 {
    return new TLSecurePasswordKdfAlgoPBKDF2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoPBKDF2 {
    return new TLSecurePasswordKdfAlgoPBKDF2().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecurePasswordKdfAlgoPBKDF2 | PlainMessage<TLSecurePasswordKdfAlgoPBKDF2> | undefined, b: TLSecurePasswordKdfAlgoPBKDF2 | PlainMessage<TLSecurePasswordKdfAlgoPBKDF2> | undefined): boolean {
    return proto3.util.equals(TLSecurePasswordKdfAlgoPBKDF2, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoSHA512
 */
export class TLSecurePasswordKdfAlgoSHA512 extends Message$1<TLSecurePasswordKdfAlgoSHA512> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo data2 = 1;
   */
  data2: SecurePasswordKdfAlgo[] = [];

  constructor(data?: PartialMessage<TLSecurePasswordKdfAlgoSHA512>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecurePasswordKdfAlgoSHA512";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecurePasswordKdfAlgo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecurePasswordKdfAlgoSHA512 {
    return new TLSecurePasswordKdfAlgoSHA512().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoSHA512 {
    return new TLSecurePasswordKdfAlgoSHA512().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecurePasswordKdfAlgoSHA512 {
    return new TLSecurePasswordKdfAlgoSHA512().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecurePasswordKdfAlgoSHA512 | PlainMessage<TLSecurePasswordKdfAlgoSHA512> | undefined, b: TLSecurePasswordKdfAlgoSHA512 | PlainMessage<TLSecurePasswordKdfAlgoSHA512> | undefined): boolean {
    return proto3.util.equals(TLSecurePasswordKdfAlgoSHA512, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecurePlainData
 */
export class SecurePlainData extends Message$1<SecurePlainData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string phone = 3;
   */
  phone = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  constructor(data?: PartialMessage<SecurePlainData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecurePlainData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurePlainData {
    return new SecurePlainData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurePlainData {
    return new SecurePlainData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurePlainData {
    return new SecurePlainData().fromJsonString(jsonString, options);
  }

  static equals(a: SecurePlainData | PlainMessage<SecurePlainData> | undefined, b: SecurePlainData | PlainMessage<SecurePlainData> | undefined): boolean {
    return proto3.util.equals(SecurePlainData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecurePlainPhone
 */
export class TLSecurePlainPhone extends Message$1<TLSecurePlainPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePlainData data2 = 1;
   */
  data2: SecurePlainData[] = [];

  constructor(data?: PartialMessage<TLSecurePlainPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecurePlainPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecurePlainData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecurePlainPhone {
    return new TLSecurePlainPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecurePlainPhone {
    return new TLSecurePlainPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecurePlainPhone {
    return new TLSecurePlainPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecurePlainPhone | PlainMessage<TLSecurePlainPhone> | undefined, b: TLSecurePlainPhone | PlainMessage<TLSecurePlainPhone> | undefined): boolean {
    return proto3.util.equals(TLSecurePlainPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecurePlainEmail
 */
export class TLSecurePlainEmail extends Message$1<TLSecurePlainEmail> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePlainData data2 = 1;
   */
  data2: SecurePlainData[] = [];

  constructor(data?: PartialMessage<TLSecurePlainEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecurePlainEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecurePlainData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecurePlainEmail {
    return new TLSecurePlainEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecurePlainEmail {
    return new TLSecurePlainEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecurePlainEmail {
    return new TLSecurePlainEmail().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecurePlainEmail | PlainMessage<TLSecurePlainEmail> | undefined, b: TLSecurePlainEmail | PlainMessage<TLSecurePlainEmail> | undefined): boolean {
    return proto3.util.equals(TLSecurePlainEmail, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType
 */
export class SecureRequiredType extends Message$1<SecureRequiredType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool native_names = 3;
   */
  nativeNames = false;

  /**
   * @generated from field: bool selfie_required = 4;
   */
  selfieRequired = false;

  /**
   * @generated from field: bool translation_required = 5;
   */
  translationRequired = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType type = 6;
   */
  type: SecureValueType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType types = 7;
   */
  types: SecureRequiredType[] = [];

  constructor(data?: PartialMessage<SecureRequiredType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "native_names", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "selfie_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "translation_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "type", kind: "message", T: SecureValueType, repeated: true },
    { no: 7, name: "types", kind: "message", T: SecureRequiredType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureRequiredType {
    return new SecureRequiredType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureRequiredType {
    return new SecureRequiredType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureRequiredType {
    return new SecureRequiredType().fromJsonString(jsonString, options);
  }

  static equals(a: SecureRequiredType | PlainMessage<SecureRequiredType> | undefined, b: SecureRequiredType | PlainMessage<SecureRequiredType> | undefined): boolean {
    return proto3.util.equals(SecureRequiredType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureRequiredType
 */
export class TLSecureRequiredType extends Message$1<TLSecureRequiredType> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType data2 = 1;
   */
  data2: SecureRequiredType[] = [];

  constructor(data?: PartialMessage<TLSecureRequiredType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureRequiredType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureRequiredType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureRequiredType {
    return new TLSecureRequiredType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureRequiredType {
    return new TLSecureRequiredType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureRequiredType {
    return new TLSecureRequiredType().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureRequiredType | PlainMessage<TLSecureRequiredType> | undefined, b: TLSecureRequiredType | PlainMessage<TLSecureRequiredType> | undefined): boolean {
    return proto3.util.equals(TLSecureRequiredType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureRequiredTypeOneOf
 */
export class TLSecureRequiredTypeOneOf extends Message$1<TLSecureRequiredTypeOneOf> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType data2 = 1;
   */
  data2: SecureRequiredType[] = [];

  constructor(data?: PartialMessage<TLSecureRequiredTypeOneOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureRequiredTypeOneOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureRequiredType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureRequiredTypeOneOf {
    return new TLSecureRequiredTypeOneOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureRequiredTypeOneOf {
    return new TLSecureRequiredTypeOneOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureRequiredTypeOneOf {
    return new TLSecureRequiredTypeOneOf().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureRequiredTypeOneOf | PlainMessage<TLSecureRequiredTypeOneOf> | undefined, b: TLSecureRequiredTypeOneOf | PlainMessage<TLSecureRequiredTypeOneOf> | undefined): boolean {
    return proto3.util.equals(TLSecureRequiredTypeOneOf, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureSecretSettings
 */
export class SecureSecretSettings extends Message$1<SecureSecretSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo secure_algo = 3;
   */
  secureAlgo: SecurePasswordKdfAlgo[] = [];

  /**
   * @generated from field: bytes secure_secret = 4;
   */
  secureSecret = new Uint8Array(0);

  /**
   * @generated from field: int64 secure_secret_id = 5;
   */
  secureSecretId = protoInt64.zero;

  constructor(data?: PartialMessage<SecureSecretSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureSecretSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "secure_algo", kind: "message", T: SecurePasswordKdfAlgo, repeated: true },
    { no: 4, name: "secure_secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "secure_secret_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureSecretSettings {
    return new SecureSecretSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureSecretSettings {
    return new SecureSecretSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureSecretSettings {
    return new SecureSecretSettings().fromJsonString(jsonString, options);
  }

  static equals(a: SecureSecretSettings | PlainMessage<SecureSecretSettings> | undefined, b: SecureSecretSettings | PlainMessage<SecureSecretSettings> | undefined): boolean {
    return proto3.util.equals(SecureSecretSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureSecretSettings
 */
export class TLSecureSecretSettings extends Message$1<TLSecureSecretSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureSecretSettings data2 = 1;
   */
  data2: SecureSecretSettings[] = [];

  constructor(data?: PartialMessage<TLSecureSecretSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureSecretSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureSecretSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureSecretSettings {
    return new TLSecureSecretSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureSecretSettings {
    return new TLSecureSecretSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureSecretSettings {
    return new TLSecureSecretSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureSecretSettings | PlainMessage<TLSecureSecretSettings> | undefined, b: TLSecureSecretSettings | PlainMessage<TLSecureSecretSettings> | undefined): boolean {
    return proto3.util.equals(TLSecureSecretSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureValue
 */
export class SecureValue extends Message$1<SecureValue> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType type = 3;
   */
  type: SecureValueType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureData data = 4;
   */
  data: SecureData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile front_side = 5;
   */
  frontSide: SecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile reverse_side = 6;
   */
  reverseSide: SecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile selfie = 7;
   */
  selfie: SecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile translation = 8;
   */
  translation: SecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureFile files = 9;
   */
  files: SecureFile[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePlainData plain_data = 10;
   */
  plainData: SecurePlainData[] = [];

  /**
   * @generated from field: bytes hash = 11;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<SecureValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: SecureValueType, repeated: true },
    { no: 4, name: "data", kind: "message", T: SecureData, repeated: true },
    { no: 5, name: "front_side", kind: "message", T: SecureFile, repeated: true },
    { no: 6, name: "reverse_side", kind: "message", T: SecureFile, repeated: true },
    { no: 7, name: "selfie", kind: "message", T: SecureFile, repeated: true },
    { no: 8, name: "translation", kind: "message", T: SecureFile, repeated: true },
    { no: 9, name: "files", kind: "message", T: SecureFile, repeated: true },
    { no: 10, name: "plain_data", kind: "message", T: SecurePlainData, repeated: true },
    { no: 11, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureValue {
    return new SecureValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureValue {
    return new SecureValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureValue {
    return new SecureValue().fromJsonString(jsonString, options);
  }

  static equals(a: SecureValue | PlainMessage<SecureValue> | undefined, b: SecureValue | PlainMessage<SecureValue> | undefined): boolean {
    return proto3.util.equals(SecureValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValue
 */
export class TLSecureValue extends Message$1<TLSecureValue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValue data2 = 1;
   */
  data2: SecureValue[] = [];

  constructor(data?: PartialMessage<TLSecureValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValue {
    return new TLSecureValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValue {
    return new TLSecureValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValue {
    return new TLSecureValue().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValue | PlainMessage<TLSecureValue> | undefined, b: TLSecureValue | PlainMessage<TLSecureValue> | undefined): boolean {
    return proto3.util.equals(TLSecureValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureValueError
 */
export class SecureValueError extends Message$1<SecureValueError> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType type = 3;
   */
  type: SecureValueType[] = [];

  /**
   * @generated from field: bytes data_hash = 4;
   */
  dataHash = new Uint8Array(0);

  /**
   * @generated from field: string field = 5;
   */
  field = "";

  /**
   * @generated from field: string text = 6;
   */
  text = "";

  /**
   * @generated from field: bytes file_hash_BYTES = 7;
   */
  fileHashBYTES = new Uint8Array(0);

  /**
   * @generated from field: bytes file_hash_VECTORBYTES = 8;
   */
  fileHashVECTORBYTES = new Uint8Array(0);

  /**
   * @generated from field: bytes hash = 9;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<SecureValueError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureValueError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: SecureValueType, repeated: true },
    { no: 4, name: "data_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "file_hash_BYTES", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "file_hash_VECTORBYTES", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureValueError {
    return new SecureValueError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureValueError {
    return new SecureValueError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureValueError {
    return new SecureValueError().fromJsonString(jsonString, options);
  }

  static equals(a: SecureValueError | PlainMessage<SecureValueError> | undefined, b: SecureValueError | PlainMessage<SecureValueError> | undefined): boolean {
    return proto3.util.equals(SecureValueError, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorData
 */
export class TLSecureValueErrorData extends Message$1<TLSecureValueErrorData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorData {
    return new TLSecureValueErrorData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorData {
    return new TLSecureValueErrorData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorData {
    return new TLSecureValueErrorData().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorData | PlainMessage<TLSecureValueErrorData> | undefined, b: TLSecureValueErrorData | PlainMessage<TLSecureValueErrorData> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFrontSide
 */
export class TLSecureValueErrorFrontSide extends Message$1<TLSecureValueErrorFrontSide> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorFrontSide>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFrontSide";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorFrontSide {
    return new TLSecureValueErrorFrontSide().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorFrontSide {
    return new TLSecureValueErrorFrontSide().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorFrontSide {
    return new TLSecureValueErrorFrontSide().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorFrontSide | PlainMessage<TLSecureValueErrorFrontSide> | undefined, b: TLSecureValueErrorFrontSide | PlainMessage<TLSecureValueErrorFrontSide> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorFrontSide, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorReverseSide
 */
export class TLSecureValueErrorReverseSide extends Message$1<TLSecureValueErrorReverseSide> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorReverseSide>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorReverseSide";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorReverseSide {
    return new TLSecureValueErrorReverseSide().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorReverseSide {
    return new TLSecureValueErrorReverseSide().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorReverseSide {
    return new TLSecureValueErrorReverseSide().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorReverseSide | PlainMessage<TLSecureValueErrorReverseSide> | undefined, b: TLSecureValueErrorReverseSide | PlainMessage<TLSecureValueErrorReverseSide> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorReverseSide, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorSelfie
 */
export class TLSecureValueErrorSelfie extends Message$1<TLSecureValueErrorSelfie> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorSelfie>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorSelfie";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorSelfie {
    return new TLSecureValueErrorSelfie().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorSelfie {
    return new TLSecureValueErrorSelfie().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorSelfie {
    return new TLSecureValueErrorSelfie().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorSelfie | PlainMessage<TLSecureValueErrorSelfie> | undefined, b: TLSecureValueErrorSelfie | PlainMessage<TLSecureValueErrorSelfie> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorSelfie, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFile
 */
export class TLSecureValueErrorFile extends Message$1<TLSecureValueErrorFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorFile {
    return new TLSecureValueErrorFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorFile {
    return new TLSecureValueErrorFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorFile {
    return new TLSecureValueErrorFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorFile | PlainMessage<TLSecureValueErrorFile> | undefined, b: TLSecureValueErrorFile | PlainMessage<TLSecureValueErrorFile> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFiles
 */
export class TLSecureValueErrorFiles extends Message$1<TLSecureValueErrorFiles> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorFiles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorFiles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorFiles {
    return new TLSecureValueErrorFiles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorFiles {
    return new TLSecureValueErrorFiles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorFiles {
    return new TLSecureValueErrorFiles().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorFiles | PlainMessage<TLSecureValueErrorFiles> | undefined, b: TLSecureValueErrorFiles | PlainMessage<TLSecureValueErrorFiles> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorFiles, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueError
 */
export class TLSecureValueError extends Message$1<TLSecureValueError> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueError {
    return new TLSecureValueError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueError {
    return new TLSecureValueError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueError {
    return new TLSecureValueError().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueError | PlainMessage<TLSecureValueError> | undefined, b: TLSecureValueError | PlainMessage<TLSecureValueError> | undefined): boolean {
    return proto3.util.equals(TLSecureValueError, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorTranslationFile
 */
export class TLSecureValueErrorTranslationFile extends Message$1<TLSecureValueErrorTranslationFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorTranslationFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorTranslationFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorTranslationFile {
    return new TLSecureValueErrorTranslationFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorTranslationFile {
    return new TLSecureValueErrorTranslationFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorTranslationFile {
    return new TLSecureValueErrorTranslationFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorTranslationFile | PlainMessage<TLSecureValueErrorTranslationFile> | undefined, b: TLSecureValueErrorTranslationFile | PlainMessage<TLSecureValueErrorTranslationFile> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorTranslationFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorTranslationFiles
 */
export class TLSecureValueErrorTranslationFiles extends Message$1<TLSecureValueErrorTranslationFiles> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError data2 = 1;
   */
  data2: SecureValueError[] = [];

  constructor(data?: PartialMessage<TLSecureValueErrorTranslationFiles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueErrorTranslationFiles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueErrorTranslationFiles {
    return new TLSecureValueErrorTranslationFiles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueErrorTranslationFiles {
    return new TLSecureValueErrorTranslationFiles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueErrorTranslationFiles {
    return new TLSecureValueErrorTranslationFiles().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueErrorTranslationFiles | PlainMessage<TLSecureValueErrorTranslationFiles> | undefined, b: TLSecureValueErrorTranslationFiles | PlainMessage<TLSecureValueErrorTranslationFiles> | undefined): boolean {
    return proto3.util.equals(TLSecureValueErrorTranslationFiles, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureValueHash
 */
export class SecureValueHash extends Message$1<SecureValueHash> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType type = 3;
   */
  type: SecureValueType[] = [];

  /**
   * @generated from field: bytes hash = 4;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<SecureValueHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureValueHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: SecureValueType, repeated: true },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureValueHash {
    return new SecureValueHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureValueHash {
    return new SecureValueHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureValueHash {
    return new SecureValueHash().fromJsonString(jsonString, options);
  }

  static equals(a: SecureValueHash | PlainMessage<SecureValueHash> | undefined, b: SecureValueHash | PlainMessage<SecureValueHash> | undefined): boolean {
    return proto3.util.equals(SecureValueHash, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueHash
 */
export class TLSecureValueHash extends Message$1<TLSecureValueHash> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueHash data2 = 1;
   */
  data2: SecureValueHash[] = [];

  constructor(data?: PartialMessage<TLSecureValueHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueHash, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueHash {
    return new TLSecureValueHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueHash {
    return new TLSecureValueHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueHash {
    return new TLSecureValueHash().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueHash | PlainMessage<TLSecureValueHash> | undefined, b: TLSecureValueHash | PlainMessage<TLSecureValueHash> | undefined): boolean {
    return proto3.util.equals(TLSecureValueHash, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SecureValueType
 */
export class SecureValueType extends Message$1<SecureValueType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<SecureValueType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SecureValueType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecureValueType {
    return new SecureValueType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecureValueType {
    return new SecureValueType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecureValueType {
    return new SecureValueType().fromJsonString(jsonString, options);
  }

  static equals(a: SecureValueType | PlainMessage<SecureValueType> | undefined, b: SecureValueType | PlainMessage<SecureValueType> | undefined): boolean {
    return proto3.util.equals(SecureValueType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePersonalDetails
 */
export class TLSecureValueTypePersonalDetails extends Message$1<TLSecureValueTypePersonalDetails> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypePersonalDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePersonalDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypePersonalDetails {
    return new TLSecureValueTypePersonalDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypePersonalDetails {
    return new TLSecureValueTypePersonalDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypePersonalDetails {
    return new TLSecureValueTypePersonalDetails().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypePersonalDetails | PlainMessage<TLSecureValueTypePersonalDetails> | undefined, b: TLSecureValueTypePersonalDetails | PlainMessage<TLSecureValueTypePersonalDetails> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypePersonalDetails, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePassport
 */
export class TLSecureValueTypePassport extends Message$1<TLSecureValueTypePassport> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypePassport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePassport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypePassport {
    return new TLSecureValueTypePassport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypePassport {
    return new TLSecureValueTypePassport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypePassport {
    return new TLSecureValueTypePassport().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypePassport | PlainMessage<TLSecureValueTypePassport> | undefined, b: TLSecureValueTypePassport | PlainMessage<TLSecureValueTypePassport> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypePassport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeDriverLicense
 */
export class TLSecureValueTypeDriverLicense extends Message$1<TLSecureValueTypeDriverLicense> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeDriverLicense>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeDriverLicense";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeDriverLicense {
    return new TLSecureValueTypeDriverLicense().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeDriverLicense {
    return new TLSecureValueTypeDriverLicense().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeDriverLicense {
    return new TLSecureValueTypeDriverLicense().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeDriverLicense | PlainMessage<TLSecureValueTypeDriverLicense> | undefined, b: TLSecureValueTypeDriverLicense | PlainMessage<TLSecureValueTypeDriverLicense> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeDriverLicense, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeIdentityCard
 */
export class TLSecureValueTypeIdentityCard extends Message$1<TLSecureValueTypeIdentityCard> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeIdentityCard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeIdentityCard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeIdentityCard {
    return new TLSecureValueTypeIdentityCard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeIdentityCard {
    return new TLSecureValueTypeIdentityCard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeIdentityCard {
    return new TLSecureValueTypeIdentityCard().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeIdentityCard | PlainMessage<TLSecureValueTypeIdentityCard> | undefined, b: TLSecureValueTypeIdentityCard | PlainMessage<TLSecureValueTypeIdentityCard> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeIdentityCard, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeInternalPassport
 */
export class TLSecureValueTypeInternalPassport extends Message$1<TLSecureValueTypeInternalPassport> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeInternalPassport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeInternalPassport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeInternalPassport {
    return new TLSecureValueTypeInternalPassport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeInternalPassport {
    return new TLSecureValueTypeInternalPassport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeInternalPassport {
    return new TLSecureValueTypeInternalPassport().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeInternalPassport | PlainMessage<TLSecureValueTypeInternalPassport> | undefined, b: TLSecureValueTypeInternalPassport | PlainMessage<TLSecureValueTypeInternalPassport> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeInternalPassport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeAddress
 */
export class TLSecureValueTypeAddress extends Message$1<TLSecureValueTypeAddress> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeAddress {
    return new TLSecureValueTypeAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeAddress {
    return new TLSecureValueTypeAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeAddress {
    return new TLSecureValueTypeAddress().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeAddress | PlainMessage<TLSecureValueTypeAddress> | undefined, b: TLSecureValueTypeAddress | PlainMessage<TLSecureValueTypeAddress> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeAddress, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeUtilityBill
 */
export class TLSecureValueTypeUtilityBill extends Message$1<TLSecureValueTypeUtilityBill> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeUtilityBill>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeUtilityBill";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeUtilityBill {
    return new TLSecureValueTypeUtilityBill().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeUtilityBill {
    return new TLSecureValueTypeUtilityBill().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeUtilityBill {
    return new TLSecureValueTypeUtilityBill().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeUtilityBill | PlainMessage<TLSecureValueTypeUtilityBill> | undefined, b: TLSecureValueTypeUtilityBill | PlainMessage<TLSecureValueTypeUtilityBill> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeUtilityBill, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeBankStatement
 */
export class TLSecureValueTypeBankStatement extends Message$1<TLSecureValueTypeBankStatement> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeBankStatement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeBankStatement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeBankStatement {
    return new TLSecureValueTypeBankStatement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeBankStatement {
    return new TLSecureValueTypeBankStatement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeBankStatement {
    return new TLSecureValueTypeBankStatement().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeBankStatement | PlainMessage<TLSecureValueTypeBankStatement> | undefined, b: TLSecureValueTypeBankStatement | PlainMessage<TLSecureValueTypeBankStatement> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeBankStatement, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeRentalAgreement
 */
export class TLSecureValueTypeRentalAgreement extends Message$1<TLSecureValueTypeRentalAgreement> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeRentalAgreement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeRentalAgreement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeRentalAgreement {
    return new TLSecureValueTypeRentalAgreement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeRentalAgreement {
    return new TLSecureValueTypeRentalAgreement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeRentalAgreement {
    return new TLSecureValueTypeRentalAgreement().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeRentalAgreement | PlainMessage<TLSecureValueTypeRentalAgreement> | undefined, b: TLSecureValueTypeRentalAgreement | PlainMessage<TLSecureValueTypeRentalAgreement> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeRentalAgreement, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePassportRegistration
 */
export class TLSecureValueTypePassportRegistration extends Message$1<TLSecureValueTypePassportRegistration> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypePassportRegistration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePassportRegistration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypePassportRegistration {
    return new TLSecureValueTypePassportRegistration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypePassportRegistration {
    return new TLSecureValueTypePassportRegistration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypePassportRegistration {
    return new TLSecureValueTypePassportRegistration().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypePassportRegistration | PlainMessage<TLSecureValueTypePassportRegistration> | undefined, b: TLSecureValueTypePassportRegistration | PlainMessage<TLSecureValueTypePassportRegistration> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypePassportRegistration, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeTemporaryRegistration
 */
export class TLSecureValueTypeTemporaryRegistration extends Message$1<TLSecureValueTypeTemporaryRegistration> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeTemporaryRegistration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeTemporaryRegistration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeTemporaryRegistration {
    return new TLSecureValueTypeTemporaryRegistration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeTemporaryRegistration {
    return new TLSecureValueTypeTemporaryRegistration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeTemporaryRegistration {
    return new TLSecureValueTypeTemporaryRegistration().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeTemporaryRegistration | PlainMessage<TLSecureValueTypeTemporaryRegistration> | undefined, b: TLSecureValueTypeTemporaryRegistration | PlainMessage<TLSecureValueTypeTemporaryRegistration> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeTemporaryRegistration, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePhone
 */
export class TLSecureValueTypePhone extends Message$1<TLSecureValueTypePhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypePhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypePhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypePhone {
    return new TLSecureValueTypePhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypePhone {
    return new TLSecureValueTypePhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypePhone {
    return new TLSecureValueTypePhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypePhone | PlainMessage<TLSecureValueTypePhone> | undefined, b: TLSecureValueTypePhone | PlainMessage<TLSecureValueTypePhone> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypePhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeEmail
 */
export class TLSecureValueTypeEmail extends Message$1<TLSecureValueTypeEmail> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueType data2 = 1;
   */
  data2: SecureValueType[] = [];

  constructor(data?: PartialMessage<TLSecureValueTypeEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSecureValueTypeEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SecureValueType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSecureValueTypeEmail {
    return new TLSecureValueTypeEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSecureValueTypeEmail {
    return new TLSecureValueTypeEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSecureValueTypeEmail {
    return new TLSecureValueTypeEmail().fromJsonString(jsonString, options);
  }

  static equals(a: TLSecureValueTypeEmail | PlainMessage<TLSecureValueTypeEmail> | undefined, b: TLSecureValueTypeEmail | PlainMessage<TLSecureValueTypeEmail> | undefined): boolean {
    return proto3.util.equals(TLSecureValueTypeEmail, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SendAsPeer
 */
export class SendAsPeer extends Message$1<SendAsPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool premium_required = 3;
   */
  premiumRequired = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 4;
   */
  peer: Peer[] = [];

  constructor(data?: PartialMessage<SendAsPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SendAsPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "premium_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "peer", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendAsPeer {
    return new SendAsPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendAsPeer {
    return new SendAsPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendAsPeer {
    return new SendAsPeer().fromJsonString(jsonString, options);
  }

  static equals(a: SendAsPeer | PlainMessage<SendAsPeer> | undefined, b: SendAsPeer | PlainMessage<SendAsPeer> | undefined): boolean {
    return proto3.util.equals(SendAsPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendAsPeer
 */
export class TLSendAsPeer extends Message$1<TLSendAsPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendAsPeer data2 = 1;
   */
  data2: SendAsPeer[] = [];

  constructor(data?: PartialMessage<TLSendAsPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendAsPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendAsPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendAsPeer {
    return new TLSendAsPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendAsPeer {
    return new TLSendAsPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendAsPeer {
    return new TLSendAsPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendAsPeer | PlainMessage<TLSendAsPeer> | undefined, b: TLSendAsPeer | PlainMessage<TLSendAsPeer> | undefined): boolean {
    return proto3.util.equals(TLSendAsPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SendMessageAction
 */
export class SendMessageAction extends Message$1<SendMessageAction> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 progress = 3;
   */
  progress = 0;

  /**
   * @generated from field: string emoticon = 4;
   */
  emoticon = "";

  /**
   * @generated from field: int32 msg_id = 5;
   */
  msgId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON interaction = 6;
   */
  interaction: DataJSON[] = [];

  constructor(data?: PartialMessage<SendMessageAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SendMessageAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "progress", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "interaction", kind: "message", T: DataJSON, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageAction {
    return new SendMessageAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageAction {
    return new SendMessageAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageAction {
    return new SendMessageAction().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageAction | PlainMessage<SendMessageAction> | undefined, b: SendMessageAction | PlainMessage<SendMessageAction> | undefined): boolean {
    return proto3.util.equals(SendMessageAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageTypingAction
 */
export class TLSendMessageTypingAction extends Message$1<TLSendMessageTypingAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageTypingAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageTypingAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageTypingAction {
    return new TLSendMessageTypingAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageTypingAction {
    return new TLSendMessageTypingAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageTypingAction {
    return new TLSendMessageTypingAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageTypingAction | PlainMessage<TLSendMessageTypingAction> | undefined, b: TLSendMessageTypingAction | PlainMessage<TLSendMessageTypingAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageTypingAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageCancelAction
 */
export class TLSendMessageCancelAction extends Message$1<TLSendMessageCancelAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageCancelAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageCancelAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageCancelAction {
    return new TLSendMessageCancelAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageCancelAction {
    return new TLSendMessageCancelAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageCancelAction {
    return new TLSendMessageCancelAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageCancelAction | PlainMessage<TLSendMessageCancelAction> | undefined, b: TLSendMessageCancelAction | PlainMessage<TLSendMessageCancelAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageCancelAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordVideoAction
 */
export class TLSendMessageRecordVideoAction extends Message$1<TLSendMessageRecordVideoAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageRecordVideoAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordVideoAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageRecordVideoAction {
    return new TLSendMessageRecordVideoAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageRecordVideoAction {
    return new TLSendMessageRecordVideoAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageRecordVideoAction {
    return new TLSendMessageRecordVideoAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageRecordVideoAction | PlainMessage<TLSendMessageRecordVideoAction> | undefined, b: TLSendMessageRecordVideoAction | PlainMessage<TLSendMessageRecordVideoAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageRecordVideoAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadVideoAction
 */
export class TLSendMessageUploadVideoAction extends Message$1<TLSendMessageUploadVideoAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageUploadVideoAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadVideoAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageUploadVideoAction {
    return new TLSendMessageUploadVideoAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageUploadVideoAction {
    return new TLSendMessageUploadVideoAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageUploadVideoAction {
    return new TLSendMessageUploadVideoAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageUploadVideoAction | PlainMessage<TLSendMessageUploadVideoAction> | undefined, b: TLSendMessageUploadVideoAction | PlainMessage<TLSendMessageUploadVideoAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageUploadVideoAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordAudioAction
 */
export class TLSendMessageRecordAudioAction extends Message$1<TLSendMessageRecordAudioAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageRecordAudioAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordAudioAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageRecordAudioAction {
    return new TLSendMessageRecordAudioAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageRecordAudioAction {
    return new TLSendMessageRecordAudioAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageRecordAudioAction {
    return new TLSendMessageRecordAudioAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageRecordAudioAction | PlainMessage<TLSendMessageRecordAudioAction> | undefined, b: TLSendMessageRecordAudioAction | PlainMessage<TLSendMessageRecordAudioAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageRecordAudioAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadAudioAction
 */
export class TLSendMessageUploadAudioAction extends Message$1<TLSendMessageUploadAudioAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageUploadAudioAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadAudioAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageUploadAudioAction {
    return new TLSendMessageUploadAudioAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageUploadAudioAction {
    return new TLSendMessageUploadAudioAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageUploadAudioAction {
    return new TLSendMessageUploadAudioAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageUploadAudioAction | PlainMessage<TLSendMessageUploadAudioAction> | undefined, b: TLSendMessageUploadAudioAction | PlainMessage<TLSendMessageUploadAudioAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageUploadAudioAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadPhotoAction
 */
export class TLSendMessageUploadPhotoAction extends Message$1<TLSendMessageUploadPhotoAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageUploadPhotoAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadPhotoAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageUploadPhotoAction {
    return new TLSendMessageUploadPhotoAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageUploadPhotoAction {
    return new TLSendMessageUploadPhotoAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageUploadPhotoAction {
    return new TLSendMessageUploadPhotoAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageUploadPhotoAction | PlainMessage<TLSendMessageUploadPhotoAction> | undefined, b: TLSendMessageUploadPhotoAction | PlainMessage<TLSendMessageUploadPhotoAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageUploadPhotoAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadDocumentAction
 */
export class TLSendMessageUploadDocumentAction extends Message$1<TLSendMessageUploadDocumentAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageUploadDocumentAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadDocumentAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageUploadDocumentAction {
    return new TLSendMessageUploadDocumentAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageUploadDocumentAction {
    return new TLSendMessageUploadDocumentAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageUploadDocumentAction {
    return new TLSendMessageUploadDocumentAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageUploadDocumentAction | PlainMessage<TLSendMessageUploadDocumentAction> | undefined, b: TLSendMessageUploadDocumentAction | PlainMessage<TLSendMessageUploadDocumentAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageUploadDocumentAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageGeoLocationAction
 */
export class TLSendMessageGeoLocationAction extends Message$1<TLSendMessageGeoLocationAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageGeoLocationAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageGeoLocationAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageGeoLocationAction {
    return new TLSendMessageGeoLocationAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageGeoLocationAction {
    return new TLSendMessageGeoLocationAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageGeoLocationAction {
    return new TLSendMessageGeoLocationAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageGeoLocationAction | PlainMessage<TLSendMessageGeoLocationAction> | undefined, b: TLSendMessageGeoLocationAction | PlainMessage<TLSendMessageGeoLocationAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageGeoLocationAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageChooseContactAction
 */
export class TLSendMessageChooseContactAction extends Message$1<TLSendMessageChooseContactAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageChooseContactAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageChooseContactAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageChooseContactAction {
    return new TLSendMessageChooseContactAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageChooseContactAction {
    return new TLSendMessageChooseContactAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageChooseContactAction {
    return new TLSendMessageChooseContactAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageChooseContactAction | PlainMessage<TLSendMessageChooseContactAction> | undefined, b: TLSendMessageChooseContactAction | PlainMessage<TLSendMessageChooseContactAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageChooseContactAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageGamePlayAction
 */
export class TLSendMessageGamePlayAction extends Message$1<TLSendMessageGamePlayAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageGamePlayAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageGamePlayAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageGamePlayAction {
    return new TLSendMessageGamePlayAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageGamePlayAction {
    return new TLSendMessageGamePlayAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageGamePlayAction {
    return new TLSendMessageGamePlayAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageGamePlayAction | PlainMessage<TLSendMessageGamePlayAction> | undefined, b: TLSendMessageGamePlayAction | PlainMessage<TLSendMessageGamePlayAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageGamePlayAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordRoundAction
 */
export class TLSendMessageRecordRoundAction extends Message$1<TLSendMessageRecordRoundAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageRecordRoundAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageRecordRoundAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageRecordRoundAction {
    return new TLSendMessageRecordRoundAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageRecordRoundAction {
    return new TLSendMessageRecordRoundAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageRecordRoundAction {
    return new TLSendMessageRecordRoundAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageRecordRoundAction | PlainMessage<TLSendMessageRecordRoundAction> | undefined, b: TLSendMessageRecordRoundAction | PlainMessage<TLSendMessageRecordRoundAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageRecordRoundAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadRoundAction
 */
export class TLSendMessageUploadRoundAction extends Message$1<TLSendMessageUploadRoundAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageUploadRoundAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageUploadRoundAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageUploadRoundAction {
    return new TLSendMessageUploadRoundAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageUploadRoundAction {
    return new TLSendMessageUploadRoundAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageUploadRoundAction {
    return new TLSendMessageUploadRoundAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageUploadRoundAction | PlainMessage<TLSendMessageUploadRoundAction> | undefined, b: TLSendMessageUploadRoundAction | PlainMessage<TLSendMessageUploadRoundAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageUploadRoundAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSpeakingInGroupCallAction
 */
export class TLSpeakingInGroupCallAction extends Message$1<TLSpeakingInGroupCallAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSpeakingInGroupCallAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSpeakingInGroupCallAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSpeakingInGroupCallAction {
    return new TLSpeakingInGroupCallAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSpeakingInGroupCallAction {
    return new TLSpeakingInGroupCallAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSpeakingInGroupCallAction {
    return new TLSpeakingInGroupCallAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSpeakingInGroupCallAction | PlainMessage<TLSpeakingInGroupCallAction> | undefined, b: TLSpeakingInGroupCallAction | PlainMessage<TLSpeakingInGroupCallAction> | undefined): boolean {
    return proto3.util.equals(TLSpeakingInGroupCallAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageHistoryImportAction
 */
export class TLSendMessageHistoryImportAction extends Message$1<TLSendMessageHistoryImportAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageHistoryImportAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageHistoryImportAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageHistoryImportAction {
    return new TLSendMessageHistoryImportAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageHistoryImportAction {
    return new TLSendMessageHistoryImportAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageHistoryImportAction {
    return new TLSendMessageHistoryImportAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageHistoryImportAction | PlainMessage<TLSendMessageHistoryImportAction> | undefined, b: TLSendMessageHistoryImportAction | PlainMessage<TLSendMessageHistoryImportAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageHistoryImportAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageChooseStickerAction
 */
export class TLSendMessageChooseStickerAction extends Message$1<TLSendMessageChooseStickerAction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageChooseStickerAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageChooseStickerAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageChooseStickerAction {
    return new TLSendMessageChooseStickerAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageChooseStickerAction {
    return new TLSendMessageChooseStickerAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageChooseStickerAction {
    return new TLSendMessageChooseStickerAction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageChooseStickerAction | PlainMessage<TLSendMessageChooseStickerAction> | undefined, b: TLSendMessageChooseStickerAction | PlainMessage<TLSendMessageChooseStickerAction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageChooseStickerAction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageEmojiInteraction
 */
export class TLSendMessageEmojiInteraction extends Message$1<TLSendMessageEmojiInteraction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageEmojiInteraction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageEmojiInteraction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageEmojiInteraction {
    return new TLSendMessageEmojiInteraction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageEmojiInteraction {
    return new TLSendMessageEmojiInteraction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageEmojiInteraction {
    return new TLSendMessageEmojiInteraction().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageEmojiInteraction | PlainMessage<TLSendMessageEmojiInteraction> | undefined, b: TLSendMessageEmojiInteraction | PlainMessage<TLSendMessageEmojiInteraction> | undefined): boolean {
    return proto3.util.equals(TLSendMessageEmojiInteraction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSendMessageEmojiInteractionSeen
 */
export class TLSendMessageEmojiInteractionSeen extends Message$1<TLSendMessageEmojiInteractionSeen> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction data2 = 1;
   */
  data2: SendMessageAction[] = [];

  constructor(data?: PartialMessage<TLSendMessageEmojiInteractionSeen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSendMessageEmojiInteractionSeen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SendMessageAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSendMessageEmojiInteractionSeen {
    return new TLSendMessageEmojiInteractionSeen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSendMessageEmojiInteractionSeen {
    return new TLSendMessageEmojiInteractionSeen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSendMessageEmojiInteractionSeen {
    return new TLSendMessageEmojiInteractionSeen().fromJsonString(jsonString, options);
  }

  static equals(a: TLSendMessageEmojiInteractionSeen | PlainMessage<TLSendMessageEmojiInteractionSeen> | undefined, b: TLSendMessageEmojiInteractionSeen | PlainMessage<TLSendMessageEmojiInteractionSeen> | undefined): boolean {
    return proto3.util.equals(TLSendMessageEmojiInteractionSeen, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ShippingOption
 */
export class ShippingOption extends Message$1<ShippingOption> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LabeledPrice prices = 5;
   */
  prices: LabeledPrice[] = [];

  constructor(data?: PartialMessage<ShippingOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ShippingOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "prices", kind: "message", T: LabeledPrice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShippingOption {
    return new ShippingOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShippingOption {
    return new ShippingOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShippingOption {
    return new ShippingOption().fromJsonString(jsonString, options);
  }

  static equals(a: ShippingOption | PlainMessage<ShippingOption> | undefined, b: ShippingOption | PlainMessage<ShippingOption> | undefined): boolean {
    return proto3.util.equals(ShippingOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLShippingOption
 */
export class TLShippingOption extends Message$1<TLShippingOption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ShippingOption data2 = 1;
   */
  data2: ShippingOption[] = [];

  constructor(data?: PartialMessage<TLShippingOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLShippingOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ShippingOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLShippingOption {
    return new TLShippingOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLShippingOption {
    return new TLShippingOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLShippingOption {
    return new TLShippingOption().fromJsonString(jsonString, options);
  }

  static equals(a: TLShippingOption | PlainMessage<TLShippingOption> | undefined, b: TLShippingOption | PlainMessage<TLShippingOption> | undefined): boolean {
    return proto3.util.equals(TLShippingOption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SimpleWebViewResult
 */
export class SimpleWebViewResult extends Message$1<SimpleWebViewResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<SimpleWebViewResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SimpleWebViewResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleWebViewResult {
    return new SimpleWebViewResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleWebViewResult {
    return new SimpleWebViewResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleWebViewResult {
    return new SimpleWebViewResult().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleWebViewResult | PlainMessage<SimpleWebViewResult> | undefined, b: SimpleWebViewResult | PlainMessage<SimpleWebViewResult> | undefined): boolean {
    return proto3.util.equals(SimpleWebViewResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSimpleWebViewResultUrl
 */
export class TLSimpleWebViewResultUrl extends Message$1<TLSimpleWebViewResultUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SimpleWebViewResult data2 = 1;
   */
  data2: SimpleWebViewResult[] = [];

  constructor(data?: PartialMessage<TLSimpleWebViewResultUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSimpleWebViewResultUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SimpleWebViewResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSimpleWebViewResultUrl {
    return new TLSimpleWebViewResultUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSimpleWebViewResultUrl {
    return new TLSimpleWebViewResultUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSimpleWebViewResultUrl {
    return new TLSimpleWebViewResultUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLSimpleWebViewResultUrl | PlainMessage<TLSimpleWebViewResultUrl> | undefined, b: TLSimpleWebViewResultUrl | PlainMessage<TLSimpleWebViewResultUrl> | undefined): boolean {
    return proto3.util.equals(TLSimpleWebViewResultUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SponsoredMessage
 */
export class SponsoredMessage extends Message$1<SponsoredMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool recommended = 3;
   */
  recommended = false;

  /**
   * @generated from field: bool show_peer_photo = 4;
   */
  showPeerPhoto = false;

  /**
   * @generated from field: bytes random_id = 5;
   */
  randomId = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 6;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInvite chat_invite = 7;
   */
  chatInvite: ChatInvite[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue chat_invite_hash = 8;
   */
  chatInviteHash: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value channel_post = 9;
   */
  channelPost: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue start_param = 10;
   */
  startParam: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SponsoredWebPage webpage = 11;
   */
  webpage: SponsoredWebPage[] = [];

  /**
   * @generated from field: string message = 12;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 13;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue sponsor_info = 14;
   */
  sponsorInfo: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue additional_info = 15;
   */
  additionalInfo: StringValue[] = [];

  constructor(data?: PartialMessage<SponsoredMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SponsoredMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "recommended", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "show_peer_photo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "random_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 7, name: "chat_invite", kind: "message", T: ChatInvite, repeated: true },
    { no: 8, name: "chat_invite_hash", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "channel_post", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "start_param", kind: "message", T: StringValue, repeated: true },
    { no: 11, name: "webpage", kind: "message", T: SponsoredWebPage, repeated: true },
    { no: 12, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 14, name: "sponsor_info", kind: "message", T: StringValue, repeated: true },
    { no: 15, name: "additional_info", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SponsoredMessage {
    return new SponsoredMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SponsoredMessage {
    return new SponsoredMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SponsoredMessage {
    return new SponsoredMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SponsoredMessage | PlainMessage<SponsoredMessage> | undefined, b: SponsoredMessage | PlainMessage<SponsoredMessage> | undefined): boolean {
    return proto3.util.equals(SponsoredMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSponsoredMessage
 */
export class TLSponsoredMessage extends Message$1<TLSponsoredMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SponsoredMessage data2 = 1;
   */
  data2: SponsoredMessage[] = [];

  constructor(data?: PartialMessage<TLSponsoredMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSponsoredMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SponsoredMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSponsoredMessage {
    return new TLSponsoredMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSponsoredMessage {
    return new TLSponsoredMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSponsoredMessage {
    return new TLSponsoredMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLSponsoredMessage | PlainMessage<TLSponsoredMessage> | undefined, b: TLSponsoredMessage | PlainMessage<TLSponsoredMessage> | undefined): boolean {
    return proto3.util.equals(TLSponsoredMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.SponsoredWebPage
 */
export class SponsoredWebPage extends Message$1<SponsoredWebPage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string site_name = 4;
   */
  siteName = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 5;
   */
  photo: Photo[] = [];

  constructor(data?: PartialMessage<SponsoredWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.SponsoredWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "site_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "photo", kind: "message", T: Photo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SponsoredWebPage {
    return new SponsoredWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SponsoredWebPage {
    return new SponsoredWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SponsoredWebPage {
    return new SponsoredWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: SponsoredWebPage | PlainMessage<SponsoredWebPage> | undefined, b: SponsoredWebPage | PlainMessage<SponsoredWebPage> | undefined): boolean {
    return proto3.util.equals(SponsoredWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLSponsoredWebPage
 */
export class TLSponsoredWebPage extends Message$1<TLSponsoredWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SponsoredWebPage data2 = 1;
   */
  data2: SponsoredWebPage[] = [];

  constructor(data?: PartialMessage<TLSponsoredWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLSponsoredWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: SponsoredWebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSponsoredWebPage {
    return new TLSponsoredWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSponsoredWebPage {
    return new TLSponsoredWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSponsoredWebPage {
    return new TLSponsoredWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLSponsoredWebPage | PlainMessage<TLSponsoredWebPage> | undefined, b: TLSponsoredWebPage | PlainMessage<TLSponsoredWebPage> | undefined): boolean {
    return proto3.util.equals(TLSponsoredWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev
 */
export class StatsAbsValueAndPrev extends Message$1<StatsAbsValueAndPrev> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float current = 3;
   */
  current = 0;

  /**
   * @generated from field: float previous = 4;
   */
  previous = 0;

  constructor(data?: PartialMessage<StatsAbsValueAndPrev>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "current", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "previous", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsAbsValueAndPrev {
    return new StatsAbsValueAndPrev().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsAbsValueAndPrev {
    return new StatsAbsValueAndPrev().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsAbsValueAndPrev {
    return new StatsAbsValueAndPrev().fromJsonString(jsonString, options);
  }

  static equals(a: StatsAbsValueAndPrev | PlainMessage<StatsAbsValueAndPrev> | undefined, b: StatsAbsValueAndPrev | PlainMessage<StatsAbsValueAndPrev> | undefined): boolean {
    return proto3.util.equals(StatsAbsValueAndPrev, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsAbsValueAndPrev
 */
export class TLStatsAbsValueAndPrev extends Message$1<TLStatsAbsValueAndPrev> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev data2 = 1;
   */
  data2: StatsAbsValueAndPrev[] = [];

  constructor(data?: PartialMessage<TLStatsAbsValueAndPrev>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsAbsValueAndPrev";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsAbsValueAndPrev {
    return new TLStatsAbsValueAndPrev().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsAbsValueAndPrev {
    return new TLStatsAbsValueAndPrev().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsAbsValueAndPrev {
    return new TLStatsAbsValueAndPrev().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsAbsValueAndPrev | PlainMessage<TLStatsAbsValueAndPrev> | undefined, b: TLStatsAbsValueAndPrev | PlainMessage<TLStatsAbsValueAndPrev> | undefined): boolean {
    return proto3.util.equals(TLStatsAbsValueAndPrev, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsDateRangeDays
 */
export class StatsDateRangeDays extends Message$1<StatsDateRangeDays> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 min_date = 3;
   */
  minDate = 0;

  /**
   * @generated from field: int32 max_date = 4;
   */
  maxDate = 0;

  constructor(data?: PartialMessage<StatsDateRangeDays>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsDateRangeDays";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "min_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "max_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsDateRangeDays {
    return new StatsDateRangeDays().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsDateRangeDays {
    return new StatsDateRangeDays().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsDateRangeDays {
    return new StatsDateRangeDays().fromJsonString(jsonString, options);
  }

  static equals(a: StatsDateRangeDays | PlainMessage<StatsDateRangeDays> | undefined, b: StatsDateRangeDays | PlainMessage<StatsDateRangeDays> | undefined): boolean {
    return proto3.util.equals(StatsDateRangeDays, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsDateRangeDays
 */
export class TLStatsDateRangeDays extends Message$1<TLStatsDateRangeDays> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsDateRangeDays data2 = 1;
   */
  data2: StatsDateRangeDays[] = [];

  constructor(data?: PartialMessage<TLStatsDateRangeDays>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsDateRangeDays";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsDateRangeDays, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsDateRangeDays {
    return new TLStatsDateRangeDays().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsDateRangeDays {
    return new TLStatsDateRangeDays().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsDateRangeDays {
    return new TLStatsDateRangeDays().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsDateRangeDays | PlainMessage<TLStatsDateRangeDays> | undefined, b: TLStatsDateRangeDays | PlainMessage<TLStatsDateRangeDays> | undefined): boolean {
    return proto3.util.equals(TLStatsDateRangeDays, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsGraph
 */
export class StatsGraph extends Message$1<StatsGraph> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string token = 3;
   */
  token = "";

  /**
   * @generated from field: string error = 4;
   */
  error = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON json = 5;
   */
  json: DataJSON[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue zoom_token = 6;
   */
  zoomToken: StringValue[] = [];

  constructor(data?: PartialMessage<StatsGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "json", kind: "message", T: DataJSON, repeated: true },
    { no: 6, name: "zoom_token", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsGraph {
    return new StatsGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsGraph {
    return new StatsGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsGraph {
    return new StatsGraph().fromJsonString(jsonString, options);
  }

  static equals(a: StatsGraph | PlainMessage<StatsGraph> | undefined, b: StatsGraph | PlainMessage<StatsGraph> | undefined): boolean {
    return proto3.util.equals(StatsGraph, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGraphAsync
 */
export class TLStatsGraphAsync extends Message$1<TLStatsGraphAsync> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph data2 = 1;
   */
  data2: StatsGraph[] = [];

  constructor(data?: PartialMessage<TLStatsGraphAsync>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGraphAsync";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGraphAsync {
    return new TLStatsGraphAsync().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGraphAsync {
    return new TLStatsGraphAsync().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGraphAsync {
    return new TLStatsGraphAsync().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGraphAsync | PlainMessage<TLStatsGraphAsync> | undefined, b: TLStatsGraphAsync | PlainMessage<TLStatsGraphAsync> | undefined): boolean {
    return proto3.util.equals(TLStatsGraphAsync, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGraphError
 */
export class TLStatsGraphError extends Message$1<TLStatsGraphError> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph data2 = 1;
   */
  data2: StatsGraph[] = [];

  constructor(data?: PartialMessage<TLStatsGraphError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGraphError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGraphError {
    return new TLStatsGraphError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGraphError {
    return new TLStatsGraphError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGraphError {
    return new TLStatsGraphError().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGraphError | PlainMessage<TLStatsGraphError> | undefined, b: TLStatsGraphError | PlainMessage<TLStatsGraphError> | undefined): boolean {
    return proto3.util.equals(TLStatsGraphError, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGraph
 */
export class TLStatsGraph extends Message$1<TLStatsGraph> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph data2 = 1;
   */
  data2: StatsGraph[] = [];

  constructor(data?: PartialMessage<TLStatsGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGraph {
    return new TLStatsGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGraph {
    return new TLStatsGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGraph {
    return new TLStatsGraph().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGraph | PlainMessage<TLStatsGraph> | undefined, b: TLStatsGraph | PlainMessage<TLStatsGraph> | undefined): boolean {
    return proto3.util.equals(TLStatsGraph, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopAdmin
 */
export class StatsGroupTopAdmin extends Message$1<StatsGroupTopAdmin> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 deleted = 4;
   */
  deleted = 0;

  /**
   * @generated from field: int32 kicked = 5;
   */
  kicked = 0;

  /**
   * @generated from field: int32 banned = 6;
   */
  banned = 0;

  constructor(data?: PartialMessage<StatsGroupTopAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "deleted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "kicked", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "banned", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsGroupTopAdmin {
    return new StatsGroupTopAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsGroupTopAdmin {
    return new StatsGroupTopAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsGroupTopAdmin {
    return new StatsGroupTopAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: StatsGroupTopAdmin | PlainMessage<StatsGroupTopAdmin> | undefined, b: StatsGroupTopAdmin | PlainMessage<StatsGroupTopAdmin> | undefined): boolean {
    return proto3.util.equals(StatsGroupTopAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopAdmin
 */
export class TLStatsGroupTopAdmin extends Message$1<TLStatsGroupTopAdmin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopAdmin data2 = 1;
   */
  data2: StatsGroupTopAdmin[] = [];

  constructor(data?: PartialMessage<TLStatsGroupTopAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGroupTopAdmin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGroupTopAdmin {
    return new TLStatsGroupTopAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGroupTopAdmin {
    return new TLStatsGroupTopAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGroupTopAdmin {
    return new TLStatsGroupTopAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGroupTopAdmin | PlainMessage<TLStatsGroupTopAdmin> | undefined, b: TLStatsGroupTopAdmin | PlainMessage<TLStatsGroupTopAdmin> | undefined): boolean {
    return proto3.util.equals(TLStatsGroupTopAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopInviter
 */
export class StatsGroupTopInviter extends Message$1<StatsGroupTopInviter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 invitations = 4;
   */
  invitations = 0;

  constructor(data?: PartialMessage<StatsGroupTopInviter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopInviter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "invitations", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsGroupTopInviter {
    return new StatsGroupTopInviter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsGroupTopInviter {
    return new StatsGroupTopInviter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsGroupTopInviter {
    return new StatsGroupTopInviter().fromJsonString(jsonString, options);
  }

  static equals(a: StatsGroupTopInviter | PlainMessage<StatsGroupTopInviter> | undefined, b: StatsGroupTopInviter | PlainMessage<StatsGroupTopInviter> | undefined): boolean {
    return proto3.util.equals(StatsGroupTopInviter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopInviter
 */
export class TLStatsGroupTopInviter extends Message$1<TLStatsGroupTopInviter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopInviter data2 = 1;
   */
  data2: StatsGroupTopInviter[] = [];

  constructor(data?: PartialMessage<TLStatsGroupTopInviter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopInviter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGroupTopInviter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGroupTopInviter {
    return new TLStatsGroupTopInviter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGroupTopInviter {
    return new TLStatsGroupTopInviter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGroupTopInviter {
    return new TLStatsGroupTopInviter().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGroupTopInviter | PlainMessage<TLStatsGroupTopInviter> | undefined, b: TLStatsGroupTopInviter | PlainMessage<TLStatsGroupTopInviter> | undefined): boolean {
    return proto3.util.equals(TLStatsGroupTopInviter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopPoster
 */
export class StatsGroupTopPoster extends Message$1<StatsGroupTopPoster> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 messages = 4;
   */
  messages = 0;

  /**
   * @generated from field: int32 avg_chars = 5;
   */
  avgChars = 0;

  constructor(data?: PartialMessage<StatsGroupTopPoster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopPoster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "messages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "avg_chars", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsGroupTopPoster {
    return new StatsGroupTopPoster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsGroupTopPoster {
    return new StatsGroupTopPoster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsGroupTopPoster {
    return new StatsGroupTopPoster().fromJsonString(jsonString, options);
  }

  static equals(a: StatsGroupTopPoster | PlainMessage<StatsGroupTopPoster> | undefined, b: StatsGroupTopPoster | PlainMessage<StatsGroupTopPoster> | undefined): boolean {
    return proto3.util.equals(StatsGroupTopPoster, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopPoster
 */
export class TLStatsGroupTopPoster extends Message$1<TLStatsGroupTopPoster> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopPoster data2 = 1;
   */
  data2: StatsGroupTopPoster[] = [];

  constructor(data?: PartialMessage<TLStatsGroupTopPoster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsGroupTopPoster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsGroupTopPoster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsGroupTopPoster {
    return new TLStatsGroupTopPoster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsGroupTopPoster {
    return new TLStatsGroupTopPoster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsGroupTopPoster {
    return new TLStatsGroupTopPoster().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsGroupTopPoster | PlainMessage<TLStatsGroupTopPoster> | undefined, b: TLStatsGroupTopPoster | PlainMessage<TLStatsGroupTopPoster> | undefined): boolean {
    return proto3.util.equals(TLStatsGroupTopPoster, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsPercentValue
 */
export class StatsPercentValue extends Message$1<StatsPercentValue> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: float part = 3;
   */
  part = 0;

  /**
   * @generated from field: float total = 4;
   */
  total = 0;

  constructor(data?: PartialMessage<StatsPercentValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsPercentValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "part", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "total", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsPercentValue {
    return new StatsPercentValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsPercentValue {
    return new StatsPercentValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsPercentValue {
    return new StatsPercentValue().fromJsonString(jsonString, options);
  }

  static equals(a: StatsPercentValue | PlainMessage<StatsPercentValue> | undefined, b: StatsPercentValue | PlainMessage<StatsPercentValue> | undefined): boolean {
    return proto3.util.equals(StatsPercentValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsPercentValue
 */
export class TLStatsPercentValue extends Message$1<TLStatsPercentValue> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsPercentValue data2 = 1;
   */
  data2: StatsPercentValue[] = [];

  constructor(data?: PartialMessage<TLStatsPercentValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsPercentValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsPercentValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsPercentValue {
    return new TLStatsPercentValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsPercentValue {
    return new TLStatsPercentValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsPercentValue {
    return new TLStatsPercentValue().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsPercentValue | PlainMessage<TLStatsPercentValue> | undefined, b: TLStatsPercentValue | PlainMessage<TLStatsPercentValue> | undefined): boolean {
    return proto3.util.equals(TLStatsPercentValue, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsURL
 */
export class StatsURL extends Message$1<StatsURL> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<StatsURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsURL {
    return new StatsURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsURL {
    return new StatsURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsURL {
    return new StatsURL().fromJsonString(jsonString, options);
  }

  static equals(a: StatsURL | PlainMessage<StatsURL> | undefined, b: StatsURL | PlainMessage<StatsURL> | undefined): boolean {
    return proto3.util.equals(StatsURL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsURL
 */
export class TLStatsURL extends Message$1<TLStatsURL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsURL data2 = 1;
   */
  data2: StatsURL[] = [];

  constructor(data?: PartialMessage<TLStatsURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsURL, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsURL {
    return new TLStatsURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsURL {
    return new TLStatsURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsURL {
    return new TLStatsURL().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsURL | PlainMessage<TLStatsURL> | undefined, b: TLStatsURL | PlainMessage<TLStatsURL> | undefined): boolean {
    return proto3.util.equals(TLStatsURL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StickerKeyword
 */
export class StickerKeyword extends Message$1<StickerKeyword> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 document_id = 3;
   */
  documentId = protoInt64.zero;

  /**
   * @generated from field: string keyword = 4;
   */
  keyword = "";

  constructor(data?: PartialMessage<StickerKeyword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StickerKeyword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "keyword", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerKeyword {
    return new StickerKeyword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerKeyword {
    return new StickerKeyword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerKeyword {
    return new StickerKeyword().fromJsonString(jsonString, options);
  }

  static equals(a: StickerKeyword | PlainMessage<StickerKeyword> | undefined, b: StickerKeyword | PlainMessage<StickerKeyword> | undefined): boolean {
    return proto3.util.equals(StickerKeyword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerKeyword
 */
export class TLStickerKeyword extends Message$1<TLStickerKeyword> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerKeyword data2 = 1;
   */
  data2: StickerKeyword[] = [];

  constructor(data?: PartialMessage<TLStickerKeyword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerKeyword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerKeyword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerKeyword {
    return new TLStickerKeyword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerKeyword {
    return new TLStickerKeyword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerKeyword {
    return new TLStickerKeyword().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerKeyword | PlainMessage<TLStickerKeyword> | undefined, b: TLStickerKeyword | PlainMessage<TLStickerKeyword> | undefined): boolean {
    return proto3.util.equals(TLStickerKeyword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StickerPack
 */
export class StickerPack extends Message$1<StickerPack> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string emoticon = 3;
   */
  emoticon = "";

  /**
   * @generated from field: int64 documents = 4;
   */
  documents = protoInt64.zero;

  constructor(data?: PartialMessage<StickerPack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StickerPack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "documents", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerPack {
    return new StickerPack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerPack {
    return new StickerPack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerPack {
    return new StickerPack().fromJsonString(jsonString, options);
  }

  static equals(a: StickerPack | PlainMessage<StickerPack> | undefined, b: StickerPack | PlainMessage<StickerPack> | undefined): boolean {
    return proto3.util.equals(StickerPack, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerPack
 */
export class TLStickerPack extends Message$1<TLStickerPack> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerPack data2 = 1;
   */
  data2: StickerPack[] = [];

  constructor(data?: PartialMessage<TLStickerPack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerPack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerPack, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerPack {
    return new TLStickerPack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerPack {
    return new TLStickerPack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerPack {
    return new TLStickerPack().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerPack | PlainMessage<TLStickerPack> | undefined, b: TLStickerPack | PlainMessage<TLStickerPack> | undefined): boolean {
    return proto3.util.equals(TLStickerPack, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StickerSet
 */
export class StickerSet extends Message$1<StickerSet> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool archived = 3;
   */
  archived = false;

  /**
   * @generated from field: bool official = 4;
   */
  official = false;

  /**
   * @generated from field: bool masks = 5;
   */
  masks = false;

  /**
   * @generated from field: bool animated = 6;
   */
  animated = false;

  /**
   * @generated from field: bool videos = 7;
   */
  videos = false;

  /**
   * @generated from field: bool emojis = 8;
   */
  emojis = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value installed_date = 9;
   */
  installedDate: Int32Value[] = [];

  /**
   * @generated from field: int64 id = 10;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 11;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string title = 12;
   */
  title = "";

  /**
   * @generated from field: string short_name = 13;
   */
  shortName = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotoSize thumbs = 14;
   */
  thumbs: PhotoSize[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value thumb_dc_id = 15;
   */
  thumbDcId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value thumb_version = 16;
   */
  thumbVersion: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value thumb_document_id = 17;
   */
  thumbDocumentId: Int64Value[] = [];

  /**
   * @generated from field: int32 count = 18;
   */
  count = 0;

  /**
   * @generated from field: int32 hash = 19;
   */
  hash = 0;

  constructor(data?: PartialMessage<StickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "archived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "official", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "masks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "animated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "videos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "emojis", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "installed_date", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "thumbs", kind: "message", T: PhotoSize, repeated: true },
    { no: 15, name: "thumb_dc_id", kind: "message", T: Int32Value, repeated: true },
    { no: 16, name: "thumb_version", kind: "message", T: Int32Value, repeated: true },
    { no: 17, name: "thumb_document_id", kind: "message", T: Int64Value, repeated: true },
    { no: 18, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerSet {
    return new StickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerSet {
    return new StickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerSet {
    return new StickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: StickerSet | PlainMessage<StickerSet> | undefined, b: StickerSet | PlainMessage<StickerSet> | undefined): boolean {
    return proto3.util.equals(StickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerSet
 */
export class TLStickerSet extends Message$1<TLStickerSet> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSet data2 = 1;
   */
  data2: StickerSet[] = [];

  constructor(data?: PartialMessage<TLStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerSet {
    return new TLStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerSet {
    return new TLStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerSet {
    return new TLStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerSet | PlainMessage<TLStickerSet> | undefined, b: TLStickerSet | PlainMessage<TLStickerSet> | undefined): boolean {
    return proto3.util.equals(TLStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered
 */
export class StickerSetCovered extends Message$1<StickerSetCovered> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSet set = 3;
   */
  set: StickerSet[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document cover = 4;
   */
  cover: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document covers = 5;
   */
  covers: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerPack packs = 6;
   */
  packs: StickerPack[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerKeyword keywords = 7;
   */
  keywords: StickerKeyword[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document documents = 8;
   */
  documents: Document[] = [];

  constructor(data?: PartialMessage<StickerSetCovered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "set", kind: "message", T: StickerSet, repeated: true },
    { no: 4, name: "cover", kind: "message", T: Document, repeated: true },
    { no: 5, name: "covers", kind: "message", T: Document, repeated: true },
    { no: 6, name: "packs", kind: "message", T: StickerPack, repeated: true },
    { no: 7, name: "keywords", kind: "message", T: StickerKeyword, repeated: true },
    { no: 8, name: "documents", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickerSetCovered {
    return new StickerSetCovered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickerSetCovered {
    return new StickerSetCovered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickerSetCovered {
    return new StickerSetCovered().fromJsonString(jsonString, options);
  }

  static equals(a: StickerSetCovered | PlainMessage<StickerSetCovered> | undefined, b: StickerSetCovered | PlainMessage<StickerSetCovered> | undefined): boolean {
    return proto3.util.equals(StickerSetCovered, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerSetCovered
 */
export class TLStickerSetCovered extends Message$1<TLStickerSetCovered> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered data2 = 1;
   */
  data2: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<TLStickerSetCovered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerSetCovered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerSetCovered {
    return new TLStickerSetCovered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerSetCovered {
    return new TLStickerSetCovered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerSetCovered {
    return new TLStickerSetCovered().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerSetCovered | PlainMessage<TLStickerSetCovered> | undefined, b: TLStickerSetCovered | PlainMessage<TLStickerSetCovered> | undefined): boolean {
    return proto3.util.equals(TLStickerSetCovered, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerSetMultiCovered
 */
export class TLStickerSetMultiCovered extends Message$1<TLStickerSetMultiCovered> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered data2 = 1;
   */
  data2: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<TLStickerSetMultiCovered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerSetMultiCovered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerSetMultiCovered {
    return new TLStickerSetMultiCovered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerSetMultiCovered {
    return new TLStickerSetMultiCovered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerSetMultiCovered {
    return new TLStickerSetMultiCovered().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerSetMultiCovered | PlainMessage<TLStickerSetMultiCovered> | undefined, b: TLStickerSetMultiCovered | PlainMessage<TLStickerSetMultiCovered> | undefined): boolean {
    return proto3.util.equals(TLStickerSetMultiCovered, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerSetFullCovered
 */
export class TLStickerSetFullCovered extends Message$1<TLStickerSetFullCovered> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered data2 = 1;
   */
  data2: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<TLStickerSetFullCovered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerSetFullCovered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerSetFullCovered {
    return new TLStickerSetFullCovered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerSetFullCovered {
    return new TLStickerSetFullCovered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerSetFullCovered {
    return new TLStickerSetFullCovered().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerSetFullCovered | PlainMessage<TLStickerSetFullCovered> | undefined, b: TLStickerSetFullCovered | PlainMessage<TLStickerSetFullCovered> | undefined): boolean {
    return proto3.util.equals(TLStickerSetFullCovered, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickerSetNoCovered
 */
export class TLStickerSetNoCovered extends Message$1<TLStickerSetNoCovered> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered data2 = 1;
   */
  data2: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<TLStickerSetNoCovered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickerSetNoCovered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickerSetNoCovered {
    return new TLStickerSetNoCovered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickerSetNoCovered {
    return new TLStickerSetNoCovered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickerSetNoCovered {
    return new TLStickerSetNoCovered().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickerSetNoCovered | PlainMessage<TLStickerSetNoCovered> | undefined, b: TLStickerSetNoCovered | PlainMessage<TLStickerSetNoCovered> | undefined): boolean {
    return proto3.util.equals(TLStickerSetNoCovered, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesStealthMode
 */
export class StoriesStealthMode extends Message$1<StoriesStealthMode> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value active_until_date = 3;
   */
  activeUntilDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value cooldown_until_date = 4;
   */
  cooldownUntilDate: Int32Value[] = [];

  constructor(data?: PartialMessage<StoriesStealthMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesStealthMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "active_until_date", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "cooldown_until_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesStealthMode {
    return new StoriesStealthMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesStealthMode {
    return new StoriesStealthMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesStealthMode {
    return new StoriesStealthMode().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesStealthMode | PlainMessage<StoriesStealthMode> | undefined, b: StoriesStealthMode | PlainMessage<StoriesStealthMode> | undefined): boolean {
    return proto3.util.equals(StoriesStealthMode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesStealthMode
 */
export class TLStoriesStealthMode extends Message$1<TLStoriesStealthMode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStealthMode data2 = 1;
   */
  data2: StoriesStealthMode[] = [];

  constructor(data?: PartialMessage<TLStoriesStealthMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesStealthMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesStealthMode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesStealthMode {
    return new TLStoriesStealthMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesStealthMode {
    return new TLStoriesStealthMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesStealthMode {
    return new TLStoriesStealthMode().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesStealthMode | PlainMessage<TLStoriesStealthMode> | undefined, b: TLStoriesStealthMode | PlainMessage<TLStoriesStealthMode> | undefined): boolean {
    return proto3.util.equals(TLStoriesStealthMode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoryItem
 */
export class StoryItem extends Message$1<StoryItem> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: bool close_friends = 4;
   */
  closeFriends = false;

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: int32 expire_date = 6;
   */
  expireDate = 0;

  /**
   * @generated from field: bool pinned = 7;
   */
  pinned = false;

  /**
   * @generated from field: bool public = 8;
   */
  public = false;

  /**
   * @generated from field: bool min = 9;
   */
  min = false;

  /**
   * @generated from field: bool noforwards = 10;
   */
  noforwards = false;

  /**
   * @generated from field: bool edited = 11;
   */
  edited = false;

  /**
   * @generated from field: bool contacts = 12;
   */
  contacts = false;

  /**
   * @generated from field: bool selected_contacts = 13;
   */
  selectedContacts = false;

  /**
   * @generated from field: bool out = 14;
   */
  out = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue caption = 15;
   */
  caption: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 16;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia media = 17;
   */
  media: MessageMedia[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MediaArea media_areas = 18;
   */
  mediaAreas: MediaArea[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule privacy = 19;
   */
  privacy: PrivacyRule[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryViews views = 20;
   */
  views: StoryViews[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction sent_reaction = 21;
   */
  sentReaction: Reaction[] = [];

  constructor(data?: PartialMessage<StoryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "close_friends", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "expire_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "noforwards", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "edited", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "contacts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "selected_contacts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "out", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "caption", kind: "message", T: StringValue, repeated: true },
    { no: 16, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 17, name: "media", kind: "message", T: MessageMedia, repeated: true },
    { no: 18, name: "media_areas", kind: "message", T: MediaArea, repeated: true },
    { no: 19, name: "privacy", kind: "message", T: PrivacyRule, repeated: true },
    { no: 20, name: "views", kind: "message", T: StoryViews, repeated: true },
    { no: 21, name: "sent_reaction", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoryItem {
    return new StoryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoryItem {
    return new StoryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoryItem {
    return new StoryItem().fromJsonString(jsonString, options);
  }

  static equals(a: StoryItem | PlainMessage<StoryItem> | undefined, b: StoryItem | PlainMessage<StoryItem> | undefined): boolean {
    return proto3.util.equals(StoryItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoryItemDeleted
 */
export class TLStoryItemDeleted extends Message$1<TLStoryItemDeleted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem data2 = 1;
   */
  data2: StoryItem[] = [];

  constructor(data?: PartialMessage<TLStoryItemDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoryItemDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoryItemDeleted {
    return new TLStoryItemDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoryItemDeleted {
    return new TLStoryItemDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoryItemDeleted {
    return new TLStoryItemDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoryItemDeleted | PlainMessage<TLStoryItemDeleted> | undefined, b: TLStoryItemDeleted | PlainMessage<TLStoryItemDeleted> | undefined): boolean {
    return proto3.util.equals(TLStoryItemDeleted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoryItemSkipped
 */
export class TLStoryItemSkipped extends Message$1<TLStoryItemSkipped> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem data2 = 1;
   */
  data2: StoryItem[] = [];

  constructor(data?: PartialMessage<TLStoryItemSkipped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoryItemSkipped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoryItemSkipped {
    return new TLStoryItemSkipped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoryItemSkipped {
    return new TLStoryItemSkipped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoryItemSkipped {
    return new TLStoryItemSkipped().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoryItemSkipped | PlainMessage<TLStoryItemSkipped> | undefined, b: TLStoryItemSkipped | PlainMessage<TLStoryItemSkipped> | undefined): boolean {
    return proto3.util.equals(TLStoryItemSkipped, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoryItem
 */
export class TLStoryItem extends Message$1<TLStoryItem> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem data2 = 1;
   */
  data2: StoryItem[] = [];

  constructor(data?: PartialMessage<TLStoryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoryItem {
    return new TLStoryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoryItem {
    return new TLStoryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoryItem {
    return new TLStoryItem().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoryItem | PlainMessage<TLStoryItem> | undefined, b: TLStoryItem | PlainMessage<TLStoryItem> | undefined): boolean {
    return proto3.util.equals(TLStoryItem, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoryView
 */
export class StoryView extends Message$1<StoryView> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool blocked = 3;
   */
  blocked = false;

  /**
   * @generated from field: bool blocked_my_stories_from = 4;
   */
  blockedMyStoriesFrom = false;

  /**
   * @generated from field: int64 user_id = 5;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reaction = 7;
   */
  reaction: Reaction[] = [];

  constructor(data?: PartialMessage<StoryView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoryView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "blocked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "blocked_my_stories_from", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "reaction", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoryView {
    return new StoryView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoryView {
    return new StoryView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoryView {
    return new StoryView().fromJsonString(jsonString, options);
  }

  static equals(a: StoryView | PlainMessage<StoryView> | undefined, b: StoryView | PlainMessage<StoryView> | undefined): boolean {
    return proto3.util.equals(StoryView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoryView
 */
export class TLStoryView extends Message$1<TLStoryView> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryView data2 = 1;
   */
  data2: StoryView[] = [];

  constructor(data?: PartialMessage<TLStoryView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoryView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoryView, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoryView {
    return new TLStoryView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoryView {
    return new TLStoryView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoryView {
    return new TLStoryView().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoryView | PlainMessage<TLStoryView> | undefined, b: TLStoryView | PlainMessage<TLStoryView> | undefined): boolean {
    return proto3.util.equals(TLStoryView, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoryViews
 */
export class StoryViews extends Message$1<StoryViews> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool has_viewers = 3;
   */
  hasViewers = false;

  /**
   * @generated from field: int32 views_count = 4;
   */
  viewsCount = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value forwards_count = 5;
   */
  forwardsCount: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ReactionCount reactions = 6;
   */
  reactions: ReactionCount[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value reactions_count_FLAGINT32 = 7;
   */
  reactionsCountFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: int64 recent_viewers = 8;
   */
  recentViewers = protoInt64.zero;

  /**
   * @generated from field: int32 reactions_count_INT32 = 9;
   */
  reactionsCountINT32 = 0;

  constructor(data?: PartialMessage<StoryViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoryViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "has_viewers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "views_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "forwards_count", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "reactions", kind: "message", T: ReactionCount, repeated: true },
    { no: 7, name: "reactions_count_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "recent_viewers", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "reactions_count_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoryViews {
    return new StoryViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoryViews {
    return new StoryViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoryViews {
    return new StoryViews().fromJsonString(jsonString, options);
  }

  static equals(a: StoryViews | PlainMessage<StoryViews> | undefined, b: StoryViews | PlainMessage<StoryViews> | undefined): boolean {
    return proto3.util.equals(StoryViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoryViews
 */
export class TLStoryViews extends Message$1<TLStoryViews> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryViews data2 = 1;
   */
  data2: StoryViews[] = [];

  constructor(data?: PartialMessage<TLStoryViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoryViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoryViews, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoryViews {
    return new TLStoryViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoryViews {
    return new TLStoryViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoryViews {
    return new TLStoryViews().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoryViews | PlainMessage<TLStoryViews> | undefined, b: TLStoryViews | PlainMessage<TLStoryViews> | undefined): boolean {
    return proto3.util.equals(TLStoryViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TextWithEntities
 */
export class TextWithEntities extends Message$1<TextWithEntities> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 4;
   */
  entities: MessageEntity[] = [];

  constructor(data?: PartialMessage<TextWithEntities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TextWithEntities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entities", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextWithEntities {
    return new TextWithEntities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextWithEntities {
    return new TextWithEntities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextWithEntities {
    return new TextWithEntities().fromJsonString(jsonString, options);
  }

  static equals(a: TextWithEntities | PlainMessage<TextWithEntities> | undefined, b: TextWithEntities | PlainMessage<TextWithEntities> | undefined): boolean {
    return proto3.util.equals(TextWithEntities, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTextWithEntities
 */
export class TLTextWithEntities extends Message$1<TLTextWithEntities> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TextWithEntities data2 = 1;
   */
  data2: TextWithEntities[] = [];

  constructor(data?: PartialMessage<TLTextWithEntities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTextWithEntities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TextWithEntities, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTextWithEntities {
    return new TLTextWithEntities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTextWithEntities {
    return new TLTextWithEntities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTextWithEntities {
    return new TLTextWithEntities().fromJsonString(jsonString, options);
  }

  static equals(a: TLTextWithEntities | PlainMessage<TLTextWithEntities> | undefined, b: TLTextWithEntities | PlainMessage<TLTextWithEntities> | undefined): boolean {
    return proto3.util.equals(TLTextWithEntities, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Theme
 */
export class Theme extends Message$1<Theme> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool creator = 3;
   */
  creator = false;

  /**
   * @generated from field: bool default = 4;
   */
  default = false;

  /**
   * @generated from field: bool for_chat = 5;
   */
  forChat = false;

  /**
   * @generated from field: int64 id = 6;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 7;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string slug = 8;
   */
  slug = "";

  /**
   * @generated from field: string title = 9;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 10;
   */
  document: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ThemeSettings settings = 11;
   */
  settings: ThemeSettings[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue emoticon = 12;
   */
  emoticon: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value installs_count = 13;
   */
  installsCount: Int32Value[] = [];

  constructor(data?: PartialMessage<Theme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Theme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "creator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "for_chat", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "document", kind: "message", T: Document, repeated: true },
    { no: 11, name: "settings", kind: "message", T: ThemeSettings, repeated: true },
    { no: 12, name: "emoticon", kind: "message", T: StringValue, repeated: true },
    { no: 13, name: "installs_count", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Theme {
    return new Theme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJsonString(jsonString, options);
  }

  static equals(a: Theme | PlainMessage<Theme> | undefined, b: Theme | PlainMessage<Theme> | undefined): boolean {
    return proto3.util.equals(Theme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTheme
 */
export class TLTheme extends Message$1<TLTheme> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Theme data2 = 1;
   */
  data2: Theme[] = [];

  constructor(data?: PartialMessage<TLTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Theme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTheme {
    return new TLTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTheme {
    return new TLTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTheme {
    return new TLTheme().fromJsonString(jsonString, options);
  }

  static equals(a: TLTheme | PlainMessage<TLTheme> | undefined, b: TLTheme | PlainMessage<TLTheme> | undefined): boolean {
    return proto3.util.equals(TLTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ThemeSettings
 */
export class ThemeSettings extends Message$1<ThemeSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool message_colors_animated = 3;
   */
  messageColorsAnimated = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BaseTheme base_theme = 4;
   */
  baseTheme: BaseTheme[] = [];

  /**
   * @generated from field: int32 accent_color = 5;
   */
  accentColor = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value outbox_accent_color = 6;
   */
  outboxAccentColor: Int32Value[] = [];

  /**
   * @generated from field: int32 message_colors = 7;
   */
  messageColors = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper wallpaper = 8;
   */
  wallpaper: WallPaper[] = [];

  constructor(data?: PartialMessage<ThemeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ThemeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message_colors_animated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "base_theme", kind: "message", T: BaseTheme, repeated: true },
    { no: 5, name: "accent_color", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "outbox_accent_color", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "message_colors", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "wallpaper", kind: "message", T: WallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThemeSettings {
    return new ThemeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThemeSettings {
    return new ThemeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThemeSettings {
    return new ThemeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ThemeSettings | PlainMessage<ThemeSettings> | undefined, b: ThemeSettings | PlainMessage<ThemeSettings> | undefined): boolean {
    return proto3.util.equals(ThemeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLThemeSettings
 */
export class TLThemeSettings extends Message$1<TLThemeSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ThemeSettings data2 = 1;
   */
  data2: ThemeSettings[] = [];

  constructor(data?: PartialMessage<TLThemeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLThemeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ThemeSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLThemeSettings {
    return new TLThemeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLThemeSettings {
    return new TLThemeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLThemeSettings {
    return new TLThemeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLThemeSettings | PlainMessage<TLThemeSettings> | undefined, b: TLThemeSettings | PlainMessage<TLThemeSettings> | undefined): boolean {
    return proto3.util.equals(TLThemeSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TopPeer
 */
export class TopPeer extends Message$1<TopPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: float rating = 4;
   */
  rating = 0;

  constructor(data?: PartialMessage<TopPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TopPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "rating", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopPeer {
    return new TopPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopPeer {
    return new TopPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopPeer {
    return new TopPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TopPeer | PlainMessage<TopPeer> | undefined, b: TopPeer | PlainMessage<TopPeer> | undefined): boolean {
    return proto3.util.equals(TopPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeer
 */
export class TLTopPeer extends Message$1<TLTopPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeer data2 = 1;
   */
  data2: TopPeer[] = [];

  constructor(data?: PartialMessage<TLTopPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeer {
    return new TLTopPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeer {
    return new TLTopPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeer {
    return new TLTopPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeer | PlainMessage<TLTopPeer> | undefined, b: TLTopPeer | PlainMessage<TLTopPeer> | undefined): boolean {
    return proto3.util.equals(TLTopPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory
 */
export class TopPeerCategory extends Message$1<TopPeerCategory> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<TopPeerCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopPeerCategory {
    return new TopPeerCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopPeerCategory {
    return new TopPeerCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopPeerCategory {
    return new TopPeerCategory().fromJsonString(jsonString, options);
  }

  static equals(a: TopPeerCategory | PlainMessage<TopPeerCategory> | undefined, b: TopPeerCategory | PlainMessage<TopPeerCategory> | undefined): boolean {
    return proto3.util.equals(TopPeerCategory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryBotsPM
 */
export class TLTopPeerCategoryBotsPM extends Message$1<TLTopPeerCategoryBotsPM> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryBotsPM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryBotsPM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryBotsPM {
    return new TLTopPeerCategoryBotsPM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryBotsPM {
    return new TLTopPeerCategoryBotsPM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryBotsPM {
    return new TLTopPeerCategoryBotsPM().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryBotsPM | PlainMessage<TLTopPeerCategoryBotsPM> | undefined, b: TLTopPeerCategoryBotsPM | PlainMessage<TLTopPeerCategoryBotsPM> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryBotsPM, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryBotsInline
 */
export class TLTopPeerCategoryBotsInline extends Message$1<TLTopPeerCategoryBotsInline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryBotsInline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryBotsInline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryBotsInline {
    return new TLTopPeerCategoryBotsInline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryBotsInline {
    return new TLTopPeerCategoryBotsInline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryBotsInline {
    return new TLTopPeerCategoryBotsInline().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryBotsInline | PlainMessage<TLTopPeerCategoryBotsInline> | undefined, b: TLTopPeerCategoryBotsInline | PlainMessage<TLTopPeerCategoryBotsInline> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryBotsInline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryCorrespondents
 */
export class TLTopPeerCategoryCorrespondents extends Message$1<TLTopPeerCategoryCorrespondents> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryCorrespondents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryCorrespondents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryCorrespondents {
    return new TLTopPeerCategoryCorrespondents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryCorrespondents {
    return new TLTopPeerCategoryCorrespondents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryCorrespondents {
    return new TLTopPeerCategoryCorrespondents().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryCorrespondents | PlainMessage<TLTopPeerCategoryCorrespondents> | undefined, b: TLTopPeerCategoryCorrespondents | PlainMessage<TLTopPeerCategoryCorrespondents> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryCorrespondents, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryGroups
 */
export class TLTopPeerCategoryGroups extends Message$1<TLTopPeerCategoryGroups> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryGroups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryGroups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryGroups {
    return new TLTopPeerCategoryGroups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryGroups {
    return new TLTopPeerCategoryGroups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryGroups {
    return new TLTopPeerCategoryGroups().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryGroups | PlainMessage<TLTopPeerCategoryGroups> | undefined, b: TLTopPeerCategoryGroups | PlainMessage<TLTopPeerCategoryGroups> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryGroups, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryChannels
 */
export class TLTopPeerCategoryChannels extends Message$1<TLTopPeerCategoryChannels> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryChannels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryChannels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryChannels {
    return new TLTopPeerCategoryChannels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryChannels {
    return new TLTopPeerCategoryChannels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryChannels {
    return new TLTopPeerCategoryChannels().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryChannels | PlainMessage<TLTopPeerCategoryChannels> | undefined, b: TLTopPeerCategoryChannels | PlainMessage<TLTopPeerCategoryChannels> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryChannels, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryPhoneCalls
 */
export class TLTopPeerCategoryPhoneCalls extends Message$1<TLTopPeerCategoryPhoneCalls> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryPhoneCalls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryPhoneCalls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryPhoneCalls {
    return new TLTopPeerCategoryPhoneCalls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryPhoneCalls {
    return new TLTopPeerCategoryPhoneCalls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryPhoneCalls {
    return new TLTopPeerCategoryPhoneCalls().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryPhoneCalls | PlainMessage<TLTopPeerCategoryPhoneCalls> | undefined, b: TLTopPeerCategoryPhoneCalls | PlainMessage<TLTopPeerCategoryPhoneCalls> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryPhoneCalls, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryForwardUsers
 */
export class TLTopPeerCategoryForwardUsers extends Message$1<TLTopPeerCategoryForwardUsers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryForwardUsers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryForwardUsers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryForwardUsers {
    return new TLTopPeerCategoryForwardUsers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryForwardUsers {
    return new TLTopPeerCategoryForwardUsers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryForwardUsers {
    return new TLTopPeerCategoryForwardUsers().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryForwardUsers | PlainMessage<TLTopPeerCategoryForwardUsers> | undefined, b: TLTopPeerCategoryForwardUsers | PlainMessage<TLTopPeerCategoryForwardUsers> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryForwardUsers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryForwardChats
 */
export class TLTopPeerCategoryForwardChats extends Message$1<TLTopPeerCategoryForwardChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory data2 = 1;
   */
  data2: TopPeerCategory[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryForwardChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryForwardChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryForwardChats {
    return new TLTopPeerCategoryForwardChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryForwardChats {
    return new TLTopPeerCategoryForwardChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryForwardChats {
    return new TLTopPeerCategoryForwardChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryForwardChats | PlainMessage<TLTopPeerCategoryForwardChats> | undefined, b: TLTopPeerCategoryForwardChats | PlainMessage<TLTopPeerCategoryForwardChats> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryForwardChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TopPeerCategoryPeers
 */
export class TopPeerCategoryPeers extends Message$1<TopPeerCategoryPeers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategory category = 3;
   */
  category: TopPeerCategory[] = [];

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeer peers = 5;
   */
  peers: TopPeer[] = [];

  constructor(data?: PartialMessage<TopPeerCategoryPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TopPeerCategoryPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "category", kind: "message", T: TopPeerCategory, repeated: true },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "peers", kind: "message", T: TopPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopPeerCategoryPeers {
    return new TopPeerCategoryPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopPeerCategoryPeers {
    return new TopPeerCategoryPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopPeerCategoryPeers {
    return new TopPeerCategoryPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TopPeerCategoryPeers | PlainMessage<TopPeerCategoryPeers> | undefined, b: TopPeerCategoryPeers | PlainMessage<TopPeerCategoryPeers> | undefined): boolean {
    return proto3.util.equals(TopPeerCategoryPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryPeers
 */
export class TLTopPeerCategoryPeers extends Message$1<TLTopPeerCategoryPeers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategoryPeers data2 = 1;
   */
  data2: TopPeerCategoryPeers[] = [];

  constructor(data?: PartialMessage<TLTopPeerCategoryPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLTopPeerCategoryPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: TopPeerCategoryPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLTopPeerCategoryPeers {
    return new TLTopPeerCategoryPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLTopPeerCategoryPeers {
    return new TLTopPeerCategoryPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLTopPeerCategoryPeers {
    return new TLTopPeerCategoryPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TLTopPeerCategoryPeers | PlainMessage<TLTopPeerCategoryPeers> | undefined, b: TLTopPeerCategoryPeers | PlainMessage<TLTopPeerCategoryPeers> | undefined): boolean {
    return proto3.util.equals(TLTopPeerCategoryPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Update
 */
export class Update extends Message$1<Update> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message message_MESSAGE = 3;
   */
  messageMESSAGE: Message[] = [];

  /**
   * @generated from field: int32 pts_INT32 = 4;
   */
  ptsINT32 = 0;

  /**
   * @generated from field: int32 pts_count = 5;
   */
  ptsCount = 0;

  /**
   * @generated from field: int32 id_INT32 = 6;
   */
  idINT32 = 0;

  /**
   * @generated from field: int64 random_id = 7;
   */
  randomId = protoInt64.zero;

  /**
   * @generated from field: int32 messages = 8;
   */
  messages = 0;

  /**
   * @generated from field: int64 user_id = 9;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendMessageAction action = 10;
   */
  action: SendMessageAction[] = [];

  /**
   * @generated from field: int64 chat_id_INT64 = 11;
   */
  chatIdINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer from_id = 12;
   */
  fromId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipants participants_CHATPARTICIPANTS = 13;
   */
  participantsCHATPARTICIPANTS: ChatParticipants[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus status = 14;
   */
  status: UserStatus[] = [];

  /**
   * @generated from field: string first_name = 15;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 16;
   */
  lastName = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Username usernames = 17;
   */
  usernames: Username[] = [];

  /**
   * @generated from field: bool unconfirmed = 18;
   */
  unconfirmed = false;

  /**
   * @generated from field: int64 hash = 19;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value date_FLAGINT32 = 20;
   */
  dateFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue device = 21;
   */
  device: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue location = 22;
   */
  location: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage message_ENCRYPTEDMESSAGE = 23;
   */
  messageENCRYPTEDMESSAGE: EncryptedMessage[] = [];

  /**
   * @generated from field: int32 qts = 24;
   */
  qts = 0;

  /**
   * @generated from field: int32 chat_id_INT32 = 25;
   */
  chatIdINT32 = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedChat chat = 26;
   */
  chat: EncryptedChat[] = [];

  /**
   * @generated from field: int32 date_INT32 = 27;
   */
  dateINT32 = 0;

  /**
   * @generated from field: int32 max_date = 28;
   */
  maxDate = 0;

  /**
   * @generated from field: int64 inviter_id = 29;
   */
  inviterId = protoInt64.zero;

  /**
   * @generated from field: int32 version = 30;
   */
  version = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DcOption dc_options = 31;
   */
  dcOptions: DcOption[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.NotifyPeer peer_NOTIFYPEER = 32;
   */
  peerNOTIFYPEER: NotifyPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings notify_settings = 33;
   */
  notifySettings: PeerNotifySettings[] = [];

  /**
   * @generated from field: bool popup = 34;
   */
  popup = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value inbox_date = 35;
   */
  inboxDate: Int32Value[] = [];

  /**
   * @generated from field: string type = 36;
   */
  type = "";

  /**
   * @generated from field: string message_STRING = 37;
   */
  messageSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia media = 38;
   */
  media: MessageMedia[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 39;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyKey key = 40;
   */
  key: PrivacyKey[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule rules = 41;
   */
  rules: PrivacyRule[] = [];

  /**
   * @generated from field: string phone = 42;
   */
  phone = "";

  /**
   * @generated from field: repeated google.protobuf.Int32Value folder_id = 43;
   */
  folderId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer_PEER = 44;
   */
  peerPEER: Peer[] = [];

  /**
   * @generated from field: int32 max_id = 45;
   */
  maxId = 0;

  /**
   * @generated from field: int32 still_unread_count = 46;
   */
  stillUnreadCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage webpage = 47;
   */
  webpage: WebPage[] = [];

  /**
   * @generated from field: int64 channel_id = 48;
   */
  channelId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value pts_FLAGINT32 = 49;
   */
  ptsFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: int32 views = 50;
   */
  views = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool is_admin = 51;
   */
  isAdmin: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSet stickerset_MESSAGES_STICKERSET = 52;
   */
  stickersetMESSAGESSTICKERSET: MessagesStickerSet[] = [];

  /**
   * @generated from field: bool masks = 53;
   */
  masks = false;

  /**
   * @generated from field: bool emojis = 54;
   */
  emojis = false;

  /**
   * @generated from field: int64 order_VECTORINT64 = 55;
   */
  orderVECTORINT64 = protoInt64.zero;

  /**
   * @generated from field: int64 query_id = 56;
   */
  queryId = protoInt64.zero;

  /**
   * @generated from field: string query = 57;
   */
  query = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GeoPoint geo = 58;
   */
  geo: GeoPoint[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineQueryPeerType peer_type = 59;
   */
  peerType: InlineQueryPeerType[] = [];

  /**
   * @generated from field: string offset = 60;
   */
  offset = "";

  /**
   * @generated from field: string id_STRING = 61;
   */
  idSTRING = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID msg_id_FLAGINPUTBOTINLINEMESSAGEID = 62;
   */
  msgIdFLAGINPUTBOTINLINEMESSAGEID: InputBotInlineMessageID[] = [];

  /**
   * @generated from field: int32 msg_id_INT32 = 63;
   */
  msgIdINT32 = 0;

  /**
   * @generated from field: int64 chat_instance = 64;
   */
  chatInstance = protoInt64.zero;

  /**
   * @generated from field: bytes data_FLAGBYTES = 65;
   */
  dataFLAGBYTES = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.StringValue game_short_name = 66;
   */
  gameShortName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value top_msg_id_FLAGINT32 = 67;
   */
  topMsgIdFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DraftMessage draft = 68;
   */
  draft: DraftMessage[] = [];

  /**
   * @generated from field: bool pinned = 69;
   */
  pinned = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogPeer peer_DIALOGPEER = 70;
   */
  peerDIALOGPEER: DialogPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogPeer order_FLAGVECTORDIALOGPEER = 71;
   */
  orderFLAGVECTORDIALOGPEER: DialogPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON data_DATAJSON = 72;
   */
  dataDATAJSON: DataJSON[] = [];

  /**
   * @generated from field: int32 timeout = 73;
   */
  timeout = 0;

  /**
   * @generated from field: bytes payload = 74;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PostAddress shipping_address = 75;
   */
  shippingAddress: PostAddress[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo info = 76;
   */
  info: PaymentRequestedInfo[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue shipping_option_id = 77;
   */
  shippingOptionId: StringValue[] = [];

  /**
   * @generated from field: string currency = 78;
   */
  currency = "";

  /**
   * @generated from field: int64 total_amount = 79;
   */
  totalAmount = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall phone_call = 80;
   */
  phoneCall: PhoneCall[] = [];

  /**
   * @generated from field: string lang_code = 81;
   */
  langCode = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.LangPackDifference difference = 82;
   */
  difference: LangPackDifference[] = [];

  /**
   * @generated from field: int32 available_min_id = 83;
   */
  availableMinId = 0;

  /**
   * @generated from field: bool unread = 84;
   */
  unread = false;

  /**
   * @generated from field: int64 poll_id = 85;
   */
  pollId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Poll poll = 86;
   */
  poll: Poll[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PollResults results = 87;
   */
  results: PollResults[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatBannedRights default_banned_rights = 88;
   */
  defaultBannedRights: ChatBannedRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.FolderPeer folder_peers = 89;
   */
  folderPeers: FolderPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerSettings settings = 90;
   */
  settings: PeerSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerLocated peers = 91;
   */
  peers: PeerLocated[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Theme theme = 92;
   */
  theme: Theme[] = [];

  /**
   * @generated from field: bytes options = 93;
   */
  options = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter filter = 94;
   */
  filter: DialogFilter[] = [];

  /**
   * @generated from field: int32 order_VECTORINT32 = 95;
   */
  orderVECTORINT32 = 0;

  /**
   * @generated from field: int64 phone_call_id = 96;
   */
  phoneCallId = protoInt64.zero;

  /**
   * @generated from field: int32 forwards = 97;
   */
  forwards = 0;

  /**
   * @generated from field: int32 top_msg_id_INT32 = 98;
   */
  topMsgIdINT32 = 0;

  /**
   * @generated from field: int32 read_max_id = 99;
   */
  readMaxId = 0;

  /**
   * @generated from field: repeated google.protobuf.Int64Value broadcast_id = 100;
   */
  broadcastId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value broadcast_post = 101;
   */
  broadcastPost: Int32Value[] = [];

  /**
   * @generated from field: bool blocked_FLAGBOOLEAN = 102;
   */
  blockedFLAGBOOLEAN = false;

  /**
   * @generated from field: bool blocked_my_stories_from = 103;
   */
  blockedMyStoriesFrom = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer_id = 104;
   */
  peerId: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputGroupCall call_INPUTGROUPCALL = 105;
   */
  callINPUTGROUPCALL: InputGroupCall[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant participants_VECTORGROUPCALLPARTICIPANT = 106;
   */
  participantsVECTORGROUPCALLPARTICIPANT: GroupCallParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCall call_GROUPCALL = 107;
   */
  callGROUPCALL: GroupCall[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 108;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: int64 actor_id = 109;
   */
  actorId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant prev_participant_FLAGCHATPARTICIPANT = 110;
   */
  prevParticipantFLAGCHATPARTICIPANT: ChatParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatParticipant new_participant_FLAGCHATPARTICIPANT = 111;
   */
  newParticipantFLAGCHATPARTICIPANT: ChatParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite invite = 112;
   */
  invite: ExportedChatInvite[] = [];

  /**
   * @generated from field: bool via_chatlist = 113;
   */
  viaChatlist = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant prev_participant_FLAGCHANNELPARTICIPANT = 114;
   */
  prevParticipantFLAGCHANNELPARTICIPANT: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant new_participant_FLAGCHANNELPARTICIPANT = 115;
   */
  newParticipantFLAGCHANNELPARTICIPANT: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool stopped = 116;
   */
  stopped: Bool[] = [];

  /**
   * @generated from field: bool presentation = 117;
   */
  presentation = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON params = 118;
   */
  params: DataJSON[] = [];

  /**
   * @generated from field: int64 bot_id = 119;
   */
  botId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotCommand commands = 120;
   */
  commands: BotCommand[] = [];

  /**
   * @generated from field: int32 requests_pending = 121;
   */
  requestsPending = 0;

  /**
   * @generated from field: int64 recent_requesters = 122;
   */
  recentRequesters = protoInt64.zero;

  /**
   * @generated from field: string about = 123;
   */
  about = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReactions reactions = 124;
   */
  reactions: MessageReactions[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotMenuButton button = 125;
   */
  button: BotMenuButton[] = [];

  /**
   * @generated from field: bool pending = 126;
   */
  pending = false;

  /**
   * @generated from field: int64 transcription_id = 127;
   */
  transcriptionId = protoInt64.zero;

  /**
   * @generated from field: string text = 128;
   */
  text = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus emoji_status = 129;
   */
  emojiStatus: EmojiStatus[] = [];

  /**
   * @generated from field: int64 stickerset_INT64 = 130;
   */
  stickersetINT64 = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageExtendedMedia extended_media = 131;
   */
  extendedMedia: MessageExtendedMedia[] = [];

  /**
   * @generated from field: int32 topic_id_INT32 = 132;
   */
  topicIdINT32 = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem story = 133;
   */
  story: StoryItem[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStealthMode stealth_mode = 134;
   */
  stealthMode: StoriesStealthMode[] = [];

  /**
   * @generated from field: int32 story_id = 135;
   */
  storyId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reaction = 136;
   */
  reaction: Reaction[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool blocked_BOOL = 137;
   */
  blockedBOOL: Bool[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto photo = 138;
   */
  photo: UserProfilePhoto[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Bool previous = 139;
   */
  previous: Bool[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value topic_id_FLAGINT32 = 140;
   */
  topicIdFLAGINT32: Int32Value[] = [];

  /**
   * @generated from field: string username = 141;
   */
  username = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BizDataRaw biz_data = 142;
   */
  bizData: BizDataRaw[] = [];

  constructor(data?: PartialMessage<Update>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Update";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message_MESSAGE", kind: "message", T: Message, repeated: true },
    { no: 4, name: "pts_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "random_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "messages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "action", kind: "message", T: SendMessageAction, repeated: true },
    { no: 11, name: "chat_id_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "from_id", kind: "message", T: Peer, repeated: true },
    { no: 13, name: "participants_CHATPARTICIPANTS", kind: "message", T: ChatParticipants, repeated: true },
    { no: 14, name: "status", kind: "message", T: UserStatus, repeated: true },
    { no: 15, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "usernames", kind: "message", T: Username, repeated: true },
    { no: 18, name: "unconfirmed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "date_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 21, name: "device", kind: "message", T: StringValue, repeated: true },
    { no: 22, name: "location", kind: "message", T: StringValue, repeated: true },
    { no: 23, name: "message_ENCRYPTEDMESSAGE", kind: "message", T: EncryptedMessage, repeated: true },
    { no: 24, name: "qts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "chat_id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "chat", kind: "message", T: EncryptedChat, repeated: true },
    { no: 27, name: "date_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 28, name: "max_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 29, name: "inviter_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 31, name: "dc_options", kind: "message", T: DcOption, repeated: true },
    { no: 32, name: "peer_NOTIFYPEER", kind: "message", T: NotifyPeer, repeated: true },
    { no: 33, name: "notify_settings", kind: "message", T: PeerNotifySettings, repeated: true },
    { no: 34, name: "popup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 35, name: "inbox_date", kind: "message", T: Int32Value, repeated: true },
    { no: 36, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "message_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 38, name: "media", kind: "message", T: MessageMedia, repeated: true },
    { no: 39, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 40, name: "key", kind: "message", T: PrivacyKey, repeated: true },
    { no: 41, name: "rules", kind: "message", T: PrivacyRule, repeated: true },
    { no: 42, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 43, name: "folder_id", kind: "message", T: Int32Value, repeated: true },
    { no: 44, name: "peer_PEER", kind: "message", T: Peer, repeated: true },
    { no: 45, name: "max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 46, name: "still_unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 47, name: "webpage", kind: "message", T: WebPage, repeated: true },
    { no: 48, name: "channel_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 49, name: "pts_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 50, name: "views", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 51, name: "is_admin", kind: "message", T: Bool, repeated: true },
    { no: 52, name: "stickerset_MESSAGES_STICKERSET", kind: "message", T: MessagesStickerSet, repeated: true },
    { no: 53, name: "masks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 54, name: "emojis", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 55, name: "order_VECTORINT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 56, name: "query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 57, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 58, name: "geo", kind: "message", T: GeoPoint, repeated: true },
    { no: 59, name: "peer_type", kind: "message", T: InlineQueryPeerType, repeated: true },
    { no: 60, name: "offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 61, name: "id_STRING", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 62, name: "msg_id_FLAGINPUTBOTINLINEMESSAGEID", kind: "message", T: InputBotInlineMessageID, repeated: true },
    { no: 63, name: "msg_id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 64, name: "chat_instance", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 65, name: "data_FLAGBYTES", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 66, name: "game_short_name", kind: "message", T: StringValue, repeated: true },
    { no: 67, name: "top_msg_id_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 68, name: "draft", kind: "message", T: DraftMessage, repeated: true },
    { no: 69, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 70, name: "peer_DIALOGPEER", kind: "message", T: DialogPeer, repeated: true },
    { no: 71, name: "order_FLAGVECTORDIALOGPEER", kind: "message", T: DialogPeer, repeated: true },
    { no: 72, name: "data_DATAJSON", kind: "message", T: DataJSON, repeated: true },
    { no: 73, name: "timeout", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 74, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 75, name: "shipping_address", kind: "message", T: PostAddress, repeated: true },
    { no: 76, name: "info", kind: "message", T: PaymentRequestedInfo, repeated: true },
    { no: 77, name: "shipping_option_id", kind: "message", T: StringValue, repeated: true },
    { no: 78, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 79, name: "total_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 80, name: "phone_call", kind: "message", T: PhoneCall, repeated: true },
    { no: 81, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 82, name: "difference", kind: "message", T: LangPackDifference, repeated: true },
    { no: 83, name: "available_min_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 84, name: "unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 85, name: "poll_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 86, name: "poll", kind: "message", T: Poll, repeated: true },
    { no: 87, name: "results", kind: "message", T: PollResults, repeated: true },
    { no: 88, name: "default_banned_rights", kind: "message", T: ChatBannedRights, repeated: true },
    { no: 89, name: "folder_peers", kind: "message", T: FolderPeer, repeated: true },
    { no: 90, name: "settings", kind: "message", T: PeerSettings, repeated: true },
    { no: 91, name: "peers", kind: "message", T: PeerLocated, repeated: true },
    { no: 92, name: "theme", kind: "message", T: Theme, repeated: true },
    { no: 93, name: "options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 94, name: "filter", kind: "message", T: DialogFilter, repeated: true },
    { no: 95, name: "order_VECTORINT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 96, name: "phone_call_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 97, name: "forwards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 98, name: "top_msg_id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 99, name: "read_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 100, name: "broadcast_id", kind: "message", T: Int64Value, repeated: true },
    { no: 101, name: "broadcast_post", kind: "message", T: Int32Value, repeated: true },
    { no: 102, name: "blocked_FLAGBOOLEAN", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "blocked_my_stories_from", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 104, name: "peer_id", kind: "message", T: Peer, repeated: true },
    { no: 105, name: "call_INPUTGROUPCALL", kind: "message", T: InputGroupCall, repeated: true },
    { no: 106, name: "participants_VECTORGROUPCALLPARTICIPANT", kind: "message", T: GroupCallParticipant, repeated: true },
    { no: 107, name: "call_GROUPCALL", kind: "message", T: GroupCall, repeated: true },
    { no: 108, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 109, name: "actor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 110, name: "prev_participant_FLAGCHATPARTICIPANT", kind: "message", T: ChatParticipant, repeated: true },
    { no: 111, name: "new_participant_FLAGCHATPARTICIPANT", kind: "message", T: ChatParticipant, repeated: true },
    { no: 112, name: "invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 113, name: "via_chatlist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 114, name: "prev_participant_FLAGCHANNELPARTICIPANT", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 115, name: "new_participant_FLAGCHANNELPARTICIPANT", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 116, name: "stopped", kind: "message", T: Bool, repeated: true },
    { no: 117, name: "presentation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 118, name: "params", kind: "message", T: DataJSON, repeated: true },
    { no: 119, name: "bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 120, name: "commands", kind: "message", T: BotCommand, repeated: true },
    { no: 121, name: "requests_pending", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 122, name: "recent_requesters", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 123, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 124, name: "reactions", kind: "message", T: MessageReactions, repeated: true },
    { no: 125, name: "button", kind: "message", T: BotMenuButton, repeated: true },
    { no: 126, name: "pending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 127, name: "transcription_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 128, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 129, name: "emoji_status", kind: "message", T: EmojiStatus, repeated: true },
    { no: 130, name: "stickerset_INT64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 131, name: "extended_media", kind: "message", T: MessageExtendedMedia, repeated: true },
    { no: 132, name: "topic_id_INT32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 133, name: "story", kind: "message", T: StoryItem, repeated: true },
    { no: 134, name: "stealth_mode", kind: "message", T: StoriesStealthMode, repeated: true },
    { no: 135, name: "story_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 136, name: "reaction", kind: "message", T: Reaction, repeated: true },
    { no: 137, name: "blocked_BOOL", kind: "message", T: Bool, repeated: true },
    { no: 138, name: "photo", kind: "message", T: UserProfilePhoto, repeated: true },
    { no: 139, name: "previous", kind: "message", T: Bool, repeated: true },
    { no: 140, name: "topic_id_FLAGINT32", kind: "message", T: Int32Value, repeated: true },
    { no: 141, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 142, name: "biz_data", kind: "message", T: BizDataRaw, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update {
    return new Update().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJsonString(jsonString, options);
  }

  static equals(a: Update | PlainMessage<Update> | undefined, b: Update | PlainMessage<Update> | undefined): boolean {
    return proto3.util.equals(Update, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewMessage
 */
export class TLUpdateNewMessage extends Message$1<TLUpdateNewMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewMessage {
    return new TLUpdateNewMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewMessage {
    return new TLUpdateNewMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewMessage {
    return new TLUpdateNewMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewMessage | PlainMessage<TLUpdateNewMessage> | undefined, b: TLUpdateNewMessage | PlainMessage<TLUpdateNewMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageID
 */
export class TLUpdateMessageID extends Message$1<TLUpdateMessageID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMessageID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMessageID {
    return new TLUpdateMessageID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMessageID {
    return new TLUpdateMessageID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMessageID {
    return new TLUpdateMessageID().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMessageID | PlainMessage<TLUpdateMessageID> | undefined, b: TLUpdateMessageID | PlainMessage<TLUpdateMessageID> | undefined): boolean {
    return proto3.util.equals(TLUpdateMessageID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteMessages
 */
export class TLUpdateDeleteMessages extends Message$1<TLUpdateDeleteMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDeleteMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDeleteMessages {
    return new TLUpdateDeleteMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDeleteMessages {
    return new TLUpdateDeleteMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDeleteMessages {
    return new TLUpdateDeleteMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDeleteMessages | PlainMessage<TLUpdateDeleteMessages> | undefined, b: TLUpdateDeleteMessages | PlainMessage<TLUpdateDeleteMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdateDeleteMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserTyping
 */
export class TLUpdateUserTyping extends Message$1<TLUpdateUserTyping> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserTyping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserTyping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserTyping {
    return new TLUpdateUserTyping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserTyping {
    return new TLUpdateUserTyping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserTyping {
    return new TLUpdateUserTyping().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserTyping | PlainMessage<TLUpdateUserTyping> | undefined, b: TLUpdateUserTyping | PlainMessage<TLUpdateUserTyping> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserTyping, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatUserTyping
 */
export class TLUpdateChatUserTyping extends Message$1<TLUpdateChatUserTyping> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatUserTyping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatUserTyping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatUserTyping {
    return new TLUpdateChatUserTyping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatUserTyping {
    return new TLUpdateChatUserTyping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatUserTyping {
    return new TLUpdateChatUserTyping().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatUserTyping | PlainMessage<TLUpdateChatUserTyping> | undefined, b: TLUpdateChatUserTyping | PlainMessage<TLUpdateChatUserTyping> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatUserTyping, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipants
 */
export class TLUpdateChatParticipants extends Message$1<TLUpdateChatParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatParticipants {
    return new TLUpdateChatParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatParticipants {
    return new TLUpdateChatParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatParticipants {
    return new TLUpdateChatParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatParticipants | PlainMessage<TLUpdateChatParticipants> | undefined, b: TLUpdateChatParticipants | PlainMessage<TLUpdateChatParticipants> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserStatus
 */
export class TLUpdateUserStatus extends Message$1<TLUpdateUserStatus> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserStatus {
    return new TLUpdateUserStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserStatus {
    return new TLUpdateUserStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserStatus {
    return new TLUpdateUserStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserStatus | PlainMessage<TLUpdateUserStatus> | undefined, b: TLUpdateUserStatus | PlainMessage<TLUpdateUserStatus> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserName
 */
export class TLUpdateUserName extends Message$1<TLUpdateUserName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserName {
    return new TLUpdateUserName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserName {
    return new TLUpdateUserName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserName {
    return new TLUpdateUserName().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserName | PlainMessage<TLUpdateUserName> | undefined, b: TLUpdateUserName | PlainMessage<TLUpdateUserName> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewAuthorization
 */
export class TLUpdateNewAuthorization extends Message$1<TLUpdateNewAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewAuthorization {
    return new TLUpdateNewAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewAuthorization {
    return new TLUpdateNewAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewAuthorization {
    return new TLUpdateNewAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewAuthorization | PlainMessage<TLUpdateNewAuthorization> | undefined, b: TLUpdateNewAuthorization | PlainMessage<TLUpdateNewAuthorization> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewEncryptedMessage
 */
export class TLUpdateNewEncryptedMessage extends Message$1<TLUpdateNewEncryptedMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewEncryptedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewEncryptedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewEncryptedMessage {
    return new TLUpdateNewEncryptedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewEncryptedMessage {
    return new TLUpdateNewEncryptedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewEncryptedMessage {
    return new TLUpdateNewEncryptedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewEncryptedMessage | PlainMessage<TLUpdateNewEncryptedMessage> | undefined, b: TLUpdateNewEncryptedMessage | PlainMessage<TLUpdateNewEncryptedMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewEncryptedMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryptedChatTyping
 */
export class TLUpdateEncryptedChatTyping extends Message$1<TLUpdateEncryptedChatTyping> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateEncryptedChatTyping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryptedChatTyping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateEncryptedChatTyping {
    return new TLUpdateEncryptedChatTyping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateEncryptedChatTyping {
    return new TLUpdateEncryptedChatTyping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateEncryptedChatTyping {
    return new TLUpdateEncryptedChatTyping().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateEncryptedChatTyping | PlainMessage<TLUpdateEncryptedChatTyping> | undefined, b: TLUpdateEncryptedChatTyping | PlainMessage<TLUpdateEncryptedChatTyping> | undefined): boolean {
    return proto3.util.equals(TLUpdateEncryptedChatTyping, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryption
 */
export class TLUpdateEncryption extends Message$1<TLUpdateEncryption> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateEncryption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateEncryption {
    return new TLUpdateEncryption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateEncryption {
    return new TLUpdateEncryption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateEncryption {
    return new TLUpdateEncryption().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateEncryption | PlainMessage<TLUpdateEncryption> | undefined, b: TLUpdateEncryption | PlainMessage<TLUpdateEncryption> | undefined): boolean {
    return proto3.util.equals(TLUpdateEncryption, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryptedMessagesRead
 */
export class TLUpdateEncryptedMessagesRead extends Message$1<TLUpdateEncryptedMessagesRead> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateEncryptedMessagesRead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateEncryptedMessagesRead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateEncryptedMessagesRead {
    return new TLUpdateEncryptedMessagesRead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateEncryptedMessagesRead {
    return new TLUpdateEncryptedMessagesRead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateEncryptedMessagesRead {
    return new TLUpdateEncryptedMessagesRead().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateEncryptedMessagesRead | PlainMessage<TLUpdateEncryptedMessagesRead> | undefined, b: TLUpdateEncryptedMessagesRead | PlainMessage<TLUpdateEncryptedMessagesRead> | undefined): boolean {
    return proto3.util.equals(TLUpdateEncryptedMessagesRead, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantAdd
 */
export class TLUpdateChatParticipantAdd extends Message$1<TLUpdateChatParticipantAdd> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatParticipantAdd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantAdd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatParticipantAdd {
    return new TLUpdateChatParticipantAdd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantAdd {
    return new TLUpdateChatParticipantAdd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantAdd {
    return new TLUpdateChatParticipantAdd().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatParticipantAdd | PlainMessage<TLUpdateChatParticipantAdd> | undefined, b: TLUpdateChatParticipantAdd | PlainMessage<TLUpdateChatParticipantAdd> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatParticipantAdd, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantDelete
 */
export class TLUpdateChatParticipantDelete extends Message$1<TLUpdateChatParticipantDelete> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatParticipantDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatParticipantDelete {
    return new TLUpdateChatParticipantDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantDelete {
    return new TLUpdateChatParticipantDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantDelete {
    return new TLUpdateChatParticipantDelete().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatParticipantDelete | PlainMessage<TLUpdateChatParticipantDelete> | undefined, b: TLUpdateChatParticipantDelete | PlainMessage<TLUpdateChatParticipantDelete> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatParticipantDelete, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDcOptions
 */
export class TLUpdateDcOptions extends Message$1<TLUpdateDcOptions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDcOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDcOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDcOptions {
    return new TLUpdateDcOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDcOptions {
    return new TLUpdateDcOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDcOptions {
    return new TLUpdateDcOptions().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDcOptions | PlainMessage<TLUpdateDcOptions> | undefined, b: TLUpdateDcOptions | PlainMessage<TLUpdateDcOptions> | undefined): boolean {
    return proto3.util.equals(TLUpdateDcOptions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNotifySettings
 */
export class TLUpdateNotifySettings extends Message$1<TLUpdateNotifySettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNotifySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNotifySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNotifySettings {
    return new TLUpdateNotifySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNotifySettings {
    return new TLUpdateNotifySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNotifySettings {
    return new TLUpdateNotifySettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNotifySettings | PlainMessage<TLUpdateNotifySettings> | undefined, b: TLUpdateNotifySettings | PlainMessage<TLUpdateNotifySettings> | undefined): boolean {
    return proto3.util.equals(TLUpdateNotifySettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateServiceNotification
 */
export class TLUpdateServiceNotification extends Message$1<TLUpdateServiceNotification> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateServiceNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateServiceNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateServiceNotification {
    return new TLUpdateServiceNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateServiceNotification {
    return new TLUpdateServiceNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateServiceNotification {
    return new TLUpdateServiceNotification().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateServiceNotification | PlainMessage<TLUpdateServiceNotification> | undefined, b: TLUpdateServiceNotification | PlainMessage<TLUpdateServiceNotification> | undefined): boolean {
    return proto3.util.equals(TLUpdateServiceNotification, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePrivacy
 */
export class TLUpdatePrivacy extends Message$1<TLUpdatePrivacy> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePrivacy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePrivacy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePrivacy {
    return new TLUpdatePrivacy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePrivacy {
    return new TLUpdatePrivacy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePrivacy {
    return new TLUpdatePrivacy().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePrivacy | PlainMessage<TLUpdatePrivacy> | undefined, b: TLUpdatePrivacy | PlainMessage<TLUpdatePrivacy> | undefined): boolean {
    return proto3.util.equals(TLUpdatePrivacy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserPhone
 */
export class TLUpdateUserPhone extends Message$1<TLUpdateUserPhone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserPhone {
    return new TLUpdateUserPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserPhone {
    return new TLUpdateUserPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserPhone {
    return new TLUpdateUserPhone().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserPhone | PlainMessage<TLUpdateUserPhone> | undefined, b: TLUpdateUserPhone | PlainMessage<TLUpdateUserPhone> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserPhone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadHistoryInbox
 */
export class TLUpdateReadHistoryInbox extends Message$1<TLUpdateReadHistoryInbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadHistoryInbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadHistoryInbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadHistoryInbox {
    return new TLUpdateReadHistoryInbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadHistoryInbox {
    return new TLUpdateReadHistoryInbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadHistoryInbox {
    return new TLUpdateReadHistoryInbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadHistoryInbox | PlainMessage<TLUpdateReadHistoryInbox> | undefined, b: TLUpdateReadHistoryInbox | PlainMessage<TLUpdateReadHistoryInbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadHistoryInbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadHistoryOutbox
 */
export class TLUpdateReadHistoryOutbox extends Message$1<TLUpdateReadHistoryOutbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadHistoryOutbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadHistoryOutbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadHistoryOutbox {
    return new TLUpdateReadHistoryOutbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadHistoryOutbox {
    return new TLUpdateReadHistoryOutbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadHistoryOutbox {
    return new TLUpdateReadHistoryOutbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadHistoryOutbox | PlainMessage<TLUpdateReadHistoryOutbox> | undefined, b: TLUpdateReadHistoryOutbox | PlainMessage<TLUpdateReadHistoryOutbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadHistoryOutbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateWebPage
 */
export class TLUpdateWebPage extends Message$1<TLUpdateWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateWebPage {
    return new TLUpdateWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateWebPage {
    return new TLUpdateWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateWebPage {
    return new TLUpdateWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateWebPage | PlainMessage<TLUpdateWebPage> | undefined, b: TLUpdateWebPage | PlainMessage<TLUpdateWebPage> | undefined): boolean {
    return proto3.util.equals(TLUpdateWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadMessagesContents
 */
export class TLUpdateReadMessagesContents extends Message$1<TLUpdateReadMessagesContents> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadMessagesContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadMessagesContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadMessagesContents {
    return new TLUpdateReadMessagesContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadMessagesContents {
    return new TLUpdateReadMessagesContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadMessagesContents {
    return new TLUpdateReadMessagesContents().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadMessagesContents | PlainMessage<TLUpdateReadMessagesContents> | undefined, b: TLUpdateReadMessagesContents | PlainMessage<TLUpdateReadMessagesContents> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadMessagesContents, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelTooLong
 */
export class TLUpdateChannelTooLong extends Message$1<TLUpdateChannelTooLong> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelTooLong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelTooLong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelTooLong {
    return new TLUpdateChannelTooLong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelTooLong {
    return new TLUpdateChannelTooLong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelTooLong {
    return new TLUpdateChannelTooLong().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelTooLong | PlainMessage<TLUpdateChannelTooLong> | undefined, b: TLUpdateChannelTooLong | PlainMessage<TLUpdateChannelTooLong> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelTooLong, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannel
 */
export class TLUpdateChannel extends Message$1<TLUpdateChannel> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannel {
    return new TLUpdateChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannel {
    return new TLUpdateChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannel {
    return new TLUpdateChannel().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannel | PlainMessage<TLUpdateChannel> | undefined, b: TLUpdateChannel | PlainMessage<TLUpdateChannel> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannel, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewChannelMessage
 */
export class TLUpdateNewChannelMessage extends Message$1<TLUpdateNewChannelMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewChannelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewChannelMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewChannelMessage {
    return new TLUpdateNewChannelMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewChannelMessage {
    return new TLUpdateNewChannelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewChannelMessage {
    return new TLUpdateNewChannelMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewChannelMessage | PlainMessage<TLUpdateNewChannelMessage> | undefined, b: TLUpdateNewChannelMessage | PlainMessage<TLUpdateNewChannelMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewChannelMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelInbox
 */
export class TLUpdateReadChannelInbox extends Message$1<TLUpdateReadChannelInbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadChannelInbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelInbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadChannelInbox {
    return new TLUpdateReadChannelInbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadChannelInbox {
    return new TLUpdateReadChannelInbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadChannelInbox {
    return new TLUpdateReadChannelInbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadChannelInbox | PlainMessage<TLUpdateReadChannelInbox> | undefined, b: TLUpdateReadChannelInbox | PlainMessage<TLUpdateReadChannelInbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadChannelInbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteChannelMessages
 */
export class TLUpdateDeleteChannelMessages extends Message$1<TLUpdateDeleteChannelMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDeleteChannelMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteChannelMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDeleteChannelMessages {
    return new TLUpdateDeleteChannelMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDeleteChannelMessages {
    return new TLUpdateDeleteChannelMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDeleteChannelMessages {
    return new TLUpdateDeleteChannelMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDeleteChannelMessages | PlainMessage<TLUpdateDeleteChannelMessages> | undefined, b: TLUpdateDeleteChannelMessages | PlainMessage<TLUpdateDeleteChannelMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdateDeleteChannelMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelMessageViews
 */
export class TLUpdateChannelMessageViews extends Message$1<TLUpdateChannelMessageViews> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelMessageViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelMessageViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelMessageViews {
    return new TLUpdateChannelMessageViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelMessageViews {
    return new TLUpdateChannelMessageViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelMessageViews {
    return new TLUpdateChannelMessageViews().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelMessageViews | PlainMessage<TLUpdateChannelMessageViews> | undefined, b: TLUpdateChannelMessageViews | PlainMessage<TLUpdateChannelMessageViews> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelMessageViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantAdmin
 */
export class TLUpdateChatParticipantAdmin extends Message$1<TLUpdateChatParticipantAdmin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatParticipantAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipantAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatParticipantAdmin {
    return new TLUpdateChatParticipantAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantAdmin {
    return new TLUpdateChatParticipantAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatParticipantAdmin {
    return new TLUpdateChatParticipantAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatParticipantAdmin | PlainMessage<TLUpdateChatParticipantAdmin> | undefined, b: TLUpdateChatParticipantAdmin | PlainMessage<TLUpdateChatParticipantAdmin> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatParticipantAdmin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewStickerSet
 */
export class TLUpdateNewStickerSet extends Message$1<TLUpdateNewStickerSet> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewStickerSet {
    return new TLUpdateNewStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewStickerSet {
    return new TLUpdateNewStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewStickerSet {
    return new TLUpdateNewStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewStickerSet | PlainMessage<TLUpdateNewStickerSet> | undefined, b: TLUpdateNewStickerSet | PlainMessage<TLUpdateNewStickerSet> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateStickerSetsOrder
 */
export class TLUpdateStickerSetsOrder extends Message$1<TLUpdateStickerSetsOrder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateStickerSetsOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateStickerSetsOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateStickerSetsOrder {
    return new TLUpdateStickerSetsOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateStickerSetsOrder {
    return new TLUpdateStickerSetsOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateStickerSetsOrder {
    return new TLUpdateStickerSetsOrder().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateStickerSetsOrder | PlainMessage<TLUpdateStickerSetsOrder> | undefined, b: TLUpdateStickerSetsOrder | PlainMessage<TLUpdateStickerSetsOrder> | undefined): boolean {
    return proto3.util.equals(TLUpdateStickerSetsOrder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateStickerSets
 */
export class TLUpdateStickerSets extends Message$1<TLUpdateStickerSets> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateStickerSets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateStickerSets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateStickerSets {
    return new TLUpdateStickerSets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateStickerSets {
    return new TLUpdateStickerSets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateStickerSets {
    return new TLUpdateStickerSets().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateStickerSets | PlainMessage<TLUpdateStickerSets> | undefined, b: TLUpdateStickerSets | PlainMessage<TLUpdateStickerSets> | undefined): boolean {
    return proto3.util.equals(TLUpdateStickerSets, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateSavedGifs
 */
export class TLUpdateSavedGifs extends Message$1<TLUpdateSavedGifs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateSavedGifs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateSavedGifs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateSavedGifs {
    return new TLUpdateSavedGifs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateSavedGifs {
    return new TLUpdateSavedGifs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateSavedGifs {
    return new TLUpdateSavedGifs().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateSavedGifs | PlainMessage<TLUpdateSavedGifs> | undefined, b: TLUpdateSavedGifs | PlainMessage<TLUpdateSavedGifs> | undefined): boolean {
    return proto3.util.equals(TLUpdateSavedGifs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotInlineQuery
 */
export class TLUpdateBotInlineQuery extends Message$1<TLUpdateBotInlineQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotInlineQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotInlineQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotInlineQuery {
    return new TLUpdateBotInlineQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotInlineQuery {
    return new TLUpdateBotInlineQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotInlineQuery {
    return new TLUpdateBotInlineQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotInlineQuery | PlainMessage<TLUpdateBotInlineQuery> | undefined, b: TLUpdateBotInlineQuery | PlainMessage<TLUpdateBotInlineQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotInlineQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotInlineSend
 */
export class TLUpdateBotInlineSend extends Message$1<TLUpdateBotInlineSend> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotInlineSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotInlineSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotInlineSend {
    return new TLUpdateBotInlineSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotInlineSend {
    return new TLUpdateBotInlineSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotInlineSend {
    return new TLUpdateBotInlineSend().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotInlineSend | PlainMessage<TLUpdateBotInlineSend> | undefined, b: TLUpdateBotInlineSend | PlainMessage<TLUpdateBotInlineSend> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotInlineSend, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateEditChannelMessage
 */
export class TLUpdateEditChannelMessage extends Message$1<TLUpdateEditChannelMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateEditChannelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateEditChannelMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateEditChannelMessage {
    return new TLUpdateEditChannelMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateEditChannelMessage {
    return new TLUpdateEditChannelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateEditChannelMessage {
    return new TLUpdateEditChannelMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateEditChannelMessage | PlainMessage<TLUpdateEditChannelMessage> | undefined, b: TLUpdateEditChannelMessage | PlainMessage<TLUpdateEditChannelMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateEditChannelMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotCallbackQuery
 */
export class TLUpdateBotCallbackQuery extends Message$1<TLUpdateBotCallbackQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotCallbackQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotCallbackQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotCallbackQuery {
    return new TLUpdateBotCallbackQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotCallbackQuery {
    return new TLUpdateBotCallbackQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotCallbackQuery {
    return new TLUpdateBotCallbackQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotCallbackQuery | PlainMessage<TLUpdateBotCallbackQuery> | undefined, b: TLUpdateBotCallbackQuery | PlainMessage<TLUpdateBotCallbackQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotCallbackQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateEditMessage
 */
export class TLUpdateEditMessage extends Message$1<TLUpdateEditMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateEditMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateEditMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateEditMessage {
    return new TLUpdateEditMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateEditMessage {
    return new TLUpdateEditMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateEditMessage {
    return new TLUpdateEditMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateEditMessage | PlainMessage<TLUpdateEditMessage> | undefined, b: TLUpdateEditMessage | PlainMessage<TLUpdateEditMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateEditMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateInlineBotCallbackQuery
 */
export class TLUpdateInlineBotCallbackQuery extends Message$1<TLUpdateInlineBotCallbackQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateInlineBotCallbackQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateInlineBotCallbackQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateInlineBotCallbackQuery {
    return new TLUpdateInlineBotCallbackQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateInlineBotCallbackQuery {
    return new TLUpdateInlineBotCallbackQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateInlineBotCallbackQuery {
    return new TLUpdateInlineBotCallbackQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateInlineBotCallbackQuery | PlainMessage<TLUpdateInlineBotCallbackQuery> | undefined, b: TLUpdateInlineBotCallbackQuery | PlainMessage<TLUpdateInlineBotCallbackQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateInlineBotCallbackQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelOutbox
 */
export class TLUpdateReadChannelOutbox extends Message$1<TLUpdateReadChannelOutbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadChannelOutbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelOutbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadChannelOutbox {
    return new TLUpdateReadChannelOutbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadChannelOutbox {
    return new TLUpdateReadChannelOutbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadChannelOutbox {
    return new TLUpdateReadChannelOutbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadChannelOutbox | PlainMessage<TLUpdateReadChannelOutbox> | undefined, b: TLUpdateReadChannelOutbox | PlainMessage<TLUpdateReadChannelOutbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadChannelOutbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDraftMessage
 */
export class TLUpdateDraftMessage extends Message$1<TLUpdateDraftMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDraftMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDraftMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDraftMessage {
    return new TLUpdateDraftMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDraftMessage {
    return new TLUpdateDraftMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDraftMessage {
    return new TLUpdateDraftMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDraftMessage | PlainMessage<TLUpdateDraftMessage> | undefined, b: TLUpdateDraftMessage | PlainMessage<TLUpdateDraftMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateDraftMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadFeaturedStickers
 */
export class TLUpdateReadFeaturedStickers extends Message$1<TLUpdateReadFeaturedStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadFeaturedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadFeaturedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadFeaturedStickers {
    return new TLUpdateReadFeaturedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadFeaturedStickers {
    return new TLUpdateReadFeaturedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadFeaturedStickers {
    return new TLUpdateReadFeaturedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadFeaturedStickers | PlainMessage<TLUpdateReadFeaturedStickers> | undefined, b: TLUpdateReadFeaturedStickers | PlainMessage<TLUpdateReadFeaturedStickers> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadFeaturedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentStickers
 */
export class TLUpdateRecentStickers extends Message$1<TLUpdateRecentStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateRecentStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateRecentStickers {
    return new TLUpdateRecentStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateRecentStickers {
    return new TLUpdateRecentStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateRecentStickers {
    return new TLUpdateRecentStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateRecentStickers | PlainMessage<TLUpdateRecentStickers> | undefined, b: TLUpdateRecentStickers | PlainMessage<TLUpdateRecentStickers> | undefined): boolean {
    return proto3.util.equals(TLUpdateRecentStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateConfig
 */
export class TLUpdateConfig extends Message$1<TLUpdateConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateConfig {
    return new TLUpdateConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateConfig {
    return new TLUpdateConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateConfig {
    return new TLUpdateConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateConfig | PlainMessage<TLUpdateConfig> | undefined, b: TLUpdateConfig | PlainMessage<TLUpdateConfig> | undefined): boolean {
    return proto3.util.equals(TLUpdateConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePtsChanged
 */
export class TLUpdatePtsChanged extends Message$1<TLUpdatePtsChanged> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePtsChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePtsChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePtsChanged {
    return new TLUpdatePtsChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePtsChanged {
    return new TLUpdatePtsChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePtsChanged {
    return new TLUpdatePtsChanged().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePtsChanged | PlainMessage<TLUpdatePtsChanged> | undefined, b: TLUpdatePtsChanged | PlainMessage<TLUpdatePtsChanged> | undefined): boolean {
    return proto3.util.equals(TLUpdatePtsChanged, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelWebPage
 */
export class TLUpdateChannelWebPage extends Message$1<TLUpdateChannelWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelWebPage {
    return new TLUpdateChannelWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelWebPage {
    return new TLUpdateChannelWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelWebPage {
    return new TLUpdateChannelWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelWebPage | PlainMessage<TLUpdateChannelWebPage> | undefined, b: TLUpdateChannelWebPage | PlainMessage<TLUpdateChannelWebPage> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogPinned
 */
export class TLUpdateDialogPinned extends Message$1<TLUpdateDialogPinned> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDialogPinned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogPinned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDialogPinned {
    return new TLUpdateDialogPinned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDialogPinned {
    return new TLUpdateDialogPinned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDialogPinned {
    return new TLUpdateDialogPinned().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDialogPinned | PlainMessage<TLUpdateDialogPinned> | undefined, b: TLUpdateDialogPinned | PlainMessage<TLUpdateDialogPinned> | undefined): boolean {
    return proto3.util.equals(TLUpdateDialogPinned, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedDialogs
 */
export class TLUpdatePinnedDialogs extends Message$1<TLUpdatePinnedDialogs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePinnedDialogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedDialogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePinnedDialogs {
    return new TLUpdatePinnedDialogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePinnedDialogs {
    return new TLUpdatePinnedDialogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePinnedDialogs {
    return new TLUpdatePinnedDialogs().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePinnedDialogs | PlainMessage<TLUpdatePinnedDialogs> | undefined, b: TLUpdatePinnedDialogs | PlainMessage<TLUpdatePinnedDialogs> | undefined): boolean {
    return proto3.util.equals(TLUpdatePinnedDialogs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotWebhookJSON
 */
export class TLUpdateBotWebhookJSON extends Message$1<TLUpdateBotWebhookJSON> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotWebhookJSON>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotWebhookJSON";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotWebhookJSON {
    return new TLUpdateBotWebhookJSON().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotWebhookJSON {
    return new TLUpdateBotWebhookJSON().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotWebhookJSON {
    return new TLUpdateBotWebhookJSON().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotWebhookJSON | PlainMessage<TLUpdateBotWebhookJSON> | undefined, b: TLUpdateBotWebhookJSON | PlainMessage<TLUpdateBotWebhookJSON> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotWebhookJSON, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotWebhookJSONQuery
 */
export class TLUpdateBotWebhookJSONQuery extends Message$1<TLUpdateBotWebhookJSONQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotWebhookJSONQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotWebhookJSONQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotWebhookJSONQuery {
    return new TLUpdateBotWebhookJSONQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotWebhookJSONQuery {
    return new TLUpdateBotWebhookJSONQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotWebhookJSONQuery {
    return new TLUpdateBotWebhookJSONQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotWebhookJSONQuery | PlainMessage<TLUpdateBotWebhookJSONQuery> | undefined, b: TLUpdateBotWebhookJSONQuery | PlainMessage<TLUpdateBotWebhookJSONQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotWebhookJSONQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotShippingQuery
 */
export class TLUpdateBotShippingQuery extends Message$1<TLUpdateBotShippingQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotShippingQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotShippingQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotShippingQuery {
    return new TLUpdateBotShippingQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotShippingQuery {
    return new TLUpdateBotShippingQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotShippingQuery {
    return new TLUpdateBotShippingQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotShippingQuery | PlainMessage<TLUpdateBotShippingQuery> | undefined, b: TLUpdateBotShippingQuery | PlainMessage<TLUpdateBotShippingQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotShippingQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotPrecheckoutQuery
 */
export class TLUpdateBotPrecheckoutQuery extends Message$1<TLUpdateBotPrecheckoutQuery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotPrecheckoutQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotPrecheckoutQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotPrecheckoutQuery {
    return new TLUpdateBotPrecheckoutQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotPrecheckoutQuery {
    return new TLUpdateBotPrecheckoutQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotPrecheckoutQuery {
    return new TLUpdateBotPrecheckoutQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotPrecheckoutQuery | PlainMessage<TLUpdateBotPrecheckoutQuery> | undefined, b: TLUpdateBotPrecheckoutQuery | PlainMessage<TLUpdateBotPrecheckoutQuery> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotPrecheckoutQuery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePhoneCall
 */
export class TLUpdatePhoneCall extends Message$1<TLUpdatePhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePhoneCall {
    return new TLUpdatePhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePhoneCall {
    return new TLUpdatePhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePhoneCall {
    return new TLUpdatePhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePhoneCall | PlainMessage<TLUpdatePhoneCall> | undefined, b: TLUpdatePhoneCall | PlainMessage<TLUpdatePhoneCall> | undefined): boolean {
    return proto3.util.equals(TLUpdatePhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateLangPackTooLong
 */
export class TLUpdateLangPackTooLong extends Message$1<TLUpdateLangPackTooLong> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateLangPackTooLong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateLangPackTooLong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateLangPackTooLong {
    return new TLUpdateLangPackTooLong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateLangPackTooLong {
    return new TLUpdateLangPackTooLong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateLangPackTooLong {
    return new TLUpdateLangPackTooLong().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateLangPackTooLong | PlainMessage<TLUpdateLangPackTooLong> | undefined, b: TLUpdateLangPackTooLong | PlainMessage<TLUpdateLangPackTooLong> | undefined): boolean {
    return proto3.util.equals(TLUpdateLangPackTooLong, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateLangPack
 */
export class TLUpdateLangPack extends Message$1<TLUpdateLangPack> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateLangPack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateLangPack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateLangPack {
    return new TLUpdateLangPack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateLangPack {
    return new TLUpdateLangPack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateLangPack {
    return new TLUpdateLangPack().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateLangPack | PlainMessage<TLUpdateLangPack> | undefined, b: TLUpdateLangPack | PlainMessage<TLUpdateLangPack> | undefined): boolean {
    return proto3.util.equals(TLUpdateLangPack, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateFavedStickers
 */
export class TLUpdateFavedStickers extends Message$1<TLUpdateFavedStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateFavedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateFavedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateFavedStickers {
    return new TLUpdateFavedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateFavedStickers {
    return new TLUpdateFavedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateFavedStickers {
    return new TLUpdateFavedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateFavedStickers | PlainMessage<TLUpdateFavedStickers> | undefined, b: TLUpdateFavedStickers | PlainMessage<TLUpdateFavedStickers> | undefined): boolean {
    return proto3.util.equals(TLUpdateFavedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelReadMessagesContents
 */
export class TLUpdateChannelReadMessagesContents extends Message$1<TLUpdateChannelReadMessagesContents> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelReadMessagesContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelReadMessagesContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelReadMessagesContents {
    return new TLUpdateChannelReadMessagesContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelReadMessagesContents {
    return new TLUpdateChannelReadMessagesContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelReadMessagesContents {
    return new TLUpdateChannelReadMessagesContents().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelReadMessagesContents | PlainMessage<TLUpdateChannelReadMessagesContents> | undefined, b: TLUpdateChannelReadMessagesContents | PlainMessage<TLUpdateChannelReadMessagesContents> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelReadMessagesContents, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateContactsReset
 */
export class TLUpdateContactsReset extends Message$1<TLUpdateContactsReset> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateContactsReset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateContactsReset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateContactsReset {
    return new TLUpdateContactsReset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateContactsReset {
    return new TLUpdateContactsReset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateContactsReset {
    return new TLUpdateContactsReset().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateContactsReset | PlainMessage<TLUpdateContactsReset> | undefined, b: TLUpdateContactsReset | PlainMessage<TLUpdateContactsReset> | undefined): boolean {
    return proto3.util.equals(TLUpdateContactsReset, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelAvailableMessages
 */
export class TLUpdateChannelAvailableMessages extends Message$1<TLUpdateChannelAvailableMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelAvailableMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelAvailableMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelAvailableMessages {
    return new TLUpdateChannelAvailableMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelAvailableMessages {
    return new TLUpdateChannelAvailableMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelAvailableMessages {
    return new TLUpdateChannelAvailableMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelAvailableMessages | PlainMessage<TLUpdateChannelAvailableMessages> | undefined, b: TLUpdateChannelAvailableMessages | PlainMessage<TLUpdateChannelAvailableMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelAvailableMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogUnreadMark
 */
export class TLUpdateDialogUnreadMark extends Message$1<TLUpdateDialogUnreadMark> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDialogUnreadMark>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogUnreadMark";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDialogUnreadMark {
    return new TLUpdateDialogUnreadMark().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDialogUnreadMark {
    return new TLUpdateDialogUnreadMark().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDialogUnreadMark {
    return new TLUpdateDialogUnreadMark().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDialogUnreadMark | PlainMessage<TLUpdateDialogUnreadMark> | undefined, b: TLUpdateDialogUnreadMark | PlainMessage<TLUpdateDialogUnreadMark> | undefined): boolean {
    return proto3.util.equals(TLUpdateDialogUnreadMark, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessagePoll
 */
export class TLUpdateMessagePoll extends Message$1<TLUpdateMessagePoll> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMessagePoll>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessagePoll";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMessagePoll {
    return new TLUpdateMessagePoll().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMessagePoll {
    return new TLUpdateMessagePoll().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMessagePoll {
    return new TLUpdateMessagePoll().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMessagePoll | PlainMessage<TLUpdateMessagePoll> | undefined, b: TLUpdateMessagePoll | PlainMessage<TLUpdateMessagePoll> | undefined): boolean {
    return proto3.util.equals(TLUpdateMessagePoll, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatDefaultBannedRights
 */
export class TLUpdateChatDefaultBannedRights extends Message$1<TLUpdateChatDefaultBannedRights> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatDefaultBannedRights>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatDefaultBannedRights";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatDefaultBannedRights {
    return new TLUpdateChatDefaultBannedRights().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatDefaultBannedRights {
    return new TLUpdateChatDefaultBannedRights().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatDefaultBannedRights {
    return new TLUpdateChatDefaultBannedRights().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatDefaultBannedRights | PlainMessage<TLUpdateChatDefaultBannedRights> | undefined, b: TLUpdateChatDefaultBannedRights | PlainMessage<TLUpdateChatDefaultBannedRights> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatDefaultBannedRights, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateFolderPeers
 */
export class TLUpdateFolderPeers extends Message$1<TLUpdateFolderPeers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateFolderPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateFolderPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateFolderPeers {
    return new TLUpdateFolderPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateFolderPeers {
    return new TLUpdateFolderPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateFolderPeers {
    return new TLUpdateFolderPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateFolderPeers | PlainMessage<TLUpdateFolderPeers> | undefined, b: TLUpdateFolderPeers | PlainMessage<TLUpdateFolderPeers> | undefined): boolean {
    return proto3.util.equals(TLUpdateFolderPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerSettings
 */
export class TLUpdatePeerSettings extends Message$1<TLUpdatePeerSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePeerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePeerSettings {
    return new TLUpdatePeerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePeerSettings {
    return new TLUpdatePeerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePeerSettings {
    return new TLUpdatePeerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePeerSettings | PlainMessage<TLUpdatePeerSettings> | undefined, b: TLUpdatePeerSettings | PlainMessage<TLUpdatePeerSettings> | undefined): boolean {
    return proto3.util.equals(TLUpdatePeerSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerLocated
 */
export class TLUpdatePeerLocated extends Message$1<TLUpdatePeerLocated> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePeerLocated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerLocated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePeerLocated {
    return new TLUpdatePeerLocated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePeerLocated {
    return new TLUpdatePeerLocated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePeerLocated {
    return new TLUpdatePeerLocated().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePeerLocated | PlainMessage<TLUpdatePeerLocated> | undefined, b: TLUpdatePeerLocated | PlainMessage<TLUpdatePeerLocated> | undefined): boolean {
    return proto3.util.equals(TLUpdatePeerLocated, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewScheduledMessage
 */
export class TLUpdateNewScheduledMessage extends Message$1<TLUpdateNewScheduledMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateNewScheduledMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateNewScheduledMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateNewScheduledMessage {
    return new TLUpdateNewScheduledMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateNewScheduledMessage {
    return new TLUpdateNewScheduledMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateNewScheduledMessage {
    return new TLUpdateNewScheduledMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateNewScheduledMessage | PlainMessage<TLUpdateNewScheduledMessage> | undefined, b: TLUpdateNewScheduledMessage | PlainMessage<TLUpdateNewScheduledMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateNewScheduledMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteScheduledMessages
 */
export class TLUpdateDeleteScheduledMessages extends Message$1<TLUpdateDeleteScheduledMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDeleteScheduledMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDeleteScheduledMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDeleteScheduledMessages {
    return new TLUpdateDeleteScheduledMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDeleteScheduledMessages {
    return new TLUpdateDeleteScheduledMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDeleteScheduledMessages {
    return new TLUpdateDeleteScheduledMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDeleteScheduledMessages | PlainMessage<TLUpdateDeleteScheduledMessages> | undefined, b: TLUpdateDeleteScheduledMessages | PlainMessage<TLUpdateDeleteScheduledMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdateDeleteScheduledMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateTheme
 */
export class TLUpdateTheme extends Message$1<TLUpdateTheme> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateTheme {
    return new TLUpdateTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateTheme {
    return new TLUpdateTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateTheme {
    return new TLUpdateTheme().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateTheme | PlainMessage<TLUpdateTheme> | undefined, b: TLUpdateTheme | PlainMessage<TLUpdateTheme> | undefined): boolean {
    return proto3.util.equals(TLUpdateTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateGeoLiveViewed
 */
export class TLUpdateGeoLiveViewed extends Message$1<TLUpdateGeoLiveViewed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateGeoLiveViewed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateGeoLiveViewed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateGeoLiveViewed {
    return new TLUpdateGeoLiveViewed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateGeoLiveViewed {
    return new TLUpdateGeoLiveViewed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateGeoLiveViewed {
    return new TLUpdateGeoLiveViewed().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateGeoLiveViewed | PlainMessage<TLUpdateGeoLiveViewed> | undefined, b: TLUpdateGeoLiveViewed | PlainMessage<TLUpdateGeoLiveViewed> | undefined): boolean {
    return proto3.util.equals(TLUpdateGeoLiveViewed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateLoginToken
 */
export class TLUpdateLoginToken extends Message$1<TLUpdateLoginToken> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateLoginToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateLoginToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateLoginToken {
    return new TLUpdateLoginToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateLoginToken {
    return new TLUpdateLoginToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateLoginToken {
    return new TLUpdateLoginToken().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateLoginToken | PlainMessage<TLUpdateLoginToken> | undefined, b: TLUpdateLoginToken | PlainMessage<TLUpdateLoginToken> | undefined): boolean {
    return proto3.util.equals(TLUpdateLoginToken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessagePollVote
 */
export class TLUpdateMessagePollVote extends Message$1<TLUpdateMessagePollVote> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMessagePollVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessagePollVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMessagePollVote {
    return new TLUpdateMessagePollVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMessagePollVote {
    return new TLUpdateMessagePollVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMessagePollVote {
    return new TLUpdateMessagePollVote().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMessagePollVote | PlainMessage<TLUpdateMessagePollVote> | undefined, b: TLUpdateMessagePollVote | PlainMessage<TLUpdateMessagePollVote> | undefined): boolean {
    return proto3.util.equals(TLUpdateMessagePollVote, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilter
 */
export class TLUpdateDialogFilter extends Message$1<TLUpdateDialogFilter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDialogFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDialogFilter {
    return new TLUpdateDialogFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDialogFilter {
    return new TLUpdateDialogFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDialogFilter {
    return new TLUpdateDialogFilter().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDialogFilter | PlainMessage<TLUpdateDialogFilter> | undefined, b: TLUpdateDialogFilter | PlainMessage<TLUpdateDialogFilter> | undefined): boolean {
    return proto3.util.equals(TLUpdateDialogFilter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilterOrder
 */
export class TLUpdateDialogFilterOrder extends Message$1<TLUpdateDialogFilterOrder> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDialogFilterOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilterOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDialogFilterOrder {
    return new TLUpdateDialogFilterOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDialogFilterOrder {
    return new TLUpdateDialogFilterOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDialogFilterOrder {
    return new TLUpdateDialogFilterOrder().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDialogFilterOrder | PlainMessage<TLUpdateDialogFilterOrder> | undefined, b: TLUpdateDialogFilterOrder | PlainMessage<TLUpdateDialogFilterOrder> | undefined): boolean {
    return proto3.util.equals(TLUpdateDialogFilterOrder, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilters
 */
export class TLUpdateDialogFilters extends Message$1<TLUpdateDialogFilters> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateDialogFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateDialogFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateDialogFilters {
    return new TLUpdateDialogFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateDialogFilters {
    return new TLUpdateDialogFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateDialogFilters {
    return new TLUpdateDialogFilters().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateDialogFilters | PlainMessage<TLUpdateDialogFilters> | undefined, b: TLUpdateDialogFilters | PlainMessage<TLUpdateDialogFilters> | undefined): boolean {
    return proto3.util.equals(TLUpdateDialogFilters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePhoneCallSignalingData
 */
export class TLUpdatePhoneCallSignalingData extends Message$1<TLUpdatePhoneCallSignalingData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePhoneCallSignalingData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePhoneCallSignalingData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePhoneCallSignalingData {
    return new TLUpdatePhoneCallSignalingData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePhoneCallSignalingData {
    return new TLUpdatePhoneCallSignalingData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePhoneCallSignalingData {
    return new TLUpdatePhoneCallSignalingData().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePhoneCallSignalingData | PlainMessage<TLUpdatePhoneCallSignalingData> | undefined, b: TLUpdatePhoneCallSignalingData | PlainMessage<TLUpdatePhoneCallSignalingData> | undefined): boolean {
    return proto3.util.equals(TLUpdatePhoneCallSignalingData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelMessageForwards
 */
export class TLUpdateChannelMessageForwards extends Message$1<TLUpdateChannelMessageForwards> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelMessageForwards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelMessageForwards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelMessageForwards {
    return new TLUpdateChannelMessageForwards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelMessageForwards {
    return new TLUpdateChannelMessageForwards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelMessageForwards {
    return new TLUpdateChannelMessageForwards().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelMessageForwards | PlainMessage<TLUpdateChannelMessageForwards> | undefined, b: TLUpdateChannelMessageForwards | PlainMessage<TLUpdateChannelMessageForwards> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelMessageForwards, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelDiscussionInbox
 */
export class TLUpdateReadChannelDiscussionInbox extends Message$1<TLUpdateReadChannelDiscussionInbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadChannelDiscussionInbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelDiscussionInbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadChannelDiscussionInbox {
    return new TLUpdateReadChannelDiscussionInbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadChannelDiscussionInbox {
    return new TLUpdateReadChannelDiscussionInbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadChannelDiscussionInbox {
    return new TLUpdateReadChannelDiscussionInbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadChannelDiscussionInbox | PlainMessage<TLUpdateReadChannelDiscussionInbox> | undefined, b: TLUpdateReadChannelDiscussionInbox | PlainMessage<TLUpdateReadChannelDiscussionInbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadChannelDiscussionInbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelDiscussionOutbox
 */
export class TLUpdateReadChannelDiscussionOutbox extends Message$1<TLUpdateReadChannelDiscussionOutbox> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadChannelDiscussionOutbox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadChannelDiscussionOutbox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadChannelDiscussionOutbox {
    return new TLUpdateReadChannelDiscussionOutbox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadChannelDiscussionOutbox {
    return new TLUpdateReadChannelDiscussionOutbox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadChannelDiscussionOutbox {
    return new TLUpdateReadChannelDiscussionOutbox().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadChannelDiscussionOutbox | PlainMessage<TLUpdateReadChannelDiscussionOutbox> | undefined, b: TLUpdateReadChannelDiscussionOutbox | PlainMessage<TLUpdateReadChannelDiscussionOutbox> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadChannelDiscussionOutbox, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerBlocked
 */
export class TLUpdatePeerBlocked extends Message$1<TLUpdatePeerBlocked> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePeerBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePeerBlocked {
    return new TLUpdatePeerBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePeerBlocked {
    return new TLUpdatePeerBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePeerBlocked {
    return new TLUpdatePeerBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePeerBlocked | PlainMessage<TLUpdatePeerBlocked> | undefined, b: TLUpdatePeerBlocked | PlainMessage<TLUpdatePeerBlocked> | undefined): boolean {
    return proto3.util.equals(TLUpdatePeerBlocked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelUserTyping
 */
export class TLUpdateChannelUserTyping extends Message$1<TLUpdateChannelUserTyping> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelUserTyping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelUserTyping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelUserTyping {
    return new TLUpdateChannelUserTyping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelUserTyping {
    return new TLUpdateChannelUserTyping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelUserTyping {
    return new TLUpdateChannelUserTyping().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelUserTyping | PlainMessage<TLUpdateChannelUserTyping> | undefined, b: TLUpdateChannelUserTyping | PlainMessage<TLUpdateChannelUserTyping> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelUserTyping, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedMessages
 */
export class TLUpdatePinnedMessages extends Message$1<TLUpdatePinnedMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePinnedMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePinnedMessages {
    return new TLUpdatePinnedMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePinnedMessages {
    return new TLUpdatePinnedMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePinnedMessages {
    return new TLUpdatePinnedMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePinnedMessages | PlainMessage<TLUpdatePinnedMessages> | undefined, b: TLUpdatePinnedMessages | PlainMessage<TLUpdatePinnedMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdatePinnedMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedChannelMessages
 */
export class TLUpdatePinnedChannelMessages extends Message$1<TLUpdatePinnedChannelMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePinnedChannelMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePinnedChannelMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePinnedChannelMessages {
    return new TLUpdatePinnedChannelMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePinnedChannelMessages {
    return new TLUpdatePinnedChannelMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePinnedChannelMessages {
    return new TLUpdatePinnedChannelMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePinnedChannelMessages | PlainMessage<TLUpdatePinnedChannelMessages> | undefined, b: TLUpdatePinnedChannelMessages | PlainMessage<TLUpdatePinnedChannelMessages> | undefined): boolean {
    return proto3.util.equals(TLUpdatePinnedChannelMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChat
 */
export class TLUpdateChat extends Message$1<TLUpdateChat> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChat {
    return new TLUpdateChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChat {
    return new TLUpdateChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChat {
    return new TLUpdateChat().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChat | PlainMessage<TLUpdateChat> | undefined, b: TLUpdateChat | PlainMessage<TLUpdateChat> | undefined): boolean {
    return proto3.util.equals(TLUpdateChat, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCallParticipants
 */
export class TLUpdateGroupCallParticipants extends Message$1<TLUpdateGroupCallParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateGroupCallParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCallParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateGroupCallParticipants {
    return new TLUpdateGroupCallParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateGroupCallParticipants {
    return new TLUpdateGroupCallParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateGroupCallParticipants {
    return new TLUpdateGroupCallParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateGroupCallParticipants | PlainMessage<TLUpdateGroupCallParticipants> | undefined, b: TLUpdateGroupCallParticipants | PlainMessage<TLUpdateGroupCallParticipants> | undefined): boolean {
    return proto3.util.equals(TLUpdateGroupCallParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCall
 */
export class TLUpdateGroupCall extends Message$1<TLUpdateGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateGroupCall {
    return new TLUpdateGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateGroupCall {
    return new TLUpdateGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateGroupCall {
    return new TLUpdateGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateGroupCall | PlainMessage<TLUpdateGroupCall> | undefined, b: TLUpdateGroupCall | PlainMessage<TLUpdateGroupCall> | undefined): boolean {
    return proto3.util.equals(TLUpdateGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerHistoryTTL
 */
export class TLUpdatePeerHistoryTTL extends Message$1<TLUpdatePeerHistoryTTL> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePeerHistoryTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePeerHistoryTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePeerHistoryTTL {
    return new TLUpdatePeerHistoryTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePeerHistoryTTL {
    return new TLUpdatePeerHistoryTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePeerHistoryTTL {
    return new TLUpdatePeerHistoryTTL().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePeerHistoryTTL | PlainMessage<TLUpdatePeerHistoryTTL> | undefined, b: TLUpdatePeerHistoryTTL | PlainMessage<TLUpdatePeerHistoryTTL> | undefined): boolean {
    return proto3.util.equals(TLUpdatePeerHistoryTTL, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipant
 */
export class TLUpdateChatParticipant extends Message$1<TLUpdateChatParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChatParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChatParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChatParticipant {
    return new TLUpdateChatParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChatParticipant {
    return new TLUpdateChatParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChatParticipant {
    return new TLUpdateChatParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChatParticipant | PlainMessage<TLUpdateChatParticipant> | undefined, b: TLUpdateChatParticipant | PlainMessage<TLUpdateChatParticipant> | undefined): boolean {
    return proto3.util.equals(TLUpdateChatParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelParticipant
 */
export class TLUpdateChannelParticipant extends Message$1<TLUpdateChannelParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelParticipant {
    return new TLUpdateChannelParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelParticipant {
    return new TLUpdateChannelParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelParticipant {
    return new TLUpdateChannelParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelParticipant | PlainMessage<TLUpdateChannelParticipant> | undefined, b: TLUpdateChannelParticipant | PlainMessage<TLUpdateChannelParticipant> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotStopped
 */
export class TLUpdateBotStopped extends Message$1<TLUpdateBotStopped> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotStopped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotStopped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotStopped {
    return new TLUpdateBotStopped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotStopped {
    return new TLUpdateBotStopped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotStopped {
    return new TLUpdateBotStopped().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotStopped | PlainMessage<TLUpdateBotStopped> | undefined, b: TLUpdateBotStopped | PlainMessage<TLUpdateBotStopped> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotStopped, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCallConnection
 */
export class TLUpdateGroupCallConnection extends Message$1<TLUpdateGroupCallConnection> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateGroupCallConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupCallConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateGroupCallConnection {
    return new TLUpdateGroupCallConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateGroupCallConnection {
    return new TLUpdateGroupCallConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateGroupCallConnection {
    return new TLUpdateGroupCallConnection().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateGroupCallConnection | PlainMessage<TLUpdateGroupCallConnection> | undefined, b: TLUpdateGroupCallConnection | PlainMessage<TLUpdateGroupCallConnection> | undefined): boolean {
    return proto3.util.equals(TLUpdateGroupCallConnection, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotCommands
 */
export class TLUpdateBotCommands extends Message$1<TLUpdateBotCommands> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotCommands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotCommands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotCommands {
    return new TLUpdateBotCommands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotCommands {
    return new TLUpdateBotCommands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotCommands {
    return new TLUpdateBotCommands().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotCommands | PlainMessage<TLUpdateBotCommands> | undefined, b: TLUpdateBotCommands | PlainMessage<TLUpdateBotCommands> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotCommands, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatePendingJoinRequests
 */
export class TLUpdatePendingJoinRequests extends Message$1<TLUpdatePendingJoinRequests> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdatePendingJoinRequests>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatePendingJoinRequests";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatePendingJoinRequests {
    return new TLUpdatePendingJoinRequests().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatePendingJoinRequests {
    return new TLUpdatePendingJoinRequests().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatePendingJoinRequests {
    return new TLUpdatePendingJoinRequests().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatePendingJoinRequests | PlainMessage<TLUpdatePendingJoinRequests> | undefined, b: TLUpdatePendingJoinRequests | PlainMessage<TLUpdatePendingJoinRequests> | undefined): boolean {
    return proto3.util.equals(TLUpdatePendingJoinRequests, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotChatInviteRequester
 */
export class TLUpdateBotChatInviteRequester extends Message$1<TLUpdateBotChatInviteRequester> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotChatInviteRequester>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotChatInviteRequester";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotChatInviteRequester {
    return new TLUpdateBotChatInviteRequester().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotChatInviteRequester {
    return new TLUpdateBotChatInviteRequester().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotChatInviteRequester {
    return new TLUpdateBotChatInviteRequester().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotChatInviteRequester | PlainMessage<TLUpdateBotChatInviteRequester> | undefined, b: TLUpdateBotChatInviteRequester | PlainMessage<TLUpdateBotChatInviteRequester> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotChatInviteRequester, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageReactions
 */
export class TLUpdateMessageReactions extends Message$1<TLUpdateMessageReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMessageReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMessageReactions {
    return new TLUpdateMessageReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMessageReactions {
    return new TLUpdateMessageReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMessageReactions {
    return new TLUpdateMessageReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMessageReactions | PlainMessage<TLUpdateMessageReactions> | undefined, b: TLUpdateMessageReactions | PlainMessage<TLUpdateMessageReactions> | undefined): boolean {
    return proto3.util.equals(TLUpdateMessageReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateAttachMenuBots
 */
export class TLUpdateAttachMenuBots extends Message$1<TLUpdateAttachMenuBots> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateAttachMenuBots>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateAttachMenuBots";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateAttachMenuBots {
    return new TLUpdateAttachMenuBots().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateAttachMenuBots {
    return new TLUpdateAttachMenuBots().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateAttachMenuBots {
    return new TLUpdateAttachMenuBots().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateAttachMenuBots | PlainMessage<TLUpdateAttachMenuBots> | undefined, b: TLUpdateAttachMenuBots | PlainMessage<TLUpdateAttachMenuBots> | undefined): boolean {
    return proto3.util.equals(TLUpdateAttachMenuBots, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateWebViewResultSent
 */
export class TLUpdateWebViewResultSent extends Message$1<TLUpdateWebViewResultSent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateWebViewResultSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateWebViewResultSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateWebViewResultSent {
    return new TLUpdateWebViewResultSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateWebViewResultSent {
    return new TLUpdateWebViewResultSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateWebViewResultSent {
    return new TLUpdateWebViewResultSent().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateWebViewResultSent | PlainMessage<TLUpdateWebViewResultSent> | undefined, b: TLUpdateWebViewResultSent | PlainMessage<TLUpdateWebViewResultSent> | undefined): boolean {
    return proto3.util.equals(TLUpdateWebViewResultSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotMenuButton
 */
export class TLUpdateBotMenuButton extends Message$1<TLUpdateBotMenuButton> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBotMenuButton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBotMenuButton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBotMenuButton {
    return new TLUpdateBotMenuButton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBotMenuButton {
    return new TLUpdateBotMenuButton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBotMenuButton {
    return new TLUpdateBotMenuButton().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBotMenuButton | PlainMessage<TLUpdateBotMenuButton> | undefined, b: TLUpdateBotMenuButton | PlainMessage<TLUpdateBotMenuButton> | undefined): boolean {
    return proto3.util.equals(TLUpdateBotMenuButton, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateSavedRingtones
 */
export class TLUpdateSavedRingtones extends Message$1<TLUpdateSavedRingtones> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateSavedRingtones>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateSavedRingtones";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateSavedRingtones {
    return new TLUpdateSavedRingtones().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateSavedRingtones {
    return new TLUpdateSavedRingtones().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateSavedRingtones {
    return new TLUpdateSavedRingtones().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateSavedRingtones | PlainMessage<TLUpdateSavedRingtones> | undefined, b: TLUpdateSavedRingtones | PlainMessage<TLUpdateSavedRingtones> | undefined): boolean {
    return proto3.util.equals(TLUpdateSavedRingtones, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateTranscribedAudio
 */
export class TLUpdateTranscribedAudio extends Message$1<TLUpdateTranscribedAudio> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateTranscribedAudio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateTranscribedAudio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateTranscribedAudio {
    return new TLUpdateTranscribedAudio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateTranscribedAudio {
    return new TLUpdateTranscribedAudio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateTranscribedAudio {
    return new TLUpdateTranscribedAudio().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateTranscribedAudio | PlainMessage<TLUpdateTranscribedAudio> | undefined, b: TLUpdateTranscribedAudio | PlainMessage<TLUpdateTranscribedAudio> | undefined): boolean {
    return proto3.util.equals(TLUpdateTranscribedAudio, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadFeaturedEmojiStickers
 */
export class TLUpdateReadFeaturedEmojiStickers extends Message$1<TLUpdateReadFeaturedEmojiStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadFeaturedEmojiStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadFeaturedEmojiStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadFeaturedEmojiStickers {
    return new TLUpdateReadFeaturedEmojiStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadFeaturedEmojiStickers {
    return new TLUpdateReadFeaturedEmojiStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadFeaturedEmojiStickers {
    return new TLUpdateReadFeaturedEmojiStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadFeaturedEmojiStickers | PlainMessage<TLUpdateReadFeaturedEmojiStickers> | undefined, b: TLUpdateReadFeaturedEmojiStickers | PlainMessage<TLUpdateReadFeaturedEmojiStickers> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadFeaturedEmojiStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserEmojiStatus
 */
export class TLUpdateUserEmojiStatus extends Message$1<TLUpdateUserEmojiStatus> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserEmojiStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserEmojiStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserEmojiStatus {
    return new TLUpdateUserEmojiStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserEmojiStatus {
    return new TLUpdateUserEmojiStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserEmojiStatus {
    return new TLUpdateUserEmojiStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserEmojiStatus | PlainMessage<TLUpdateUserEmojiStatus> | undefined, b: TLUpdateUserEmojiStatus | PlainMessage<TLUpdateUserEmojiStatus> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserEmojiStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentEmojiStatuses
 */
export class TLUpdateRecentEmojiStatuses extends Message$1<TLUpdateRecentEmojiStatuses> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateRecentEmojiStatuses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentEmojiStatuses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateRecentEmojiStatuses {
    return new TLUpdateRecentEmojiStatuses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateRecentEmojiStatuses {
    return new TLUpdateRecentEmojiStatuses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateRecentEmojiStatuses {
    return new TLUpdateRecentEmojiStatuses().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateRecentEmojiStatuses | PlainMessage<TLUpdateRecentEmojiStatuses> | undefined, b: TLUpdateRecentEmojiStatuses | PlainMessage<TLUpdateRecentEmojiStatuses> | undefined): boolean {
    return proto3.util.equals(TLUpdateRecentEmojiStatuses, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentReactions
 */
export class TLUpdateRecentReactions extends Message$1<TLUpdateRecentReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateRecentReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateRecentReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateRecentReactions {
    return new TLUpdateRecentReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateRecentReactions {
    return new TLUpdateRecentReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateRecentReactions {
    return new TLUpdateRecentReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateRecentReactions | PlainMessage<TLUpdateRecentReactions> | undefined, b: TLUpdateRecentReactions | PlainMessage<TLUpdateRecentReactions> | undefined): boolean {
    return proto3.util.equals(TLUpdateRecentReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMoveStickerSetToTop
 */
export class TLUpdateMoveStickerSetToTop extends Message$1<TLUpdateMoveStickerSetToTop> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMoveStickerSetToTop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMoveStickerSetToTop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMoveStickerSetToTop {
    return new TLUpdateMoveStickerSetToTop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMoveStickerSetToTop {
    return new TLUpdateMoveStickerSetToTop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMoveStickerSetToTop {
    return new TLUpdateMoveStickerSetToTop().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMoveStickerSetToTop | PlainMessage<TLUpdateMoveStickerSetToTop> | undefined, b: TLUpdateMoveStickerSetToTop | PlainMessage<TLUpdateMoveStickerSetToTop> | undefined): boolean {
    return proto3.util.equals(TLUpdateMoveStickerSetToTop, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageExtendedMedia
 */
export class TLUpdateMessageExtendedMedia extends Message$1<TLUpdateMessageExtendedMedia> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateMessageExtendedMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateMessageExtendedMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateMessageExtendedMedia {
    return new TLUpdateMessageExtendedMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateMessageExtendedMedia {
    return new TLUpdateMessageExtendedMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateMessageExtendedMedia {
    return new TLUpdateMessageExtendedMedia().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateMessageExtendedMedia | PlainMessage<TLUpdateMessageExtendedMedia> | undefined, b: TLUpdateMessageExtendedMedia | PlainMessage<TLUpdateMessageExtendedMedia> | undefined): boolean {
    return proto3.util.equals(TLUpdateMessageExtendedMedia, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelPinnedTopic
 */
export class TLUpdateChannelPinnedTopic extends Message$1<TLUpdateChannelPinnedTopic> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelPinnedTopic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelPinnedTopic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelPinnedTopic {
    return new TLUpdateChannelPinnedTopic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelPinnedTopic {
    return new TLUpdateChannelPinnedTopic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelPinnedTopic {
    return new TLUpdateChannelPinnedTopic().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelPinnedTopic | PlainMessage<TLUpdateChannelPinnedTopic> | undefined, b: TLUpdateChannelPinnedTopic | PlainMessage<TLUpdateChannelPinnedTopic> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelPinnedTopic, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelPinnedTopics
 */
export class TLUpdateChannelPinnedTopics extends Message$1<TLUpdateChannelPinnedTopics> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateChannelPinnedTopics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateChannelPinnedTopics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateChannelPinnedTopics {
    return new TLUpdateChannelPinnedTopics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateChannelPinnedTopics {
    return new TLUpdateChannelPinnedTopics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateChannelPinnedTopics {
    return new TLUpdateChannelPinnedTopics().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateChannelPinnedTopics | PlainMessage<TLUpdateChannelPinnedTopics> | undefined, b: TLUpdateChannelPinnedTopics | PlainMessage<TLUpdateChannelPinnedTopics> | undefined): boolean {
    return proto3.util.equals(TLUpdateChannelPinnedTopics, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUser
 */
export class TLUpdateUser extends Message$1<TLUpdateUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUser {
    return new TLUpdateUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUser {
    return new TLUpdateUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUser {
    return new TLUpdateUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUser | PlainMessage<TLUpdateUser> | undefined, b: TLUpdateUser | PlainMessage<TLUpdateUser> | undefined): boolean {
    return proto3.util.equals(TLUpdateUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateAutoSaveSettings
 */
export class TLUpdateAutoSaveSettings extends Message$1<TLUpdateAutoSaveSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateAutoSaveSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateAutoSaveSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateAutoSaveSettings {
    return new TLUpdateAutoSaveSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateAutoSaveSettings {
    return new TLUpdateAutoSaveSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateAutoSaveSettings {
    return new TLUpdateAutoSaveSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateAutoSaveSettings | PlainMessage<TLUpdateAutoSaveSettings> | undefined, b: TLUpdateAutoSaveSettings | PlainMessage<TLUpdateAutoSaveSettings> | undefined): boolean {
    return proto3.util.equals(TLUpdateAutoSaveSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupInvitePrivacyForbidden
 */
export class TLUpdateGroupInvitePrivacyForbidden extends Message$1<TLUpdateGroupInvitePrivacyForbidden> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateGroupInvitePrivacyForbidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateGroupInvitePrivacyForbidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateGroupInvitePrivacyForbidden {
    return new TLUpdateGroupInvitePrivacyForbidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateGroupInvitePrivacyForbidden {
    return new TLUpdateGroupInvitePrivacyForbidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateGroupInvitePrivacyForbidden {
    return new TLUpdateGroupInvitePrivacyForbidden().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateGroupInvitePrivacyForbidden | PlainMessage<TLUpdateGroupInvitePrivacyForbidden> | undefined, b: TLUpdateGroupInvitePrivacyForbidden | PlainMessage<TLUpdateGroupInvitePrivacyForbidden> | undefined): boolean {
    return proto3.util.equals(TLUpdateGroupInvitePrivacyForbidden, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateStory
 */
export class TLUpdateStory extends Message$1<TLUpdateStory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateStory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateStory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateStory {
    return new TLUpdateStory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateStory {
    return new TLUpdateStory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateStory {
    return new TLUpdateStory().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateStory | PlainMessage<TLUpdateStory> | undefined, b: TLUpdateStory | PlainMessage<TLUpdateStory> | undefined): boolean {
    return proto3.util.equals(TLUpdateStory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadStories
 */
export class TLUpdateReadStories extends Message$1<TLUpdateReadStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateReadStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateReadStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateReadStories {
    return new TLUpdateReadStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateReadStories {
    return new TLUpdateReadStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateReadStories {
    return new TLUpdateReadStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateReadStories | PlainMessage<TLUpdateReadStories> | undefined, b: TLUpdateReadStories | PlainMessage<TLUpdateReadStories> | undefined): boolean {
    return proto3.util.equals(TLUpdateReadStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateStoryID
 */
export class TLUpdateStoryID extends Message$1<TLUpdateStoryID> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateStoryID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateStoryID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateStoryID {
    return new TLUpdateStoryID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateStoryID {
    return new TLUpdateStoryID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateStoryID {
    return new TLUpdateStoryID().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateStoryID | PlainMessage<TLUpdateStoryID> | undefined, b: TLUpdateStoryID | PlainMessage<TLUpdateStoryID> | undefined): boolean {
    return proto3.util.equals(TLUpdateStoryID, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateStoriesStealthMode
 */
export class TLUpdateStoriesStealthMode extends Message$1<TLUpdateStoriesStealthMode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateStoriesStealthMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateStoriesStealthMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateStoriesStealthMode {
    return new TLUpdateStoriesStealthMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateStoriesStealthMode {
    return new TLUpdateStoriesStealthMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateStoriesStealthMode {
    return new TLUpdateStoriesStealthMode().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateStoriesStealthMode | PlainMessage<TLUpdateStoriesStealthMode> | undefined, b: TLUpdateStoriesStealthMode | PlainMessage<TLUpdateStoriesStealthMode> | undefined): boolean {
    return proto3.util.equals(TLUpdateStoriesStealthMode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateSentStoryReaction
 */
export class TLUpdateSentStoryReaction extends Message$1<TLUpdateSentStoryReaction> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateSentStoryReaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateSentStoryReaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateSentStoryReaction {
    return new TLUpdateSentStoryReaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateSentStoryReaction {
    return new TLUpdateSentStoryReaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateSentStoryReaction {
    return new TLUpdateSentStoryReaction().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateSentStoryReaction | PlainMessage<TLUpdateSentStoryReaction> | undefined, b: TLUpdateSentStoryReaction | PlainMessage<TLUpdateSentStoryReaction> | undefined): boolean {
    return proto3.util.equals(TLUpdateSentStoryReaction, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserPhoto
 */
export class TLUpdateUserPhoto extends Message$1<TLUpdateUserPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateUserPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateUserPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateUserPhoto {
    return new TLUpdateUserPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateUserPhoto {
    return new TLUpdateUserPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateUserPhoto {
    return new TLUpdateUserPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateUserPhoto | PlainMessage<TLUpdateUserPhoto> | undefined, b: TLUpdateUserPhoto | PlainMessage<TLUpdateUserPhoto> | undefined): boolean {
    return proto3.util.equals(TLUpdateUserPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateBizDataRaw
 */
export class TLUpdateBizDataRaw extends Message$1<TLUpdateBizDataRaw> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update data2 = 1;
   */
  data2: Update[] = [];

  constructor(data?: PartialMessage<TLUpdateBizDataRaw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateBizDataRaw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateBizDataRaw {
    return new TLUpdateBizDataRaw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateBizDataRaw {
    return new TLUpdateBizDataRaw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateBizDataRaw {
    return new TLUpdateBizDataRaw().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateBizDataRaw | PlainMessage<TLUpdateBizDataRaw> | undefined, b: TLUpdateBizDataRaw | PlainMessage<TLUpdateBizDataRaw> | undefined): boolean {
    return proto3.util.equals(TLUpdateBizDataRaw, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UpdateList
 */
export class UpdateList extends Message$1<UpdateList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update updates = 3;
   */
  updates: Update[] = [];

  constructor(data?: PartialMessage<UpdateList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UpdateList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "updates", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateList {
    return new UpdateList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateList {
    return new UpdateList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateList {
    return new UpdateList().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateList | PlainMessage<UpdateList> | undefined, b: UpdateList | PlainMessage<UpdateList> | undefined): boolean {
    return proto3.util.equals(UpdateList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateList
 */
export class TLUpdateList extends Message$1<TLUpdateList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdateList data2 = 1;
   */
  data2: UpdateList[] = [];

  constructor(data?: PartialMessage<TLUpdateList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdateList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateList {
    return new TLUpdateList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateList {
    return new TLUpdateList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateList {
    return new TLUpdateList().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateList | PlainMessage<TLUpdateList> | undefined, b: TLUpdateList | PlainMessage<TLUpdateList> | undefined): boolean {
    return proto3.util.equals(TLUpdateList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Updates
 */
export class Updates extends Message$1<Updates> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool out = 3;
   */
  out = false;

  /**
   * @generated from field: bool mentioned = 4;
   */
  mentioned = false;

  /**
   * @generated from field: bool media_unread = 5;
   */
  mediaUnread = false;

  /**
   * @generated from field: bool silent = 6;
   */
  silent = false;

  /**
   * @generated from field: int32 id = 7;
   */
  id = 0;

  /**
   * @generated from field: int64 user_id = 8;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: string message = 9;
   */
  message = "";

  /**
   * @generated from field: int32 pts = 10;
   */
  pts = 0;

  /**
   * @generated from field: int32 pts_count = 11;
   */
  ptsCount = 0;

  /**
   * @generated from field: int32 date = 12;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageFwdHeader fwd_from = 13;
   */
  fwdFrom: MessageFwdHeader[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value via_bot_id = 14;
   */
  viaBotId: Int64Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageReplyHeader reply_to = 15;
   */
  replyTo: MessageReplyHeader[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 16;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 17;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: int64 from_id = 18;
   */
  fromId = protoInt64.zero;

  /**
   * @generated from field: int64 chat_id = 19;
   */
  chatId = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update update = 20;
   */
  update: Update[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update updates = 21;
   */
  updates: Update[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 22;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 23;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: int32 seq_start = 24;
   */
  seqStart = 0;

  /**
   * @generated from field: int32 seq = 25;
   */
  seq = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageMedia media = 26;
   */
  media: MessageMedia[] = [];

  /**
   * @generated from field: int64 auth_key_id = 27;
   */
  authKeyId = protoInt64.zero;

  constructor(data?: PartialMessage<Updates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Updates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "out", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "mentioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "media_unread", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "silent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "fwd_from", kind: "message", T: MessageFwdHeader, repeated: true },
    { no: 14, name: "via_bot_id", kind: "message", T: Int64Value, repeated: true },
    { no: 15, name: "reply_to", kind: "message", T: MessageReplyHeader, repeated: true },
    { no: 16, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 17, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 18, name: "from_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "chat_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "update", kind: "message", T: Update, repeated: true },
    { no: 21, name: "updates", kind: "message", T: Update, repeated: true },
    { no: 22, name: "users", kind: "message", T: User, repeated: true },
    { no: 23, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 24, name: "seq_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "seq", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "media", kind: "message", T: MessageMedia, repeated: true },
    { no: 27, name: "auth_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Updates {
    return new Updates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Updates {
    return new Updates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Updates {
    return new Updates().fromJsonString(jsonString, options);
  }

  static equals(a: Updates | PlainMessage<Updates> | undefined, b: Updates | PlainMessage<Updates> | undefined): boolean {
    return proto3.util.equals(Updates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesTooLong
 */
export class TLUpdatesTooLong extends Message$1<TLUpdatesTooLong> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdatesTooLong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesTooLong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesTooLong {
    return new TLUpdatesTooLong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesTooLong {
    return new TLUpdatesTooLong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesTooLong {
    return new TLUpdatesTooLong().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesTooLong | PlainMessage<TLUpdatesTooLong> | undefined, b: TLUpdatesTooLong | PlainMessage<TLUpdatesTooLong> | undefined): boolean {
    return proto3.util.equals(TLUpdatesTooLong, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortMessage
 */
export class TLUpdateShortMessage extends Message$1<TLUpdateShortMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdateShortMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateShortMessage {
    return new TLUpdateShortMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateShortMessage {
    return new TLUpdateShortMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateShortMessage {
    return new TLUpdateShortMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateShortMessage | PlainMessage<TLUpdateShortMessage> | undefined, b: TLUpdateShortMessage | PlainMessage<TLUpdateShortMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateShortMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortChatMessage
 */
export class TLUpdateShortChatMessage extends Message$1<TLUpdateShortChatMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdateShortChatMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortChatMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateShortChatMessage {
    return new TLUpdateShortChatMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateShortChatMessage {
    return new TLUpdateShortChatMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateShortChatMessage {
    return new TLUpdateShortChatMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateShortChatMessage | PlainMessage<TLUpdateShortChatMessage> | undefined, b: TLUpdateShortChatMessage | PlainMessage<TLUpdateShortChatMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateShortChatMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateShort
 */
export class TLUpdateShort extends Message$1<TLUpdateShort> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdateShort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateShort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateShort {
    return new TLUpdateShort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateShort {
    return new TLUpdateShort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateShort {
    return new TLUpdateShort().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateShort | PlainMessage<TLUpdateShort> | undefined, b: TLUpdateShort | PlainMessage<TLUpdateShort> | undefined): boolean {
    return proto3.util.equals(TLUpdateShort, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesCombined
 */
export class TLUpdatesCombined extends Message$1<TLUpdatesCombined> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdatesCombined>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesCombined";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesCombined {
    return new TLUpdatesCombined().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesCombined {
    return new TLUpdatesCombined().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesCombined {
    return new TLUpdatesCombined().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesCombined | PlainMessage<TLUpdatesCombined> | undefined, b: TLUpdatesCombined | PlainMessage<TLUpdatesCombined> | undefined): boolean {
    return proto3.util.equals(TLUpdatesCombined, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdates
 */
export class TLUpdates extends Message$1<TLUpdates> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdates {
    return new TLUpdates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdates {
    return new TLUpdates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdates {
    return new TLUpdates().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdates | PlainMessage<TLUpdates> | undefined, b: TLUpdates | PlainMessage<TLUpdates> | undefined): boolean {
    return proto3.util.equals(TLUpdates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortSentMessage
 */
export class TLUpdateShortSentMessage extends Message$1<TLUpdateShortSentMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdateShortSentMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateShortSentMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateShortSentMessage {
    return new TLUpdateShortSentMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateShortSentMessage {
    return new TLUpdateShortSentMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateShortSentMessage {
    return new TLUpdateShortSentMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateShortSentMessage | PlainMessage<TLUpdateShortSentMessage> | undefined, b: TLUpdateShortSentMessage | PlainMessage<TLUpdateShortSentMessage> | undefined): boolean {
    return proto3.util.equals(TLUpdateShortSentMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdateAccountResetAuthorization
 */
export class TLUpdateAccountResetAuthorization extends Message$1<TLUpdateAccountResetAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates data2 = 1;
   */
  data2: Updates[] = [];

  constructor(data?: PartialMessage<TLUpdateAccountResetAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdateAccountResetAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Updates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdateAccountResetAuthorization {
    return new TLUpdateAccountResetAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdateAccountResetAuthorization {
    return new TLUpdateAccountResetAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdateAccountResetAuthorization {
    return new TLUpdateAccountResetAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdateAccountResetAuthorization | PlainMessage<TLUpdateAccountResetAuthorization> | undefined, b: TLUpdateAccountResetAuthorization | PlainMessage<TLUpdateAccountResetAuthorization> | undefined): boolean {
    return proto3.util.equals(TLUpdateAccountResetAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UrlAuthResult
 */
export class UrlAuthResult extends Message$1<UrlAuthResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool request_write_access = 3;
   */
  requestWriteAccess = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User bot = 4;
   */
  bot: User[] = [];

  /**
   * @generated from field: string domain = 5;
   */
  domain = "";

  /**
   * @generated from field: string url = 6;
   */
  url = "";

  constructor(data?: PartialMessage<UrlAuthResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UrlAuthResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "request_write_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "bot", kind: "message", T: User, repeated: true },
    { no: 5, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UrlAuthResult {
    return new UrlAuthResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UrlAuthResult {
    return new UrlAuthResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UrlAuthResult {
    return new UrlAuthResult().fromJsonString(jsonString, options);
  }

  static equals(a: UrlAuthResult | PlainMessage<UrlAuthResult> | undefined, b: UrlAuthResult | PlainMessage<UrlAuthResult> | undefined): boolean {
    return proto3.util.equals(UrlAuthResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultRequest
 */
export class TLUrlAuthResultRequest extends Message$1<TLUrlAuthResultRequest> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UrlAuthResult data2 = 1;
   */
  data2: UrlAuthResult[] = [];

  constructor(data?: PartialMessage<TLUrlAuthResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UrlAuthResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUrlAuthResultRequest {
    return new TLUrlAuthResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUrlAuthResultRequest {
    return new TLUrlAuthResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUrlAuthResultRequest {
    return new TLUrlAuthResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TLUrlAuthResultRequest | PlainMessage<TLUrlAuthResultRequest> | undefined, b: TLUrlAuthResultRequest | PlainMessage<TLUrlAuthResultRequest> | undefined): boolean {
    return proto3.util.equals(TLUrlAuthResultRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultAccepted
 */
export class TLUrlAuthResultAccepted extends Message$1<TLUrlAuthResultAccepted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UrlAuthResult data2 = 1;
   */
  data2: UrlAuthResult[] = [];

  constructor(data?: PartialMessage<TLUrlAuthResultAccepted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultAccepted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UrlAuthResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUrlAuthResultAccepted {
    return new TLUrlAuthResultAccepted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUrlAuthResultAccepted {
    return new TLUrlAuthResultAccepted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUrlAuthResultAccepted {
    return new TLUrlAuthResultAccepted().fromJsonString(jsonString, options);
  }

  static equals(a: TLUrlAuthResultAccepted | PlainMessage<TLUrlAuthResultAccepted> | undefined, b: TLUrlAuthResultAccepted | PlainMessage<TLUrlAuthResultAccepted> | undefined): boolean {
    return proto3.util.equals(TLUrlAuthResultAccepted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultDefault
 */
export class TLUrlAuthResultDefault extends Message$1<TLUrlAuthResultDefault> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UrlAuthResult data2 = 1;
   */
  data2: UrlAuthResult[] = [];

  constructor(data?: PartialMessage<TLUrlAuthResultDefault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUrlAuthResultDefault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UrlAuthResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUrlAuthResultDefault {
    return new TLUrlAuthResultDefault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUrlAuthResultDefault {
    return new TLUrlAuthResultDefault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUrlAuthResultDefault {
    return new TLUrlAuthResultDefault().fromJsonString(jsonString, options);
  }

  static equals(a: TLUrlAuthResultDefault | PlainMessage<TLUrlAuthResultDefault> | undefined, b: TLUrlAuthResultDefault | PlainMessage<TLUrlAuthResultDefault> | undefined): boolean {
    return proto3.util.equals(TLUrlAuthResultDefault, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.User
 */
export class User extends Message$1<User> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool self = 4;
   */
  self = false;

  /**
   * @generated from field: bool contact = 5;
   */
  contact = false;

  /**
   * @generated from field: bool mutual_contact = 6;
   */
  mutualContact = false;

  /**
   * @generated from field: bool deleted = 7;
   */
  deleted = false;

  /**
   * @generated from field: bool bot = 8;
   */
  bot = false;

  /**
   * @generated from field: bool bot_chat_history = 9;
   */
  botChatHistory = false;

  /**
   * @generated from field: bool bot_nochats = 10;
   */
  botNochats = false;

  /**
   * @generated from field: bool verified = 11;
   */
  verified = false;

  /**
   * @generated from field: bool restricted = 12;
   */
  restricted = false;

  /**
   * @generated from field: bool min = 13;
   */
  min = false;

  /**
   * @generated from field: bool bot_inline_geo = 14;
   */
  botInlineGeo = false;

  /**
   * @generated from field: bool support = 15;
   */
  support = false;

  /**
   * @generated from field: bool scam = 16;
   */
  scam = false;

  /**
   * @generated from field: bool apply_min_photo = 17;
   */
  applyMinPhoto = false;

  /**
   * @generated from field: bool fake = 18;
   */
  fake = false;

  /**
   * @generated from field: bool bot_attach_menu = 19;
   */
  botAttachMenu = false;

  /**
   * @generated from field: bool premium = 20;
   */
  premium = false;

  /**
   * @generated from field: bool attach_menu_enabled = 21;
   */
  attachMenuEnabled = false;

  /**
   * @generated from field: bool bot_can_edit = 22;
   */
  botCanEdit = false;

  /**
   * @generated from field: bool close_friend = 23;
   */
  closeFriend = false;

  /**
   * @generated from field: bool stories_hidden = 24;
   */
  storiesHidden = false;

  /**
   * @generated from field: bool stories_unavailable = 25;
   */
  storiesUnavailable = false;

  /**
   * @generated from field: repeated google.protobuf.Int64Value access_hash = 26;
   */
  accessHash: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue first_name = 27;
   */
  firstName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue last_name = 28;
   */
  lastName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue username = 29;
   */
  username: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue phone = 30;
   */
  phone: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto photo = 31;
   */
  photo: UserProfilePhoto[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus status = 32;
   */
  status: UserStatus[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value bot_info_version = 33;
   */
  botInfoVersion: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RestrictionReason restriction_reason = 34;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue bot_inline_placeholder = 35;
   */
  botInlinePlaceholder: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue lang_code = 36;
   */
  langCode: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus emoji_status = 37;
   */
  emojiStatus: EmojiStatus[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Username usernames = 38;
   */
  usernames: Username[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value stories_max_id = 39;
   */
  storiesMaxId: Int32Value[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "self", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "mutual_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "bot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "bot_chat_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "bot_nochats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "restricted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "bot_inline_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "support", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "apply_min_photo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "bot_attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "attach_menu_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "bot_can_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "close_friend", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "stories_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "stories_unavailable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "access_hash", kind: "message", T: Int64Value, repeated: true },
    { no: 27, name: "first_name", kind: "message", T: StringValue, repeated: true },
    { no: 28, name: "last_name", kind: "message", T: StringValue, repeated: true },
    { no: 29, name: "username", kind: "message", T: StringValue, repeated: true },
    { no: 30, name: "phone", kind: "message", T: StringValue, repeated: true },
    { no: 31, name: "photo", kind: "message", T: UserProfilePhoto, repeated: true },
    { no: 32, name: "status", kind: "message", T: UserStatus, repeated: true },
    { no: 33, name: "bot_info_version", kind: "message", T: Int32Value, repeated: true },
    { no: 34, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 35, name: "bot_inline_placeholder", kind: "message", T: StringValue, repeated: true },
    { no: 36, name: "lang_code", kind: "message", T: StringValue, repeated: true },
    { no: 37, name: "emoji_status", kind: "message", T: EmojiStatus, repeated: true },
    { no: 38, name: "usernames", kind: "message", T: Username, repeated: true },
    { no: 39, name: "stories_max_id", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserEmpty
 */
export class TLUserEmpty extends Message$1<TLUserEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User data2 = 1;
   */
  data2: User[] = [];

  constructor(data?: PartialMessage<TLUserEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserEmpty {
    return new TLUserEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserEmpty {
    return new TLUserEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserEmpty {
    return new TLUserEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserEmpty | PlainMessage<TLUserEmpty> | undefined, b: TLUserEmpty | PlainMessage<TLUserEmpty> | undefined): boolean {
    return proto3.util.equals(TLUserEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUser
 */
export class TLUser extends Message$1<TLUser> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User data2 = 1;
   */
  data2: User[] = [];

  constructor(data?: PartialMessage<TLUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUser {
    return new TLUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUser {
    return new TLUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUser {
    return new TLUser().fromJsonString(jsonString, options);
  }

  static equals(a: TLUser | PlainMessage<TLUser> | undefined, b: TLUser | PlainMessage<TLUser> | undefined): boolean {
    return proto3.util.equals(TLUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UserData
 */
export class UserData extends Message$1<UserData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int32 user_type = 5;
   */
  userType = 0;

  /**
   * @generated from field: int64 sceret_key_id = 6;
   */
  sceretKeyId = protoInt64.zero;

  /**
   * @generated from field: string first_name = 7;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 8;
   */
  lastName = "";

  /**
   * @generated from field: string username = 9;
   */
  username = "";

  /**
   * @generated from field: string phone = 10;
   */
  phone = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo profile_photo = 11;
   */
  profilePhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotData bot = 12;
   */
  bot: BotData[] = [];

  /**
   * @generated from field: string country_code = 13;
   */
  countryCode = "";

  /**
   * @generated from field: bool verified = 14;
   */
  verified = false;

  /**
   * @generated from field: bool support = 15;
   */
  support = false;

  /**
   * @generated from field: bool scam = 16;
   */
  scam = false;

  /**
   * @generated from field: bool fake = 17;
   */
  fake = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue about = 18;
   */
  about: StringValue[] = [];

  /**
   * @generated from field: bool restricted = 19;
   */
  restricted = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RestrictionReason restriction_reason = 20;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: int32 contacts_version = 21;
   */
  contactsVersion = 0;

  /**
   * @generated from field: int32 privacies_version = 22;
   */
  privaciesVersion = 0;

  /**
   * @generated from field: bool deleted = 23;
   */
  deleted = false;

  /**
   * @generated from field: bool bot_attach_menu = 24;
   */
  botAttachMenu = false;

  /**
   * @generated from field: bool premium = 25;
   */
  premium = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus emoji_status = 26;
   */
  emojiStatus: EmojiStatus[] = [];

  constructor(data?: PartialMessage<UserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "user_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sceret_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "profile_photo", kind: "message", T: Photo, repeated: true },
    { no: 12, name: "bot", kind: "message", T: BotData, repeated: true },
    { no: 13, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "support", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "about", kind: "message", T: StringValue, repeated: true },
    { no: 19, name: "restricted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 21, name: "contacts_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "privacies_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "bot_attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "emoji_status", kind: "message", T: EmojiStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserData {
    return new UserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJsonString(jsonString, options);
  }

  static equals(a: UserData | PlainMessage<UserData> | undefined, b: UserData | PlainMessage<UserData> | undefined): boolean {
    return proto3.util.equals(UserData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserData
 */
export class TLUserData extends Message$1<TLUserData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserData data2 = 1;
   */
  data2: UserData[] = [];

  constructor(data?: PartialMessage<TLUserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserData {
    return new TLUserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserData {
    return new TLUserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserData {
    return new TLUserData().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserData | PlainMessage<TLUserData> | undefined, b: TLUserData | PlainMessage<TLUserData> | undefined): boolean {
    return proto3.util.equals(TLUserData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UserFull
 */
export class UserFull extends Message$1<UserFull> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool blocked = 3;
   */
  blocked = false;

  /**
   * @generated from field: bool phone_calls_available = 4;
   */
  phoneCallsAvailable = false;

  /**
   * @generated from field: bool phone_calls_private = 5;
   */
  phoneCallsPrivate = false;

  /**
   * @generated from field: bool can_pin_message = 6;
   */
  canPinMessage = false;

  /**
   * @generated from field: bool has_scheduled = 7;
   */
  hasScheduled = false;

  /**
   * @generated from field: bool video_calls_available = 8;
   */
  videoCallsAvailable = false;

  /**
   * @generated from field: bool voice_messages_forbidden = 9;
   */
  voiceMessagesForbidden = false;

  /**
   * @generated from field: bool translations_disabled = 10;
   */
  translationsDisabled = false;

  /**
   * @generated from field: bool stories_pinned_available = 11;
   */
  storiesPinnedAvailable = false;

  /**
   * @generated from field: bool blocked_my_stories_from = 12;
   */
  blockedMyStoriesFrom = false;

  /**
   * @generated from field: int64 id = 13;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.StringValue about = 14;
   */
  about: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerSettings settings = 15;
   */
  settings: PeerSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo personal_photo = 16;
   */
  personalPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo profile_photo = 17;
   */
  profilePhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo fallback_photo = 18;
   */
  fallbackPhoto: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerNotifySettings notify_settings = 19;
   */
  notifySettings: PeerNotifySettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInfo bot_info = 20;
   */
  botInfo: BotInfo[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value pinned_msg_id = 21;
   */
  pinnedMsgId: Int32Value[] = [];

  /**
   * @generated from field: int32 common_chats_count = 22;
   */
  commonChatsCount = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value folder_id = 23;
   */
  folderId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value ttl_period = 24;
   */
  ttlPeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue theme_emoticon = 25;
   */
  themeEmoticon: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue private_forward_name = 26;
   */
  privateForwardName: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights bot_group_admin_rights = 27;
   */
  botGroupAdminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminRights bot_broadcast_admin_rights = 28;
   */
  botBroadcastAdminRights: ChatAdminRights[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PremiumGiftOption premium_gifts = 29;
   */
  premiumGifts: PremiumGiftOption[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper wallpaper = 30;
   */
  wallpaper: WallPaper[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerStories stories_FLAGPEERSTORIES = 31;
   */
  storiesFLAGPEERSTORIES: PeerStories[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStories stories_FLAGUSERSTORIES = 32;
   */
  storiesFLAGUSERSTORIES: UserStories[] = [];

  constructor(data?: PartialMessage<UserFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UserFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "blocked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "phone_calls_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "phone_calls_private", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "can_pin_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "has_scheduled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "video_calls_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "voice_messages_forbidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "translations_disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "stories_pinned_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "blocked_my_stories_from", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "about", kind: "message", T: StringValue, repeated: true },
    { no: 15, name: "settings", kind: "message", T: PeerSettings, repeated: true },
    { no: 16, name: "personal_photo", kind: "message", T: Photo, repeated: true },
    { no: 17, name: "profile_photo", kind: "message", T: Photo, repeated: true },
    { no: 18, name: "fallback_photo", kind: "message", T: Photo, repeated: true },
    { no: 19, name: "notify_settings", kind: "message", T: PeerNotifySettings, repeated: true },
    { no: 20, name: "bot_info", kind: "message", T: BotInfo, repeated: true },
    { no: 21, name: "pinned_msg_id", kind: "message", T: Int32Value, repeated: true },
    { no: 22, name: "common_chats_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "folder_id", kind: "message", T: Int32Value, repeated: true },
    { no: 24, name: "ttl_period", kind: "message", T: Int32Value, repeated: true },
    { no: 25, name: "theme_emoticon", kind: "message", T: StringValue, repeated: true },
    { no: 26, name: "private_forward_name", kind: "message", T: StringValue, repeated: true },
    { no: 27, name: "bot_group_admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 28, name: "bot_broadcast_admin_rights", kind: "message", T: ChatAdminRights, repeated: true },
    { no: 29, name: "premium_gifts", kind: "message", T: PremiumGiftOption, repeated: true },
    { no: 30, name: "wallpaper", kind: "message", T: WallPaper, repeated: true },
    { no: 31, name: "stories_FLAGPEERSTORIES", kind: "message", T: PeerStories, repeated: true },
    { no: 32, name: "stories_FLAGUSERSTORIES", kind: "message", T: UserStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserFull {
    return new UserFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserFull {
    return new UserFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserFull {
    return new UserFull().fromJsonString(jsonString, options);
  }

  static equals(a: UserFull | PlainMessage<UserFull> | undefined, b: UserFull | PlainMessage<UserFull> | undefined): boolean {
    return proto3.util.equals(UserFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserFull
 */
export class TLUserFull extends Message$1<TLUserFull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserFull data2 = 1;
   */
  data2: UserFull[] = [];

  constructor(data?: PartialMessage<TLUserFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserFull, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserFull {
    return new TLUserFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserFull {
    return new TLUserFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserFull {
    return new TLUserFull().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserFull | PlainMessage<TLUserFull> | undefined, b: TLUserFull | PlainMessage<TLUserFull> | undefined): boolean {
    return proto3.util.equals(TLUserFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto
 */
export class UserProfilePhoto extends Message$1<UserProfilePhoto> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool has_video = 3;
   */
  hasVideo = false;

  /**
   * @generated from field: bool personal = 4;
   */
  personal = false;

  /**
   * @generated from field: int64 photo_id = 5;
   */
  photoId = protoInt64.zero;

  /**
   * @generated from field: bytes stripped_thumb = 6;
   */
  strippedThumb = new Uint8Array(0);

  /**
   * @generated from field: int32 dc_id = 7;
   */
  dcId = 0;

  constructor(data?: PartialMessage<UserProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "has_video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "personal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "stripped_thumb", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfilePhoto | PlainMessage<UserProfilePhoto> | undefined, b: UserProfilePhoto | PlainMessage<UserProfilePhoto> | undefined): boolean {
    return proto3.util.equals(UserProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserProfilePhotoEmpty
 */
export class TLUserProfilePhotoEmpty extends Message$1<TLUserProfilePhotoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto data2 = 1;
   */
  data2: UserProfilePhoto[] = [];

  constructor(data?: PartialMessage<TLUserProfilePhotoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserProfilePhotoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserProfilePhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserProfilePhotoEmpty {
    return new TLUserProfilePhotoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserProfilePhotoEmpty {
    return new TLUserProfilePhotoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserProfilePhotoEmpty {
    return new TLUserProfilePhotoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserProfilePhotoEmpty | PlainMessage<TLUserProfilePhotoEmpty> | undefined, b: TLUserProfilePhotoEmpty | PlainMessage<TLUserProfilePhotoEmpty> | undefined): boolean {
    return proto3.util.equals(TLUserProfilePhotoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserProfilePhoto
 */
export class TLUserProfilePhoto extends Message$1<TLUserProfilePhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserProfilePhoto data2 = 1;
   */
  data2: UserProfilePhoto[] = [];

  constructor(data?: PartialMessage<TLUserProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserProfilePhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserProfilePhoto {
    return new TLUserProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserProfilePhoto {
    return new TLUserProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserProfilePhoto {
    return new TLUserProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserProfilePhoto | PlainMessage<TLUserProfilePhoto> | undefined, b: TLUserProfilePhoto | PlainMessage<TLUserProfilePhoto> | undefined): boolean {
    return proto3.util.equals(TLUserProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UserStatus
 */
export class UserStatus extends Message$1<UserStatus> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 expires = 3;
   */
  expires = 0;

  /**
   * @generated from field: int32 was_online = 4;
   */
  wasOnline = 0;

  constructor(data?: PartialMessage<UserStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UserStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "was_online", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserStatus {
    return new UserStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserStatus {
    return new UserStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserStatus {
    return new UserStatus().fromJsonString(jsonString, options);
  }

  static equals(a: UserStatus | PlainMessage<UserStatus> | undefined, b: UserStatus | PlainMessage<UserStatus> | undefined): boolean {
    return proto3.util.equals(UserStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusEmpty
 */
export class TLUserStatusEmpty extends Message$1<TLUserStatusEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusEmpty {
    return new TLUserStatusEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusEmpty {
    return new TLUserStatusEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusEmpty {
    return new TLUserStatusEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusEmpty | PlainMessage<TLUserStatusEmpty> | undefined, b: TLUserStatusEmpty | PlainMessage<TLUserStatusEmpty> | undefined): boolean {
    return proto3.util.equals(TLUserStatusEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusOnline
 */
export class TLUserStatusOnline extends Message$1<TLUserStatusOnline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusOnline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusOnline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusOnline {
    return new TLUserStatusOnline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusOnline {
    return new TLUserStatusOnline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusOnline {
    return new TLUserStatusOnline().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusOnline | PlainMessage<TLUserStatusOnline> | undefined, b: TLUserStatusOnline | PlainMessage<TLUserStatusOnline> | undefined): boolean {
    return proto3.util.equals(TLUserStatusOnline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusOffline
 */
export class TLUserStatusOffline extends Message$1<TLUserStatusOffline> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusOffline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusOffline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusOffline {
    return new TLUserStatusOffline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusOffline {
    return new TLUserStatusOffline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusOffline {
    return new TLUserStatusOffline().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusOffline | PlainMessage<TLUserStatusOffline> | undefined, b: TLUserStatusOffline | PlainMessage<TLUserStatusOffline> | undefined): boolean {
    return proto3.util.equals(TLUserStatusOffline, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusRecently
 */
export class TLUserStatusRecently extends Message$1<TLUserStatusRecently> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusRecently>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusRecently";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusRecently {
    return new TLUserStatusRecently().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusRecently {
    return new TLUserStatusRecently().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusRecently {
    return new TLUserStatusRecently().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusRecently | PlainMessage<TLUserStatusRecently> | undefined, b: TLUserStatusRecently | PlainMessage<TLUserStatusRecently> | undefined): boolean {
    return proto3.util.equals(TLUserStatusRecently, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusLastWeek
 */
export class TLUserStatusLastWeek extends Message$1<TLUserStatusLastWeek> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusLastWeek>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusLastWeek";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusLastWeek {
    return new TLUserStatusLastWeek().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusLastWeek {
    return new TLUserStatusLastWeek().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusLastWeek {
    return new TLUserStatusLastWeek().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusLastWeek | PlainMessage<TLUserStatusLastWeek> | undefined, b: TLUserStatusLastWeek | PlainMessage<TLUserStatusLastWeek> | undefined): boolean {
    return proto3.util.equals(TLUserStatusLastWeek, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStatusLastMonth
 */
export class TLUserStatusLastMonth extends Message$1<TLUserStatusLastMonth> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStatus data2 = 1;
   */
  data2: UserStatus[] = [];

  constructor(data?: PartialMessage<TLUserStatusLastMonth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStatusLastMonth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStatusLastMonth {
    return new TLUserStatusLastMonth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStatusLastMonth {
    return new TLUserStatusLastMonth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStatusLastMonth {
    return new TLUserStatusLastMonth().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStatusLastMonth | PlainMessage<TLUserStatusLastMonth> | undefined, b: TLUserStatusLastMonth | PlainMessage<TLUserStatusLastMonth> | undefined): boolean {
    return proto3.util.equals(TLUserStatusLastMonth, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UserStories
 */
export class UserStories extends Message$1<UserStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.Int32Value max_read_id = 4;
   */
  maxReadId: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem stories = 5;
   */
  stories: StoryItem[] = [];

  constructor(data?: PartialMessage<UserStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UserStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "max_read_id", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "stories", kind: "message", T: StoryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserStories {
    return new UserStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserStories {
    return new UserStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserStories {
    return new UserStories().fromJsonString(jsonString, options);
  }

  static equals(a: UserStories | PlainMessage<UserStories> | undefined, b: UserStories | PlainMessage<UserStories> | undefined): boolean {
    return proto3.util.equals(UserStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUserStories
 */
export class TLUserStories extends Message$1<TLUserStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStories data2 = 1;
   */
  data2: UserStories[] = [];

  constructor(data?: PartialMessage<TLUserStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUserStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UserStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUserStories {
    return new TLUserStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUserStories {
    return new TLUserStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUserStories {
    return new TLUserStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLUserStories | PlainMessage<TLUserStories> | undefined, b: TLUserStories | PlainMessage<TLUserStories> | undefined): boolean {
    return proto3.util.equals(TLUserStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Username
 */
export class Username extends Message$1<Username> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool editable = 3;
   */
  editable = false;

  /**
   * @generated from field: bool active = 4;
   */
  active = false;

  /**
   * @generated from field: string username = 5;
   */
  username = "";

  constructor(data?: PartialMessage<Username>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Username";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "editable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Username {
    return new Username().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Username {
    return new Username().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Username {
    return new Username().fromJsonString(jsonString, options);
  }

  static equals(a: Username | PlainMessage<Username> | undefined, b: Username | PlainMessage<Username> | undefined): boolean {
    return proto3.util.equals(Username, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUsername
 */
export class TLUsername extends Message$1<TLUsername> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Username data2 = 1;
   */
  data2: Username[] = [];

  constructor(data?: PartialMessage<TLUsername>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUsername";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Username, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUsername {
    return new TLUsername().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUsername {
    return new TLUsername().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUsername {
    return new TLUsername().fromJsonString(jsonString, options);
  }

  static equals(a: TLUsername | PlainMessage<TLUsername> | undefined, b: TLUsername | PlainMessage<TLUsername> | undefined): boolean {
    return proto3.util.equals(TLUsername, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.VideoSize
 */
export class VideoSize extends Message$1<VideoSize> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: int32 w = 4;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 5;
   */
  h = 0;

  /**
   * @generated from field: int32 size2 = 6;
   */
  size2 = 0;

  /**
   * @generated from field: repeated google.protobuf.DoubleValue video_start_ts = 7;
   */
  videoStartTs: DoubleValue[] = [];

  /**
   * @generated from field: int64 emoji_id = 8;
   */
  emojiId = protoInt64.zero;

  /**
   * @generated from field: int32 background_colors = 9;
   */
  backgroundColors = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputStickerSet stickerset = 10;
   */
  stickerset: InputStickerSet[] = [];

  /**
   * @generated from field: int64 sticker_id = 11;
   */
  stickerId = protoInt64.zero;

  constructor(data?: PartialMessage<VideoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.VideoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "video_start_ts", kind: "message", T: DoubleValue, repeated: true },
    { no: 8, name: "emoji_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "background_colors", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "stickerset", kind: "message", T: InputStickerSet, repeated: true },
    { no: 11, name: "sticker_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSize {
    return new VideoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSize {
    return new VideoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSize {
    return new VideoSize().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSize | PlainMessage<VideoSize> | undefined, b: VideoSize | PlainMessage<VideoSize> | undefined): boolean {
    return proto3.util.equals(VideoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLVideoSize
 */
export class TLVideoSize extends Message$1<TLVideoSize> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize data2 = 1;
   */
  data2: VideoSize[] = [];

  constructor(data?: PartialMessage<TLVideoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLVideoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: VideoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLVideoSize {
    return new TLVideoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLVideoSize {
    return new TLVideoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLVideoSize {
    return new TLVideoSize().fromJsonString(jsonString, options);
  }

  static equals(a: TLVideoSize | PlainMessage<TLVideoSize> | undefined, b: TLVideoSize | PlainMessage<TLVideoSize> | undefined): boolean {
    return proto3.util.equals(TLVideoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLVideoSizeEmojiMarkup
 */
export class TLVideoSizeEmojiMarkup extends Message$1<TLVideoSizeEmojiMarkup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize data2 = 1;
   */
  data2: VideoSize[] = [];

  constructor(data?: PartialMessage<TLVideoSizeEmojiMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLVideoSizeEmojiMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: VideoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLVideoSizeEmojiMarkup {
    return new TLVideoSizeEmojiMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLVideoSizeEmojiMarkup {
    return new TLVideoSizeEmojiMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLVideoSizeEmojiMarkup {
    return new TLVideoSizeEmojiMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: TLVideoSizeEmojiMarkup | PlainMessage<TLVideoSizeEmojiMarkup> | undefined, b: TLVideoSizeEmojiMarkup | PlainMessage<TLVideoSizeEmojiMarkup> | undefined): boolean {
    return proto3.util.equals(TLVideoSizeEmojiMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLVideoSizeStickerMarkup
 */
export class TLVideoSizeStickerMarkup extends Message$1<TLVideoSizeStickerMarkup> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.VideoSize data2 = 1;
   */
  data2: VideoSize[] = [];

  constructor(data?: PartialMessage<TLVideoSizeStickerMarkup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLVideoSizeStickerMarkup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: VideoSize, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLVideoSizeStickerMarkup {
    return new TLVideoSizeStickerMarkup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLVideoSizeStickerMarkup {
    return new TLVideoSizeStickerMarkup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLVideoSizeStickerMarkup {
    return new TLVideoSizeStickerMarkup().fromJsonString(jsonString, options);
  }

  static equals(a: TLVideoSizeStickerMarkup | PlainMessage<TLVideoSizeStickerMarkup> | undefined, b: TLVideoSizeStickerMarkup | PlainMessage<TLVideoSizeStickerMarkup> | undefined): boolean {
    return proto3.util.equals(TLVideoSizeStickerMarkup, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Void
 */
export class Void extends Message$1<Void> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<Void>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Void";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Void {
    return new Void().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Void {
    return new Void().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Void {
    return new Void().fromJsonString(jsonString, options);
  }

  static equals(a: Void | PlainMessage<Void> | undefined, b: Void | PlainMessage<Void> | undefined): boolean {
    return proto3.util.equals(Void, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLVoid
 */
export class TLVoid extends Message$1<TLVoid> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Void data2 = 1;
   */
  data2: Void[] = [];

  constructor(data?: PartialMessage<TLVoid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLVoid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: Void, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLVoid {
    return new TLVoid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLVoid {
    return new TLVoid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLVoid {
    return new TLVoid().fromJsonString(jsonString, options);
  }

  static equals(a: TLVoid | PlainMessage<TLVoid> | undefined, b: TLVoid | PlainMessage<TLVoid> | undefined): boolean {
    return proto3.util.equals(TLVoid, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WallPaper
 */
export class WallPaper extends Message$1<WallPaper> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool creator = 4;
   */
  creator = false;

  /**
   * @generated from field: bool default = 5;
   */
  default = false;

  /**
   * @generated from field: bool pattern = 6;
   */
  pattern = false;

  /**
   * @generated from field: bool dark = 7;
   */
  dark = false;

  /**
   * @generated from field: int64 access_hash = 8;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string slug = 9;
   */
  slug = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 10;
   */
  document: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaperSettings settings = 11;
   */
  settings: WallPaperSettings[] = [];

  constructor(data?: PartialMessage<WallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "creator", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "pattern", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "dark", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "document", kind: "message", T: Document, repeated: true },
    { no: 11, name: "settings", kind: "message", T: WallPaperSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WallPaper {
    return new WallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WallPaper {
    return new WallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WallPaper {
    return new WallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: WallPaper | PlainMessage<WallPaper> | undefined, b: WallPaper | PlainMessage<WallPaper> | undefined): boolean {
    return proto3.util.equals(WallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWallPaper
 */
export class TLWallPaper extends Message$1<TLWallPaper> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper data2 = 1;
   */
  data2: WallPaper[] = [];

  constructor(data?: PartialMessage<TLWallPaper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWallPaper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWallPaper {
    return new TLWallPaper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWallPaper {
    return new TLWallPaper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWallPaper {
    return new TLWallPaper().fromJsonString(jsonString, options);
  }

  static equals(a: TLWallPaper | PlainMessage<TLWallPaper> | undefined, b: TLWallPaper | PlainMessage<TLWallPaper> | undefined): boolean {
    return proto3.util.equals(TLWallPaper, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWallPaperNoFile
 */
export class TLWallPaperNoFile extends Message$1<TLWallPaperNoFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper data2 = 1;
   */
  data2: WallPaper[] = [];

  constructor(data?: PartialMessage<TLWallPaperNoFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWallPaperNoFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWallPaperNoFile {
    return new TLWallPaperNoFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWallPaperNoFile {
    return new TLWallPaperNoFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWallPaperNoFile {
    return new TLWallPaperNoFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLWallPaperNoFile | PlainMessage<TLWallPaperNoFile> | undefined, b: TLWallPaperNoFile | PlainMessage<TLWallPaperNoFile> | undefined): boolean {
    return proto3.util.equals(TLWallPaperNoFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WallPaperSettings
 */
export class WallPaperSettings extends Message$1<WallPaperSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool blur = 3;
   */
  blur = false;

  /**
   * @generated from field: bool motion = 4;
   */
  motion = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value background_color = 5;
   */
  backgroundColor: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value second_background_color = 6;
   */
  secondBackgroundColor: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value third_background_color = 7;
   */
  thirdBackgroundColor: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value fourth_background_color = 8;
   */
  fourthBackgroundColor: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value intensity = 9;
   */
  intensity: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value rotation = 10;
   */
  rotation: Int32Value[] = [];

  constructor(data?: PartialMessage<WallPaperSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WallPaperSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "blur", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "motion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "background_color", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "second_background_color", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "third_background_color", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "fourth_background_color", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "intensity", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "rotation", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WallPaperSettings {
    return new WallPaperSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WallPaperSettings {
    return new WallPaperSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WallPaperSettings {
    return new WallPaperSettings().fromJsonString(jsonString, options);
  }

  static equals(a: WallPaperSettings | PlainMessage<WallPaperSettings> | undefined, b: WallPaperSettings | PlainMessage<WallPaperSettings> | undefined): boolean {
    return proto3.util.equals(WallPaperSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWallPaperSettings
 */
export class TLWallPaperSettings extends Message$1<TLWallPaperSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaperSettings data2 = 1;
   */
  data2: WallPaperSettings[] = [];

  constructor(data?: PartialMessage<TLWallPaperSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWallPaperSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WallPaperSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWallPaperSettings {
    return new TLWallPaperSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWallPaperSettings {
    return new TLWallPaperSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWallPaperSettings {
    return new TLWallPaperSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLWallPaperSettings | PlainMessage<TLWallPaperSettings> | undefined, b: TLWallPaperSettings | PlainMessage<TLWallPaperSettings> | undefined): boolean {
    return proto3.util.equals(TLWallPaperSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebAuthorization
 */
export class WebAuthorization extends Message$1<WebAuthorization> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: int64 bot_id = 4;
   */
  botId = protoInt64.zero;

  /**
   * @generated from field: string domain = 5;
   */
  domain = "";

  /**
   * @generated from field: string browser = 6;
   */
  browser = "";

  /**
   * @generated from field: string platform = 7;
   */
  platform = "";

  /**
   * @generated from field: int32 date_created = 8;
   */
  dateCreated = 0;

  /**
   * @generated from field: int32 date_active = 9;
   */
  dateActive = 0;

  /**
   * @generated from field: string ip = 10;
   */
  ip = "";

  /**
   * @generated from field: string region = 11;
   */
  region = "";

  constructor(data?: PartialMessage<WebAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "browser", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "date_created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "date_active", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthorization {
    return new WebAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthorization {
    return new WebAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthorization {
    return new WebAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthorization | PlainMessage<WebAuthorization> | undefined, b: WebAuthorization | PlainMessage<WebAuthorization> | undefined): boolean {
    return proto3.util.equals(WebAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebAuthorization
 */
export class TLWebAuthorization extends Message$1<TLWebAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebAuthorization data2 = 1;
   */
  data2: WebAuthorization[] = [];

  constructor(data?: PartialMessage<TLWebAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebAuthorization {
    return new TLWebAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebAuthorization {
    return new TLWebAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebAuthorization {
    return new TLWebAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebAuthorization | PlainMessage<TLWebAuthorization> | undefined, b: TLWebAuthorization | PlainMessage<TLWebAuthorization> | undefined): boolean {
    return proto3.util.equals(TLWebAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebDocument
 */
export class WebDocument extends Message$1<WebDocument> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: int64 access_hash = 4;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: int32 size2 = 5;
   */
  size2 = 0;

  /**
   * @generated from field: string mime_type = 6;
   */
  mimeType = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DocumentAttribute attributes = 7;
   */
  attributes: DocumentAttribute[] = [];

  constructor(data?: PartialMessage<WebDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "attributes", kind: "message", T: DocumentAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebDocument {
    return new WebDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebDocument {
    return new WebDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebDocument {
    return new WebDocument().fromJsonString(jsonString, options);
  }

  static equals(a: WebDocument | PlainMessage<WebDocument> | undefined, b: WebDocument | PlainMessage<WebDocument> | undefined): boolean {
    return proto3.util.equals(WebDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebDocument
 */
export class TLWebDocument extends Message$1<TLWebDocument> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument data2 = 1;
   */
  data2: WebDocument[] = [];

  constructor(data?: PartialMessage<TLWebDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebDocument {
    return new TLWebDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebDocument {
    return new TLWebDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebDocument {
    return new TLWebDocument().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebDocument | PlainMessage<TLWebDocument> | undefined, b: TLWebDocument | PlainMessage<TLWebDocument> | undefined): boolean {
    return proto3.util.equals(TLWebDocument, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebDocumentNoProxy
 */
export class TLWebDocumentNoProxy extends Message$1<TLWebDocumentNoProxy> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument data2 = 1;
   */
  data2: WebDocument[] = [];

  constructor(data?: PartialMessage<TLWebDocumentNoProxy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebDocumentNoProxy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebDocument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebDocumentNoProxy {
    return new TLWebDocumentNoProxy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebDocumentNoProxy {
    return new TLWebDocumentNoProxy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebDocumentNoProxy {
    return new TLWebDocumentNoProxy().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebDocumentNoProxy | PlainMessage<TLWebDocumentNoProxy> | undefined, b: TLWebDocumentNoProxy | PlainMessage<TLWebDocumentNoProxy> | undefined): boolean {
    return proto3.util.equals(TLWebDocumentNoProxy, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebPage
 */
export class WebPage extends Message$1<WebPage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 date = 4;
   */
  date = 0;

  /**
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * @generated from field: string display_url = 6;
   */
  displayUrl = "";

  /**
   * @generated from field: int32 hash = 7;
   */
  hash = 0;

  /**
   * @generated from field: repeated google.protobuf.StringValue type = 8;
   */
  type: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue site_name = 9;
   */
  siteName: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 10;
   */
  title: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue description = 11;
   */
  description: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 12;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue embed_url = 13;
   */
  embedUrl: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue embed_type = 14;
   */
  embedType: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value embed_width = 15;
   */
  embedWidth: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value embed_height = 16;
   */
  embedHeight: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value duration = 17;
   */
  duration: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue author = 18;
   */
  author: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 19;
   */
  document: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Page cached_page = 20;
   */
  cachedPage: Page[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPageAttribute attributes = 21;
   */
  attributes: WebPageAttribute[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value cached_page_views = 22;
   */
  cachedPageViews: Int32Value[] = [];

  constructor(data?: PartialMessage<WebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "display_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "type", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "site_name", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "title", kind: "message", T: StringValue, repeated: true },
    { no: 11, name: "description", kind: "message", T: StringValue, repeated: true },
    { no: 12, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 13, name: "embed_url", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "embed_type", kind: "message", T: StringValue, repeated: true },
    { no: 15, name: "embed_width", kind: "message", T: Int32Value, repeated: true },
    { no: 16, name: "embed_height", kind: "message", T: Int32Value, repeated: true },
    { no: 17, name: "duration", kind: "message", T: Int32Value, repeated: true },
    { no: 18, name: "author", kind: "message", T: StringValue, repeated: true },
    { no: 19, name: "document", kind: "message", T: Document, repeated: true },
    { no: 20, name: "cached_page", kind: "message", T: Page, repeated: true },
    { no: 21, name: "attributes", kind: "message", T: WebPageAttribute, repeated: true },
    { no: 22, name: "cached_page_views", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebPage {
    return new WebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebPage {
    return new WebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebPage {
    return new WebPage().fromJsonString(jsonString, options);
  }

  static equals(a: WebPage | PlainMessage<WebPage> | undefined, b: WebPage | PlainMessage<WebPage> | undefined): boolean {
    return proto3.util.equals(WebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPageEmpty
 */
export class TLWebPageEmpty extends Message$1<TLWebPageEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage data2 = 1;
   */
  data2: WebPage[] = [];

  constructor(data?: PartialMessage<TLWebPageEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPageEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPageEmpty {
    return new TLWebPageEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPageEmpty {
    return new TLWebPageEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPageEmpty {
    return new TLWebPageEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPageEmpty | PlainMessage<TLWebPageEmpty> | undefined, b: TLWebPageEmpty | PlainMessage<TLWebPageEmpty> | undefined): boolean {
    return proto3.util.equals(TLWebPageEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPagePending
 */
export class TLWebPagePending extends Message$1<TLWebPagePending> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage data2 = 1;
   */
  data2: WebPage[] = [];

  constructor(data?: PartialMessage<TLWebPagePending>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPagePending";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPagePending {
    return new TLWebPagePending().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPagePending {
    return new TLWebPagePending().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPagePending {
    return new TLWebPagePending().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPagePending | PlainMessage<TLWebPagePending> | undefined, b: TLWebPagePending | PlainMessage<TLWebPagePending> | undefined): boolean {
    return proto3.util.equals(TLWebPagePending, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPage
 */
export class TLWebPage extends Message$1<TLWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage data2 = 1;
   */
  data2: WebPage[] = [];

  constructor(data?: PartialMessage<TLWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPage {
    return new TLWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPage {
    return new TLWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPage {
    return new TLWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPage | PlainMessage<TLWebPage> | undefined, b: TLWebPage | PlainMessage<TLWebPage> | undefined): boolean {
    return proto3.util.equals(TLWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPageNotModified
 */
export class TLWebPageNotModified extends Message$1<TLWebPageNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage data2 = 1;
   */
  data2: WebPage[] = [];

  constructor(data?: PartialMessage<TLWebPageNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPageNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPageNotModified {
    return new TLWebPageNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPageNotModified {
    return new TLWebPageNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPageNotModified {
    return new TLWebPageNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPageNotModified | PlainMessage<TLWebPageNotModified> | undefined, b: TLWebPageNotModified | PlainMessage<TLWebPageNotModified> | undefined): boolean {
    return proto3.util.equals(TLWebPageNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebPageAttribute
 */
export class WebPageAttribute extends Message$1<WebPageAttribute> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document documents = 3;
   */
  documents: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ThemeSettings settings = 4;
   */
  settings: ThemeSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 5;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: int32 id = 6;
   */
  id = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem story = 7;
   */
  story: StoryItem[] = [];

  /**
   * @generated from field: int64 user_id = 8;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<WebPageAttribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebPageAttribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "documents", kind: "message", T: Document, repeated: true },
    { no: 4, name: "settings", kind: "message", T: ThemeSettings, repeated: true },
    { no: 5, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 6, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "story", kind: "message", T: StoryItem, repeated: true },
    { no: 8, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebPageAttribute {
    return new WebPageAttribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebPageAttribute {
    return new WebPageAttribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebPageAttribute {
    return new WebPageAttribute().fromJsonString(jsonString, options);
  }

  static equals(a: WebPageAttribute | PlainMessage<WebPageAttribute> | undefined, b: WebPageAttribute | PlainMessage<WebPageAttribute> | undefined): boolean {
    return proto3.util.equals(WebPageAttribute, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPageAttributeTheme
 */
export class TLWebPageAttributeTheme extends Message$1<TLWebPageAttributeTheme> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPageAttribute data2 = 1;
   */
  data2: WebPageAttribute[] = [];

  constructor(data?: PartialMessage<TLWebPageAttributeTheme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPageAttributeTheme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPageAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPageAttributeTheme {
    return new TLWebPageAttributeTheme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPageAttributeTheme {
    return new TLWebPageAttributeTheme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPageAttributeTheme {
    return new TLWebPageAttributeTheme().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPageAttributeTheme | PlainMessage<TLWebPageAttributeTheme> | undefined, b: TLWebPageAttributeTheme | PlainMessage<TLWebPageAttributeTheme> | undefined): boolean {
    return proto3.util.equals(TLWebPageAttributeTheme, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebPageAttributeStory
 */
export class TLWebPageAttributeStory extends Message$1<TLWebPageAttributeStory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPageAttribute data2 = 1;
   */
  data2: WebPageAttribute[] = [];

  constructor(data?: PartialMessage<TLWebPageAttributeStory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebPageAttributeStory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebPageAttribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebPageAttributeStory {
    return new TLWebPageAttributeStory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebPageAttributeStory {
    return new TLWebPageAttributeStory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebPageAttributeStory {
    return new TLWebPageAttributeStory().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebPageAttributeStory | PlainMessage<TLWebPageAttributeStory> | undefined, b: TLWebPageAttributeStory | PlainMessage<TLWebPageAttributeStory> | undefined): boolean {
    return proto3.util.equals(TLWebPageAttributeStory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebViewMessageSent
 */
export class WebViewMessageSent extends Message$1<WebViewMessageSent> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InputBotInlineMessageID msg_id = 3;
   */
  msgId: InputBotInlineMessageID[] = [];

  constructor(data?: PartialMessage<WebViewMessageSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebViewMessageSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "msg_id", kind: "message", T: InputBotInlineMessageID, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebViewMessageSent {
    return new WebViewMessageSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebViewMessageSent {
    return new WebViewMessageSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebViewMessageSent {
    return new WebViewMessageSent().fromJsonString(jsonString, options);
  }

  static equals(a: WebViewMessageSent | PlainMessage<WebViewMessageSent> | undefined, b: WebViewMessageSent | PlainMessage<WebViewMessageSent> | undefined): boolean {
    return proto3.util.equals(WebViewMessageSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebViewMessageSent
 */
export class TLWebViewMessageSent extends Message$1<TLWebViewMessageSent> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebViewMessageSent data2 = 1;
   */
  data2: WebViewMessageSent[] = [];

  constructor(data?: PartialMessage<TLWebViewMessageSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebViewMessageSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebViewMessageSent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebViewMessageSent {
    return new TLWebViewMessageSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebViewMessageSent {
    return new TLWebViewMessageSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebViewMessageSent {
    return new TLWebViewMessageSent().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebViewMessageSent | PlainMessage<TLWebViewMessageSent> | undefined, b: TLWebViewMessageSent | PlainMessage<TLWebViewMessageSent> | undefined): boolean {
    return proto3.util.equals(TLWebViewMessageSent, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.WebViewResult
 */
export class WebViewResult extends Message$1<WebViewResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 query_id = 3;
   */
  queryId = protoInt64.zero;

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  constructor(data?: PartialMessage<WebViewResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.WebViewResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebViewResult {
    return new WebViewResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebViewResult {
    return new WebViewResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebViewResult {
    return new WebViewResult().fromJsonString(jsonString, options);
  }

  static equals(a: WebViewResult | PlainMessage<WebViewResult> | undefined, b: WebViewResult | PlainMessage<WebViewResult> | undefined): boolean {
    return proto3.util.equals(WebViewResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLWebViewResultUrl
 */
export class TLWebViewResultUrl extends Message$1<TLWebViewResultUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebViewResult data2 = 1;
   */
  data2: WebViewResult[] = [];

  constructor(data?: PartialMessage<TLWebViewResultUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLWebViewResultUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: WebViewResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLWebViewResultUrl {
    return new TLWebViewResultUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLWebViewResultUrl {
    return new TLWebViewResultUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLWebViewResultUrl {
    return new TLWebViewResultUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLWebViewResultUrl | PlainMessage<TLWebViewResultUrl> | undefined, b: TLWebViewResultUrl | PlainMessage<TLWebViewResultUrl> | undefined): boolean {
    return proto3.util.equals(TLWebViewResultUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizationForm
 */
export class AccountAuthorizationForm extends Message$1<AccountAuthorizationForm> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureRequiredType required_types = 3;
   */
  requiredTypes: SecureRequiredType[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValue values = 4;
   */
  values: SecureValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureValueError errors = 5;
   */
  errors: SecureValueError[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue privacy_policy_url = 7;
   */
  privacyPolicyUrl: StringValue[] = [];

  constructor(data?: PartialMessage<AccountAuthorizationForm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizationForm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "required_types", kind: "message", T: SecureRequiredType, repeated: true },
    { no: 4, name: "values", kind: "message", T: SecureValue, repeated: true },
    { no: 5, name: "errors", kind: "message", T: SecureValueError, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "privacy_policy_url", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAuthorizationForm {
    return new AccountAuthorizationForm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAuthorizationForm {
    return new AccountAuthorizationForm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAuthorizationForm {
    return new AccountAuthorizationForm().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAuthorizationForm | PlainMessage<AccountAuthorizationForm> | undefined, b: AccountAuthorizationForm | PlainMessage<AccountAuthorizationForm> | undefined): boolean {
    return proto3.util.equals(AccountAuthorizationForm, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountAuthorizationForm
 */
export class TLAccountAuthorizationForm extends Message$1<TLAccountAuthorizationForm> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizationForm data2 = 1;
   */
  data2: AccountAuthorizationForm[] = [];

  constructor(data?: PartialMessage<TLAccountAuthorizationForm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountAuthorizationForm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountAuthorizationForm, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountAuthorizationForm {
    return new TLAccountAuthorizationForm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountAuthorizationForm {
    return new TLAccountAuthorizationForm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountAuthorizationForm {
    return new TLAccountAuthorizationForm().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountAuthorizationForm | PlainMessage<TLAccountAuthorizationForm> | undefined, b: TLAccountAuthorizationForm | PlainMessage<TLAccountAuthorizationForm> | undefined): boolean {
    return proto3.util.equals(TLAccountAuthorizationForm, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizations
 */
export class AccountAuthorizations extends Message$1<AccountAuthorizations> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 authorization_ttl_days = 3;
   */
  authorizationTtlDays = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Authorization authorizations = 4;
   */
  authorizations: Authorization[] = [];

  constructor(data?: PartialMessage<AccountAuthorizations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "authorization_ttl_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "authorizations", kind: "message", T: Authorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAuthorizations {
    return new AccountAuthorizations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAuthorizations {
    return new AccountAuthorizations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAuthorizations {
    return new AccountAuthorizations().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAuthorizations | PlainMessage<AccountAuthorizations> | undefined, b: AccountAuthorizations | PlainMessage<AccountAuthorizations> | undefined): boolean {
    return proto3.util.equals(AccountAuthorizations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountAuthorizations
 */
export class TLAccountAuthorizations extends Message$1<TLAccountAuthorizations> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountAuthorizations data2 = 1;
   */
  data2: AccountAuthorizations[] = [];

  constructor(data?: PartialMessage<TLAccountAuthorizations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountAuthorizations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountAuthorizations, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountAuthorizations {
    return new TLAccountAuthorizations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountAuthorizations {
    return new TLAccountAuthorizations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountAuthorizations {
    return new TLAccountAuthorizations().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountAuthorizations | PlainMessage<TLAccountAuthorizations> | undefined, b: TLAccountAuthorizations | PlainMessage<TLAccountAuthorizations> | undefined): boolean {
    return proto3.util.equals(TLAccountAuthorizations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountAutoDownloadSettings
 */
export class AccountAutoDownloadSettings extends Message$1<AccountAutoDownloadSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings low = 3;
   */
  low: AutoDownloadSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings medium = 4;
   */
  medium: AutoDownloadSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoDownloadSettings high = 5;
   */
  high: AutoDownloadSettings[] = [];

  constructor(data?: PartialMessage<AccountAutoDownloadSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountAutoDownloadSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "low", kind: "message", T: AutoDownloadSettings, repeated: true },
    { no: 4, name: "medium", kind: "message", T: AutoDownloadSettings, repeated: true },
    { no: 5, name: "high", kind: "message", T: AutoDownloadSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAutoDownloadSettings {
    return new AccountAutoDownloadSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAutoDownloadSettings {
    return new AccountAutoDownloadSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAutoDownloadSettings {
    return new AccountAutoDownloadSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAutoDownloadSettings | PlainMessage<AccountAutoDownloadSettings> | undefined, b: AccountAutoDownloadSettings | PlainMessage<AccountAutoDownloadSettings> | undefined): boolean {
    return proto3.util.equals(AccountAutoDownloadSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountAutoDownloadSettings
 */
export class TLAccountAutoDownloadSettings extends Message$1<TLAccountAutoDownloadSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountAutoDownloadSettings data2 = 1;
   */
  data2: AccountAutoDownloadSettings[] = [];

  constructor(data?: PartialMessage<TLAccountAutoDownloadSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountAutoDownloadSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountAutoDownloadSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountAutoDownloadSettings {
    return new TLAccountAutoDownloadSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountAutoDownloadSettings {
    return new TLAccountAutoDownloadSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountAutoDownloadSettings {
    return new TLAccountAutoDownloadSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountAutoDownloadSettings | PlainMessage<TLAccountAutoDownloadSettings> | undefined, b: TLAccountAutoDownloadSettings | PlainMessage<TLAccountAutoDownloadSettings> | undefined): boolean {
    return proto3.util.equals(TLAccountAutoDownloadSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountAutoSaveSettings
 */
export class AccountAutoSaveSettings extends Message$1<AccountAutoSaveSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings users_settings = 3;
   */
  usersSettings: AutoSaveSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings chats_settings = 4;
   */
  chatsSettings: AutoSaveSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveSettings broadcasts_settings = 5;
   */
  broadcastsSettings: AutoSaveSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AutoSaveException exceptions = 6;
   */
  exceptions: AutoSaveException[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 7;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 8;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<AccountAutoSaveSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountAutoSaveSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "users_settings", kind: "message", T: AutoSaveSettings, repeated: true },
    { no: 4, name: "chats_settings", kind: "message", T: AutoSaveSettings, repeated: true },
    { no: 5, name: "broadcasts_settings", kind: "message", T: AutoSaveSettings, repeated: true },
    { no: 6, name: "exceptions", kind: "message", T: AutoSaveException, repeated: true },
    { no: 7, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 8, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAutoSaveSettings {
    return new AccountAutoSaveSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAutoSaveSettings {
    return new AccountAutoSaveSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAutoSaveSettings {
    return new AccountAutoSaveSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAutoSaveSettings | PlainMessage<AccountAutoSaveSettings> | undefined, b: AccountAutoSaveSettings | PlainMessage<AccountAutoSaveSettings> | undefined): boolean {
    return proto3.util.equals(AccountAutoSaveSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountAutoSaveSettings
 */
export class TLAccountAutoSaveSettings extends Message$1<TLAccountAutoSaveSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountAutoSaveSettings data2 = 1;
   */
  data2: AccountAutoSaveSettings[] = [];

  constructor(data?: PartialMessage<TLAccountAutoSaveSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountAutoSaveSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountAutoSaveSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountAutoSaveSettings {
    return new TLAccountAutoSaveSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountAutoSaveSettings {
    return new TLAccountAutoSaveSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountAutoSaveSettings {
    return new TLAccountAutoSaveSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountAutoSaveSettings | PlainMessage<TLAccountAutoSaveSettings> | undefined, b: TLAccountAutoSaveSettings | PlainMessage<TLAccountAutoSaveSettings> | undefined): boolean {
    return proto3.util.equals(TLAccountAutoSaveSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountContentSettings
 */
export class AccountContentSettings extends Message$1<AccountContentSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool sensitive_enabled = 3;
   */
  sensitiveEnabled = false;

  /**
   * @generated from field: bool sensitive_can_change = 4;
   */
  sensitiveCanChange = false;

  constructor(data?: PartialMessage<AccountContentSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountContentSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "sensitive_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "sensitive_can_change", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountContentSettings {
    return new AccountContentSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountContentSettings {
    return new AccountContentSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountContentSettings {
    return new AccountContentSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccountContentSettings | PlainMessage<AccountContentSettings> | undefined, b: AccountContentSettings | PlainMessage<AccountContentSettings> | undefined): boolean {
    return proto3.util.equals(AccountContentSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountContentSettings
 */
export class TLAccountContentSettings extends Message$1<TLAccountContentSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountContentSettings data2 = 1;
   */
  data2: AccountContentSettings[] = [];

  constructor(data?: PartialMessage<TLAccountContentSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountContentSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountContentSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountContentSettings {
    return new TLAccountContentSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountContentSettings {
    return new TLAccountContentSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountContentSettings {
    return new TLAccountContentSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountContentSettings | PlainMessage<TLAccountContentSettings> | undefined, b: TLAccountContentSettings | PlainMessage<TLAccountContentSettings> | undefined): boolean {
    return proto3.util.equals(TLAccountContentSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountEmailVerified
 */
export class AccountEmailVerified extends Message$1<AccountEmailVerified> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCode sent_code = 4;
   */
  sentCode: AuthSentCode[] = [];

  constructor(data?: PartialMessage<AccountEmailVerified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountEmailVerified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sent_code", kind: "message", T: AuthSentCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountEmailVerified {
    return new AccountEmailVerified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountEmailVerified {
    return new AccountEmailVerified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountEmailVerified {
    return new AccountEmailVerified().fromJsonString(jsonString, options);
  }

  static equals(a: AccountEmailVerified | PlainMessage<AccountEmailVerified> | undefined, b: AccountEmailVerified | PlainMessage<AccountEmailVerified> | undefined): boolean {
    return proto3.util.equals(AccountEmailVerified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountEmailVerified
 */
export class TLAccountEmailVerified extends Message$1<TLAccountEmailVerified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountEmailVerified data2 = 1;
   */
  data2: AccountEmailVerified[] = [];

  constructor(data?: PartialMessage<TLAccountEmailVerified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountEmailVerified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountEmailVerified, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountEmailVerified {
    return new TLAccountEmailVerified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountEmailVerified {
    return new TLAccountEmailVerified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountEmailVerified {
    return new TLAccountEmailVerified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountEmailVerified | PlainMessage<TLAccountEmailVerified> | undefined, b: TLAccountEmailVerified | PlainMessage<TLAccountEmailVerified> | undefined): boolean {
    return proto3.util.equals(TLAccountEmailVerified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountEmailVerifiedLogin
 */
export class TLAccountEmailVerifiedLogin extends Message$1<TLAccountEmailVerifiedLogin> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountEmailVerified data2 = 1;
   */
  data2: AccountEmailVerified[] = [];

  constructor(data?: PartialMessage<TLAccountEmailVerifiedLogin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountEmailVerifiedLogin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountEmailVerified, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountEmailVerifiedLogin {
    return new TLAccountEmailVerifiedLogin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountEmailVerifiedLogin {
    return new TLAccountEmailVerifiedLogin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountEmailVerifiedLogin {
    return new TLAccountEmailVerifiedLogin().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountEmailVerifiedLogin | PlainMessage<TLAccountEmailVerifiedLogin> | undefined, b: TLAccountEmailVerifiedLogin | PlainMessage<TLAccountEmailVerifiedLogin> | undefined): boolean {
    return proto3.util.equals(TLAccountEmailVerifiedLogin, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountEmojiStatuses
 */
export class AccountEmojiStatuses extends Message$1<AccountEmojiStatuses> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiStatus statuses = 4;
   */
  statuses: EmojiStatus[] = [];

  constructor(data?: PartialMessage<AccountEmojiStatuses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountEmojiStatuses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "statuses", kind: "message", T: EmojiStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountEmojiStatuses {
    return new AccountEmojiStatuses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountEmojiStatuses {
    return new AccountEmojiStatuses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountEmojiStatuses {
    return new AccountEmojiStatuses().fromJsonString(jsonString, options);
  }

  static equals(a: AccountEmojiStatuses | PlainMessage<AccountEmojiStatuses> | undefined, b: AccountEmojiStatuses | PlainMessage<AccountEmojiStatuses> | undefined): boolean {
    return proto3.util.equals(AccountEmojiStatuses, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountEmojiStatusesNotModified
 */
export class TLAccountEmojiStatusesNotModified extends Message$1<TLAccountEmojiStatusesNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountEmojiStatuses data2 = 1;
   */
  data2: AccountEmojiStatuses[] = [];

  constructor(data?: PartialMessage<TLAccountEmojiStatusesNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountEmojiStatusesNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountEmojiStatuses, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountEmojiStatusesNotModified {
    return new TLAccountEmojiStatusesNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountEmojiStatusesNotModified {
    return new TLAccountEmojiStatusesNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountEmojiStatusesNotModified {
    return new TLAccountEmojiStatusesNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountEmojiStatusesNotModified | PlainMessage<TLAccountEmojiStatusesNotModified> | undefined, b: TLAccountEmojiStatusesNotModified | PlainMessage<TLAccountEmojiStatusesNotModified> | undefined): boolean {
    return proto3.util.equals(TLAccountEmojiStatusesNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountEmojiStatuses
 */
export class TLAccountEmojiStatuses extends Message$1<TLAccountEmojiStatuses> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountEmojiStatuses data2 = 1;
   */
  data2: AccountEmojiStatuses[] = [];

  constructor(data?: PartialMessage<TLAccountEmojiStatuses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountEmojiStatuses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountEmojiStatuses, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountEmojiStatuses {
    return new TLAccountEmojiStatuses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountEmojiStatuses {
    return new TLAccountEmojiStatuses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountEmojiStatuses {
    return new TLAccountEmojiStatuses().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountEmojiStatuses | PlainMessage<TLAccountEmojiStatuses> | undefined, b: TLAccountEmojiStatuses | PlainMessage<TLAccountEmojiStatuses> | undefined): boolean {
    return proto3.util.equals(TLAccountEmojiStatuses, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountPassword
 */
export class AccountPassword extends Message$1<AccountPassword> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool has_recovery = 3;
   */
  hasRecovery = false;

  /**
   * @generated from field: bool has_secure_values = 4;
   */
  hasSecureValues = false;

  /**
   * @generated from field: bool has_password = 5;
   */
  hasPassword = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo current_algo = 6;
   */
  currentAlgo: PasswordKdfAlgo[] = [];

  /**
   * @generated from field: bytes srp_B = 7;
   */
  srpB = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.Int64Value srp_id = 8;
   */
  srpId: Int64Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue hint = 9;
   */
  hint: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue email_unconfirmed_pattern = 10;
   */
  emailUnconfirmedPattern: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo new_algo = 11;
   */
  newAlgo: PasswordKdfAlgo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecurePasswordKdfAlgo new_secure_algo = 12;
   */
  newSecureAlgo: SecurePasswordKdfAlgo[] = [];

  /**
   * @generated from field: bytes secure_random = 13;
   */
  secureRandom = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.Int32Value pending_reset_date = 14;
   */
  pendingResetDate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue login_email_pattern = 15;
   */
  loginEmailPattern: StringValue[] = [];

  constructor(data?: PartialMessage<AccountPassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountPassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "has_recovery", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_secure_values", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "has_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "current_algo", kind: "message", T: PasswordKdfAlgo, repeated: true },
    { no: 7, name: "srp_B", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "srp_id", kind: "message", T: Int64Value, repeated: true },
    { no: 9, name: "hint", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "email_unconfirmed_pattern", kind: "message", T: StringValue, repeated: true },
    { no: 11, name: "new_algo", kind: "message", T: PasswordKdfAlgo, repeated: true },
    { no: 12, name: "new_secure_algo", kind: "message", T: SecurePasswordKdfAlgo, repeated: true },
    { no: 13, name: "secure_random", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 14, name: "pending_reset_date", kind: "message", T: Int32Value, repeated: true },
    { no: 15, name: "login_email_pattern", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPassword {
    return new AccountPassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPassword {
    return new AccountPassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPassword {
    return new AccountPassword().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPassword | PlainMessage<AccountPassword> | undefined, b: AccountPassword | PlainMessage<AccountPassword> | undefined): boolean {
    return proto3.util.equals(AccountPassword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountPassword
 */
export class TLAccountPassword extends Message$1<TLAccountPassword> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountPassword data2 = 1;
   */
  data2: AccountPassword[] = [];

  constructor(data?: PartialMessage<TLAccountPassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountPassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountPassword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountPassword {
    return new TLAccountPassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountPassword {
    return new TLAccountPassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountPassword {
    return new TLAccountPassword().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountPassword | PlainMessage<TLAccountPassword> | undefined, b: TLAccountPassword | PlainMessage<TLAccountPassword> | undefined): boolean {
    return proto3.util.equals(TLAccountPassword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountPasswordInputSettings
 */
export class AccountPasswordInputSettings extends Message$1<AccountPasswordInputSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PasswordKdfAlgo new_algo = 3;
   */
  newAlgo: PasswordKdfAlgo[] = [];

  /**
   * @generated from field: bytes new_password_hash = 4;
   */
  newPasswordHash = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.StringValue hint = 5;
   */
  hint: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue email = 6;
   */
  email: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureSecretSettings new_secure_settings = 7;
   */
  newSecureSettings: SecureSecretSettings[] = [];

  constructor(data?: PartialMessage<AccountPasswordInputSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountPasswordInputSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "new_algo", kind: "message", T: PasswordKdfAlgo, repeated: true },
    { no: 4, name: "new_password_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "hint", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "email", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "new_secure_settings", kind: "message", T: SecureSecretSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPasswordInputSettings {
    return new AccountPasswordInputSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPasswordInputSettings {
    return new AccountPasswordInputSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPasswordInputSettings {
    return new AccountPasswordInputSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPasswordInputSettings | PlainMessage<AccountPasswordInputSettings> | undefined, b: AccountPasswordInputSettings | PlainMessage<AccountPasswordInputSettings> | undefined): boolean {
    return proto3.util.equals(AccountPasswordInputSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountPasswordInputSettings
 */
export class TLAccountPasswordInputSettings extends Message$1<TLAccountPasswordInputSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountPasswordInputSettings data2 = 1;
   */
  data2: AccountPasswordInputSettings[] = [];

  constructor(data?: PartialMessage<TLAccountPasswordInputSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountPasswordInputSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountPasswordInputSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountPasswordInputSettings {
    return new TLAccountPasswordInputSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountPasswordInputSettings {
    return new TLAccountPasswordInputSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountPasswordInputSettings {
    return new TLAccountPasswordInputSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountPasswordInputSettings | PlainMessage<TLAccountPasswordInputSettings> | undefined, b: TLAccountPasswordInputSettings | PlainMessage<TLAccountPasswordInputSettings> | undefined): boolean {
    return proto3.util.equals(TLAccountPasswordInputSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountPasswordSettings
 */
export class AccountPasswordSettings extends Message$1<AccountPasswordSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.StringValue email = 3;
   */
  email: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SecureSecretSettings secure_settings = 4;
   */
  secureSettings: SecureSecretSettings[] = [];

  constructor(data?: PartialMessage<AccountPasswordSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountPasswordSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "email", kind: "message", T: StringValue, repeated: true },
    { no: 4, name: "secure_settings", kind: "message", T: SecureSecretSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPasswordSettings {
    return new AccountPasswordSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPasswordSettings {
    return new AccountPasswordSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPasswordSettings {
    return new AccountPasswordSettings().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPasswordSettings | PlainMessage<AccountPasswordSettings> | undefined, b: AccountPasswordSettings | PlainMessage<AccountPasswordSettings> | undefined): boolean {
    return proto3.util.equals(AccountPasswordSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountPasswordSettings
 */
export class TLAccountPasswordSettings extends Message$1<TLAccountPasswordSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountPasswordSettings data2 = 1;
   */
  data2: AccountPasswordSettings[] = [];

  constructor(data?: PartialMessage<TLAccountPasswordSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountPasswordSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountPasswordSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountPasswordSettings {
    return new TLAccountPasswordSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountPasswordSettings {
    return new TLAccountPasswordSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountPasswordSettings {
    return new TLAccountPasswordSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountPasswordSettings | PlainMessage<TLAccountPasswordSettings> | undefined, b: TLAccountPasswordSettings | PlainMessage<TLAccountPasswordSettings> | undefined): boolean {
    return proto3.util.equals(TLAccountPasswordSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountPrivacyRules
 */
export class AccountPrivacyRules extends Message$1<AccountPrivacyRules> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PrivacyRule rules = 3;
   */
  rules: PrivacyRule[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<AccountPrivacyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountPrivacyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "rules", kind: "message", T: PrivacyRule, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPrivacyRules {
    return new AccountPrivacyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPrivacyRules {
    return new AccountPrivacyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPrivacyRules {
    return new AccountPrivacyRules().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPrivacyRules | PlainMessage<AccountPrivacyRules> | undefined, b: AccountPrivacyRules | PlainMessage<AccountPrivacyRules> | undefined): boolean {
    return proto3.util.equals(AccountPrivacyRules, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountPrivacyRules
 */
export class TLAccountPrivacyRules extends Message$1<TLAccountPrivacyRules> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountPrivacyRules data2 = 1;
   */
  data2: AccountPrivacyRules[] = [];

  constructor(data?: PartialMessage<TLAccountPrivacyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountPrivacyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountPrivacyRules, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountPrivacyRules {
    return new TLAccountPrivacyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountPrivacyRules {
    return new TLAccountPrivacyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountPrivacyRules {
    return new TLAccountPrivacyRules().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountPrivacyRules | PlainMessage<TLAccountPrivacyRules> | undefined, b: TLAccountPrivacyRules | PlainMessage<TLAccountPrivacyRules> | undefined): boolean {
    return proto3.util.equals(TLAccountPrivacyRules, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountResetPasswordResult
 */
export class AccountResetPasswordResult extends Message$1<AccountResetPasswordResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 retry_date = 3;
   */
  retryDate = 0;

  /**
   * @generated from field: int32 until_date = 4;
   */
  untilDate = 0;

  constructor(data?: PartialMessage<AccountResetPasswordResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountResetPasswordResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "retry_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "until_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountResetPasswordResult {
    return new AccountResetPasswordResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountResetPasswordResult {
    return new AccountResetPasswordResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountResetPasswordResult {
    return new AccountResetPasswordResult().fromJsonString(jsonString, options);
  }

  static equals(a: AccountResetPasswordResult | PlainMessage<AccountResetPasswordResult> | undefined, b: AccountResetPasswordResult | PlainMessage<AccountResetPasswordResult> | undefined): boolean {
    return proto3.util.equals(AccountResetPasswordResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordFailedWait
 */
export class TLAccountResetPasswordFailedWait extends Message$1<TLAccountResetPasswordFailedWait> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountResetPasswordResult data2 = 1;
   */
  data2: AccountResetPasswordResult[] = [];

  constructor(data?: PartialMessage<TLAccountResetPasswordFailedWait>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordFailedWait";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountResetPasswordResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountResetPasswordFailedWait {
    return new TLAccountResetPasswordFailedWait().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountResetPasswordFailedWait {
    return new TLAccountResetPasswordFailedWait().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountResetPasswordFailedWait {
    return new TLAccountResetPasswordFailedWait().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountResetPasswordFailedWait | PlainMessage<TLAccountResetPasswordFailedWait> | undefined, b: TLAccountResetPasswordFailedWait | PlainMessage<TLAccountResetPasswordFailedWait> | undefined): boolean {
    return proto3.util.equals(TLAccountResetPasswordFailedWait, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordRequestedWait
 */
export class TLAccountResetPasswordRequestedWait extends Message$1<TLAccountResetPasswordRequestedWait> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountResetPasswordResult data2 = 1;
   */
  data2: AccountResetPasswordResult[] = [];

  constructor(data?: PartialMessage<TLAccountResetPasswordRequestedWait>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordRequestedWait";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountResetPasswordResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountResetPasswordRequestedWait {
    return new TLAccountResetPasswordRequestedWait().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountResetPasswordRequestedWait {
    return new TLAccountResetPasswordRequestedWait().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountResetPasswordRequestedWait {
    return new TLAccountResetPasswordRequestedWait().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountResetPasswordRequestedWait | PlainMessage<TLAccountResetPasswordRequestedWait> | undefined, b: TLAccountResetPasswordRequestedWait | PlainMessage<TLAccountResetPasswordRequestedWait> | undefined): boolean {
    return proto3.util.equals(TLAccountResetPasswordRequestedWait, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordOk
 */
export class TLAccountResetPasswordOk extends Message$1<TLAccountResetPasswordOk> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountResetPasswordResult data2 = 1;
   */
  data2: AccountResetPasswordResult[] = [];

  constructor(data?: PartialMessage<TLAccountResetPasswordOk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountResetPasswordOk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountResetPasswordResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountResetPasswordOk {
    return new TLAccountResetPasswordOk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountResetPasswordOk {
    return new TLAccountResetPasswordOk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountResetPasswordOk {
    return new TLAccountResetPasswordOk().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountResetPasswordOk | PlainMessage<TLAccountResetPasswordOk> | undefined, b: TLAccountResetPasswordOk | PlainMessage<TLAccountResetPasswordOk> | undefined): boolean {
    return proto3.util.equals(TLAccountResetPasswordOk, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtone
 */
export class AccountSavedRingtone extends Message$1<AccountSavedRingtone> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 3;
   */
  document: Document[] = [];

  constructor(data?: PartialMessage<AccountSavedRingtone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "document", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountSavedRingtone {
    return new AccountSavedRingtone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountSavedRingtone {
    return new AccountSavedRingtone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountSavedRingtone {
    return new AccountSavedRingtone().fromJsonString(jsonString, options);
  }

  static equals(a: AccountSavedRingtone | PlainMessage<AccountSavedRingtone> | undefined, b: AccountSavedRingtone | PlainMessage<AccountSavedRingtone> | undefined): boolean {
    return proto3.util.equals(AccountSavedRingtone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtone
 */
export class TLAccountSavedRingtone extends Message$1<TLAccountSavedRingtone> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtone data2 = 1;
   */
  data2: AccountSavedRingtone[] = [];

  constructor(data?: PartialMessage<TLAccountSavedRingtone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountSavedRingtone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountSavedRingtone {
    return new TLAccountSavedRingtone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountSavedRingtone {
    return new TLAccountSavedRingtone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountSavedRingtone {
    return new TLAccountSavedRingtone().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountSavedRingtone | PlainMessage<TLAccountSavedRingtone> | undefined, b: TLAccountSavedRingtone | PlainMessage<TLAccountSavedRingtone> | undefined): boolean {
    return proto3.util.equals(TLAccountSavedRingtone, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtoneConverted
 */
export class TLAccountSavedRingtoneConverted extends Message$1<TLAccountSavedRingtoneConverted> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtone data2 = 1;
   */
  data2: AccountSavedRingtone[] = [];

  constructor(data?: PartialMessage<TLAccountSavedRingtoneConverted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtoneConverted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountSavedRingtone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountSavedRingtoneConverted {
    return new TLAccountSavedRingtoneConverted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountSavedRingtoneConverted {
    return new TLAccountSavedRingtoneConverted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountSavedRingtoneConverted {
    return new TLAccountSavedRingtoneConverted().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountSavedRingtoneConverted | PlainMessage<TLAccountSavedRingtoneConverted> | undefined, b: TLAccountSavedRingtoneConverted | PlainMessage<TLAccountSavedRingtoneConverted> | undefined): boolean {
    return proto3.util.equals(TLAccountSavedRingtoneConverted, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtones
 */
export class AccountSavedRingtones extends Message$1<AccountSavedRingtones> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document ringtones = 4;
   */
  ringtones: Document[] = [];

  constructor(data?: PartialMessage<AccountSavedRingtones>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtones";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "ringtones", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountSavedRingtones {
    return new AccountSavedRingtones().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountSavedRingtones {
    return new AccountSavedRingtones().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountSavedRingtones {
    return new AccountSavedRingtones().fromJsonString(jsonString, options);
  }

  static equals(a: AccountSavedRingtones | PlainMessage<AccountSavedRingtones> | undefined, b: AccountSavedRingtones | PlainMessage<AccountSavedRingtones> | undefined): boolean {
    return proto3.util.equals(AccountSavedRingtones, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtonesNotModified
 */
export class TLAccountSavedRingtonesNotModified extends Message$1<TLAccountSavedRingtonesNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtones data2 = 1;
   */
  data2: AccountSavedRingtones[] = [];

  constructor(data?: PartialMessage<TLAccountSavedRingtonesNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtonesNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountSavedRingtones, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountSavedRingtonesNotModified {
    return new TLAccountSavedRingtonesNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountSavedRingtonesNotModified {
    return new TLAccountSavedRingtonesNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountSavedRingtonesNotModified {
    return new TLAccountSavedRingtonesNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountSavedRingtonesNotModified | PlainMessage<TLAccountSavedRingtonesNotModified> | undefined, b: TLAccountSavedRingtonesNotModified | PlainMessage<TLAccountSavedRingtonesNotModified> | undefined): boolean {
    return proto3.util.equals(TLAccountSavedRingtonesNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtones
 */
export class TLAccountSavedRingtones extends Message$1<TLAccountSavedRingtones> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountSavedRingtones data2 = 1;
   */
  data2: AccountSavedRingtones[] = [];

  constructor(data?: PartialMessage<TLAccountSavedRingtones>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountSavedRingtones";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountSavedRingtones, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountSavedRingtones {
    return new TLAccountSavedRingtones().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountSavedRingtones {
    return new TLAccountSavedRingtones().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountSavedRingtones {
    return new TLAccountSavedRingtones().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountSavedRingtones | PlainMessage<TLAccountSavedRingtones> | undefined, b: TLAccountSavedRingtones | PlainMessage<TLAccountSavedRingtones> | undefined): boolean {
    return proto3.util.equals(TLAccountSavedRingtones, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountSentEmailCode
 */
export class AccountSentEmailCode extends Message$1<AccountSentEmailCode> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string email_pattern = 3;
   */
  emailPattern = "";

  /**
   * @generated from field: int32 length = 4;
   */
  length = 0;

  constructor(data?: PartialMessage<AccountSentEmailCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountSentEmailCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "email_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountSentEmailCode {
    return new AccountSentEmailCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountSentEmailCode {
    return new AccountSentEmailCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountSentEmailCode {
    return new AccountSentEmailCode().fromJsonString(jsonString, options);
  }

  static equals(a: AccountSentEmailCode | PlainMessage<AccountSentEmailCode> | undefined, b: AccountSentEmailCode | PlainMessage<AccountSentEmailCode> | undefined): boolean {
    return proto3.util.equals(AccountSentEmailCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountSentEmailCode
 */
export class TLAccountSentEmailCode extends Message$1<TLAccountSentEmailCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountSentEmailCode data2 = 1;
   */
  data2: AccountSentEmailCode[] = [];

  constructor(data?: PartialMessage<TLAccountSentEmailCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountSentEmailCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountSentEmailCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountSentEmailCode {
    return new TLAccountSentEmailCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountSentEmailCode {
    return new TLAccountSentEmailCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountSentEmailCode {
    return new TLAccountSentEmailCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountSentEmailCode | PlainMessage<TLAccountSentEmailCode> | undefined, b: TLAccountSentEmailCode | PlainMessage<TLAccountSentEmailCode> | undefined): boolean {
    return proto3.util.equals(TLAccountSentEmailCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountTakeout
 */
export class AccountTakeout extends Message$1<AccountTakeout> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<AccountTakeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountTakeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountTakeout {
    return new AccountTakeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountTakeout {
    return new AccountTakeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountTakeout {
    return new AccountTakeout().fromJsonString(jsonString, options);
  }

  static equals(a: AccountTakeout | PlainMessage<AccountTakeout> | undefined, b: AccountTakeout | PlainMessage<AccountTakeout> | undefined): boolean {
    return proto3.util.equals(AccountTakeout, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountTakeout
 */
export class TLAccountTakeout extends Message$1<TLAccountTakeout> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountTakeout data2 = 1;
   */
  data2: AccountTakeout[] = [];

  constructor(data?: PartialMessage<TLAccountTakeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountTakeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountTakeout, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountTakeout {
    return new TLAccountTakeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountTakeout {
    return new TLAccountTakeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountTakeout {
    return new TLAccountTakeout().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountTakeout | PlainMessage<TLAccountTakeout> | undefined, b: TLAccountTakeout | PlainMessage<TLAccountTakeout> | undefined): boolean {
    return proto3.util.equals(TLAccountTakeout, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountThemes
 */
export class AccountThemes extends Message$1<AccountThemes> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Theme themes = 4;
   */
  themes: Theme[] = [];

  constructor(data?: PartialMessage<AccountThemes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountThemes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "themes", kind: "message", T: Theme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountThemes {
    return new AccountThemes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountThemes {
    return new AccountThemes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountThemes {
    return new AccountThemes().fromJsonString(jsonString, options);
  }

  static equals(a: AccountThemes | PlainMessage<AccountThemes> | undefined, b: AccountThemes | PlainMessage<AccountThemes> | undefined): boolean {
    return proto3.util.equals(AccountThemes, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountThemesNotModified
 */
export class TLAccountThemesNotModified extends Message$1<TLAccountThemesNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountThemes data2 = 1;
   */
  data2: AccountThemes[] = [];

  constructor(data?: PartialMessage<TLAccountThemesNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountThemesNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountThemes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountThemesNotModified {
    return new TLAccountThemesNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountThemesNotModified {
    return new TLAccountThemesNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountThemesNotModified {
    return new TLAccountThemesNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountThemesNotModified | PlainMessage<TLAccountThemesNotModified> | undefined, b: TLAccountThemesNotModified | PlainMessage<TLAccountThemesNotModified> | undefined): boolean {
    return proto3.util.equals(TLAccountThemesNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountThemes
 */
export class TLAccountThemes extends Message$1<TLAccountThemes> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountThemes data2 = 1;
   */
  data2: AccountThemes[] = [];

  constructor(data?: PartialMessage<TLAccountThemes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountThemes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountThemes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountThemes {
    return new TLAccountThemes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountThemes {
    return new TLAccountThemes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountThemes {
    return new TLAccountThemes().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountThemes | PlainMessage<TLAccountThemes> | undefined, b: TLAccountThemes | PlainMessage<TLAccountThemes> | undefined): boolean {
    return proto3.util.equals(TLAccountThemes, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountTmpPassword
 */
export class AccountTmpPassword extends Message$1<AccountTmpPassword> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes tmp_password = 3;
   */
  tmpPassword = new Uint8Array(0);

  /**
   * @generated from field: int32 valid_until = 4;
   */
  validUntil = 0;

  constructor(data?: PartialMessage<AccountTmpPassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountTmpPassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "tmp_password", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "valid_until", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountTmpPassword {
    return new AccountTmpPassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountTmpPassword {
    return new AccountTmpPassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountTmpPassword {
    return new AccountTmpPassword().fromJsonString(jsonString, options);
  }

  static equals(a: AccountTmpPassword | PlainMessage<AccountTmpPassword> | undefined, b: AccountTmpPassword | PlainMessage<AccountTmpPassword> | undefined): boolean {
    return proto3.util.equals(AccountTmpPassword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountTmpPassword
 */
export class TLAccountTmpPassword extends Message$1<TLAccountTmpPassword> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountTmpPassword data2 = 1;
   */
  data2: AccountTmpPassword[] = [];

  constructor(data?: PartialMessage<TLAccountTmpPassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountTmpPassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountTmpPassword, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountTmpPassword {
    return new TLAccountTmpPassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountTmpPassword {
    return new TLAccountTmpPassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountTmpPassword {
    return new TLAccountTmpPassword().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountTmpPassword | PlainMessage<TLAccountTmpPassword> | undefined, b: TLAccountTmpPassword | PlainMessage<TLAccountTmpPassword> | undefined): boolean {
    return proto3.util.equals(TLAccountTmpPassword, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountWallPapers
 */
export class AccountWallPapers extends Message$1<AccountWallPapers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WallPaper wallpapers = 4;
   */
  wallpapers: WallPaper[] = [];

  constructor(data?: PartialMessage<AccountWallPapers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountWallPapers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "wallpapers", kind: "message", T: WallPaper, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountWallPapers {
    return new AccountWallPapers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountWallPapers {
    return new AccountWallPapers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountWallPapers {
    return new AccountWallPapers().fromJsonString(jsonString, options);
  }

  static equals(a: AccountWallPapers | PlainMessage<AccountWallPapers> | undefined, b: AccountWallPapers | PlainMessage<AccountWallPapers> | undefined): boolean {
    return proto3.util.equals(AccountWallPapers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountWallPapersNotModified
 */
export class TLAccountWallPapersNotModified extends Message$1<TLAccountWallPapersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountWallPapers data2 = 1;
   */
  data2: AccountWallPapers[] = [];

  constructor(data?: PartialMessage<TLAccountWallPapersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountWallPapersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountWallPapers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountWallPapersNotModified {
    return new TLAccountWallPapersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountWallPapersNotModified {
    return new TLAccountWallPapersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountWallPapersNotModified {
    return new TLAccountWallPapersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountWallPapersNotModified | PlainMessage<TLAccountWallPapersNotModified> | undefined, b: TLAccountWallPapersNotModified | PlainMessage<TLAccountWallPapersNotModified> | undefined): boolean {
    return proto3.util.equals(TLAccountWallPapersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountWallPapers
 */
export class TLAccountWallPapers extends Message$1<TLAccountWallPapers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountWallPapers data2 = 1;
   */
  data2: AccountWallPapers[] = [];

  constructor(data?: PartialMessage<TLAccountWallPapers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountWallPapers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountWallPapers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountWallPapers {
    return new TLAccountWallPapers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountWallPapers {
    return new TLAccountWallPapers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountWallPapers {
    return new TLAccountWallPapers().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountWallPapers | PlainMessage<TLAccountWallPapers> | undefined, b: TLAccountWallPapers | PlainMessage<TLAccountWallPapers> | undefined): boolean {
    return proto3.util.equals(TLAccountWallPapers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AccountWebAuthorizations
 */
export class AccountWebAuthorizations extends Message$1<AccountWebAuthorizations> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebAuthorization authorizations = 3;
   */
  authorizations: WebAuthorization[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<AccountWebAuthorizations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AccountWebAuthorizations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "authorizations", kind: "message", T: WebAuthorization, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountWebAuthorizations {
    return new AccountWebAuthorizations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountWebAuthorizations {
    return new AccountWebAuthorizations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountWebAuthorizations {
    return new AccountWebAuthorizations().fromJsonString(jsonString, options);
  }

  static equals(a: AccountWebAuthorizations | PlainMessage<AccountWebAuthorizations> | undefined, b: AccountWebAuthorizations | PlainMessage<AccountWebAuthorizations> | undefined): boolean {
    return proto3.util.equals(AccountWebAuthorizations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAccountWebAuthorizations
 */
export class TLAccountWebAuthorizations extends Message$1<TLAccountWebAuthorizations> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AccountWebAuthorizations data2 = 1;
   */
  data2: AccountWebAuthorizations[] = [];

  constructor(data?: PartialMessage<TLAccountWebAuthorizations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAccountWebAuthorizations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AccountWebAuthorizations, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAccountWebAuthorizations {
    return new TLAccountWebAuthorizations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAccountWebAuthorizations {
    return new TLAccountWebAuthorizations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAccountWebAuthorizations {
    return new TLAccountWebAuthorizations().fromJsonString(jsonString, options);
  }

  static equals(a: TLAccountWebAuthorizations | PlainMessage<TLAccountWebAuthorizations> | undefined, b: TLAccountWebAuthorizations | PlainMessage<TLAccountWebAuthorizations> | undefined): boolean {
    return proto3.util.equals(TLAccountWebAuthorizations, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization
 */
export class AuthAuthorization extends Message$1<AuthAuthorization> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool setup_password_required = 3;
   */
  setupPasswordRequired = false;

  /**
   * @generated from field: repeated google.protobuf.Int32Value otherwise_relogin_days = 4;
   */
  otherwiseReloginDays: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value tmp_sessions = 5;
   */
  tmpSessions: Int32Value[] = [];

  /**
   * @generated from field: bytes future_auth_token = 6;
   */
  futureAuthToken = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User user = 7;
   */
  user: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfService terms_of_service = 8;
   */
  termsOfService: HelpTermsOfService[] = [];

  constructor(data?: PartialMessage<AuthAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "setup_password_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "otherwise_relogin_days", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "tmp_sessions", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "future_auth_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "user", kind: "message", T: User, repeated: true },
    { no: 8, name: "terms_of_service", kind: "message", T: HelpTermsOfService, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthAuthorization {
    return new AuthAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthAuthorization {
    return new AuthAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthAuthorization {
    return new AuthAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: AuthAuthorization | PlainMessage<AuthAuthorization> | undefined, b: AuthAuthorization | PlainMessage<AuthAuthorization> | undefined): boolean {
    return proto3.util.equals(AuthAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthAuthorization
 */
export class TLAuthAuthorization extends Message$1<TLAuthAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization data2 = 1;
   */
  data2: AuthAuthorization[] = [];

  constructor(data?: PartialMessage<TLAuthAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthAuthorization {
    return new TLAuthAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthAuthorization {
    return new TLAuthAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthAuthorization {
    return new TLAuthAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthAuthorization | PlainMessage<TLAuthAuthorization> | undefined, b: TLAuthAuthorization | PlainMessage<TLAuthAuthorization> | undefined): boolean {
    return proto3.util.equals(TLAuthAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthAuthorizationSignUpRequired
 */
export class TLAuthAuthorizationSignUpRequired extends Message$1<TLAuthAuthorizationSignUpRequired> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization data2 = 1;
   */
  data2: AuthAuthorization[] = [];

  constructor(data?: PartialMessage<TLAuthAuthorizationSignUpRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthAuthorizationSignUpRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthAuthorizationSignUpRequired {
    return new TLAuthAuthorizationSignUpRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthAuthorizationSignUpRequired {
    return new TLAuthAuthorizationSignUpRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthAuthorizationSignUpRequired {
    return new TLAuthAuthorizationSignUpRequired().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthAuthorizationSignUpRequired | PlainMessage<TLAuthAuthorizationSignUpRequired> | undefined, b: TLAuthAuthorizationSignUpRequired | PlainMessage<TLAuthAuthorizationSignUpRequired> | undefined): boolean {
    return proto3.util.equals(TLAuthAuthorizationSignUpRequired, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthCodeType
 */
export class AuthCodeType extends Message$1<AuthCodeType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<AuthCodeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthCodeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthCodeType {
    return new AuthCodeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthCodeType {
    return new AuthCodeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthCodeType {
    return new AuthCodeType().fromJsonString(jsonString, options);
  }

  static equals(a: AuthCodeType | PlainMessage<AuthCodeType> | undefined, b: AuthCodeType | PlainMessage<AuthCodeType> | undefined): boolean {
    return proto3.util.equals(AuthCodeType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeSms
 */
export class TLAuthCodeTypeSms extends Message$1<TLAuthCodeTypeSms> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType data2 = 1;
   */
  data2: AuthCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthCodeTypeSms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeSms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthCodeTypeSms {
    return new TLAuthCodeTypeSms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthCodeTypeSms {
    return new TLAuthCodeTypeSms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthCodeTypeSms {
    return new TLAuthCodeTypeSms().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthCodeTypeSms | PlainMessage<TLAuthCodeTypeSms> | undefined, b: TLAuthCodeTypeSms | PlainMessage<TLAuthCodeTypeSms> | undefined): boolean {
    return proto3.util.equals(TLAuthCodeTypeSms, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeCall
 */
export class TLAuthCodeTypeCall extends Message$1<TLAuthCodeTypeCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType data2 = 1;
   */
  data2: AuthCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthCodeTypeCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthCodeTypeCall {
    return new TLAuthCodeTypeCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthCodeTypeCall {
    return new TLAuthCodeTypeCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthCodeTypeCall {
    return new TLAuthCodeTypeCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthCodeTypeCall | PlainMessage<TLAuthCodeTypeCall> | undefined, b: TLAuthCodeTypeCall | PlainMessage<TLAuthCodeTypeCall> | undefined): boolean {
    return proto3.util.equals(TLAuthCodeTypeCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeFlashCall
 */
export class TLAuthCodeTypeFlashCall extends Message$1<TLAuthCodeTypeFlashCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType data2 = 1;
   */
  data2: AuthCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthCodeTypeFlashCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeFlashCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthCodeTypeFlashCall {
    return new TLAuthCodeTypeFlashCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthCodeTypeFlashCall {
    return new TLAuthCodeTypeFlashCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthCodeTypeFlashCall {
    return new TLAuthCodeTypeFlashCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthCodeTypeFlashCall | PlainMessage<TLAuthCodeTypeFlashCall> | undefined, b: TLAuthCodeTypeFlashCall | PlainMessage<TLAuthCodeTypeFlashCall> | undefined): boolean {
    return proto3.util.equals(TLAuthCodeTypeFlashCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeMissedCall
 */
export class TLAuthCodeTypeMissedCall extends Message$1<TLAuthCodeTypeMissedCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType data2 = 1;
   */
  data2: AuthCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthCodeTypeMissedCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeMissedCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthCodeTypeMissedCall {
    return new TLAuthCodeTypeMissedCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthCodeTypeMissedCall {
    return new TLAuthCodeTypeMissedCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthCodeTypeMissedCall {
    return new TLAuthCodeTypeMissedCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthCodeTypeMissedCall | PlainMessage<TLAuthCodeTypeMissedCall> | undefined, b: TLAuthCodeTypeMissedCall | PlainMessage<TLAuthCodeTypeMissedCall> | undefined): boolean {
    return proto3.util.equals(TLAuthCodeTypeMissedCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeFragmentSms
 */
export class TLAuthCodeTypeFragmentSms extends Message$1<TLAuthCodeTypeFragmentSms> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType data2 = 1;
   */
  data2: AuthCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthCodeTypeFragmentSms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthCodeTypeFragmentSms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthCodeTypeFragmentSms {
    return new TLAuthCodeTypeFragmentSms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthCodeTypeFragmentSms {
    return new TLAuthCodeTypeFragmentSms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthCodeTypeFragmentSms {
    return new TLAuthCodeTypeFragmentSms().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthCodeTypeFragmentSms | PlainMessage<TLAuthCodeTypeFragmentSms> | undefined, b: TLAuthCodeTypeFragmentSms | PlainMessage<TLAuthCodeTypeFragmentSms> | undefined): boolean {
    return proto3.util.equals(TLAuthCodeTypeFragmentSms, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthExportedAuthorization
 */
export class AuthExportedAuthorization extends Message$1<AuthExportedAuthorization> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bytes bytes = 4;
   */
  bytes = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthExportedAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthExportedAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthExportedAuthorization {
    return new AuthExportedAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthExportedAuthorization {
    return new AuthExportedAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthExportedAuthorization {
    return new AuthExportedAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: AuthExportedAuthorization | PlainMessage<AuthExportedAuthorization> | undefined, b: AuthExportedAuthorization | PlainMessage<AuthExportedAuthorization> | undefined): boolean {
    return proto3.util.equals(AuthExportedAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthExportedAuthorization
 */
export class TLAuthExportedAuthorization extends Message$1<TLAuthExportedAuthorization> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthExportedAuthorization data2 = 1;
   */
  data2: AuthExportedAuthorization[] = [];

  constructor(data?: PartialMessage<TLAuthExportedAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthExportedAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthExportedAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthExportedAuthorization {
    return new TLAuthExportedAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthExportedAuthorization {
    return new TLAuthExportedAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthExportedAuthorization {
    return new TLAuthExportedAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthExportedAuthorization | PlainMessage<TLAuthExportedAuthorization> | undefined, b: TLAuthExportedAuthorization | PlainMessage<TLAuthExportedAuthorization> | undefined): boolean {
    return proto3.util.equals(TLAuthExportedAuthorization, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthLoggedOut
 */
export class AuthLoggedOut extends Message$1<AuthLoggedOut> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes future_auth_token = 3;
   */
  futureAuthToken = new Uint8Array(0);

  constructor(data?: PartialMessage<AuthLoggedOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthLoggedOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "future_auth_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLoggedOut {
    return new AuthLoggedOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLoggedOut {
    return new AuthLoggedOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLoggedOut {
    return new AuthLoggedOut().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLoggedOut | PlainMessage<AuthLoggedOut> | undefined, b: AuthLoggedOut | PlainMessage<AuthLoggedOut> | undefined): boolean {
    return proto3.util.equals(AuthLoggedOut, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthLoggedOut
 */
export class TLAuthLoggedOut extends Message$1<TLAuthLoggedOut> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthLoggedOut data2 = 1;
   */
  data2: AuthLoggedOut[] = [];

  constructor(data?: PartialMessage<TLAuthLoggedOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthLoggedOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthLoggedOut, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthLoggedOut {
    return new TLAuthLoggedOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthLoggedOut {
    return new TLAuthLoggedOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthLoggedOut {
    return new TLAuthLoggedOut().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthLoggedOut | PlainMessage<TLAuthLoggedOut> | undefined, b: TLAuthLoggedOut | PlainMessage<TLAuthLoggedOut> | undefined): boolean {
    return proto3.util.equals(TLAuthLoggedOut, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthLoginToken
 */
export class AuthLoginToken extends Message$1<AuthLoginToken> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 expires = 3;
   */
  expires = 0;

  /**
   * @generated from field: bytes token = 4;
   */
  token = new Uint8Array(0);

  /**
   * @generated from field: int32 dc_id = 5;
   */
  dcId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization authorization = 6;
   */
  authorization: AuthAuthorization[] = [];

  constructor(data?: PartialMessage<AuthLoginToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthLoginToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "authorization", kind: "message", T: AuthAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLoginToken {
    return new AuthLoginToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLoginToken {
    return new AuthLoginToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLoginToken {
    return new AuthLoginToken().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLoginToken | PlainMessage<AuthLoginToken> | undefined, b: AuthLoginToken | PlainMessage<AuthLoginToken> | undefined): boolean {
    return proto3.util.equals(AuthLoginToken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginToken
 */
export class TLAuthLoginToken extends Message$1<TLAuthLoginToken> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthLoginToken data2 = 1;
   */
  data2: AuthLoginToken[] = [];

  constructor(data?: PartialMessage<TLAuthLoginToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthLoginToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthLoginToken {
    return new TLAuthLoginToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthLoginToken {
    return new TLAuthLoginToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthLoginToken {
    return new TLAuthLoginToken().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthLoginToken | PlainMessage<TLAuthLoginToken> | undefined, b: TLAuthLoginToken | PlainMessage<TLAuthLoginToken> | undefined): boolean {
    return proto3.util.equals(TLAuthLoginToken, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginTokenMigrateTo
 */
export class TLAuthLoginTokenMigrateTo extends Message$1<TLAuthLoginTokenMigrateTo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthLoginToken data2 = 1;
   */
  data2: AuthLoginToken[] = [];

  constructor(data?: PartialMessage<TLAuthLoginTokenMigrateTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginTokenMigrateTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthLoginToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthLoginTokenMigrateTo {
    return new TLAuthLoginTokenMigrateTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthLoginTokenMigrateTo {
    return new TLAuthLoginTokenMigrateTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthLoginTokenMigrateTo {
    return new TLAuthLoginTokenMigrateTo().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthLoginTokenMigrateTo | PlainMessage<TLAuthLoginTokenMigrateTo> | undefined, b: TLAuthLoginTokenMigrateTo | PlainMessage<TLAuthLoginTokenMigrateTo> | undefined): boolean {
    return proto3.util.equals(TLAuthLoginTokenMigrateTo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginTokenSuccess
 */
export class TLAuthLoginTokenSuccess extends Message$1<TLAuthLoginTokenSuccess> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthLoginToken data2 = 1;
   */
  data2: AuthLoginToken[] = [];

  constructor(data?: PartialMessage<TLAuthLoginTokenSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthLoginTokenSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthLoginToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthLoginTokenSuccess {
    return new TLAuthLoginTokenSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthLoginTokenSuccess {
    return new TLAuthLoginTokenSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthLoginTokenSuccess {
    return new TLAuthLoginTokenSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthLoginTokenSuccess | PlainMessage<TLAuthLoginTokenSuccess> | undefined, b: TLAuthLoginTokenSuccess | PlainMessage<TLAuthLoginTokenSuccess> | undefined): boolean {
    return proto3.util.equals(TLAuthLoginTokenSuccess, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthPasswordRecovery
 */
export class AuthPasswordRecovery extends Message$1<AuthPasswordRecovery> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string email_pattern = 3;
   */
  emailPattern = "";

  constructor(data?: PartialMessage<AuthPasswordRecovery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthPasswordRecovery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "email_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthPasswordRecovery {
    return new AuthPasswordRecovery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthPasswordRecovery {
    return new AuthPasswordRecovery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthPasswordRecovery {
    return new AuthPasswordRecovery().fromJsonString(jsonString, options);
  }

  static equals(a: AuthPasswordRecovery | PlainMessage<AuthPasswordRecovery> | undefined, b: AuthPasswordRecovery | PlainMessage<AuthPasswordRecovery> | undefined): boolean {
    return proto3.util.equals(AuthPasswordRecovery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthPasswordRecovery
 */
export class TLAuthPasswordRecovery extends Message$1<TLAuthPasswordRecovery> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthPasswordRecovery data2 = 1;
   */
  data2: AuthPasswordRecovery[] = [];

  constructor(data?: PartialMessage<TLAuthPasswordRecovery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthPasswordRecovery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthPasswordRecovery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthPasswordRecovery {
    return new TLAuthPasswordRecovery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthPasswordRecovery {
    return new TLAuthPasswordRecovery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthPasswordRecovery {
    return new TLAuthPasswordRecovery().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthPasswordRecovery | PlainMessage<TLAuthPasswordRecovery> | undefined, b: TLAuthPasswordRecovery | PlainMessage<TLAuthPasswordRecovery> | undefined): boolean {
    return proto3.util.equals(TLAuthPasswordRecovery, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthSentCode
 */
export class AuthSentCode extends Message$1<AuthSentCode> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType type = 3;
   */
  type: AuthSentCodeType[] = [];

  /**
   * @generated from field: string phone_code_hash = 4;
   */
  phoneCodeHash = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthCodeType next_type = 5;
   */
  nextType: AuthCodeType[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value timeout = 6;
   */
  timeout: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthAuthorization authorization = 7;
   */
  authorization: AuthAuthorization[] = [];

  constructor(data?: PartialMessage<AuthSentCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthSentCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: AuthSentCodeType, repeated: true },
    { no: 4, name: "phone_code_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "next_type", kind: "message", T: AuthCodeType, repeated: true },
    { no: 6, name: "timeout", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "authorization", kind: "message", T: AuthAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthSentCode {
    return new AuthSentCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthSentCode {
    return new AuthSentCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthSentCode {
    return new AuthSentCode().fromJsonString(jsonString, options);
  }

  static equals(a: AuthSentCode | PlainMessage<AuthSentCode> | undefined, b: AuthSentCode | PlainMessage<AuthSentCode> | undefined): boolean {
    return proto3.util.equals(AuthSentCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCode
 */
export class TLAuthSentCode extends Message$1<TLAuthSentCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCode data2 = 1;
   */
  data2: AuthSentCode[] = [];

  constructor(data?: PartialMessage<TLAuthSentCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCode {
    return new TLAuthSentCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCode {
    return new TLAuthSentCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCode {
    return new TLAuthSentCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCode | PlainMessage<TLAuthSentCode> | undefined, b: TLAuthSentCode | PlainMessage<TLAuthSentCode> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeSuccess
 */
export class TLAuthSentCodeSuccess extends Message$1<TLAuthSentCodeSuccess> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCode data2 = 1;
   */
  data2: AuthSentCode[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeSuccess {
    return new TLAuthSentCodeSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeSuccess {
    return new TLAuthSentCodeSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeSuccess {
    return new TLAuthSentCodeSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeSuccess | PlainMessage<TLAuthSentCodeSuccess> | undefined, b: TLAuthSentCodeSuccess | PlainMessage<TLAuthSentCodeSuccess> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeSuccess, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType
 */
export class AuthSentCodeType extends Message$1<AuthSentCodeType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 length = 3;
   */
  length = 0;

  /**
   * @generated from field: string pattern = 4;
   */
  pattern = "";

  /**
   * @generated from field: string prefix = 5;
   */
  prefix = "";

  /**
   * @generated from field: bool apple_signin_allowed = 6;
   */
  appleSigninAllowed = false;

  /**
   * @generated from field: bool google_signin_allowed = 7;
   */
  googleSigninAllowed = false;

  /**
   * @generated from field: string email_pattern = 8;
   */
  emailPattern = "";

  /**
   * @generated from field: repeated google.protobuf.Int32Value reset_available_period = 9;
   */
  resetAvailablePeriod: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value reset_pending_date = 10;
   */
  resetPendingDate: Int32Value[] = [];

  /**
   * @generated from field: string url = 11;
   */
  url = "";

  /**
   * @generated from field: bytes nonce = 12;
   */
  nonce = new Uint8Array(0);

  /**
   * @generated from field: repeated google.protobuf.StringValue receipt = 13;
   */
  receipt: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value push_timeout = 14;
   */
  pushTimeout: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value next_phone_login_date = 15;
   */
  nextPhoneLoginDate: Int32Value[] = [];

  constructor(data?: PartialMessage<AuthSentCodeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "apple_signin_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "google_signin_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "email_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "reset_available_period", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "reset_pending_date", kind: "message", T: Int32Value, repeated: true },
    { no: 11, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "nonce", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "receipt", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "push_timeout", kind: "message", T: Int32Value, repeated: true },
    { no: 15, name: "next_phone_login_date", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthSentCodeType {
    return new AuthSentCodeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthSentCodeType {
    return new AuthSentCodeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthSentCodeType {
    return new AuthSentCodeType().fromJsonString(jsonString, options);
  }

  static equals(a: AuthSentCodeType | PlainMessage<AuthSentCodeType> | undefined, b: AuthSentCodeType | PlainMessage<AuthSentCodeType> | undefined): boolean {
    return proto3.util.equals(AuthSentCodeType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeApp
 */
export class TLAuthSentCodeTypeApp extends Message$1<TLAuthSentCodeTypeApp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeApp {
    return new TLAuthSentCodeTypeApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeApp {
    return new TLAuthSentCodeTypeApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeApp {
    return new TLAuthSentCodeTypeApp().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeApp | PlainMessage<TLAuthSentCodeTypeApp> | undefined, b: TLAuthSentCodeTypeApp | PlainMessage<TLAuthSentCodeTypeApp> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeSms
 */
export class TLAuthSentCodeTypeSms extends Message$1<TLAuthSentCodeTypeSms> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeSms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeSms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeSms {
    return new TLAuthSentCodeTypeSms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeSms {
    return new TLAuthSentCodeTypeSms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeSms {
    return new TLAuthSentCodeTypeSms().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeSms | PlainMessage<TLAuthSentCodeTypeSms> | undefined, b: TLAuthSentCodeTypeSms | PlainMessage<TLAuthSentCodeTypeSms> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeSms, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeCall
 */
export class TLAuthSentCodeTypeCall extends Message$1<TLAuthSentCodeTypeCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeCall {
    return new TLAuthSentCodeTypeCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeCall {
    return new TLAuthSentCodeTypeCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeCall {
    return new TLAuthSentCodeTypeCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeCall | PlainMessage<TLAuthSentCodeTypeCall> | undefined, b: TLAuthSentCodeTypeCall | PlainMessage<TLAuthSentCodeTypeCall> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFlashCall
 */
export class TLAuthSentCodeTypeFlashCall extends Message$1<TLAuthSentCodeTypeFlashCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeFlashCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFlashCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeFlashCall {
    return new TLAuthSentCodeTypeFlashCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFlashCall {
    return new TLAuthSentCodeTypeFlashCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFlashCall {
    return new TLAuthSentCodeTypeFlashCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeFlashCall | PlainMessage<TLAuthSentCodeTypeFlashCall> | undefined, b: TLAuthSentCodeTypeFlashCall | PlainMessage<TLAuthSentCodeTypeFlashCall> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeFlashCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeMissedCall
 */
export class TLAuthSentCodeTypeMissedCall extends Message$1<TLAuthSentCodeTypeMissedCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeMissedCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeMissedCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeMissedCall {
    return new TLAuthSentCodeTypeMissedCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeMissedCall {
    return new TLAuthSentCodeTypeMissedCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeMissedCall {
    return new TLAuthSentCodeTypeMissedCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeMissedCall | PlainMessage<TLAuthSentCodeTypeMissedCall> | undefined, b: TLAuthSentCodeTypeMissedCall | PlainMessage<TLAuthSentCodeTypeMissedCall> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeMissedCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeEmailCode
 */
export class TLAuthSentCodeTypeEmailCode extends Message$1<TLAuthSentCodeTypeEmailCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeEmailCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeEmailCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeEmailCode {
    return new TLAuthSentCodeTypeEmailCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeEmailCode {
    return new TLAuthSentCodeTypeEmailCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeEmailCode {
    return new TLAuthSentCodeTypeEmailCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeEmailCode | PlainMessage<TLAuthSentCodeTypeEmailCode> | undefined, b: TLAuthSentCodeTypeEmailCode | PlainMessage<TLAuthSentCodeTypeEmailCode> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeEmailCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeSetUpEmailRequired
 */
export class TLAuthSentCodeTypeSetUpEmailRequired extends Message$1<TLAuthSentCodeTypeSetUpEmailRequired> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeSetUpEmailRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeSetUpEmailRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeSetUpEmailRequired {
    return new TLAuthSentCodeTypeSetUpEmailRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeSetUpEmailRequired {
    return new TLAuthSentCodeTypeSetUpEmailRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeSetUpEmailRequired {
    return new TLAuthSentCodeTypeSetUpEmailRequired().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeSetUpEmailRequired | PlainMessage<TLAuthSentCodeTypeSetUpEmailRequired> | undefined, b: TLAuthSentCodeTypeSetUpEmailRequired | PlainMessage<TLAuthSentCodeTypeSetUpEmailRequired> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeSetUpEmailRequired, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFragmentSms
 */
export class TLAuthSentCodeTypeFragmentSms extends Message$1<TLAuthSentCodeTypeFragmentSms> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeFragmentSms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFragmentSms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeFragmentSms {
    return new TLAuthSentCodeTypeFragmentSms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFragmentSms {
    return new TLAuthSentCodeTypeFragmentSms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFragmentSms {
    return new TLAuthSentCodeTypeFragmentSms().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeFragmentSms | PlainMessage<TLAuthSentCodeTypeFragmentSms> | undefined, b: TLAuthSentCodeTypeFragmentSms | PlainMessage<TLAuthSentCodeTypeFragmentSms> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeFragmentSms, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFirebaseSms
 */
export class TLAuthSentCodeTypeFirebaseSms extends Message$1<TLAuthSentCodeTypeFirebaseSms> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthSentCodeType data2 = 1;
   */
  data2: AuthSentCodeType[] = [];

  constructor(data?: PartialMessage<TLAuthSentCodeTypeFirebaseSms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLAuthSentCodeTypeFirebaseSms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: AuthSentCodeType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthSentCodeTypeFirebaseSms {
    return new TLAuthSentCodeTypeFirebaseSms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFirebaseSms {
    return new TLAuthSentCodeTypeFirebaseSms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLAuthSentCodeTypeFirebaseSms {
    return new TLAuthSentCodeTypeFirebaseSms().fromJsonString(jsonString, options);
  }

  static equals(a: TLAuthSentCodeTypeFirebaseSms | PlainMessage<TLAuthSentCodeTypeFirebaseSms> | undefined, b: TLAuthSentCodeTypeFirebaseSms | PlainMessage<TLAuthSentCodeTypeFirebaseSms> | undefined): boolean {
    return proto3.util.equals(TLAuthSentCodeTypeFirebaseSms, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.BotsBotInfo
 */
export class BotsBotInfo extends Message$1<BotsBotInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string about = 4;
   */
  about = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  constructor(data?: PartialMessage<BotsBotInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.BotsBotInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotsBotInfo {
    return new BotsBotInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotsBotInfo {
    return new BotsBotInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotsBotInfo {
    return new BotsBotInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BotsBotInfo | PlainMessage<BotsBotInfo> | undefined, b: BotsBotInfo | PlainMessage<BotsBotInfo> | undefined): boolean {
    return proto3.util.equals(BotsBotInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLBotsBotInfo
 */
export class TLBotsBotInfo extends Message$1<TLBotsBotInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotsBotInfo data2 = 1;
   */
  data2: BotsBotInfo[] = [];

  constructor(data?: PartialMessage<TLBotsBotInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLBotsBotInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: BotsBotInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLBotsBotInfo {
    return new TLBotsBotInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLBotsBotInfo {
    return new TLBotsBotInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLBotsBotInfo {
    return new TLBotsBotInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLBotsBotInfo | PlainMessage<TLBotsBotInfo> | undefined, b: TLBotsBotInfo | PlainMessage<TLBotsBotInfo> | undefined): boolean {
    return proto3.util.equals(TLBotsBotInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelsAdminLogResults
 */
export class ChannelsAdminLogResults extends Message$1<ChannelsAdminLogResults> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelAdminLogEvent events = 3;
   */
  events: ChannelAdminLogEvent[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ChannelsAdminLogResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelsAdminLogResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "events", kind: "message", T: ChannelAdminLogEvent, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelsAdminLogResults {
    return new ChannelsAdminLogResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelsAdminLogResults {
    return new ChannelsAdminLogResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelsAdminLogResults {
    return new ChannelsAdminLogResults().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelsAdminLogResults | PlainMessage<ChannelsAdminLogResults> | undefined, b: ChannelsAdminLogResults | PlainMessage<ChannelsAdminLogResults> | undefined): boolean {
    return proto3.util.equals(ChannelsAdminLogResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelsAdminLogResults
 */
export class TLChannelsAdminLogResults extends Message$1<TLChannelsAdminLogResults> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelsAdminLogResults data2 = 1;
   */
  data2: ChannelsAdminLogResults[] = [];

  constructor(data?: PartialMessage<TLChannelsAdminLogResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelsAdminLogResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelsAdminLogResults, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelsAdminLogResults {
    return new TLChannelsAdminLogResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelsAdminLogResults {
    return new TLChannelsAdminLogResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelsAdminLogResults {
    return new TLChannelsAdminLogResults().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelsAdminLogResults | PlainMessage<TLChannelsAdminLogResults> | undefined, b: TLChannelsAdminLogResults | PlainMessage<TLChannelsAdminLogResults> | undefined): boolean {
    return proto3.util.equals(TLChannelsAdminLogResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipant
 */
export class ChannelsChannelParticipant extends Message$1<ChannelsChannelParticipant> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant participant = 3;
   */
  participant: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ChannelsChannelParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "participant", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelsChannelParticipant {
    return new ChannelsChannelParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelsChannelParticipant {
    return new ChannelsChannelParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelsChannelParticipant {
    return new ChannelsChannelParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelsChannelParticipant | PlainMessage<ChannelsChannelParticipant> | undefined, b: ChannelsChannelParticipant | PlainMessage<ChannelsChannelParticipant> | undefined): boolean {
    return proto3.util.equals(ChannelsChannelParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipant
 */
export class TLChannelsChannelParticipant extends Message$1<TLChannelsChannelParticipant> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipant data2 = 1;
   */
  data2: ChannelsChannelParticipant[] = [];

  constructor(data?: PartialMessage<TLChannelsChannelParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelsChannelParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelsChannelParticipant {
    return new TLChannelsChannelParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipant {
    return new TLChannelsChannelParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipant {
    return new TLChannelsChannelParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelsChannelParticipant | PlainMessage<TLChannelsChannelParticipant> | undefined, b: TLChannelsChannelParticipant | PlainMessage<TLChannelsChannelParticipant> | undefined): boolean {
    return proto3.util.equals(TLChannelsChannelParticipant, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipants
 */
export class ChannelsChannelParticipants extends Message$1<ChannelsChannelParticipants> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelParticipant participants = 4;
   */
  participants: ChannelParticipant[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ChannelsChannelParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "participants", kind: "message", T: ChannelParticipant, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelsChannelParticipants {
    return new ChannelsChannelParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelsChannelParticipants {
    return new ChannelsChannelParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelsChannelParticipants {
    return new ChannelsChannelParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelsChannelParticipants | PlainMessage<ChannelsChannelParticipants> | undefined, b: ChannelsChannelParticipants | PlainMessage<ChannelsChannelParticipants> | undefined): boolean {
    return proto3.util.equals(ChannelsChannelParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipants
 */
export class TLChannelsChannelParticipants extends Message$1<TLChannelsChannelParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipants data2 = 1;
   */
  data2: ChannelsChannelParticipants[] = [];

  constructor(data?: PartialMessage<TLChannelsChannelParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelsChannelParticipants, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelsChannelParticipants {
    return new TLChannelsChannelParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipants {
    return new TLChannelsChannelParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipants {
    return new TLChannelsChannelParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelsChannelParticipants | PlainMessage<TLChannelsChannelParticipants> | undefined, b: TLChannelsChannelParticipants | PlainMessage<TLChannelsChannelParticipants> | undefined): boolean {
    return proto3.util.equals(TLChannelsChannelParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipantsNotModified
 */
export class TLChannelsChannelParticipantsNotModified extends Message$1<TLChannelsChannelParticipantsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelsChannelParticipants data2 = 1;
   */
  data2: ChannelsChannelParticipants[] = [];

  constructor(data?: PartialMessage<TLChannelsChannelParticipantsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelsChannelParticipantsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelsChannelParticipants, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelsChannelParticipantsNotModified {
    return new TLChannelsChannelParticipantsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipantsNotModified {
    return new TLChannelsChannelParticipantsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelsChannelParticipantsNotModified {
    return new TLChannelsChannelParticipantsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelsChannelParticipantsNotModified | PlainMessage<TLChannelsChannelParticipantsNotModified> | undefined, b: TLChannelsChannelParticipantsNotModified | PlainMessage<TLChannelsChannelParticipantsNotModified> | undefined): boolean {
    return proto3.util.equals(TLChannelsChannelParticipantsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChannelsSendAsPeers
 */
export class ChannelsSendAsPeers extends Message$1<ChannelsSendAsPeers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SendAsPeer peers_VECTORSENDASPEER = 3;
   */
  peersVECTORSENDASPEER: SendAsPeer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peers_VECTORPEER = 6;
   */
  peersVECTORPEER: Peer[] = [];

  constructor(data?: PartialMessage<ChannelsSendAsPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChannelsSendAsPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peers_VECTORSENDASPEER", kind: "message", T: SendAsPeer, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
    { no: 6, name: "peers_VECTORPEER", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelsSendAsPeers {
    return new ChannelsSendAsPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelsSendAsPeers {
    return new ChannelsSendAsPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelsSendAsPeers {
    return new ChannelsSendAsPeers().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelsSendAsPeers | PlainMessage<ChannelsSendAsPeers> | undefined, b: ChannelsSendAsPeers | PlainMessage<ChannelsSendAsPeers> | undefined): boolean {
    return proto3.util.equals(ChannelsSendAsPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChannelsSendAsPeers
 */
export class TLChannelsSendAsPeers extends Message$1<TLChannelsSendAsPeers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChannelsSendAsPeers data2 = 1;
   */
  data2: ChannelsSendAsPeers[] = [];

  constructor(data?: PartialMessage<TLChannelsSendAsPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChannelsSendAsPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChannelsSendAsPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChannelsSendAsPeers {
    return new TLChannelsSendAsPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChannelsSendAsPeers {
    return new TLChannelsSendAsPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChannelsSendAsPeers {
    return new TLChannelsSendAsPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TLChannelsSendAsPeers | PlainMessage<TLChannelsSendAsPeers> | undefined, b: TLChannelsSendAsPeers | PlainMessage<TLChannelsSendAsPeers> | undefined): boolean {
    return proto3.util.equals(TLChannelsSendAsPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistInvite
 */
export class ChatlistsChatlistInvite extends Message$1<ChatlistsChatlistInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 filter_id = 3;
   */
  filterId = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer missing_peers = 4;
   */
  missingPeers: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer already_peers = 5;
   */
  alreadyPeers: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 6;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 7;
   */
  users: User[] = [];

  /**
   * @generated from field: string title = 8;
   */
  title = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue emoticon = 9;
   */
  emoticon: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peers = 10;
   */
  peers: Peer[] = [];

  constructor(data?: PartialMessage<ChatlistsChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "filter_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "missing_peers", kind: "message", T: Peer, repeated: true },
    { no: 5, name: "already_peers", kind: "message", T: Peer, repeated: true },
    { no: 6, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 7, name: "users", kind: "message", T: User, repeated: true },
    { no: 8, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "emoticon", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "peers", kind: "message", T: Peer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatlistsChatlistInvite {
    return new ChatlistsChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatlistsChatlistInvite {
    return new ChatlistsChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatlistsChatlistInvite {
    return new ChatlistsChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ChatlistsChatlistInvite | PlainMessage<ChatlistsChatlistInvite> | undefined, b: ChatlistsChatlistInvite | PlainMessage<ChatlistsChatlistInvite> | undefined): boolean {
    return proto3.util.equals(ChatlistsChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistInviteAlready
 */
export class TLChatlistsChatlistInviteAlready extends Message$1<TLChatlistsChatlistInviteAlready> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistInvite data2 = 1;
   */
  data2: ChatlistsChatlistInvite[] = [];

  constructor(data?: PartialMessage<TLChatlistsChatlistInviteAlready>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistInviteAlready";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatlistsChatlistInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatlistsChatlistInviteAlready {
    return new TLChatlistsChatlistInviteAlready().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatlistsChatlistInviteAlready {
    return new TLChatlistsChatlistInviteAlready().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatlistsChatlistInviteAlready {
    return new TLChatlistsChatlistInviteAlready().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatlistsChatlistInviteAlready | PlainMessage<TLChatlistsChatlistInviteAlready> | undefined, b: TLChatlistsChatlistInviteAlready | PlainMessage<TLChatlistsChatlistInviteAlready> | undefined): boolean {
    return proto3.util.equals(TLChatlistsChatlistInviteAlready, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistInvite
 */
export class TLChatlistsChatlistInvite extends Message$1<TLChatlistsChatlistInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistInvite data2 = 1;
   */
  data2: ChatlistsChatlistInvite[] = [];

  constructor(data?: PartialMessage<TLChatlistsChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatlistsChatlistInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatlistsChatlistInvite {
    return new TLChatlistsChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatlistsChatlistInvite {
    return new TLChatlistsChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatlistsChatlistInvite {
    return new TLChatlistsChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatlistsChatlistInvite | PlainMessage<TLChatlistsChatlistInvite> | undefined, b: TLChatlistsChatlistInvite | PlainMessage<TLChatlistsChatlistInvite> | undefined): boolean {
    return proto3.util.equals(TLChatlistsChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistUpdates
 */
export class ChatlistsChatlistUpdates extends Message$1<ChatlistsChatlistUpdates> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer missing_peers = 3;
   */
  missingPeers: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ChatlistsChatlistUpdates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistUpdates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "missing_peers", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatlistsChatlistUpdates {
    return new ChatlistsChatlistUpdates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatlistsChatlistUpdates {
    return new ChatlistsChatlistUpdates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatlistsChatlistUpdates {
    return new ChatlistsChatlistUpdates().fromJsonString(jsonString, options);
  }

  static equals(a: ChatlistsChatlistUpdates | PlainMessage<ChatlistsChatlistUpdates> | undefined, b: ChatlistsChatlistUpdates | PlainMessage<ChatlistsChatlistUpdates> | undefined): boolean {
    return proto3.util.equals(ChatlistsChatlistUpdates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistUpdates
 */
export class TLChatlistsChatlistUpdates extends Message$1<TLChatlistsChatlistUpdates> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatlistsChatlistUpdates data2 = 1;
   */
  data2: ChatlistsChatlistUpdates[] = [];

  constructor(data?: PartialMessage<TLChatlistsChatlistUpdates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatlistsChatlistUpdates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatlistsChatlistUpdates, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatlistsChatlistUpdates {
    return new TLChatlistsChatlistUpdates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatlistsChatlistUpdates {
    return new TLChatlistsChatlistUpdates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatlistsChatlistUpdates {
    return new TLChatlistsChatlistUpdates().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatlistsChatlistUpdates | PlainMessage<TLChatlistsChatlistUpdates> | undefined, b: TLChatlistsChatlistUpdates | PlainMessage<TLChatlistsChatlistUpdates> | undefined): boolean {
    return proto3.util.equals(TLChatlistsChatlistUpdates, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedChatlistInvite
 */
export class ChatlistsExportedChatlistInvite extends Message$1<ChatlistsExportedChatlistInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DialogFilter filter = 3;
   */
  filter: DialogFilter[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatlistInvite invite = 4;
   */
  invite: ExportedChatlistInvite[] = [];

  constructor(data?: PartialMessage<ChatlistsExportedChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "filter", kind: "message", T: DialogFilter, repeated: true },
    { no: 4, name: "invite", kind: "message", T: ExportedChatlistInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatlistsExportedChatlistInvite {
    return new ChatlistsExportedChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatlistsExportedChatlistInvite {
    return new ChatlistsExportedChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatlistsExportedChatlistInvite {
    return new ChatlistsExportedChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ChatlistsExportedChatlistInvite | PlainMessage<ChatlistsExportedChatlistInvite> | undefined, b: ChatlistsExportedChatlistInvite | PlainMessage<ChatlistsExportedChatlistInvite> | undefined): boolean {
    return proto3.util.equals(ChatlistsExportedChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatlistsExportedChatlistInvite
 */
export class TLChatlistsExportedChatlistInvite extends Message$1<TLChatlistsExportedChatlistInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedChatlistInvite data2 = 1;
   */
  data2: ChatlistsExportedChatlistInvite[] = [];

  constructor(data?: PartialMessage<TLChatlistsExportedChatlistInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatlistsExportedChatlistInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatlistsExportedChatlistInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatlistsExportedChatlistInvite {
    return new TLChatlistsExportedChatlistInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatlistsExportedChatlistInvite {
    return new TLChatlistsExportedChatlistInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatlistsExportedChatlistInvite {
    return new TLChatlistsExportedChatlistInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatlistsExportedChatlistInvite | PlainMessage<TLChatlistsExportedChatlistInvite> | undefined, b: TLChatlistsExportedChatlistInvite | PlainMessage<TLChatlistsExportedChatlistInvite> | undefined): boolean {
    return proto3.util.equals(TLChatlistsExportedChatlistInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedInvites
 */
export class ChatlistsExportedInvites extends Message$1<ChatlistsExportedInvites> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatlistInvite invites = 3;
   */
  invites: ExportedChatlistInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ChatlistsExportedInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "invites", kind: "message", T: ExportedChatlistInvite, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatlistsExportedInvites {
    return new ChatlistsExportedInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatlistsExportedInvites {
    return new ChatlistsExportedInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatlistsExportedInvites {
    return new ChatlistsExportedInvites().fromJsonString(jsonString, options);
  }

  static equals(a: ChatlistsExportedInvites | PlainMessage<ChatlistsExportedInvites> | undefined, b: ChatlistsExportedInvites | PlainMessage<ChatlistsExportedInvites> | undefined): boolean {
    return proto3.util.equals(ChatlistsExportedInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLChatlistsExportedInvites
 */
export class TLChatlistsExportedInvites extends Message$1<TLChatlistsExportedInvites> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatlistsExportedInvites data2 = 1;
   */
  data2: ChatlistsExportedInvites[] = [];

  constructor(data?: PartialMessage<TLChatlistsExportedInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLChatlistsExportedInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ChatlistsExportedInvites, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLChatlistsExportedInvites {
    return new TLChatlistsExportedInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLChatlistsExportedInvites {
    return new TLChatlistsExportedInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLChatlistsExportedInvites {
    return new TLChatlistsExportedInvites().fromJsonString(jsonString, options);
  }

  static equals(a: TLChatlistsExportedInvites | PlainMessage<TLChatlistsExportedInvites> | undefined, b: TLChatlistsExportedInvites | PlainMessage<TLChatlistsExportedInvites> | undefined): boolean {
    return proto3.util.equals(TLChatlistsExportedInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsBlocked
 */
export class ContactsBlocked extends Message$1<ContactsBlocked> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerBlocked blocked = 3;
   */
  blocked: PeerBlocked[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  /**
   * @generated from field: int32 count = 6;
   */
  count = 0;

  constructor(data?: PartialMessage<ContactsBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "blocked", kind: "message", T: PeerBlocked, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
    { no: 6, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsBlocked {
    return new ContactsBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsBlocked {
    return new ContactsBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsBlocked {
    return new ContactsBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsBlocked | PlainMessage<ContactsBlocked> | undefined, b: ContactsBlocked | PlainMessage<ContactsBlocked> | undefined): boolean {
    return proto3.util.equals(ContactsBlocked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsBlocked
 */
export class TLContactsBlocked extends Message$1<TLContactsBlocked> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsBlocked data2 = 1;
   */
  data2: ContactsBlocked[] = [];

  constructor(data?: PartialMessage<TLContactsBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsBlocked, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsBlocked {
    return new TLContactsBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsBlocked {
    return new TLContactsBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsBlocked {
    return new TLContactsBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsBlocked | PlainMessage<TLContactsBlocked> | undefined, b: TLContactsBlocked | PlainMessage<TLContactsBlocked> | undefined): boolean {
    return proto3.util.equals(TLContactsBlocked, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsBlockedSlice
 */
export class TLContactsBlockedSlice extends Message$1<TLContactsBlockedSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsBlocked data2 = 1;
   */
  data2: ContactsBlocked[] = [];

  constructor(data?: PartialMessage<TLContactsBlockedSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsBlockedSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsBlocked, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsBlockedSlice {
    return new TLContactsBlockedSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsBlockedSlice {
    return new TLContactsBlockedSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsBlockedSlice {
    return new TLContactsBlockedSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsBlockedSlice | PlainMessage<TLContactsBlockedSlice> | undefined, b: TLContactsBlockedSlice | PlainMessage<TLContactsBlockedSlice> | undefined): boolean {
    return proto3.util.equals(TLContactsBlockedSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsContacts
 */
export class ContactsContacts extends Message$1<ContactsContacts> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Contact contacts = 3;
   */
  contacts: Contact[] = [];

  /**
   * @generated from field: int32 saved_count = 4;
   */
  savedCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ContactsContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "contacts", kind: "message", T: Contact, repeated: true },
    { no: 4, name: "saved_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsContacts {
    return new ContactsContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsContacts {
    return new ContactsContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsContacts {
    return new ContactsContacts().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsContacts | PlainMessage<ContactsContacts> | undefined, b: ContactsContacts | PlainMessage<ContactsContacts> | undefined): boolean {
    return proto3.util.equals(ContactsContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsContactsNotModified
 */
export class TLContactsContactsNotModified extends Message$1<TLContactsContactsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsContacts data2 = 1;
   */
  data2: ContactsContacts[] = [];

  constructor(data?: PartialMessage<TLContactsContactsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsContactsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsContacts, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsContactsNotModified {
    return new TLContactsContactsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsContactsNotModified {
    return new TLContactsContactsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsContactsNotModified {
    return new TLContactsContactsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsContactsNotModified | PlainMessage<TLContactsContactsNotModified> | undefined, b: TLContactsContactsNotModified | PlainMessage<TLContactsContactsNotModified> | undefined): boolean {
    return proto3.util.equals(TLContactsContactsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsContacts
 */
export class TLContactsContacts extends Message$1<TLContactsContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsContacts data2 = 1;
   */
  data2: ContactsContacts[] = [];

  constructor(data?: PartialMessage<TLContactsContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsContacts, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsContacts {
    return new TLContactsContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsContacts {
    return new TLContactsContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsContacts {
    return new TLContactsContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsContacts | PlainMessage<TLContactsContacts> | undefined, b: TLContactsContacts | PlainMessage<TLContactsContacts> | undefined): boolean {
    return proto3.util.equals(TLContactsContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsFound
 */
export class ContactsFound extends Message$1<ContactsFound> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer my_results = 3;
   */
  myResults: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer results = 4;
   */
  results: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ContactsFound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsFound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "my_results", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "results", kind: "message", T: Peer, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsFound {
    return new ContactsFound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsFound {
    return new ContactsFound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsFound {
    return new ContactsFound().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsFound | PlainMessage<ContactsFound> | undefined, b: ContactsFound | PlainMessage<ContactsFound> | undefined): boolean {
    return proto3.util.equals(ContactsFound, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsFound
 */
export class TLContactsFound extends Message$1<TLContactsFound> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsFound data2 = 1;
   */
  data2: ContactsFound[] = [];

  constructor(data?: PartialMessage<TLContactsFound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsFound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsFound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsFound {
    return new TLContactsFound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsFound {
    return new TLContactsFound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsFound {
    return new TLContactsFound().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsFound | PlainMessage<TLContactsFound> | undefined, b: TLContactsFound | PlainMessage<TLContactsFound> | undefined): boolean {
    return proto3.util.equals(TLContactsFound, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsImportedContacts
 */
export class ContactsImportedContacts extends Message$1<ContactsImportedContacts> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ImportedContact imported = 3;
   */
  imported: ImportedContact[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PopularContact popular_invites = 4;
   */
  popularInvites: PopularContact[] = [];

  /**
   * @generated from field: int64 retry_contacts = 5;
   */
  retryContacts = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ContactsImportedContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsImportedContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "imported", kind: "message", T: ImportedContact, repeated: true },
    { no: 4, name: "popular_invites", kind: "message", T: PopularContact, repeated: true },
    { no: 5, name: "retry_contacts", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsImportedContacts {
    return new ContactsImportedContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsImportedContacts {
    return new ContactsImportedContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsImportedContacts {
    return new ContactsImportedContacts().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsImportedContacts | PlainMessage<ContactsImportedContacts> | undefined, b: ContactsImportedContacts | PlainMessage<ContactsImportedContacts> | undefined): boolean {
    return proto3.util.equals(ContactsImportedContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsImportedContacts
 */
export class TLContactsImportedContacts extends Message$1<TLContactsImportedContacts> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsImportedContacts data2 = 1;
   */
  data2: ContactsImportedContacts[] = [];

  constructor(data?: PartialMessage<TLContactsImportedContacts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsImportedContacts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsImportedContacts, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsImportedContacts {
    return new TLContactsImportedContacts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsImportedContacts {
    return new TLContactsImportedContacts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsImportedContacts {
    return new TLContactsImportedContacts().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsImportedContacts | PlainMessage<TLContactsImportedContacts> | undefined, b: TLContactsImportedContacts | PlainMessage<TLContactsImportedContacts> | undefined): boolean {
    return proto3.util.equals(TLContactsImportedContacts, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsResolvedPeer
 */
export class ContactsResolvedPeer extends Message$1<ContactsResolvedPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 3;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ContactsResolvedPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsResolvedPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsResolvedPeer {
    return new ContactsResolvedPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsResolvedPeer {
    return new ContactsResolvedPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsResolvedPeer {
    return new ContactsResolvedPeer().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsResolvedPeer | PlainMessage<ContactsResolvedPeer> | undefined, b: ContactsResolvedPeer | PlainMessage<ContactsResolvedPeer> | undefined): boolean {
    return proto3.util.equals(ContactsResolvedPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsResolvedPeer
 */
export class TLContactsResolvedPeer extends Message$1<TLContactsResolvedPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsResolvedPeer data2 = 1;
   */
  data2: ContactsResolvedPeer[] = [];

  constructor(data?: PartialMessage<TLContactsResolvedPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsResolvedPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsResolvedPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsResolvedPeer {
    return new TLContactsResolvedPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsResolvedPeer {
    return new TLContactsResolvedPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsResolvedPeer {
    return new TLContactsResolvedPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsResolvedPeer | PlainMessage<TLContactsResolvedPeer> | undefined, b: TLContactsResolvedPeer | PlainMessage<TLContactsResolvedPeer> | undefined): boolean {
    return proto3.util.equals(TLContactsResolvedPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.ContactsTopPeers
 */
export class ContactsTopPeers extends Message$1<ContactsTopPeers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TopPeerCategoryPeers categories = 3;
   */
  categories: TopPeerCategoryPeers[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ContactsTopPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.ContactsTopPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "categories", kind: "message", T: TopPeerCategoryPeers, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactsTopPeers {
    return new ContactsTopPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactsTopPeers {
    return new ContactsTopPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactsTopPeers {
    return new ContactsTopPeers().fromJsonString(jsonString, options);
  }

  static equals(a: ContactsTopPeers | PlainMessage<ContactsTopPeers> | undefined, b: ContactsTopPeers | PlainMessage<ContactsTopPeers> | undefined): boolean {
    return proto3.util.equals(ContactsTopPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeersNotModified
 */
export class TLContactsTopPeersNotModified extends Message$1<TLContactsTopPeersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsTopPeers data2 = 1;
   */
  data2: ContactsTopPeers[] = [];

  constructor(data?: PartialMessage<TLContactsTopPeersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsTopPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsTopPeersNotModified {
    return new TLContactsTopPeersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsTopPeersNotModified {
    return new TLContactsTopPeersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsTopPeersNotModified {
    return new TLContactsTopPeersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsTopPeersNotModified | PlainMessage<TLContactsTopPeersNotModified> | undefined, b: TLContactsTopPeersNotModified | PlainMessage<TLContactsTopPeersNotModified> | undefined): boolean {
    return proto3.util.equals(TLContactsTopPeersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeers
 */
export class TLContactsTopPeers extends Message$1<TLContactsTopPeers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsTopPeers data2 = 1;
   */
  data2: ContactsTopPeers[] = [];

  constructor(data?: PartialMessage<TLContactsTopPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsTopPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsTopPeers {
    return new TLContactsTopPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsTopPeers {
    return new TLContactsTopPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsTopPeers {
    return new TLContactsTopPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsTopPeers | PlainMessage<TLContactsTopPeers> | undefined, b: TLContactsTopPeers | PlainMessage<TLContactsTopPeers> | undefined): boolean {
    return proto3.util.equals(TLContactsTopPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeersDisabled
 */
export class TLContactsTopPeersDisabled extends Message$1<TLContactsTopPeersDisabled> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ContactsTopPeers data2 = 1;
   */
  data2: ContactsTopPeers[] = [];

  constructor(data?: PartialMessage<TLContactsTopPeersDisabled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLContactsTopPeersDisabled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: ContactsTopPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLContactsTopPeersDisabled {
    return new TLContactsTopPeersDisabled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLContactsTopPeersDisabled {
    return new TLContactsTopPeersDisabled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLContactsTopPeersDisabled {
    return new TLContactsTopPeersDisabled().fromJsonString(jsonString, options);
  }

  static equals(a: TLContactsTopPeersDisabled | PlainMessage<TLContactsTopPeersDisabled> | undefined, b: TLContactsTopPeersDisabled | PlainMessage<TLContactsTopPeersDisabled> | undefined): boolean {
    return proto3.util.equals(TLContactsTopPeersDisabled, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpAppConfig
 */
export class HelpAppConfig extends Message$1<HelpAppConfig> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 hash = 3;
   */
  hash = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.JSONValue config = 4;
   */
  config: JSONValue[] = [];

  constructor(data?: PartialMessage<HelpAppConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpAppConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "config", kind: "message", T: JSONValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpAppConfig {
    return new HelpAppConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpAppConfig {
    return new HelpAppConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpAppConfig {
    return new HelpAppConfig().fromJsonString(jsonString, options);
  }

  static equals(a: HelpAppConfig | PlainMessage<HelpAppConfig> | undefined, b: HelpAppConfig | PlainMessage<HelpAppConfig> | undefined): boolean {
    return proto3.util.equals(HelpAppConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpAppConfigNotModified
 */
export class TLHelpAppConfigNotModified extends Message$1<TLHelpAppConfigNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpAppConfig data2 = 1;
   */
  data2: HelpAppConfig[] = [];

  constructor(data?: PartialMessage<TLHelpAppConfigNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpAppConfigNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpAppConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpAppConfigNotModified {
    return new TLHelpAppConfigNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpAppConfigNotModified {
    return new TLHelpAppConfigNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpAppConfigNotModified {
    return new TLHelpAppConfigNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpAppConfigNotModified | PlainMessage<TLHelpAppConfigNotModified> | undefined, b: TLHelpAppConfigNotModified | PlainMessage<TLHelpAppConfigNotModified> | undefined): boolean {
    return proto3.util.equals(TLHelpAppConfigNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpAppConfig
 */
export class TLHelpAppConfig extends Message$1<TLHelpAppConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpAppConfig data2 = 1;
   */
  data2: HelpAppConfig[] = [];

  constructor(data?: PartialMessage<TLHelpAppConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpAppConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpAppConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpAppConfig {
    return new TLHelpAppConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpAppConfig {
    return new TLHelpAppConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpAppConfig {
    return new TLHelpAppConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpAppConfig | PlainMessage<TLHelpAppConfig> | undefined, b: TLHelpAppConfig | PlainMessage<TLHelpAppConfig> | undefined): boolean {
    return proto3.util.equals(TLHelpAppConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpAppUpdate
 */
export class HelpAppUpdate extends Message$1<HelpAppUpdate> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool can_not_skip = 3;
   */
  canNotSkip = false;

  /**
   * @generated from field: int32 id = 4;
   */
  id = 0;

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string text = 6;
   */
  text = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 7;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document document = 8;
   */
  document: Document[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue url = 9;
   */
  url: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document sticker = 10;
   */
  sticker: Document[] = [];

  constructor(data?: PartialMessage<HelpAppUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpAppUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "can_not_skip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 8, name: "document", kind: "message", T: Document, repeated: true },
    { no: 9, name: "url", kind: "message", T: StringValue, repeated: true },
    { no: 10, name: "sticker", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpAppUpdate {
    return new HelpAppUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpAppUpdate {
    return new HelpAppUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpAppUpdate {
    return new HelpAppUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: HelpAppUpdate | PlainMessage<HelpAppUpdate> | undefined, b: HelpAppUpdate | PlainMessage<HelpAppUpdate> | undefined): boolean {
    return proto3.util.equals(HelpAppUpdate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpAppUpdate
 */
export class TLHelpAppUpdate extends Message$1<TLHelpAppUpdate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpAppUpdate data2 = 1;
   */
  data2: HelpAppUpdate[] = [];

  constructor(data?: PartialMessage<TLHelpAppUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpAppUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpAppUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpAppUpdate {
    return new TLHelpAppUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpAppUpdate {
    return new TLHelpAppUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpAppUpdate {
    return new TLHelpAppUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpAppUpdate | PlainMessage<TLHelpAppUpdate> | undefined, b: TLHelpAppUpdate | PlainMessage<TLHelpAppUpdate> | undefined): boolean {
    return proto3.util.equals(TLHelpAppUpdate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpNoAppUpdate
 */
export class TLHelpNoAppUpdate extends Message$1<TLHelpNoAppUpdate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpAppUpdate data2 = 1;
   */
  data2: HelpAppUpdate[] = [];

  constructor(data?: PartialMessage<TLHelpNoAppUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpNoAppUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpAppUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpNoAppUpdate {
    return new TLHelpNoAppUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpNoAppUpdate {
    return new TLHelpNoAppUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpNoAppUpdate {
    return new TLHelpNoAppUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpNoAppUpdate | PlainMessage<TLHelpNoAppUpdate> | undefined, b: TLHelpNoAppUpdate | PlainMessage<TLHelpNoAppUpdate> | undefined): boolean {
    return proto3.util.equals(TLHelpNoAppUpdate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpCountriesList
 */
export class HelpCountriesList extends Message$1<HelpCountriesList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountry countries = 3;
   */
  countries: HelpCountry[] = [];

  /**
   * @generated from field: int32 hash = 4;
   */
  hash = 0;

  constructor(data?: PartialMessage<HelpCountriesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpCountriesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "countries", kind: "message", T: HelpCountry, repeated: true },
    { no: 4, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpCountriesList {
    return new HelpCountriesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpCountriesList {
    return new HelpCountriesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpCountriesList {
    return new HelpCountriesList().fromJsonString(jsonString, options);
  }

  static equals(a: HelpCountriesList | PlainMessage<HelpCountriesList> | undefined, b: HelpCountriesList | PlainMessage<HelpCountriesList> | undefined): boolean {
    return proto3.util.equals(HelpCountriesList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpCountriesListNotModified
 */
export class TLHelpCountriesListNotModified extends Message$1<TLHelpCountriesListNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountriesList data2 = 1;
   */
  data2: HelpCountriesList[] = [];

  constructor(data?: PartialMessage<TLHelpCountriesListNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpCountriesListNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpCountriesList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpCountriesListNotModified {
    return new TLHelpCountriesListNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpCountriesListNotModified {
    return new TLHelpCountriesListNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpCountriesListNotModified {
    return new TLHelpCountriesListNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpCountriesListNotModified | PlainMessage<TLHelpCountriesListNotModified> | undefined, b: TLHelpCountriesListNotModified | PlainMessage<TLHelpCountriesListNotModified> | undefined): boolean {
    return proto3.util.equals(TLHelpCountriesListNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpCountriesList
 */
export class TLHelpCountriesList extends Message$1<TLHelpCountriesList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountriesList data2 = 1;
   */
  data2: HelpCountriesList[] = [];

  constructor(data?: PartialMessage<TLHelpCountriesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpCountriesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpCountriesList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpCountriesList {
    return new TLHelpCountriesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpCountriesList {
    return new TLHelpCountriesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpCountriesList {
    return new TLHelpCountriesList().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpCountriesList | PlainMessage<TLHelpCountriesList> | undefined, b: TLHelpCountriesList | PlainMessage<TLHelpCountriesList> | undefined): boolean {
    return proto3.util.equals(TLHelpCountriesList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpCountry
 */
export class HelpCountry extends Message$1<HelpCountry> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool hidden = 3;
   */
  hidden = false;

  /**
   * @generated from field: string iso2 = 4;
   */
  iso2 = "";

  /**
   * @generated from field: string default_name = 5;
   */
  defaultName = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue name = 6;
   */
  name: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountryCode country_codes = 7;
   */
  countryCodes: HelpCountryCode[] = [];

  constructor(data?: PartialMessage<HelpCountry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpCountry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "iso2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "default_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "country_codes", kind: "message", T: HelpCountryCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpCountry {
    return new HelpCountry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpCountry {
    return new HelpCountry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpCountry {
    return new HelpCountry().fromJsonString(jsonString, options);
  }

  static equals(a: HelpCountry | PlainMessage<HelpCountry> | undefined, b: HelpCountry | PlainMessage<HelpCountry> | undefined): boolean {
    return proto3.util.equals(HelpCountry, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpCountry
 */
export class TLHelpCountry extends Message$1<TLHelpCountry> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountry data2 = 1;
   */
  data2: HelpCountry[] = [];

  constructor(data?: PartialMessage<TLHelpCountry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpCountry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpCountry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpCountry {
    return new TLHelpCountry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpCountry {
    return new TLHelpCountry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpCountry {
    return new TLHelpCountry().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpCountry | PlainMessage<TLHelpCountry> | undefined, b: TLHelpCountry | PlainMessage<TLHelpCountry> | undefined): boolean {
    return proto3.util.equals(TLHelpCountry, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpCountryCode
 */
export class HelpCountryCode extends Message$1<HelpCountryCode> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string country_code = 3;
   */
  countryCode = "";

  /**
   * @generated from field: string prefixes = 4;
   */
  prefixes = "";

  /**
   * @generated from field: string patterns = 5;
   */
  patterns = "";

  constructor(data?: PartialMessage<HelpCountryCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpCountryCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "prefixes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "patterns", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpCountryCode {
    return new HelpCountryCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpCountryCode {
    return new HelpCountryCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpCountryCode {
    return new HelpCountryCode().fromJsonString(jsonString, options);
  }

  static equals(a: HelpCountryCode | PlainMessage<HelpCountryCode> | undefined, b: HelpCountryCode | PlainMessage<HelpCountryCode> | undefined): boolean {
    return proto3.util.equals(HelpCountryCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpCountryCode
 */
export class TLHelpCountryCode extends Message$1<TLHelpCountryCode> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpCountryCode data2 = 1;
   */
  data2: HelpCountryCode[] = [];

  constructor(data?: PartialMessage<TLHelpCountryCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpCountryCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpCountryCode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpCountryCode {
    return new TLHelpCountryCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpCountryCode {
    return new TLHelpCountryCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpCountryCode {
    return new TLHelpCountryCode().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpCountryCode | PlainMessage<TLHelpCountryCode> | undefined, b: TLHelpCountryCode | PlainMessage<TLHelpCountryCode> | undefined): boolean {
    return proto3.util.equals(TLHelpCountryCode, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpDeepLinkInfo
 */
export class HelpDeepLinkInfo extends Message$1<HelpDeepLinkInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool update_app = 3;
   */
  updateApp = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 5;
   */
  entities: MessageEntity[] = [];

  constructor(data?: PartialMessage<HelpDeepLinkInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpDeepLinkInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "update_app", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "entities", kind: "message", T: MessageEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpDeepLinkInfo {
    return new HelpDeepLinkInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpDeepLinkInfo {
    return new HelpDeepLinkInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpDeepLinkInfo {
    return new HelpDeepLinkInfo().fromJsonString(jsonString, options);
  }

  static equals(a: HelpDeepLinkInfo | PlainMessage<HelpDeepLinkInfo> | undefined, b: HelpDeepLinkInfo | PlainMessage<HelpDeepLinkInfo> | undefined): boolean {
    return proto3.util.equals(HelpDeepLinkInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpDeepLinkInfoEmpty
 */
export class TLHelpDeepLinkInfoEmpty extends Message$1<TLHelpDeepLinkInfoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpDeepLinkInfo data2 = 1;
   */
  data2: HelpDeepLinkInfo[] = [];

  constructor(data?: PartialMessage<TLHelpDeepLinkInfoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpDeepLinkInfoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpDeepLinkInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpDeepLinkInfoEmpty {
    return new TLHelpDeepLinkInfoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpDeepLinkInfoEmpty {
    return new TLHelpDeepLinkInfoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpDeepLinkInfoEmpty {
    return new TLHelpDeepLinkInfoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpDeepLinkInfoEmpty | PlainMessage<TLHelpDeepLinkInfoEmpty> | undefined, b: TLHelpDeepLinkInfoEmpty | PlainMessage<TLHelpDeepLinkInfoEmpty> | undefined): boolean {
    return proto3.util.equals(TLHelpDeepLinkInfoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpDeepLinkInfo
 */
export class TLHelpDeepLinkInfo extends Message$1<TLHelpDeepLinkInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpDeepLinkInfo data2 = 1;
   */
  data2: HelpDeepLinkInfo[] = [];

  constructor(data?: PartialMessage<TLHelpDeepLinkInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpDeepLinkInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpDeepLinkInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpDeepLinkInfo {
    return new TLHelpDeepLinkInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpDeepLinkInfo {
    return new TLHelpDeepLinkInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpDeepLinkInfo {
    return new TLHelpDeepLinkInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpDeepLinkInfo | PlainMessage<TLHelpDeepLinkInfo> | undefined, b: TLHelpDeepLinkInfo | PlainMessage<TLHelpDeepLinkInfo> | undefined): boolean {
    return proto3.util.equals(TLHelpDeepLinkInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpInviteText
 */
export class HelpInviteText extends Message$1<HelpInviteText> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<HelpInviteText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpInviteText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpInviteText {
    return new HelpInviteText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpInviteText {
    return new HelpInviteText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpInviteText {
    return new HelpInviteText().fromJsonString(jsonString, options);
  }

  static equals(a: HelpInviteText | PlainMessage<HelpInviteText> | undefined, b: HelpInviteText | PlainMessage<HelpInviteText> | undefined): boolean {
    return proto3.util.equals(HelpInviteText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpInviteText
 */
export class TLHelpInviteText extends Message$1<TLHelpInviteText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpInviteText data2 = 1;
   */
  data2: HelpInviteText[] = [];

  constructor(data?: PartialMessage<TLHelpInviteText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpInviteText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpInviteText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpInviteText {
    return new TLHelpInviteText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpInviteText {
    return new TLHelpInviteText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpInviteText {
    return new TLHelpInviteText().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpInviteText | PlainMessage<TLHelpInviteText> | undefined, b: TLHelpInviteText | PlainMessage<TLHelpInviteText> | undefined): boolean {
    return proto3.util.equals(TLHelpInviteText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpPassportConfig
 */
export class HelpPassportConfig extends Message$1<HelpPassportConfig> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 hash = 3;
   */
  hash = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON countries_langs = 4;
   */
  countriesLangs: DataJSON[] = [];

  constructor(data?: PartialMessage<HelpPassportConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpPassportConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "countries_langs", kind: "message", T: DataJSON, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpPassportConfig {
    return new HelpPassportConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpPassportConfig {
    return new HelpPassportConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpPassportConfig {
    return new HelpPassportConfig().fromJsonString(jsonString, options);
  }

  static equals(a: HelpPassportConfig | PlainMessage<HelpPassportConfig> | undefined, b: HelpPassportConfig | PlainMessage<HelpPassportConfig> | undefined): boolean {
    return proto3.util.equals(HelpPassportConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpPassportConfigNotModified
 */
export class TLHelpPassportConfigNotModified extends Message$1<TLHelpPassportConfigNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpPassportConfig data2 = 1;
   */
  data2: HelpPassportConfig[] = [];

  constructor(data?: PartialMessage<TLHelpPassportConfigNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpPassportConfigNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpPassportConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpPassportConfigNotModified {
    return new TLHelpPassportConfigNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpPassportConfigNotModified {
    return new TLHelpPassportConfigNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpPassportConfigNotModified {
    return new TLHelpPassportConfigNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpPassportConfigNotModified | PlainMessage<TLHelpPassportConfigNotModified> | undefined, b: TLHelpPassportConfigNotModified | PlainMessage<TLHelpPassportConfigNotModified> | undefined): boolean {
    return proto3.util.equals(TLHelpPassportConfigNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpPassportConfig
 */
export class TLHelpPassportConfig extends Message$1<TLHelpPassportConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpPassportConfig data2 = 1;
   */
  data2: HelpPassportConfig[] = [];

  constructor(data?: PartialMessage<TLHelpPassportConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpPassportConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpPassportConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpPassportConfig {
    return new TLHelpPassportConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpPassportConfig {
    return new TLHelpPassportConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpPassportConfig {
    return new TLHelpPassportConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpPassportConfig | PlainMessage<TLHelpPassportConfig> | undefined, b: TLHelpPassportConfig | PlainMessage<TLHelpPassportConfig> | undefined): boolean {
    return proto3.util.equals(TLHelpPassportConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpPremiumPromo
 */
export class HelpPremiumPromo extends Message$1<HelpPremiumPromo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string status_text = 3;
   */
  statusText = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity status_entities = 4;
   */
  statusEntities: MessageEntity[] = [];

  /**
   * @generated from field: string video_sections = 5;
   */
  videoSections = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document videos = 6;
   */
  videos: Document[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PremiumSubscriptionOption period_options = 7;
   */
  periodOptions: PremiumSubscriptionOption[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 8;
   */
  users: User[] = [];

  /**
   * @generated from field: string currency = 9;
   */
  currency = "";

  /**
   * @generated from field: int64 monthly_amount = 10;
   */
  monthlyAmount = protoInt64.zero;

  constructor(data?: PartialMessage<HelpPremiumPromo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpPremiumPromo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "status_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status_entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 5, name: "video_sections", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "videos", kind: "message", T: Document, repeated: true },
    { no: 7, name: "period_options", kind: "message", T: PremiumSubscriptionOption, repeated: true },
    { no: 8, name: "users", kind: "message", T: User, repeated: true },
    { no: 9, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "monthly_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpPremiumPromo {
    return new HelpPremiumPromo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpPremiumPromo {
    return new HelpPremiumPromo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpPremiumPromo {
    return new HelpPremiumPromo().fromJsonString(jsonString, options);
  }

  static equals(a: HelpPremiumPromo | PlainMessage<HelpPremiumPromo> | undefined, b: HelpPremiumPromo | PlainMessage<HelpPremiumPromo> | undefined): boolean {
    return proto3.util.equals(HelpPremiumPromo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpPremiumPromo
 */
export class TLHelpPremiumPromo extends Message$1<TLHelpPremiumPromo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpPremiumPromo data2 = 1;
   */
  data2: HelpPremiumPromo[] = [];

  constructor(data?: PartialMessage<TLHelpPremiumPromo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpPremiumPromo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpPremiumPromo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpPremiumPromo {
    return new TLHelpPremiumPromo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpPremiumPromo {
    return new TLHelpPremiumPromo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpPremiumPromo {
    return new TLHelpPremiumPromo().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpPremiumPromo | PlainMessage<TLHelpPremiumPromo> | undefined, b: TLHelpPremiumPromo | PlainMessage<TLHelpPremiumPromo> | undefined): boolean {
    return proto3.util.equals(TLHelpPremiumPromo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpPromoData
 */
export class HelpPromoData extends Message$1<HelpPromoData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 expires = 3;
   */
  expires = 0;

  /**
   * @generated from field: bool proxy = 4;
   */
  proxy = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peer = 5;
   */
  peer: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 6;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 7;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue psa_type = 8;
   */
  psaType: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue psa_message = 9;
   */
  psaMessage: StringValue[] = [];

  constructor(data?: PartialMessage<HelpPromoData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpPromoData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "proxy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "peer", kind: "message", T: Peer, repeated: true },
    { no: 6, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 7, name: "users", kind: "message", T: User, repeated: true },
    { no: 8, name: "psa_type", kind: "message", T: StringValue, repeated: true },
    { no: 9, name: "psa_message", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpPromoData {
    return new HelpPromoData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpPromoData {
    return new HelpPromoData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpPromoData {
    return new HelpPromoData().fromJsonString(jsonString, options);
  }

  static equals(a: HelpPromoData | PlainMessage<HelpPromoData> | undefined, b: HelpPromoData | PlainMessage<HelpPromoData> | undefined): boolean {
    return proto3.util.equals(HelpPromoData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpPromoDataEmpty
 */
export class TLHelpPromoDataEmpty extends Message$1<TLHelpPromoDataEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpPromoData data2 = 1;
   */
  data2: HelpPromoData[] = [];

  constructor(data?: PartialMessage<TLHelpPromoDataEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpPromoDataEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpPromoData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpPromoDataEmpty {
    return new TLHelpPromoDataEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpPromoDataEmpty {
    return new TLHelpPromoDataEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpPromoDataEmpty {
    return new TLHelpPromoDataEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpPromoDataEmpty | PlainMessage<TLHelpPromoDataEmpty> | undefined, b: TLHelpPromoDataEmpty | PlainMessage<TLHelpPromoDataEmpty> | undefined): boolean {
    return proto3.util.equals(TLHelpPromoDataEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpPromoData
 */
export class TLHelpPromoData extends Message$1<TLHelpPromoData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpPromoData data2 = 1;
   */
  data2: HelpPromoData[] = [];

  constructor(data?: PartialMessage<TLHelpPromoData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpPromoData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpPromoData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpPromoData {
    return new TLHelpPromoData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpPromoData {
    return new TLHelpPromoData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpPromoData {
    return new TLHelpPromoData().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpPromoData | PlainMessage<TLHelpPromoData> | undefined, b: TLHelpPromoData | PlainMessage<TLHelpPromoData> | undefined): boolean {
    return proto3.util.equals(TLHelpPromoData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpRecentMeUrls
 */
export class HelpRecentMeUrls extends Message$1<HelpRecentMeUrls> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.RecentMeUrl urls = 3;
   */
  urls: RecentMeUrl[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<HelpRecentMeUrls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpRecentMeUrls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "urls", kind: "message", T: RecentMeUrl, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpRecentMeUrls {
    return new HelpRecentMeUrls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpRecentMeUrls {
    return new HelpRecentMeUrls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpRecentMeUrls {
    return new HelpRecentMeUrls().fromJsonString(jsonString, options);
  }

  static equals(a: HelpRecentMeUrls | PlainMessage<HelpRecentMeUrls> | undefined, b: HelpRecentMeUrls | PlainMessage<HelpRecentMeUrls> | undefined): boolean {
    return proto3.util.equals(HelpRecentMeUrls, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpRecentMeUrls
 */
export class TLHelpRecentMeUrls extends Message$1<TLHelpRecentMeUrls> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpRecentMeUrls data2 = 1;
   */
  data2: HelpRecentMeUrls[] = [];

  constructor(data?: PartialMessage<TLHelpRecentMeUrls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpRecentMeUrls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpRecentMeUrls, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpRecentMeUrls {
    return new TLHelpRecentMeUrls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpRecentMeUrls {
    return new TLHelpRecentMeUrls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpRecentMeUrls {
    return new TLHelpRecentMeUrls().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpRecentMeUrls | PlainMessage<TLHelpRecentMeUrls> | undefined, b: TLHelpRecentMeUrls | PlainMessage<TLHelpRecentMeUrls> | undefined): boolean {
    return proto3.util.equals(TLHelpRecentMeUrls, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpSupport
 */
export class HelpSupport extends Message$1<HelpSupport> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User user = 4;
   */
  user: User[] = [];

  constructor(data?: PartialMessage<HelpSupport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpSupport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpSupport {
    return new HelpSupport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpSupport {
    return new HelpSupport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpSupport {
    return new HelpSupport().fromJsonString(jsonString, options);
  }

  static equals(a: HelpSupport | PlainMessage<HelpSupport> | undefined, b: HelpSupport | PlainMessage<HelpSupport> | undefined): boolean {
    return proto3.util.equals(HelpSupport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpSupport
 */
export class TLHelpSupport extends Message$1<TLHelpSupport> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpSupport data2 = 1;
   */
  data2: HelpSupport[] = [];

  constructor(data?: PartialMessage<TLHelpSupport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpSupport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpSupport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpSupport {
    return new TLHelpSupport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpSupport {
    return new TLHelpSupport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpSupport {
    return new TLHelpSupport().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpSupport | PlainMessage<TLHelpSupport> | undefined, b: TLHelpSupport | PlainMessage<TLHelpSupport> | undefined): boolean {
    return proto3.util.equals(TLHelpSupport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpSupportName
 */
export class HelpSupportName extends Message$1<HelpSupportName> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<HelpSupportName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpSupportName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpSupportName {
    return new HelpSupportName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpSupportName {
    return new HelpSupportName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpSupportName {
    return new HelpSupportName().fromJsonString(jsonString, options);
  }

  static equals(a: HelpSupportName | PlainMessage<HelpSupportName> | undefined, b: HelpSupportName | PlainMessage<HelpSupportName> | undefined): boolean {
    return proto3.util.equals(HelpSupportName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpSupportName
 */
export class TLHelpSupportName extends Message$1<TLHelpSupportName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpSupportName data2 = 1;
   */
  data2: HelpSupportName[] = [];

  constructor(data?: PartialMessage<TLHelpSupportName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpSupportName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpSupportName, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpSupportName {
    return new TLHelpSupportName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpSupportName {
    return new TLHelpSupportName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpSupportName {
    return new TLHelpSupportName().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpSupportName | PlainMessage<TLHelpSupportName> | undefined, b: TLHelpSupportName | PlainMessage<TLHelpSupportName> | undefined): boolean {
    return proto3.util.equals(TLHelpSupportName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfService
 */
export class HelpTermsOfService extends Message$1<HelpTermsOfService> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool popup = 3;
   */
  popup = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON id = 4;
   */
  id: DataJSON[] = [];

  /**
   * @generated from field: string text = 5;
   */
  text = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 6;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value min_age_confirm = 7;
   */
  minAgeConfirm: Int32Value[] = [];

  constructor(data?: PartialMessage<HelpTermsOfService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "popup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "id", kind: "message", T: DataJSON, repeated: true },
    { no: 5, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 7, name: "min_age_confirm", kind: "message", T: Int32Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpTermsOfService {
    return new HelpTermsOfService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpTermsOfService {
    return new HelpTermsOfService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpTermsOfService {
    return new HelpTermsOfService().fromJsonString(jsonString, options);
  }

  static equals(a: HelpTermsOfService | PlainMessage<HelpTermsOfService> | undefined, b: HelpTermsOfService | PlainMessage<HelpTermsOfService> | undefined): boolean {
    return proto3.util.equals(HelpTermsOfService, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfService
 */
export class TLHelpTermsOfService extends Message$1<TLHelpTermsOfService> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfService data2 = 1;
   */
  data2: HelpTermsOfService[] = [];

  constructor(data?: PartialMessage<TLHelpTermsOfService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpTermsOfService, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpTermsOfService {
    return new TLHelpTermsOfService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpTermsOfService {
    return new TLHelpTermsOfService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpTermsOfService {
    return new TLHelpTermsOfService().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpTermsOfService | PlainMessage<TLHelpTermsOfService> | undefined, b: TLHelpTermsOfService | PlainMessage<TLHelpTermsOfService> | undefined): boolean {
    return proto3.util.equals(TLHelpTermsOfService, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfServiceUpdate
 */
export class HelpTermsOfServiceUpdate extends Message$1<HelpTermsOfServiceUpdate> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 expires = 3;
   */
  expires = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfService terms_of_service = 4;
   */
  termsOfService: HelpTermsOfService[] = [];

  constructor(data?: PartialMessage<HelpTermsOfServiceUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfServiceUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "terms_of_service", kind: "message", T: HelpTermsOfService, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpTermsOfServiceUpdate {
    return new HelpTermsOfServiceUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpTermsOfServiceUpdate {
    return new HelpTermsOfServiceUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpTermsOfServiceUpdate {
    return new HelpTermsOfServiceUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: HelpTermsOfServiceUpdate | PlainMessage<HelpTermsOfServiceUpdate> | undefined, b: HelpTermsOfServiceUpdate | PlainMessage<HelpTermsOfServiceUpdate> | undefined): boolean {
    return proto3.util.equals(HelpTermsOfServiceUpdate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfServiceUpdateEmpty
 */
export class TLHelpTermsOfServiceUpdateEmpty extends Message$1<TLHelpTermsOfServiceUpdateEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfServiceUpdate data2 = 1;
   */
  data2: HelpTermsOfServiceUpdate[] = [];

  constructor(data?: PartialMessage<TLHelpTermsOfServiceUpdateEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfServiceUpdateEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpTermsOfServiceUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpTermsOfServiceUpdateEmpty {
    return new TLHelpTermsOfServiceUpdateEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpTermsOfServiceUpdateEmpty {
    return new TLHelpTermsOfServiceUpdateEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpTermsOfServiceUpdateEmpty {
    return new TLHelpTermsOfServiceUpdateEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpTermsOfServiceUpdateEmpty | PlainMessage<TLHelpTermsOfServiceUpdateEmpty> | undefined, b: TLHelpTermsOfServiceUpdateEmpty | PlainMessage<TLHelpTermsOfServiceUpdateEmpty> | undefined): boolean {
    return proto3.util.equals(TLHelpTermsOfServiceUpdateEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfServiceUpdate
 */
export class TLHelpTermsOfServiceUpdate extends Message$1<TLHelpTermsOfServiceUpdate> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpTermsOfServiceUpdate data2 = 1;
   */
  data2: HelpTermsOfServiceUpdate[] = [];

  constructor(data?: PartialMessage<TLHelpTermsOfServiceUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpTermsOfServiceUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpTermsOfServiceUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpTermsOfServiceUpdate {
    return new TLHelpTermsOfServiceUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpTermsOfServiceUpdate {
    return new TLHelpTermsOfServiceUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpTermsOfServiceUpdate {
    return new TLHelpTermsOfServiceUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpTermsOfServiceUpdate | PlainMessage<TLHelpTermsOfServiceUpdate> | undefined, b: TLHelpTermsOfServiceUpdate | PlainMessage<TLHelpTermsOfServiceUpdate> | undefined): boolean {
    return proto3.util.equals(TLHelpTermsOfServiceUpdate, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.HelpUserInfo
 */
export class HelpUserInfo extends Message$1<HelpUserInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageEntity entities = 4;
   */
  entities: MessageEntity[] = [];

  /**
   * @generated from field: string author = 5;
   */
  author = "";

  /**
   * @generated from field: int32 date = 6;
   */
  date = 0;

  constructor(data?: PartialMessage<HelpUserInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.HelpUserInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entities", kind: "message", T: MessageEntity, repeated: true },
    { no: 5, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpUserInfo {
    return new HelpUserInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpUserInfo {
    return new HelpUserInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpUserInfo {
    return new HelpUserInfo().fromJsonString(jsonString, options);
  }

  static equals(a: HelpUserInfo | PlainMessage<HelpUserInfo> | undefined, b: HelpUserInfo | PlainMessage<HelpUserInfo> | undefined): boolean {
    return proto3.util.equals(HelpUserInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpUserInfoEmpty
 */
export class TLHelpUserInfoEmpty extends Message$1<TLHelpUserInfoEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpUserInfo data2 = 1;
   */
  data2: HelpUserInfo[] = [];

  constructor(data?: PartialMessage<TLHelpUserInfoEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpUserInfoEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpUserInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpUserInfoEmpty {
    return new TLHelpUserInfoEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpUserInfoEmpty {
    return new TLHelpUserInfoEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpUserInfoEmpty {
    return new TLHelpUserInfoEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpUserInfoEmpty | PlainMessage<TLHelpUserInfoEmpty> | undefined, b: TLHelpUserInfoEmpty | PlainMessage<TLHelpUserInfoEmpty> | undefined): boolean {
    return proto3.util.equals(TLHelpUserInfoEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLHelpUserInfo
 */
export class TLHelpUserInfo extends Message$1<TLHelpUserInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HelpUserInfo data2 = 1;
   */
  data2: HelpUserInfo[] = [];

  constructor(data?: PartialMessage<TLHelpUserInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLHelpUserInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: HelpUserInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLHelpUserInfo {
    return new TLHelpUserInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLHelpUserInfo {
    return new TLHelpUserInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLHelpUserInfo {
    return new TLHelpUserInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLHelpUserInfo | PlainMessage<TLHelpUserInfo> | undefined, b: TLHelpUserInfo | PlainMessage<TLHelpUserInfo> | undefined): boolean {
    return proto3.util.equals(TLHelpUserInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedFoundMessages
 */
export class MessagesAffectedFoundMessages extends Message$1<MessagesAffectedFoundMessages> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 pts = 3;
   */
  pts = 0;

  /**
   * @generated from field: int32 pts_count = 4;
   */
  ptsCount = 0;

  /**
   * @generated from field: int32 offset = 5;
   */
  offset = 0;

  /**
   * @generated from field: int32 messages = 6;
   */
  messages = 0;

  constructor(data?: PartialMessage<MessagesAffectedFoundMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedFoundMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "messages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesAffectedFoundMessages {
    return new MessagesAffectedFoundMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesAffectedFoundMessages {
    return new MessagesAffectedFoundMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesAffectedFoundMessages {
    return new MessagesAffectedFoundMessages().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesAffectedFoundMessages | PlainMessage<MessagesAffectedFoundMessages> | undefined, b: MessagesAffectedFoundMessages | PlainMessage<MessagesAffectedFoundMessages> | undefined): boolean {
    return proto3.util.equals(MessagesAffectedFoundMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedFoundMessages
 */
export class TLMessagesAffectedFoundMessages extends Message$1<TLMessagesAffectedFoundMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedFoundMessages data2 = 1;
   */
  data2: MessagesAffectedFoundMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesAffectedFoundMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedFoundMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAffectedFoundMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAffectedFoundMessages {
    return new TLMessagesAffectedFoundMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAffectedFoundMessages {
    return new TLMessagesAffectedFoundMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAffectedFoundMessages {
    return new TLMessagesAffectedFoundMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAffectedFoundMessages | PlainMessage<TLMessagesAffectedFoundMessages> | undefined, b: TLMessagesAffectedFoundMessages | PlainMessage<TLMessagesAffectedFoundMessages> | undefined): boolean {
    return proto3.util.equals(TLMessagesAffectedFoundMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedHistory
 */
export class MessagesAffectedHistory extends Message$1<MessagesAffectedHistory> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 pts = 3;
   */
  pts = 0;

  /**
   * @generated from field: int32 pts_count = 4;
   */
  ptsCount = 0;

  /**
   * @generated from field: int32 offset = 5;
   */
  offset = 0;

  constructor(data?: PartialMessage<MessagesAffectedHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesAffectedHistory {
    return new MessagesAffectedHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesAffectedHistory {
    return new MessagesAffectedHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesAffectedHistory {
    return new MessagesAffectedHistory().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesAffectedHistory | PlainMessage<MessagesAffectedHistory> | undefined, b: MessagesAffectedHistory | PlainMessage<MessagesAffectedHistory> | undefined): boolean {
    return proto3.util.equals(MessagesAffectedHistory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedHistory
 */
export class TLMessagesAffectedHistory extends Message$1<TLMessagesAffectedHistory> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedHistory data2 = 1;
   */
  data2: MessagesAffectedHistory[] = [];

  constructor(data?: PartialMessage<TLMessagesAffectedHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAffectedHistory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAffectedHistory {
    return new TLMessagesAffectedHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAffectedHistory {
    return new TLMessagesAffectedHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAffectedHistory {
    return new TLMessagesAffectedHistory().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAffectedHistory | PlainMessage<TLMessagesAffectedHistory> | undefined, b: TLMessagesAffectedHistory | PlainMessage<TLMessagesAffectedHistory> | undefined): boolean {
    return proto3.util.equals(TLMessagesAffectedHistory, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedMessages
 */
export class MessagesAffectedMessages extends Message$1<MessagesAffectedMessages> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 pts = 3;
   */
  pts = 0;

  /**
   * @generated from field: int32 pts_count = 4;
   */
  ptsCount = 0;

  constructor(data?: PartialMessage<MessagesAffectedMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pts_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesAffectedMessages {
    return new MessagesAffectedMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesAffectedMessages {
    return new MessagesAffectedMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesAffectedMessages {
    return new MessagesAffectedMessages().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesAffectedMessages | PlainMessage<MessagesAffectedMessages> | undefined, b: MessagesAffectedMessages | PlainMessage<MessagesAffectedMessages> | undefined): boolean {
    return proto3.util.equals(MessagesAffectedMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedMessages
 */
export class TLMessagesAffectedMessages extends Message$1<TLMessagesAffectedMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAffectedMessages data2 = 1;
   */
  data2: MessagesAffectedMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesAffectedMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAffectedMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAffectedMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAffectedMessages {
    return new TLMessagesAffectedMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAffectedMessages {
    return new TLMessagesAffectedMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAffectedMessages {
    return new TLMessagesAffectedMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAffectedMessages | PlainMessage<TLMessagesAffectedMessages> | undefined, b: TLMessagesAffectedMessages | PlainMessage<TLMessagesAffectedMessages> | undefined): boolean {
    return proto3.util.equals(TLMessagesAffectedMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesAllStickers
 */
export class MessagesAllStickers extends Message$1<MessagesAllStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSet sets = 4;
   */
  sets: StickerSet[] = [];

  constructor(data?: PartialMessage<MessagesAllStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesAllStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sets", kind: "message", T: StickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesAllStickers {
    return new MessagesAllStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesAllStickers {
    return new MessagesAllStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesAllStickers {
    return new MessagesAllStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesAllStickers | PlainMessage<MessagesAllStickers> | undefined, b: MessagesAllStickers | PlainMessage<MessagesAllStickers> | undefined): boolean {
    return proto3.util.equals(MessagesAllStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAllStickersNotModified
 */
export class TLMessagesAllStickersNotModified extends Message$1<TLMessagesAllStickersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAllStickers data2 = 1;
   */
  data2: MessagesAllStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesAllStickersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAllStickersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAllStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAllStickersNotModified {
    return new TLMessagesAllStickersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAllStickersNotModified {
    return new TLMessagesAllStickersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAllStickersNotModified {
    return new TLMessagesAllStickersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAllStickersNotModified | PlainMessage<TLMessagesAllStickersNotModified> | undefined, b: TLMessagesAllStickersNotModified | PlainMessage<TLMessagesAllStickersNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesAllStickersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAllStickers
 */
export class TLMessagesAllStickers extends Message$1<TLMessagesAllStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAllStickers data2 = 1;
   */
  data2: MessagesAllStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesAllStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAllStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAllStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAllStickers {
    return new TLMessagesAllStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAllStickers {
    return new TLMessagesAllStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAllStickers {
    return new TLMessagesAllStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAllStickers | PlainMessage<TLMessagesAllStickers> | undefined, b: TLMessagesAllStickers | PlainMessage<TLMessagesAllStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesAllStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesArchivedStickers
 */
export class MessagesArchivedStickers extends Message$1<MessagesArchivedStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered sets = 4;
   */
  sets: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<MessagesArchivedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesArchivedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "sets", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesArchivedStickers {
    return new MessagesArchivedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesArchivedStickers {
    return new MessagesArchivedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesArchivedStickers {
    return new MessagesArchivedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesArchivedStickers | PlainMessage<MessagesArchivedStickers> | undefined, b: MessagesArchivedStickers | PlainMessage<MessagesArchivedStickers> | undefined): boolean {
    return proto3.util.equals(MessagesArchivedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesArchivedStickers
 */
export class TLMessagesArchivedStickers extends Message$1<TLMessagesArchivedStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesArchivedStickers data2 = 1;
   */
  data2: MessagesArchivedStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesArchivedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesArchivedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesArchivedStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesArchivedStickers {
    return new TLMessagesArchivedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesArchivedStickers {
    return new TLMessagesArchivedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesArchivedStickers {
    return new TLMessagesArchivedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesArchivedStickers | PlainMessage<TLMessagesArchivedStickers> | undefined, b: TLMessagesArchivedStickers | PlainMessage<TLMessagesArchivedStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesArchivedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesAvailableReactions
 */
export class MessagesAvailableReactions extends Message$1<MessagesAvailableReactions> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 hash = 3;
   */
  hash = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AvailableReaction reactions = 4;
   */
  reactions: AvailableReaction[] = [];

  constructor(data?: PartialMessage<MessagesAvailableReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesAvailableReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "reactions", kind: "message", T: AvailableReaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesAvailableReactions {
    return new MessagesAvailableReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesAvailableReactions {
    return new MessagesAvailableReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesAvailableReactions {
    return new MessagesAvailableReactions().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesAvailableReactions | PlainMessage<MessagesAvailableReactions> | undefined, b: MessagesAvailableReactions | PlainMessage<MessagesAvailableReactions> | undefined): boolean {
    return proto3.util.equals(MessagesAvailableReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAvailableReactionsNotModified
 */
export class TLMessagesAvailableReactionsNotModified extends Message$1<TLMessagesAvailableReactionsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAvailableReactions data2 = 1;
   */
  data2: MessagesAvailableReactions[] = [];

  constructor(data?: PartialMessage<TLMessagesAvailableReactionsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAvailableReactionsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAvailableReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAvailableReactionsNotModified {
    return new TLMessagesAvailableReactionsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAvailableReactionsNotModified {
    return new TLMessagesAvailableReactionsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAvailableReactionsNotModified {
    return new TLMessagesAvailableReactionsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAvailableReactionsNotModified | PlainMessage<TLMessagesAvailableReactionsNotModified> | undefined, b: TLMessagesAvailableReactionsNotModified | PlainMessage<TLMessagesAvailableReactionsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesAvailableReactionsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesAvailableReactions
 */
export class TLMessagesAvailableReactions extends Message$1<TLMessagesAvailableReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesAvailableReactions data2 = 1;
   */
  data2: MessagesAvailableReactions[] = [];

  constructor(data?: PartialMessage<TLMessagesAvailableReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesAvailableReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesAvailableReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesAvailableReactions {
    return new TLMessagesAvailableReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesAvailableReactions {
    return new TLMessagesAvailableReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesAvailableReactions {
    return new TLMessagesAvailableReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesAvailableReactions | PlainMessage<TLMessagesAvailableReactions> | undefined, b: TLMessagesAvailableReactions | PlainMessage<TLMessagesAvailableReactions> | undefined): boolean {
    return proto3.util.equals(TLMessagesAvailableReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesBotApp
 */
export class MessagesBotApp extends Message$1<MessagesBotApp> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool inactive = 3;
   */
  inactive = false;

  /**
   * @generated from field: bool request_write_access = 4;
   */
  requestWriteAccess = false;

  /**
   * @generated from field: bool has_settings = 5;
   */
  hasSettings = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotApp app = 6;
   */
  app: BotApp[] = [];

  constructor(data?: PartialMessage<MessagesBotApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesBotApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "request_write_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "has_settings", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "app", kind: "message", T: BotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesBotApp {
    return new MessagesBotApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesBotApp {
    return new MessagesBotApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesBotApp {
    return new MessagesBotApp().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesBotApp | PlainMessage<MessagesBotApp> | undefined, b: MessagesBotApp | PlainMessage<MessagesBotApp> | undefined): boolean {
    return proto3.util.equals(MessagesBotApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotApp
 */
export class TLMessagesBotApp extends Message$1<TLMessagesBotApp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesBotApp data2 = 1;
   */
  data2: MessagesBotApp[] = [];

  constructor(data?: PartialMessage<TLMessagesBotApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesBotApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesBotApp {
    return new TLMessagesBotApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesBotApp {
    return new TLMessagesBotApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesBotApp {
    return new TLMessagesBotApp().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesBotApp | PlainMessage<TLMessagesBotApp> | undefined, b: TLMessagesBotApp | PlainMessage<TLMessagesBotApp> | undefined): boolean {
    return proto3.util.equals(TLMessagesBotApp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesBotCallbackAnswer
 */
export class MessagesBotCallbackAnswer extends Message$1<MessagesBotCallbackAnswer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool alert = 3;
   */
  alert = false;

  /**
   * @generated from field: bool has_url = 4;
   */
  hasUrl = false;

  /**
   * @generated from field: bool native_ui = 5;
   */
  nativeUi = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue message = 6;
   */
  message: StringValue[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue url = 7;
   */
  url: StringValue[] = [];

  /**
   * @generated from field: int32 cache_time = 8;
   */
  cacheTime = 0;

  constructor(data?: PartialMessage<MessagesBotCallbackAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesBotCallbackAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "alert", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_url", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "native_ui", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "message", kind: "message", T: StringValue, repeated: true },
    { no: 7, name: "url", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "cache_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesBotCallbackAnswer {
    return new MessagesBotCallbackAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesBotCallbackAnswer {
    return new MessagesBotCallbackAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesBotCallbackAnswer {
    return new MessagesBotCallbackAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesBotCallbackAnswer | PlainMessage<MessagesBotCallbackAnswer> | undefined, b: MessagesBotCallbackAnswer | PlainMessage<MessagesBotCallbackAnswer> | undefined): boolean {
    return proto3.util.equals(MessagesBotCallbackAnswer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotCallbackAnswer
 */
export class TLMessagesBotCallbackAnswer extends Message$1<TLMessagesBotCallbackAnswer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesBotCallbackAnswer data2 = 1;
   */
  data2: MessagesBotCallbackAnswer[] = [];

  constructor(data?: PartialMessage<TLMessagesBotCallbackAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotCallbackAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesBotCallbackAnswer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesBotCallbackAnswer {
    return new TLMessagesBotCallbackAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesBotCallbackAnswer {
    return new TLMessagesBotCallbackAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesBotCallbackAnswer {
    return new TLMessagesBotCallbackAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesBotCallbackAnswer | PlainMessage<TLMessagesBotCallbackAnswer> | undefined, b: TLMessagesBotCallbackAnswer | PlainMessage<TLMessagesBotCallbackAnswer> | undefined): boolean {
    return proto3.util.equals(TLMessagesBotCallbackAnswer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesBotResults
 */
export class MessagesBotResults extends Message$1<MessagesBotResults> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool gallery = 3;
   */
  gallery = false;

  /**
   * @generated from field: int64 query_id = 4;
   */
  queryId = protoInt64.zero;

  /**
   * @generated from field: repeated google.protobuf.StringValue next_offset = 5;
   */
  nextOffset: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineBotSwitchPM switch_pm = 6;
   */
  switchPm: InlineBotSwitchPM[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.InlineBotWebView switch_webview = 7;
   */
  switchWebview: InlineBotWebView[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BotInlineResult results = 8;
   */
  results: BotInlineResult[] = [];

  /**
   * @generated from field: int32 cache_time = 9;
   */
  cacheTime = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 10;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesBotResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesBotResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "gallery", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "query_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "next_offset", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "switch_pm", kind: "message", T: InlineBotSwitchPM, repeated: true },
    { no: 7, name: "switch_webview", kind: "message", T: InlineBotWebView, repeated: true },
    { no: 8, name: "results", kind: "message", T: BotInlineResult, repeated: true },
    { no: 9, name: "cache_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesBotResults {
    return new MessagesBotResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesBotResults {
    return new MessagesBotResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesBotResults {
    return new MessagesBotResults().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesBotResults | PlainMessage<MessagesBotResults> | undefined, b: MessagesBotResults | PlainMessage<MessagesBotResults> | undefined): boolean {
    return proto3.util.equals(MessagesBotResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotResults
 */
export class TLMessagesBotResults extends Message$1<TLMessagesBotResults> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesBotResults data2 = 1;
   */
  data2: MessagesBotResults[] = [];

  constructor(data?: PartialMessage<TLMessagesBotResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesBotResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesBotResults, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesBotResults {
    return new TLMessagesBotResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesBotResults {
    return new TLMessagesBotResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesBotResults {
    return new TLMessagesBotResults().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesBotResults | PlainMessage<TLMessagesBotResults> | undefined, b: TLMessagesBotResults | PlainMessage<TLMessagesBotResults> | undefined): boolean {
    return proto3.util.equals(TLMessagesBotResults, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesChatAdminsWithInvites
 */
export class MessagesChatAdminsWithInvites extends Message$1<MessagesChatAdminsWithInvites> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatAdminWithInvites admins = 3;
   */
  admins: ChatAdminWithInvites[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesChatAdminsWithInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesChatAdminsWithInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "admins", kind: "message", T: ChatAdminWithInvites, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesChatAdminsWithInvites {
    return new MessagesChatAdminsWithInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesChatAdminsWithInvites {
    return new MessagesChatAdminsWithInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesChatAdminsWithInvites {
    return new MessagesChatAdminsWithInvites().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesChatAdminsWithInvites | PlainMessage<MessagesChatAdminsWithInvites> | undefined, b: MessagesChatAdminsWithInvites | PlainMessage<MessagesChatAdminsWithInvites> | undefined): boolean {
    return proto3.util.equals(MessagesChatAdminsWithInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatAdminsWithInvites
 */
export class TLMessagesChatAdminsWithInvites extends Message$1<TLMessagesChatAdminsWithInvites> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesChatAdminsWithInvites data2 = 1;
   */
  data2: MessagesChatAdminsWithInvites[] = [];

  constructor(data?: PartialMessage<TLMessagesChatAdminsWithInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatAdminsWithInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesChatAdminsWithInvites, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChatAdminsWithInvites {
    return new TLMessagesChatAdminsWithInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChatAdminsWithInvites {
    return new TLMessagesChatAdminsWithInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChatAdminsWithInvites {
    return new TLMessagesChatAdminsWithInvites().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChatAdminsWithInvites | PlainMessage<TLMessagesChatAdminsWithInvites> | undefined, b: TLMessagesChatAdminsWithInvites | PlainMessage<TLMessagesChatAdminsWithInvites> | undefined): boolean {
    return proto3.util.equals(TLMessagesChatAdminsWithInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesChatFull
 */
export class MessagesChatFull extends Message$1<MessagesChatFull> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatFull full_chat = 3;
   */
  fullChat: ChatFull[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesChatFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesChatFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "full_chat", kind: "message", T: ChatFull, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesChatFull {
    return new MessagesChatFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesChatFull {
    return new MessagesChatFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesChatFull {
    return new MessagesChatFull().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesChatFull | PlainMessage<MessagesChatFull> | undefined, b: MessagesChatFull | PlainMessage<MessagesChatFull> | undefined): boolean {
    return proto3.util.equals(MessagesChatFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatFull
 */
export class TLMessagesChatFull extends Message$1<TLMessagesChatFull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesChatFull data2 = 1;
   */
  data2: MessagesChatFull[] = [];

  constructor(data?: PartialMessage<TLMessagesChatFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesChatFull, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChatFull {
    return new TLMessagesChatFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChatFull {
    return new TLMessagesChatFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChatFull {
    return new TLMessagesChatFull().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChatFull | PlainMessage<TLMessagesChatFull> | undefined, b: TLMessagesChatFull | PlainMessage<TLMessagesChatFull> | undefined): boolean {
    return proto3.util.equals(TLMessagesChatFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesChatInviteImporters
 */
export class MessagesChatInviteImporters extends Message$1<MessagesChatInviteImporters> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ChatInviteImporter importers = 4;
   */
  importers: ChatInviteImporter[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesChatInviteImporters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesChatInviteImporters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "importers", kind: "message", T: ChatInviteImporter, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesChatInviteImporters {
    return new MessagesChatInviteImporters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesChatInviteImporters {
    return new MessagesChatInviteImporters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesChatInviteImporters {
    return new MessagesChatInviteImporters().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesChatInviteImporters | PlainMessage<MessagesChatInviteImporters> | undefined, b: MessagesChatInviteImporters | PlainMessage<MessagesChatInviteImporters> | undefined): boolean {
    return proto3.util.equals(MessagesChatInviteImporters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatInviteImporters
 */
export class TLMessagesChatInviteImporters extends Message$1<TLMessagesChatInviteImporters> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesChatInviteImporters data2 = 1;
   */
  data2: MessagesChatInviteImporters[] = [];

  constructor(data?: PartialMessage<TLMessagesChatInviteImporters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatInviteImporters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesChatInviteImporters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChatInviteImporters {
    return new TLMessagesChatInviteImporters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChatInviteImporters {
    return new TLMessagesChatInviteImporters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChatInviteImporters {
    return new TLMessagesChatInviteImporters().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChatInviteImporters | PlainMessage<TLMessagesChatInviteImporters> | undefined, b: TLMessagesChatInviteImporters | PlainMessage<TLMessagesChatInviteImporters> | undefined): boolean {
    return proto3.util.equals(TLMessagesChatInviteImporters, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesChats
 */
export class MessagesChats extends Message$1<MessagesChats> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 3;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<MessagesChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesChats {
    return new MessagesChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesChats {
    return new MessagesChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesChats {
    return new MessagesChats().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesChats | PlainMessage<MessagesChats> | undefined, b: MessagesChats | PlainMessage<MessagesChats> | undefined): boolean {
    return proto3.util.equals(MessagesChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChats
 */
export class TLMessagesChats extends Message$1<TLMessagesChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesChats data2 = 1;
   */
  data2: MessagesChats[] = [];

  constructor(data?: PartialMessage<TLMessagesChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesChats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChats {
    return new TLMessagesChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChats {
    return new TLMessagesChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChats {
    return new TLMessagesChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChats | PlainMessage<TLMessagesChats> | undefined, b: TLMessagesChats | PlainMessage<TLMessagesChats> | undefined): boolean {
    return proto3.util.equals(TLMessagesChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatsSlice
 */
export class TLMessagesChatsSlice extends Message$1<TLMessagesChatsSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesChats data2 = 1;
   */
  data2: MessagesChats[] = [];

  constructor(data?: PartialMessage<TLMessagesChatsSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChatsSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesChats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChatsSlice {
    return new TLMessagesChatsSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChatsSlice {
    return new TLMessagesChatsSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChatsSlice {
    return new TLMessagesChatsSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChatsSlice | PlainMessage<TLMessagesChatsSlice> | undefined, b: TLMessagesChatsSlice | PlainMessage<TLMessagesChatsSlice> | undefined): boolean {
    return proto3.util.equals(TLMessagesChatsSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesCheckedHistoryImportPeer
 */
export class MessagesCheckedHistoryImportPeer extends Message$1<MessagesCheckedHistoryImportPeer> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string confirm_text = 3;
   */
  confirmText = "";

  constructor(data?: PartialMessage<MessagesCheckedHistoryImportPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesCheckedHistoryImportPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "confirm_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesCheckedHistoryImportPeer {
    return new MessagesCheckedHistoryImportPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesCheckedHistoryImportPeer {
    return new MessagesCheckedHistoryImportPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesCheckedHistoryImportPeer {
    return new MessagesCheckedHistoryImportPeer().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesCheckedHistoryImportPeer | PlainMessage<MessagesCheckedHistoryImportPeer> | undefined, b: MessagesCheckedHistoryImportPeer | PlainMessage<MessagesCheckedHistoryImportPeer> | undefined): boolean {
    return proto3.util.equals(MessagesCheckedHistoryImportPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesCheckedHistoryImportPeer
 */
export class TLMessagesCheckedHistoryImportPeer extends Message$1<TLMessagesCheckedHistoryImportPeer> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesCheckedHistoryImportPeer data2 = 1;
   */
  data2: MessagesCheckedHistoryImportPeer[] = [];

  constructor(data?: PartialMessage<TLMessagesCheckedHistoryImportPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesCheckedHistoryImportPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesCheckedHistoryImportPeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesCheckedHistoryImportPeer {
    return new TLMessagesCheckedHistoryImportPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesCheckedHistoryImportPeer {
    return new TLMessagesCheckedHistoryImportPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesCheckedHistoryImportPeer {
    return new TLMessagesCheckedHistoryImportPeer().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesCheckedHistoryImportPeer | PlainMessage<TLMessagesCheckedHistoryImportPeer> | undefined, b: TLMessagesCheckedHistoryImportPeer | PlainMessage<TLMessagesCheckedHistoryImportPeer> | undefined): boolean {
    return proto3.util.equals(TLMessagesCheckedHistoryImportPeer, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesDhConfig
 */
export class MessagesDhConfig extends Message$1<MessagesDhConfig> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes random = 3;
   */
  random = new Uint8Array(0);

  /**
   * @generated from field: int32 g = 4;
   */
  g = 0;

  /**
   * @generated from field: bytes p = 5;
   */
  p = new Uint8Array(0);

  /**
   * @generated from field: int32 version = 6;
   */
  version = 0;

  constructor(data?: PartialMessage<MessagesDhConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesDhConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "random", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "g", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "p", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesDhConfig {
    return new MessagesDhConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesDhConfig {
    return new MessagesDhConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesDhConfig {
    return new MessagesDhConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesDhConfig | PlainMessage<MessagesDhConfig> | undefined, b: MessagesDhConfig | PlainMessage<MessagesDhConfig> | undefined): boolean {
    return proto3.util.equals(MessagesDhConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDhConfigNotModified
 */
export class TLMessagesDhConfigNotModified extends Message$1<TLMessagesDhConfigNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDhConfig data2 = 1;
   */
  data2: MessagesDhConfig[] = [];

  constructor(data?: PartialMessage<TLMessagesDhConfigNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDhConfigNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDhConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDhConfigNotModified {
    return new TLMessagesDhConfigNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDhConfigNotModified {
    return new TLMessagesDhConfigNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDhConfigNotModified {
    return new TLMessagesDhConfigNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDhConfigNotModified | PlainMessage<TLMessagesDhConfigNotModified> | undefined, b: TLMessagesDhConfigNotModified | PlainMessage<TLMessagesDhConfigNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesDhConfigNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDhConfig
 */
export class TLMessagesDhConfig extends Message$1<TLMessagesDhConfig> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDhConfig data2 = 1;
   */
  data2: MessagesDhConfig[] = [];

  constructor(data?: PartialMessage<TLMessagesDhConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDhConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDhConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDhConfig {
    return new TLMessagesDhConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDhConfig {
    return new TLMessagesDhConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDhConfig {
    return new TLMessagesDhConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDhConfig | PlainMessage<TLMessagesDhConfig> | undefined, b: TLMessagesDhConfig | PlainMessage<TLMessagesDhConfig> | undefined): boolean {
    return proto3.util.equals(TLMessagesDhConfig, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesDialogs
 */
export class MessagesDialogs extends Message$1<MessagesDialogs> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Dialog dialogs = 3;
   */
  dialogs: Dialog[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 4;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: int32 count = 7;
   */
  count = 0;

  constructor(data?: PartialMessage<MessagesDialogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesDialogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "dialogs", kind: "message", T: Dialog, repeated: true },
    { no: 4, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesDialogs {
    return new MessagesDialogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesDialogs {
    return new MessagesDialogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesDialogs {
    return new MessagesDialogs().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesDialogs | PlainMessage<MessagesDialogs> | undefined, b: MessagesDialogs | PlainMessage<MessagesDialogs> | undefined): boolean {
    return proto3.util.equals(MessagesDialogs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogs
 */
export class TLMessagesDialogs extends Message$1<TLMessagesDialogs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDialogs data2 = 1;
   */
  data2: MessagesDialogs[] = [];

  constructor(data?: PartialMessage<TLMessagesDialogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDialogs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDialogs {
    return new TLMessagesDialogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDialogs {
    return new TLMessagesDialogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDialogs {
    return new TLMessagesDialogs().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDialogs | PlainMessage<TLMessagesDialogs> | undefined, b: TLMessagesDialogs | PlainMessage<TLMessagesDialogs> | undefined): boolean {
    return proto3.util.equals(TLMessagesDialogs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogsSlice
 */
export class TLMessagesDialogsSlice extends Message$1<TLMessagesDialogsSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDialogs data2 = 1;
   */
  data2: MessagesDialogs[] = [];

  constructor(data?: PartialMessage<TLMessagesDialogsSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogsSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDialogs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDialogsSlice {
    return new TLMessagesDialogsSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDialogsSlice {
    return new TLMessagesDialogsSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDialogsSlice {
    return new TLMessagesDialogsSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDialogsSlice | PlainMessage<TLMessagesDialogsSlice> | undefined, b: TLMessagesDialogsSlice | PlainMessage<TLMessagesDialogsSlice> | undefined): boolean {
    return proto3.util.equals(TLMessagesDialogsSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogsNotModified
 */
export class TLMessagesDialogsNotModified extends Message$1<TLMessagesDialogsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDialogs data2 = 1;
   */
  data2: MessagesDialogs[] = [];

  constructor(data?: PartialMessage<TLMessagesDialogsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDialogsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDialogs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDialogsNotModified {
    return new TLMessagesDialogsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDialogsNotModified {
    return new TLMessagesDialogsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDialogsNotModified {
    return new TLMessagesDialogsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDialogsNotModified | PlainMessage<TLMessagesDialogsNotModified> | undefined, b: TLMessagesDialogsNotModified | PlainMessage<TLMessagesDialogsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesDialogsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesDiscussionMessage
 */
export class MessagesDiscussionMessage extends Message$1<MessagesDiscussionMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 3;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value max_id = 4;
   */
  maxId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value read_inbox_max_id = 5;
   */
  readInboxMaxId: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value read_outbox_max_id = 6;
   */
  readOutboxMaxId: Int32Value[] = [];

  /**
   * @generated from field: int32 unread_count = 7;
   */
  unreadCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 8;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 9;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesDiscussionMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesDiscussionMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 4, name: "max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 5, name: "read_inbox_max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "read_outbox_max_id", kind: "message", T: Int32Value, repeated: true },
    { no: 7, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 9, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesDiscussionMessage {
    return new MessagesDiscussionMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesDiscussionMessage {
    return new MessagesDiscussionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesDiscussionMessage {
    return new MessagesDiscussionMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesDiscussionMessage | PlainMessage<MessagesDiscussionMessage> | undefined, b: MessagesDiscussionMessage | PlainMessage<MessagesDiscussionMessage> | undefined): boolean {
    return proto3.util.equals(MessagesDiscussionMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesDiscussionMessage
 */
export class TLMessagesDiscussionMessage extends Message$1<TLMessagesDiscussionMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesDiscussionMessage data2 = 1;
   */
  data2: MessagesDiscussionMessage[] = [];

  constructor(data?: PartialMessage<TLMessagesDiscussionMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesDiscussionMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesDiscussionMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesDiscussionMessage {
    return new TLMessagesDiscussionMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesDiscussionMessage {
    return new TLMessagesDiscussionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesDiscussionMessage {
    return new TLMessagesDiscussionMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesDiscussionMessage | PlainMessage<TLMessagesDiscussionMessage> | undefined, b: TLMessagesDiscussionMessage | PlainMessage<TLMessagesDiscussionMessage> | undefined): boolean {
    return proto3.util.equals(TLMessagesDiscussionMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesEmojiGroups
 */
export class MessagesEmojiGroups extends Message$1<MessagesEmojiGroups> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 hash = 3;
   */
  hash = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EmojiGroup groups = 4;
   */
  groups: EmojiGroup[] = [];

  constructor(data?: PartialMessage<MessagesEmojiGroups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesEmojiGroups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "groups", kind: "message", T: EmojiGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesEmojiGroups {
    return new MessagesEmojiGroups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesEmojiGroups {
    return new MessagesEmojiGroups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesEmojiGroups {
    return new MessagesEmojiGroups().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesEmojiGroups | PlainMessage<MessagesEmojiGroups> | undefined, b: MessagesEmojiGroups | PlainMessage<MessagesEmojiGroups> | undefined): boolean {
    return proto3.util.equals(MessagesEmojiGroups, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesEmojiGroupsNotModified
 */
export class TLMessagesEmojiGroupsNotModified extends Message$1<TLMessagesEmojiGroupsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesEmojiGroups data2 = 1;
   */
  data2: MessagesEmojiGroups[] = [];

  constructor(data?: PartialMessage<TLMessagesEmojiGroupsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesEmojiGroupsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesEmojiGroups, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesEmojiGroupsNotModified {
    return new TLMessagesEmojiGroupsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesEmojiGroupsNotModified {
    return new TLMessagesEmojiGroupsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesEmojiGroupsNotModified {
    return new TLMessagesEmojiGroupsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesEmojiGroupsNotModified | PlainMessage<TLMessagesEmojiGroupsNotModified> | undefined, b: TLMessagesEmojiGroupsNotModified | PlainMessage<TLMessagesEmojiGroupsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesEmojiGroupsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesEmojiGroups
 */
export class TLMessagesEmojiGroups extends Message$1<TLMessagesEmojiGroups> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesEmojiGroups data2 = 1;
   */
  data2: MessagesEmojiGroups[] = [];

  constructor(data?: PartialMessage<TLMessagesEmojiGroups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesEmojiGroups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesEmojiGroups, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesEmojiGroups {
    return new TLMessagesEmojiGroups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesEmojiGroups {
    return new TLMessagesEmojiGroups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesEmojiGroups {
    return new TLMessagesEmojiGroups().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesEmojiGroups | PlainMessage<TLMessagesEmojiGroups> | undefined, b: TLMessagesEmojiGroups | PlainMessage<TLMessagesEmojiGroups> | undefined): boolean {
    return proto3.util.equals(TLMessagesEmojiGroups, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvite
 */
export class MessagesExportedChatInvite extends Message$1<MessagesExportedChatInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite invite = 3;
   */
  invite: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite new_invite = 5;
   */
  newInvite: ExportedChatInvite[] = [];

  constructor(data?: PartialMessage<MessagesExportedChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "invite", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
    { no: 5, name: "new_invite", kind: "message", T: ExportedChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesExportedChatInvite {
    return new MessagesExportedChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesExportedChatInvite {
    return new MessagesExportedChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesExportedChatInvite {
    return new MessagesExportedChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesExportedChatInvite | PlainMessage<MessagesExportedChatInvite> | undefined, b: MessagesExportedChatInvite | PlainMessage<MessagesExportedChatInvite> | undefined): boolean {
    return proto3.util.equals(MessagesExportedChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInvite
 */
export class TLMessagesExportedChatInvite extends Message$1<TLMessagesExportedChatInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvite data2 = 1;
   */
  data2: MessagesExportedChatInvite[] = [];

  constructor(data?: PartialMessage<TLMessagesExportedChatInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesExportedChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesExportedChatInvite {
    return new TLMessagesExportedChatInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInvite {
    return new TLMessagesExportedChatInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInvite {
    return new TLMessagesExportedChatInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesExportedChatInvite | PlainMessage<TLMessagesExportedChatInvite> | undefined, b: TLMessagesExportedChatInvite | PlainMessage<TLMessagesExportedChatInvite> | undefined): boolean {
    return proto3.util.equals(TLMessagesExportedChatInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInviteReplaced
 */
export class TLMessagesExportedChatInviteReplaced extends Message$1<TLMessagesExportedChatInviteReplaced> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvite data2 = 1;
   */
  data2: MessagesExportedChatInvite[] = [];

  constructor(data?: PartialMessage<TLMessagesExportedChatInviteReplaced>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInviteReplaced";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesExportedChatInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesExportedChatInviteReplaced {
    return new TLMessagesExportedChatInviteReplaced().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInviteReplaced {
    return new TLMessagesExportedChatInviteReplaced().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInviteReplaced {
    return new TLMessagesExportedChatInviteReplaced().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesExportedChatInviteReplaced | PlainMessage<TLMessagesExportedChatInviteReplaced> | undefined, b: TLMessagesExportedChatInviteReplaced | PlainMessage<TLMessagesExportedChatInviteReplaced> | undefined): boolean {
    return proto3.util.equals(TLMessagesExportedChatInviteReplaced, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvites
 */
export class MessagesExportedChatInvites extends Message$1<MessagesExportedChatInvites> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ExportedChatInvite invites = 4;
   */
  invites: ExportedChatInvite[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesExportedChatInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "invites", kind: "message", T: ExportedChatInvite, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesExportedChatInvites {
    return new MessagesExportedChatInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesExportedChatInvites {
    return new MessagesExportedChatInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesExportedChatInvites {
    return new MessagesExportedChatInvites().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesExportedChatInvites | PlainMessage<MessagesExportedChatInvites> | undefined, b: MessagesExportedChatInvites | PlainMessage<MessagesExportedChatInvites> | undefined): boolean {
    return proto3.util.equals(MessagesExportedChatInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInvites
 */
export class TLMessagesExportedChatInvites extends Message$1<TLMessagesExportedChatInvites> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesExportedChatInvites data2 = 1;
   */
  data2: MessagesExportedChatInvites[] = [];

  constructor(data?: PartialMessage<TLMessagesExportedChatInvites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesExportedChatInvites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesExportedChatInvites, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesExportedChatInvites {
    return new TLMessagesExportedChatInvites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInvites {
    return new TLMessagesExportedChatInvites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesExportedChatInvites {
    return new TLMessagesExportedChatInvites().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesExportedChatInvites | PlainMessage<TLMessagesExportedChatInvites> | undefined, b: TLMessagesExportedChatInvites | PlainMessage<TLMessagesExportedChatInvites> | undefined): boolean {
    return proto3.util.equals(TLMessagesExportedChatInvites, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesFavedStickers
 */
export class MessagesFavedStickers extends Message$1<MessagesFavedStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerPack packs = 4;
   */
  packs: StickerPack[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document stickers = 5;
   */
  stickers: Document[] = [];

  constructor(data?: PartialMessage<MessagesFavedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesFavedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "packs", kind: "message", T: StickerPack, repeated: true },
    { no: 5, name: "stickers", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesFavedStickers {
    return new MessagesFavedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesFavedStickers {
    return new MessagesFavedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesFavedStickers {
    return new MessagesFavedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesFavedStickers | PlainMessage<MessagesFavedStickers> | undefined, b: MessagesFavedStickers | PlainMessage<MessagesFavedStickers> | undefined): boolean {
    return proto3.util.equals(MessagesFavedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFavedStickersNotModified
 */
export class TLMessagesFavedStickersNotModified extends Message$1<TLMessagesFavedStickersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFavedStickers data2 = 1;
   */
  data2: MessagesFavedStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesFavedStickersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFavedStickersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFavedStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFavedStickersNotModified {
    return new TLMessagesFavedStickersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFavedStickersNotModified {
    return new TLMessagesFavedStickersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFavedStickersNotModified {
    return new TLMessagesFavedStickersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFavedStickersNotModified | PlainMessage<TLMessagesFavedStickersNotModified> | undefined, b: TLMessagesFavedStickersNotModified | PlainMessage<TLMessagesFavedStickersNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesFavedStickersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFavedStickers
 */
export class TLMessagesFavedStickers extends Message$1<TLMessagesFavedStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFavedStickers data2 = 1;
   */
  data2: MessagesFavedStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesFavedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFavedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFavedStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFavedStickers {
    return new TLMessagesFavedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFavedStickers {
    return new TLMessagesFavedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFavedStickers {
    return new TLMessagesFavedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFavedStickers | PlainMessage<TLMessagesFavedStickers> | undefined, b: TLMessagesFavedStickers | PlainMessage<TLMessagesFavedStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesFavedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesFeaturedStickers
 */
export class MessagesFeaturedStickers extends Message$1<MessagesFeaturedStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: bool premium = 4;
   */
  premium = false;

  /**
   * @generated from field: int64 hash = 5;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered sets = 6;
   */
  sets: StickerSetCovered[] = [];

  /**
   * @generated from field: int64 unread = 7;
   */
  unread = protoInt64.zero;

  constructor(data?: PartialMessage<MessagesFeaturedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesFeaturedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "sets", kind: "message", T: StickerSetCovered, repeated: true },
    { no: 7, name: "unread", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesFeaturedStickers {
    return new MessagesFeaturedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesFeaturedStickers {
    return new MessagesFeaturedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesFeaturedStickers {
    return new MessagesFeaturedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesFeaturedStickers | PlainMessage<MessagesFeaturedStickers> | undefined, b: MessagesFeaturedStickers | PlainMessage<MessagesFeaturedStickers> | undefined): boolean {
    return proto3.util.equals(MessagesFeaturedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFeaturedStickersNotModified
 */
export class TLMessagesFeaturedStickersNotModified extends Message$1<TLMessagesFeaturedStickersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFeaturedStickers data2 = 1;
   */
  data2: MessagesFeaturedStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesFeaturedStickersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFeaturedStickersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFeaturedStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFeaturedStickersNotModified {
    return new TLMessagesFeaturedStickersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFeaturedStickersNotModified {
    return new TLMessagesFeaturedStickersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFeaturedStickersNotModified {
    return new TLMessagesFeaturedStickersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFeaturedStickersNotModified | PlainMessage<TLMessagesFeaturedStickersNotModified> | undefined, b: TLMessagesFeaturedStickersNotModified | PlainMessage<TLMessagesFeaturedStickersNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesFeaturedStickersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFeaturedStickers
 */
export class TLMessagesFeaturedStickers extends Message$1<TLMessagesFeaturedStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFeaturedStickers data2 = 1;
   */
  data2: MessagesFeaturedStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesFeaturedStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFeaturedStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFeaturedStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFeaturedStickers {
    return new TLMessagesFeaturedStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFeaturedStickers {
    return new TLMessagesFeaturedStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFeaturedStickers {
    return new TLMessagesFeaturedStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFeaturedStickers | PlainMessage<TLMessagesFeaturedStickers> | undefined, b: TLMessagesFeaturedStickers | PlainMessage<TLMessagesFeaturedStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesFeaturedStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesForumTopics
 */
export class MessagesForumTopics extends Message$1<MessagesForumTopics> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool order_by_create_date = 3;
   */
  orderByCreateDate = false;

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic topics = 5;
   */
  topics: ForumTopic[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 6;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 7;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 8;
   */
  users: User[] = [];

  /**
   * @generated from field: int32 pts = 9;
   */
  pts = 0;

  constructor(data?: PartialMessage<MessagesForumTopics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesForumTopics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "order_by_create_date", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "topics", kind: "message", T: ForumTopic, repeated: true },
    { no: 6, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 7, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 8, name: "users", kind: "message", T: User, repeated: true },
    { no: 9, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesForumTopics {
    return new MessagesForumTopics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesForumTopics {
    return new MessagesForumTopics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesForumTopics {
    return new MessagesForumTopics().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesForumTopics | PlainMessage<MessagesForumTopics> | undefined, b: MessagesForumTopics | PlainMessage<MessagesForumTopics> | undefined): boolean {
    return proto3.util.equals(MessagesForumTopics, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesForumTopics
 */
export class TLMessagesForumTopics extends Message$1<TLMessagesForumTopics> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesForumTopics data2 = 1;
   */
  data2: MessagesForumTopics[] = [];

  constructor(data?: PartialMessage<TLMessagesForumTopics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesForumTopics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesForumTopics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesForumTopics {
    return new TLMessagesForumTopics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesForumTopics {
    return new TLMessagesForumTopics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesForumTopics {
    return new TLMessagesForumTopics().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesForumTopics | PlainMessage<TLMessagesForumTopics> | undefined, b: TLMessagesForumTopics | PlainMessage<TLMessagesForumTopics> | undefined): boolean {
    return proto3.util.equals(TLMessagesForumTopics, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesFoundStickerSets
 */
export class MessagesFoundStickerSets extends Message$1<MessagesFoundStickerSets> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered sets = 4;
   */
  sets: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<MessagesFoundStickerSets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesFoundStickerSets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sets", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesFoundStickerSets {
    return new MessagesFoundStickerSets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesFoundStickerSets {
    return new MessagesFoundStickerSets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesFoundStickerSets {
    return new MessagesFoundStickerSets().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesFoundStickerSets | PlainMessage<MessagesFoundStickerSets> | undefined, b: MessagesFoundStickerSets | PlainMessage<MessagesFoundStickerSets> | undefined): boolean {
    return proto3.util.equals(MessagesFoundStickerSets, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFoundStickerSetsNotModified
 */
export class TLMessagesFoundStickerSetsNotModified extends Message$1<TLMessagesFoundStickerSetsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFoundStickerSets data2 = 1;
   */
  data2: MessagesFoundStickerSets[] = [];

  constructor(data?: PartialMessage<TLMessagesFoundStickerSetsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFoundStickerSetsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFoundStickerSets, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFoundStickerSetsNotModified {
    return new TLMessagesFoundStickerSetsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFoundStickerSetsNotModified {
    return new TLMessagesFoundStickerSetsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFoundStickerSetsNotModified {
    return new TLMessagesFoundStickerSetsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFoundStickerSetsNotModified | PlainMessage<TLMessagesFoundStickerSetsNotModified> | undefined, b: TLMessagesFoundStickerSetsNotModified | PlainMessage<TLMessagesFoundStickerSetsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesFoundStickerSetsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesFoundStickerSets
 */
export class TLMessagesFoundStickerSets extends Message$1<TLMessagesFoundStickerSets> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFoundStickerSets data2 = 1;
   */
  data2: MessagesFoundStickerSets[] = [];

  constructor(data?: PartialMessage<TLMessagesFoundStickerSets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesFoundStickerSets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesFoundStickerSets, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesFoundStickerSets {
    return new TLMessagesFoundStickerSets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesFoundStickerSets {
    return new TLMessagesFoundStickerSets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesFoundStickerSets {
    return new TLMessagesFoundStickerSets().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesFoundStickerSets | PlainMessage<TLMessagesFoundStickerSets> | undefined, b: TLMessagesFoundStickerSets | PlainMessage<TLMessagesFoundStickerSets> | undefined): boolean {
    return proto3.util.equals(TLMessagesFoundStickerSets, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesHighScores
 */
export class MessagesHighScores extends Message$1<MessagesHighScores> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.HighScore scores = 3;
   */
  scores: HighScore[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesHighScores>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesHighScores";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "scores", kind: "message", T: HighScore, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesHighScores {
    return new MessagesHighScores().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesHighScores {
    return new MessagesHighScores().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesHighScores {
    return new MessagesHighScores().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesHighScores | PlainMessage<MessagesHighScores> | undefined, b: MessagesHighScores | PlainMessage<MessagesHighScores> | undefined): boolean {
    return proto3.util.equals(MessagesHighScores, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesHighScores
 */
export class TLMessagesHighScores extends Message$1<TLMessagesHighScores> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesHighScores data2 = 1;
   */
  data2: MessagesHighScores[] = [];

  constructor(data?: PartialMessage<TLMessagesHighScores>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesHighScores";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesHighScores, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesHighScores {
    return new TLMessagesHighScores().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesHighScores {
    return new TLMessagesHighScores().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesHighScores {
    return new TLMessagesHighScores().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesHighScores | PlainMessage<TLMessagesHighScores> | undefined, b: TLMessagesHighScores | PlainMessage<TLMessagesHighScores> | undefined): boolean {
    return proto3.util.equals(TLMessagesHighScores, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImport
 */
export class MessagesHistoryImport extends Message$1<MessagesHistoryImport> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MessagesHistoryImport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesHistoryImport {
    return new MessagesHistoryImport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesHistoryImport {
    return new MessagesHistoryImport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesHistoryImport {
    return new MessagesHistoryImport().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesHistoryImport | PlainMessage<MessagesHistoryImport> | undefined, b: MessagesHistoryImport | PlainMessage<MessagesHistoryImport> | undefined): boolean {
    return proto3.util.equals(MessagesHistoryImport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesHistoryImport
 */
export class TLMessagesHistoryImport extends Message$1<TLMessagesHistoryImport> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImport data2 = 1;
   */
  data2: MessagesHistoryImport[] = [];

  constructor(data?: PartialMessage<TLMessagesHistoryImport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesHistoryImport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesHistoryImport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesHistoryImport {
    return new TLMessagesHistoryImport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesHistoryImport {
    return new TLMessagesHistoryImport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesHistoryImport {
    return new TLMessagesHistoryImport().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesHistoryImport | PlainMessage<TLMessagesHistoryImport> | undefined, b: TLMessagesHistoryImport | PlainMessage<TLMessagesHistoryImport> | undefined): boolean {
    return proto3.util.equals(TLMessagesHistoryImport, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImportParsed
 */
export class MessagesHistoryImportParsed extends Message$1<MessagesHistoryImportParsed> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool pm = 3;
   */
  pm = false;

  /**
   * @generated from field: bool group = 4;
   */
  group = false;

  /**
   * @generated from field: repeated google.protobuf.StringValue title = 5;
   */
  title: StringValue[] = [];

  constructor(data?: PartialMessage<MessagesHistoryImportParsed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImportParsed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pm", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "group", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "title", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesHistoryImportParsed {
    return new MessagesHistoryImportParsed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesHistoryImportParsed {
    return new MessagesHistoryImportParsed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesHistoryImportParsed {
    return new MessagesHistoryImportParsed().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesHistoryImportParsed | PlainMessage<MessagesHistoryImportParsed> | undefined, b: MessagesHistoryImportParsed | PlainMessage<MessagesHistoryImportParsed> | undefined): boolean {
    return proto3.util.equals(MessagesHistoryImportParsed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesHistoryImportParsed
 */
export class TLMessagesHistoryImportParsed extends Message$1<TLMessagesHistoryImportParsed> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesHistoryImportParsed data2 = 1;
   */
  data2: MessagesHistoryImportParsed[] = [];

  constructor(data?: PartialMessage<TLMessagesHistoryImportParsed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesHistoryImportParsed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesHistoryImportParsed, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesHistoryImportParsed {
    return new TLMessagesHistoryImportParsed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesHistoryImportParsed {
    return new TLMessagesHistoryImportParsed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesHistoryImportParsed {
    return new TLMessagesHistoryImportParsed().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesHistoryImportParsed | PlainMessage<TLMessagesHistoryImportParsed> | undefined, b: TLMessagesHistoryImportParsed | PlainMessage<TLMessagesHistoryImportParsed> | undefined): boolean {
    return proto3.util.equals(TLMessagesHistoryImportParsed, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesInactiveChats
 */
export class MessagesInactiveChats extends Message$1<MessagesInactiveChats> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 dates = 3;
   */
  dates = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesInactiveChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesInactiveChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "dates", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesInactiveChats {
    return new MessagesInactiveChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesInactiveChats {
    return new MessagesInactiveChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesInactiveChats {
    return new MessagesInactiveChats().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesInactiveChats | PlainMessage<MessagesInactiveChats> | undefined, b: MessagesInactiveChats | PlainMessage<MessagesInactiveChats> | undefined): boolean {
    return proto3.util.equals(MessagesInactiveChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesInactiveChats
 */
export class TLMessagesInactiveChats extends Message$1<TLMessagesInactiveChats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesInactiveChats data2 = 1;
   */
  data2: MessagesInactiveChats[] = [];

  constructor(data?: PartialMessage<TLMessagesInactiveChats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesInactiveChats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesInactiveChats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesInactiveChats {
    return new TLMessagesInactiveChats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesInactiveChats {
    return new TLMessagesInactiveChats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesInactiveChats {
    return new TLMessagesInactiveChats().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesInactiveChats | PlainMessage<TLMessagesInactiveChats> | undefined, b: TLMessagesInactiveChats | PlainMessage<TLMessagesInactiveChats> | undefined): boolean {
    return proto3.util.equals(TLMessagesInactiveChats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesMessageEditData
 */
export class MessagesMessageEditData extends Message$1<MessagesMessageEditData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool caption = 3;
   */
  caption = false;

  constructor(data?: PartialMessage<MessagesMessageEditData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesMessageEditData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "caption", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesMessageEditData {
    return new MessagesMessageEditData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesMessageEditData {
    return new MessagesMessageEditData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesMessageEditData {
    return new MessagesMessageEditData().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesMessageEditData | PlainMessage<MessagesMessageEditData> | undefined, b: MessagesMessageEditData | PlainMessage<MessagesMessageEditData> | undefined): boolean {
    return proto3.util.equals(MessagesMessageEditData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageEditData
 */
export class TLMessagesMessageEditData extends Message$1<TLMessagesMessageEditData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessageEditData data2 = 1;
   */
  data2: MessagesMessageEditData[] = [];

  constructor(data?: PartialMessage<TLMessagesMessageEditData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageEditData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessageEditData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessageEditData {
    return new TLMessagesMessageEditData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessageEditData {
    return new TLMessagesMessageEditData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessageEditData {
    return new TLMessagesMessageEditData().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessageEditData | PlainMessage<TLMessagesMessageEditData> | undefined, b: TLMessagesMessageEditData | PlainMessage<TLMessagesMessageEditData> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessageEditData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesMessageReactionsList
 */
export class MessagesMessageReactionsList extends Message$1<MessagesMessageReactionsList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerReaction reactions = 4;
   */
  reactions: MessagePeerReaction[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue next_offset = 7;
   */
  nextOffset: StringValue[] = [];

  constructor(data?: PartialMessage<MessagesMessageReactionsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesMessageReactionsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "reactions", kind: "message", T: MessagePeerReaction, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "next_offset", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesMessageReactionsList {
    return new MessagesMessageReactionsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesMessageReactionsList {
    return new MessagesMessageReactionsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesMessageReactionsList {
    return new MessagesMessageReactionsList().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesMessageReactionsList | PlainMessage<MessagesMessageReactionsList> | undefined, b: MessagesMessageReactionsList | PlainMessage<MessagesMessageReactionsList> | undefined): boolean {
    return proto3.util.equals(MessagesMessageReactionsList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageReactionsList
 */
export class TLMessagesMessageReactionsList extends Message$1<TLMessagesMessageReactionsList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessageReactionsList data2 = 1;
   */
  data2: MessagesMessageReactionsList[] = [];

  constructor(data?: PartialMessage<TLMessagesMessageReactionsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageReactionsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessageReactionsList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessageReactionsList {
    return new TLMessagesMessageReactionsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessageReactionsList {
    return new TLMessagesMessageReactionsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessageReactionsList {
    return new TLMessagesMessageReactionsList().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessageReactionsList | PlainMessage<TLMessagesMessageReactionsList> | undefined, b: TLMessagesMessageReactionsList | PlainMessage<TLMessagesMessageReactionsList> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessageReactionsList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesMessageViews
 */
export class MessagesMessageViews extends Message$1<MessagesMessageViews> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageViews views = 3;
   */
  views: MessageViews[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesMessageViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesMessageViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "views", kind: "message", T: MessageViews, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesMessageViews {
    return new MessagesMessageViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesMessageViews {
    return new MessagesMessageViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesMessageViews {
    return new MessagesMessageViews().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesMessageViews | PlainMessage<MessagesMessageViews> | undefined, b: MessagesMessageViews | PlainMessage<MessagesMessageViews> | undefined): boolean {
    return proto3.util.equals(MessagesMessageViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageViews
 */
export class TLMessagesMessageViews extends Message$1<TLMessagesMessageViews> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessageViews data2 = 1;
   */
  data2: MessagesMessageViews[] = [];

  constructor(data?: PartialMessage<TLMessagesMessageViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessageViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessageViews, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessageViews {
    return new TLMessagesMessageViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessageViews {
    return new TLMessagesMessageViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessageViews {
    return new TLMessagesMessageViews().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessageViews | PlainMessage<TLMessagesMessageViews> | undefined, b: TLMessagesMessageViews | PlainMessage<TLMessagesMessageViews> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessageViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesMessages
 */
export class MessagesMessages extends Message$1<MessagesMessages> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 3;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  /**
   * @generated from field: bool inexact = 6;
   */
  inexact = false;

  /**
   * @generated from field: int32 count = 7;
   */
  count = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value next_rate = 8;
   */
  nextRate: Int32Value[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int32Value offset_id_offset = 9;
   */
  offsetIdOffset: Int32Value[] = [];

  /**
   * @generated from field: int32 pts = 10;
   */
  pts = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ForumTopic topics = 11;
   */
  topics: ForumTopic[] = [];

  constructor(data?: PartialMessage<MessagesMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
    { no: 6, name: "inexact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "next_rate", kind: "message", T: Int32Value, repeated: true },
    { no: 9, name: "offset_id_offset", kind: "message", T: Int32Value, repeated: true },
    { no: 10, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "topics", kind: "message", T: ForumTopic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesMessages {
    return new MessagesMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesMessages {
    return new MessagesMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesMessages {
    return new MessagesMessages().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesMessages | PlainMessage<MessagesMessages> | undefined, b: MessagesMessages | PlainMessage<MessagesMessages> | undefined): boolean {
    return proto3.util.equals(MessagesMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessages
 */
export class TLMessagesMessages extends Message$1<TLMessagesMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessages data2 = 1;
   */
  data2: MessagesMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessages {
    return new TLMessagesMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessages {
    return new TLMessagesMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessages {
    return new TLMessagesMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessages | PlainMessage<TLMessagesMessages> | undefined, b: TLMessagesMessages | PlainMessage<TLMessagesMessages> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessagesSlice
 */
export class TLMessagesMessagesSlice extends Message$1<TLMessagesMessagesSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessages data2 = 1;
   */
  data2: MessagesMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesMessagesSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessagesSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessagesSlice {
    return new TLMessagesMessagesSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessagesSlice {
    return new TLMessagesMessagesSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessagesSlice {
    return new TLMessagesMessagesSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessagesSlice | PlainMessage<TLMessagesMessagesSlice> | undefined, b: TLMessagesMessagesSlice | PlainMessage<TLMessagesMessagesSlice> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessagesSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesChannelMessages
 */
export class TLMessagesChannelMessages extends Message$1<TLMessagesChannelMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessages data2 = 1;
   */
  data2: MessagesMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesChannelMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesChannelMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesChannelMessages {
    return new TLMessagesChannelMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesChannelMessages {
    return new TLMessagesChannelMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesChannelMessages {
    return new TLMessagesChannelMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesChannelMessages | PlainMessage<TLMessagesChannelMessages> | undefined, b: TLMessagesChannelMessages | PlainMessage<TLMessagesChannelMessages> | undefined): boolean {
    return proto3.util.equals(TLMessagesChannelMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessagesNotModified
 */
export class TLMessagesMessagesNotModified extends Message$1<TLMessagesMessagesNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesMessages data2 = 1;
   */
  data2: MessagesMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesMessagesNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesMessagesNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesMessagesNotModified {
    return new TLMessagesMessagesNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesMessagesNotModified {
    return new TLMessagesMessagesNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesMessagesNotModified {
    return new TLMessagesMessagesNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesMessagesNotModified | PlainMessage<TLMessagesMessagesNotModified> | undefined, b: TLMessagesMessagesNotModified | PlainMessage<TLMessagesMessagesNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesMessagesNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesPeerDialogs
 */
export class MessagesPeerDialogs extends Message$1<MessagesPeerDialogs> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Dialog dialogs = 3;
   */
  dialogs: Dialog[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 4;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesState state = 7;
   */
  state: UpdatesState[] = [];

  constructor(data?: PartialMessage<MessagesPeerDialogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesPeerDialogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "dialogs", kind: "message", T: Dialog, repeated: true },
    { no: 4, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "state", kind: "message", T: UpdatesState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesPeerDialogs {
    return new MessagesPeerDialogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesPeerDialogs {
    return new MessagesPeerDialogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesPeerDialogs {
    return new MessagesPeerDialogs().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesPeerDialogs | PlainMessage<MessagesPeerDialogs> | undefined, b: MessagesPeerDialogs | PlainMessage<MessagesPeerDialogs> | undefined): boolean {
    return proto3.util.equals(MessagesPeerDialogs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesPeerDialogs
 */
export class TLMessagesPeerDialogs extends Message$1<TLMessagesPeerDialogs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesPeerDialogs data2 = 1;
   */
  data2: MessagesPeerDialogs[] = [];

  constructor(data?: PartialMessage<TLMessagesPeerDialogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesPeerDialogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesPeerDialogs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesPeerDialogs {
    return new TLMessagesPeerDialogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesPeerDialogs {
    return new TLMessagesPeerDialogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesPeerDialogs {
    return new TLMessagesPeerDialogs().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesPeerDialogs | PlainMessage<TLMessagesPeerDialogs> | undefined, b: TLMessagesPeerDialogs | PlainMessage<TLMessagesPeerDialogs> | undefined): boolean {
    return proto3.util.equals(TLMessagesPeerDialogs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesPeerSettings
 */
export class MessagesPeerSettings extends Message$1<MessagesPeerSettings> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerSettings settings = 3;
   */
  settings: PeerSettings[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesPeerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesPeerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "settings", kind: "message", T: PeerSettings, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesPeerSettings {
    return new MessagesPeerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesPeerSettings {
    return new MessagesPeerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesPeerSettings {
    return new MessagesPeerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesPeerSettings | PlainMessage<MessagesPeerSettings> | undefined, b: MessagesPeerSettings | PlainMessage<MessagesPeerSettings> | undefined): boolean {
    return proto3.util.equals(MessagesPeerSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesPeerSettings
 */
export class TLMessagesPeerSettings extends Message$1<TLMessagesPeerSettings> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesPeerSettings data2 = 1;
   */
  data2: MessagesPeerSettings[] = [];

  constructor(data?: PartialMessage<TLMessagesPeerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesPeerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesPeerSettings, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesPeerSettings {
    return new TLMessagesPeerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesPeerSettings {
    return new TLMessagesPeerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesPeerSettings {
    return new TLMessagesPeerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesPeerSettings | PlainMessage<TLMessagesPeerSettings> | undefined, b: TLMessagesPeerSettings | PlainMessage<TLMessagesPeerSettings> | undefined): boolean {
    return proto3.util.equals(TLMessagesPeerSettings, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesReactions
 */
export class MessagesReactions extends Message$1<MessagesReactions> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Reaction reactions = 4;
   */
  reactions: Reaction[] = [];

  constructor(data?: PartialMessage<MessagesReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "reactions", kind: "message", T: Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesReactions {
    return new MessagesReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesReactions {
    return new MessagesReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesReactions {
    return new MessagesReactions().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesReactions | PlainMessage<MessagesReactions> | undefined, b: MessagesReactions | PlainMessage<MessagesReactions> | undefined): boolean {
    return proto3.util.equals(MessagesReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesReactionsNotModified
 */
export class TLMessagesReactionsNotModified extends Message$1<TLMessagesReactionsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesReactions data2 = 1;
   */
  data2: MessagesReactions[] = [];

  constructor(data?: PartialMessage<TLMessagesReactionsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesReactionsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesReactionsNotModified {
    return new TLMessagesReactionsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesReactionsNotModified {
    return new TLMessagesReactionsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesReactionsNotModified {
    return new TLMessagesReactionsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesReactionsNotModified | PlainMessage<TLMessagesReactionsNotModified> | undefined, b: TLMessagesReactionsNotModified | PlainMessage<TLMessagesReactionsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesReactionsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesReactions
 */
export class TLMessagesReactions extends Message$1<TLMessagesReactions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesReactions data2 = 1;
   */
  data2: MessagesReactions[] = [];

  constructor(data?: PartialMessage<TLMessagesReactions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesReactions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesReactions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesReactions {
    return new TLMessagesReactions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesReactions {
    return new TLMessagesReactions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesReactions {
    return new TLMessagesReactions().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesReactions | PlainMessage<TLMessagesReactions> | undefined, b: TLMessagesReactions | PlainMessage<TLMessagesReactions> | undefined): boolean {
    return proto3.util.equals(TLMessagesReactions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesRecentStickers
 */
export class MessagesRecentStickers extends Message$1<MessagesRecentStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerPack packs = 4;
   */
  packs: StickerPack[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document stickers = 5;
   */
  stickers: Document[] = [];

  /**
   * @generated from field: int32 dates = 6;
   */
  dates = 0;

  constructor(data?: PartialMessage<MessagesRecentStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesRecentStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "packs", kind: "message", T: StickerPack, repeated: true },
    { no: 5, name: "stickers", kind: "message", T: Document, repeated: true },
    { no: 6, name: "dates", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesRecentStickers {
    return new MessagesRecentStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesRecentStickers {
    return new MessagesRecentStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesRecentStickers {
    return new MessagesRecentStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesRecentStickers | PlainMessage<MessagesRecentStickers> | undefined, b: MessagesRecentStickers | PlainMessage<MessagesRecentStickers> | undefined): boolean {
    return proto3.util.equals(MessagesRecentStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesRecentStickersNotModified
 */
export class TLMessagesRecentStickersNotModified extends Message$1<TLMessagesRecentStickersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesRecentStickers data2 = 1;
   */
  data2: MessagesRecentStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesRecentStickersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesRecentStickersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesRecentStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesRecentStickersNotModified {
    return new TLMessagesRecentStickersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesRecentStickersNotModified {
    return new TLMessagesRecentStickersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesRecentStickersNotModified {
    return new TLMessagesRecentStickersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesRecentStickersNotModified | PlainMessage<TLMessagesRecentStickersNotModified> | undefined, b: TLMessagesRecentStickersNotModified | PlainMessage<TLMessagesRecentStickersNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesRecentStickersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesRecentStickers
 */
export class TLMessagesRecentStickers extends Message$1<TLMessagesRecentStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesRecentStickers data2 = 1;
   */
  data2: MessagesRecentStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesRecentStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesRecentStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesRecentStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesRecentStickers {
    return new TLMessagesRecentStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesRecentStickers {
    return new TLMessagesRecentStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesRecentStickers {
    return new TLMessagesRecentStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesRecentStickers | PlainMessage<TLMessagesRecentStickers> | undefined, b: TLMessagesRecentStickers | PlainMessage<TLMessagesRecentStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesRecentStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSavedGifs
 */
export class MessagesSavedGifs extends Message$1<MessagesSavedGifs> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document gifs = 4;
   */
  gifs: Document[] = [];

  constructor(data?: PartialMessage<MessagesSavedGifs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSavedGifs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "gifs", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSavedGifs {
    return new MessagesSavedGifs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSavedGifs {
    return new MessagesSavedGifs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSavedGifs {
    return new MessagesSavedGifs().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSavedGifs | PlainMessage<MessagesSavedGifs> | undefined, b: MessagesSavedGifs | PlainMessage<MessagesSavedGifs> | undefined): boolean {
    return proto3.util.equals(MessagesSavedGifs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSavedGifsNotModified
 */
export class TLMessagesSavedGifsNotModified extends Message$1<TLMessagesSavedGifsNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSavedGifs data2 = 1;
   */
  data2: MessagesSavedGifs[] = [];

  constructor(data?: PartialMessage<TLMessagesSavedGifsNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSavedGifsNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSavedGifs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSavedGifsNotModified {
    return new TLMessagesSavedGifsNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSavedGifsNotModified {
    return new TLMessagesSavedGifsNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSavedGifsNotModified {
    return new TLMessagesSavedGifsNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSavedGifsNotModified | PlainMessage<TLMessagesSavedGifsNotModified> | undefined, b: TLMessagesSavedGifsNotModified | PlainMessage<TLMessagesSavedGifsNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesSavedGifsNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSavedGifs
 */
export class TLMessagesSavedGifs extends Message$1<TLMessagesSavedGifs> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSavedGifs data2 = 1;
   */
  data2: MessagesSavedGifs[] = [];

  constructor(data?: PartialMessage<TLMessagesSavedGifs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSavedGifs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSavedGifs, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSavedGifs {
    return new TLMessagesSavedGifs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSavedGifs {
    return new TLMessagesSavedGifs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSavedGifs {
    return new TLMessagesSavedGifs().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSavedGifs | PlainMessage<TLMessagesSavedGifs> | undefined, b: TLMessagesSavedGifs | PlainMessage<TLMessagesSavedGifs> | undefined): boolean {
    return proto3.util.equals(TLMessagesSavedGifs, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSearchCounter
 */
export class MessagesSearchCounter extends Message$1<MessagesSearchCounter> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool inexact = 3;
   */
  inexact = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesFilter filter = 4;
   */
  filter: MessagesFilter[] = [];

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<MessagesSearchCounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSearchCounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "inexact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "filter", kind: "message", T: MessagesFilter, repeated: true },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSearchCounter {
    return new MessagesSearchCounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSearchCounter {
    return new MessagesSearchCounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSearchCounter {
    return new MessagesSearchCounter().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSearchCounter | PlainMessage<MessagesSearchCounter> | undefined, b: MessagesSearchCounter | PlainMessage<MessagesSearchCounter> | undefined): boolean {
    return proto3.util.equals(MessagesSearchCounter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchCounter
 */
export class TLMessagesSearchCounter extends Message$1<TLMessagesSearchCounter> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSearchCounter data2 = 1;
   */
  data2: MessagesSearchCounter[] = [];

  constructor(data?: PartialMessage<TLMessagesSearchCounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchCounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSearchCounter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSearchCounter {
    return new TLMessagesSearchCounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSearchCounter {
    return new TLMessagesSearchCounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSearchCounter {
    return new TLMessagesSearchCounter().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSearchCounter | PlainMessage<TLMessagesSearchCounter> | undefined, b: TLMessagesSearchCounter | PlainMessage<TLMessagesSearchCounter> | undefined): boolean {
    return proto3.util.equals(TLMessagesSearchCounter, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsCalendar
 */
export class MessagesSearchResultsCalendar extends Message$1<MessagesSearchResultsCalendar> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool inexact = 3;
   */
  inexact = false;

  /**
   * @generated from field: int32 count = 4;
   */
  count = 0;

  /**
   * @generated from field: int32 min_date = 5;
   */
  minDate = 0;

  /**
   * @generated from field: int32 min_msg_id = 6;
   */
  minMsgId = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value offset_id_offset = 7;
   */
  offsetIdOffset: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SearchResultsCalendarPeriod periods = 8;
   */
  periods: SearchResultsCalendarPeriod[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 9;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 10;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 11;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesSearchResultsCalendar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsCalendar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "inexact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "min_date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "min_msg_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "offset_id_offset", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "periods", kind: "message", T: SearchResultsCalendarPeriod, repeated: true },
    { no: 9, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 10, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 11, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSearchResultsCalendar {
    return new MessagesSearchResultsCalendar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSearchResultsCalendar {
    return new MessagesSearchResultsCalendar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSearchResultsCalendar {
    return new MessagesSearchResultsCalendar().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSearchResultsCalendar | PlainMessage<MessagesSearchResultsCalendar> | undefined, b: MessagesSearchResultsCalendar | PlainMessage<MessagesSearchResultsCalendar> | undefined): boolean {
    return proto3.util.equals(MessagesSearchResultsCalendar, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchResultsCalendar
 */
export class TLMessagesSearchResultsCalendar extends Message$1<TLMessagesSearchResultsCalendar> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsCalendar data2 = 1;
   */
  data2: MessagesSearchResultsCalendar[] = [];

  constructor(data?: PartialMessage<TLMessagesSearchResultsCalendar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchResultsCalendar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSearchResultsCalendar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSearchResultsCalendar {
    return new TLMessagesSearchResultsCalendar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSearchResultsCalendar {
    return new TLMessagesSearchResultsCalendar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSearchResultsCalendar {
    return new TLMessagesSearchResultsCalendar().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSearchResultsCalendar | PlainMessage<TLMessagesSearchResultsCalendar> | undefined, b: TLMessagesSearchResultsCalendar | PlainMessage<TLMessagesSearchResultsCalendar> | undefined): boolean {
    return proto3.util.equals(TLMessagesSearchResultsCalendar, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsPositions
 */
export class MessagesSearchResultsPositions extends Message$1<MessagesSearchResultsPositions> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SearchResultsPosition positions = 4;
   */
  positions: SearchResultsPosition[] = [];

  constructor(data?: PartialMessage<MessagesSearchResultsPositions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsPositions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "positions", kind: "message", T: SearchResultsPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSearchResultsPositions {
    return new MessagesSearchResultsPositions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSearchResultsPositions {
    return new MessagesSearchResultsPositions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSearchResultsPositions {
    return new MessagesSearchResultsPositions().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSearchResultsPositions | PlainMessage<MessagesSearchResultsPositions> | undefined, b: MessagesSearchResultsPositions | PlainMessage<MessagesSearchResultsPositions> | undefined): boolean {
    return proto3.util.equals(MessagesSearchResultsPositions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchResultsPositions
 */
export class TLMessagesSearchResultsPositions extends Message$1<TLMessagesSearchResultsPositions> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSearchResultsPositions data2 = 1;
   */
  data2: MessagesSearchResultsPositions[] = [];

  constructor(data?: PartialMessage<TLMessagesSearchResultsPositions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSearchResultsPositions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSearchResultsPositions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSearchResultsPositions {
    return new TLMessagesSearchResultsPositions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSearchResultsPositions {
    return new TLMessagesSearchResultsPositions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSearchResultsPositions {
    return new TLMessagesSearchResultsPositions().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSearchResultsPositions | PlainMessage<TLMessagesSearchResultsPositions> | undefined, b: TLMessagesSearchResultsPositions | PlainMessage<TLMessagesSearchResultsPositions> | undefined): boolean {
    return proto3.util.equals(TLMessagesSearchResultsPositions, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSentEncryptedMessage
 */
export class MessagesSentEncryptedMessage extends Message$1<MessagesSentEncryptedMessage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 date = 3;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedFile file = 4;
   */
  file: EncryptedFile[] = [];

  constructor(data?: PartialMessage<MessagesSentEncryptedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSentEncryptedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "file", kind: "message", T: EncryptedFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSentEncryptedMessage {
    return new MessagesSentEncryptedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSentEncryptedMessage {
    return new MessagesSentEncryptedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSentEncryptedMessage {
    return new MessagesSentEncryptedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSentEncryptedMessage | PlainMessage<MessagesSentEncryptedMessage> | undefined, b: MessagesSentEncryptedMessage | PlainMessage<MessagesSentEncryptedMessage> | undefined): boolean {
    return proto3.util.equals(MessagesSentEncryptedMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSentEncryptedMessage
 */
export class TLMessagesSentEncryptedMessage extends Message$1<TLMessagesSentEncryptedMessage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSentEncryptedMessage data2 = 1;
   */
  data2: MessagesSentEncryptedMessage[] = [];

  constructor(data?: PartialMessage<TLMessagesSentEncryptedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSentEncryptedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSentEncryptedMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSentEncryptedMessage {
    return new TLMessagesSentEncryptedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSentEncryptedMessage {
    return new TLMessagesSentEncryptedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSentEncryptedMessage {
    return new TLMessagesSentEncryptedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSentEncryptedMessage | PlainMessage<TLMessagesSentEncryptedMessage> | undefined, b: TLMessagesSentEncryptedMessage | PlainMessage<TLMessagesSentEncryptedMessage> | undefined): boolean {
    return proto3.util.equals(TLMessagesSentEncryptedMessage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSentEncryptedFile
 */
export class TLMessagesSentEncryptedFile extends Message$1<TLMessagesSentEncryptedFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSentEncryptedMessage data2 = 1;
   */
  data2: MessagesSentEncryptedMessage[] = [];

  constructor(data?: PartialMessage<TLMessagesSentEncryptedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSentEncryptedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSentEncryptedMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSentEncryptedFile {
    return new TLMessagesSentEncryptedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSentEncryptedFile {
    return new TLMessagesSentEncryptedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSentEncryptedFile {
    return new TLMessagesSentEncryptedFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSentEncryptedFile | PlainMessage<TLMessagesSentEncryptedFile> | undefined, b: TLMessagesSentEncryptedFile | PlainMessage<TLMessagesSentEncryptedFile> | undefined): boolean {
    return proto3.util.equals(TLMessagesSentEncryptedFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesSponsoredMessages
 */
export class MessagesSponsoredMessages extends Message$1<MessagesSponsoredMessages> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.Int32Value posts_between = 3;
   */
  postsBetween: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.SponsoredMessage messages = 4;
   */
  messages: SponsoredMessage[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesSponsoredMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesSponsoredMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "posts_between", kind: "message", T: Int32Value, repeated: true },
    { no: 4, name: "messages", kind: "message", T: SponsoredMessage, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesSponsoredMessages {
    return new MessagesSponsoredMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesSponsoredMessages {
    return new MessagesSponsoredMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesSponsoredMessages {
    return new MessagesSponsoredMessages().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesSponsoredMessages | PlainMessage<MessagesSponsoredMessages> | undefined, b: MessagesSponsoredMessages | PlainMessage<MessagesSponsoredMessages> | undefined): boolean {
    return proto3.util.equals(MessagesSponsoredMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSponsoredMessages
 */
export class TLMessagesSponsoredMessages extends Message$1<TLMessagesSponsoredMessages> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSponsoredMessages data2 = 1;
   */
  data2: MessagesSponsoredMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesSponsoredMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSponsoredMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSponsoredMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSponsoredMessages {
    return new TLMessagesSponsoredMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSponsoredMessages {
    return new TLMessagesSponsoredMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSponsoredMessages {
    return new TLMessagesSponsoredMessages().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSponsoredMessages | PlainMessage<TLMessagesSponsoredMessages> | undefined, b: TLMessagesSponsoredMessages | PlainMessage<TLMessagesSponsoredMessages> | undefined): boolean {
    return proto3.util.equals(TLMessagesSponsoredMessages, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesSponsoredMessagesEmpty
 */
export class TLMessagesSponsoredMessagesEmpty extends Message$1<TLMessagesSponsoredMessagesEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesSponsoredMessages data2 = 1;
   */
  data2: MessagesSponsoredMessages[] = [];

  constructor(data?: PartialMessage<TLMessagesSponsoredMessagesEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesSponsoredMessagesEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesSponsoredMessages, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesSponsoredMessagesEmpty {
    return new TLMessagesSponsoredMessagesEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesSponsoredMessagesEmpty {
    return new TLMessagesSponsoredMessagesEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesSponsoredMessagesEmpty {
    return new TLMessagesSponsoredMessagesEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesSponsoredMessagesEmpty | PlainMessage<TLMessagesSponsoredMessagesEmpty> | undefined, b: TLMessagesSponsoredMessagesEmpty | PlainMessage<TLMessagesSponsoredMessagesEmpty> | undefined): boolean {
    return proto3.util.equals(TLMessagesSponsoredMessagesEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSet
 */
export class MessagesStickerSet extends Message$1<MessagesStickerSet> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSet set = 3;
   */
  set: StickerSet[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerPack packs = 4;
   */
  packs: StickerPack[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerKeyword keywords = 5;
   */
  keywords: StickerKeyword[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document documents = 6;
   */
  documents: Document[] = [];

  constructor(data?: PartialMessage<MessagesStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "set", kind: "message", T: StickerSet, repeated: true },
    { no: 4, name: "packs", kind: "message", T: StickerPack, repeated: true },
    { no: 5, name: "keywords", kind: "message", T: StickerKeyword, repeated: true },
    { no: 6, name: "documents", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesStickerSet {
    return new MessagesStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesStickerSet {
    return new MessagesStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesStickerSet {
    return new MessagesStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesStickerSet | PlainMessage<MessagesStickerSet> | undefined, b: MessagesStickerSet | PlainMessage<MessagesStickerSet> | undefined): boolean {
    return proto3.util.equals(MessagesStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSet
 */
export class TLMessagesStickerSet extends Message$1<TLMessagesStickerSet> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSet data2 = 1;
   */
  data2: MessagesStickerSet[] = [];

  constructor(data?: PartialMessage<TLMessagesStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickerSet {
    return new TLMessagesStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickerSet {
    return new TLMessagesStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickerSet {
    return new TLMessagesStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickerSet | PlainMessage<TLMessagesStickerSet> | undefined, b: TLMessagesStickerSet | PlainMessage<TLMessagesStickerSet> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetNotModified
 */
export class TLMessagesStickerSetNotModified extends Message$1<TLMessagesStickerSetNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSet data2 = 1;
   */
  data2: MessagesStickerSet[] = [];

  constructor(data?: PartialMessage<TLMessagesStickerSetNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickerSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickerSetNotModified {
    return new TLMessagesStickerSetNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickerSetNotModified {
    return new TLMessagesStickerSetNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickerSetNotModified {
    return new TLMessagesStickerSetNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickerSetNotModified | PlainMessage<TLMessagesStickerSetNotModified> | undefined, b: TLMessagesStickerSetNotModified | PlainMessage<TLMessagesStickerSetNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickerSetNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSetInstallResult
 */
export class MessagesStickerSetInstallResult extends Message$1<MessagesStickerSetInstallResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickerSetCovered sets = 3;
   */
  sets: StickerSetCovered[] = [];

  constructor(data?: PartialMessage<MessagesStickerSetInstallResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSetInstallResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "sets", kind: "message", T: StickerSetCovered, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesStickerSetInstallResult {
    return new MessagesStickerSetInstallResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesStickerSetInstallResult {
    return new MessagesStickerSetInstallResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesStickerSetInstallResult {
    return new MessagesStickerSetInstallResult().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesStickerSetInstallResult | PlainMessage<MessagesStickerSetInstallResult> | undefined, b: MessagesStickerSetInstallResult | PlainMessage<MessagesStickerSetInstallResult> | undefined): boolean {
    return proto3.util.equals(MessagesStickerSetInstallResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetInstallResultSuccess
 */
export class TLMessagesStickerSetInstallResultSuccess extends Message$1<TLMessagesStickerSetInstallResultSuccess> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSetInstallResult data2 = 1;
   */
  data2: MessagesStickerSetInstallResult[] = [];

  constructor(data?: PartialMessage<TLMessagesStickerSetInstallResultSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetInstallResultSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickerSetInstallResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickerSetInstallResultSuccess {
    return new TLMessagesStickerSetInstallResultSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickerSetInstallResultSuccess {
    return new TLMessagesStickerSetInstallResultSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickerSetInstallResultSuccess {
    return new TLMessagesStickerSetInstallResultSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickerSetInstallResultSuccess | PlainMessage<TLMessagesStickerSetInstallResultSuccess> | undefined, b: TLMessagesStickerSetInstallResultSuccess | PlainMessage<TLMessagesStickerSetInstallResultSuccess> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickerSetInstallResultSuccess, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetInstallResultArchive
 */
export class TLMessagesStickerSetInstallResultArchive extends Message$1<TLMessagesStickerSetInstallResultArchive> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickerSetInstallResult data2 = 1;
   */
  data2: MessagesStickerSetInstallResult[] = [];

  constructor(data?: PartialMessage<TLMessagesStickerSetInstallResultArchive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickerSetInstallResultArchive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickerSetInstallResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickerSetInstallResultArchive {
    return new TLMessagesStickerSetInstallResultArchive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickerSetInstallResultArchive {
    return new TLMessagesStickerSetInstallResultArchive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickerSetInstallResultArchive {
    return new TLMessagesStickerSetInstallResultArchive().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickerSetInstallResultArchive | PlainMessage<TLMessagesStickerSetInstallResultArchive> | undefined, b: TLMessagesStickerSetInstallResultArchive | PlainMessage<TLMessagesStickerSetInstallResultArchive> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickerSetInstallResultArchive, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesStickers
 */
export class MessagesStickers extends Message$1<MessagesStickers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Document stickers = 4;
   */
  stickers: Document[] = [];

  constructor(data?: PartialMessage<MessagesStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "stickers", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesStickers {
    return new MessagesStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesStickers {
    return new MessagesStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesStickers {
    return new MessagesStickers().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesStickers | PlainMessage<MessagesStickers> | undefined, b: MessagesStickers | PlainMessage<MessagesStickers> | undefined): boolean {
    return proto3.util.equals(MessagesStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickersNotModified
 */
export class TLMessagesStickersNotModified extends Message$1<TLMessagesStickersNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickers data2 = 1;
   */
  data2: MessagesStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesStickersNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickersNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickersNotModified {
    return new TLMessagesStickersNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickersNotModified {
    return new TLMessagesStickersNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickersNotModified {
    return new TLMessagesStickersNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickersNotModified | PlainMessage<TLMessagesStickersNotModified> | undefined, b: TLMessagesStickersNotModified | PlainMessage<TLMessagesStickersNotModified> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickersNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickers
 */
export class TLMessagesStickers extends Message$1<TLMessagesStickers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesStickers data2 = 1;
   */
  data2: MessagesStickers[] = [];

  constructor(data?: PartialMessage<TLMessagesStickers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesStickers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesStickers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesStickers {
    return new TLMessagesStickers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesStickers {
    return new TLMessagesStickers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesStickers {
    return new TLMessagesStickers().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesStickers | PlainMessage<TLMessagesStickers> | undefined, b: TLMessagesStickers | PlainMessage<TLMessagesStickers> | undefined): boolean {
    return proto3.util.equals(TLMessagesStickers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesTranscribedAudio
 */
export class MessagesTranscribedAudio extends Message$1<MessagesTranscribedAudio> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool pending = 3;
   */
  pending = false;

  /**
   * @generated from field: int64 transcription_id = 4;
   */
  transcriptionId = protoInt64.zero;

  /**
   * @generated from field: string text = 5;
   */
  text = "";

  constructor(data?: PartialMessage<MessagesTranscribedAudio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesTranscribedAudio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "transcription_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesTranscribedAudio {
    return new MessagesTranscribedAudio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesTranscribedAudio {
    return new MessagesTranscribedAudio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesTranscribedAudio {
    return new MessagesTranscribedAudio().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesTranscribedAudio | PlainMessage<MessagesTranscribedAudio> | undefined, b: MessagesTranscribedAudio | PlainMessage<MessagesTranscribedAudio> | undefined): boolean {
    return proto3.util.equals(MessagesTranscribedAudio, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranscribedAudio
 */
export class TLMessagesTranscribedAudio extends Message$1<TLMessagesTranscribedAudio> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesTranscribedAudio data2 = 1;
   */
  data2: MessagesTranscribedAudio[] = [];

  constructor(data?: PartialMessage<TLMessagesTranscribedAudio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranscribedAudio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesTranscribedAudio, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesTranscribedAudio {
    return new TLMessagesTranscribedAudio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesTranscribedAudio {
    return new TLMessagesTranscribedAudio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesTranscribedAudio {
    return new TLMessagesTranscribedAudio().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesTranscribedAudio | PlainMessage<TLMessagesTranscribedAudio> | undefined, b: TLMessagesTranscribedAudio | PlainMessage<TLMessagesTranscribedAudio> | undefined): boolean {
    return proto3.util.equals(TLMessagesTranscribedAudio, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesTranslatedText
 */
export class MessagesTranslatedText extends Message$1<MessagesTranslatedText> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.TextWithEntities result = 3;
   */
  result: TextWithEntities[] = [];

  /**
   * @generated from field: string text = 4;
   */
  text = "";

  constructor(data?: PartialMessage<MessagesTranslatedText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesTranslatedText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "result", kind: "message", T: TextWithEntities, repeated: true },
    { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesTranslatedText {
    return new MessagesTranslatedText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesTranslatedText {
    return new MessagesTranslatedText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesTranslatedText {
    return new MessagesTranslatedText().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesTranslatedText | PlainMessage<MessagesTranslatedText> | undefined, b: MessagesTranslatedText | PlainMessage<MessagesTranslatedText> | undefined): boolean {
    return proto3.util.equals(MessagesTranslatedText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateResult
 */
export class TLMessagesTranslateResult extends Message$1<TLMessagesTranslateResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesTranslatedText data2 = 1;
   */
  data2: MessagesTranslatedText[] = [];

  constructor(data?: PartialMessage<TLMessagesTranslateResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesTranslatedText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesTranslateResult {
    return new TLMessagesTranslateResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesTranslateResult {
    return new TLMessagesTranslateResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesTranslateResult {
    return new TLMessagesTranslateResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesTranslateResult | PlainMessage<TLMessagesTranslateResult> | undefined, b: TLMessagesTranslateResult | PlainMessage<TLMessagesTranslateResult> | undefined): boolean {
    return proto3.util.equals(TLMessagesTranslateResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateNoResult
 */
export class TLMessagesTranslateNoResult extends Message$1<TLMessagesTranslateNoResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesTranslatedText data2 = 1;
   */
  data2: MessagesTranslatedText[] = [];

  constructor(data?: PartialMessage<TLMessagesTranslateNoResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateNoResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesTranslatedText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesTranslateNoResult {
    return new TLMessagesTranslateNoResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesTranslateNoResult {
    return new TLMessagesTranslateNoResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesTranslateNoResult {
    return new TLMessagesTranslateNoResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesTranslateNoResult | PlainMessage<TLMessagesTranslateNoResult> | undefined, b: TLMessagesTranslateNoResult | PlainMessage<TLMessagesTranslateNoResult> | undefined): boolean {
    return proto3.util.equals(TLMessagesTranslateNoResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateResultText
 */
export class TLMessagesTranslateResultText extends Message$1<TLMessagesTranslateResultText> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesTranslatedText data2 = 1;
   */
  data2: MessagesTranslatedText[] = [];

  constructor(data?: PartialMessage<TLMessagesTranslateResultText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesTranslateResultText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesTranslatedText, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesTranslateResultText {
    return new TLMessagesTranslateResultText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesTranslateResultText {
    return new TLMessagesTranslateResultText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesTranslateResultText {
    return new TLMessagesTranslateResultText().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesTranslateResultText | PlainMessage<TLMessagesTranslateResultText> | undefined, b: TLMessagesTranslateResultText | PlainMessage<TLMessagesTranslateResultText> | undefined): boolean {
    return proto3.util.equals(TLMessagesTranslateResultText, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesVotesList
 */
export class MessagesVotesList extends Message$1<MessagesVotesList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagePeerVote votes_VECTORMESSAGEPEERVOTE = 4;
   */
  votesVECTORMESSAGEPEERVOTE: MessagePeerVote[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue next_offset = 7;
   */
  nextOffset: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageUserVote votes_VECTORMESSAGEUSERVOTE = 8;
   */
  votesVECTORMESSAGEUSERVOTE: MessageUserVote[] = [];

  constructor(data?: PartialMessage<MessagesVotesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesVotesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "votes_VECTORMESSAGEPEERVOTE", kind: "message", T: MessagePeerVote, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "next_offset", kind: "message", T: StringValue, repeated: true },
    { no: 8, name: "votes_VECTORMESSAGEUSERVOTE", kind: "message", T: MessageUserVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesVotesList {
    return new MessagesVotesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesVotesList {
    return new MessagesVotesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesVotesList {
    return new MessagesVotesList().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesVotesList | PlainMessage<MessagesVotesList> | undefined, b: MessagesVotesList | PlainMessage<MessagesVotesList> | undefined): boolean {
    return proto3.util.equals(MessagesVotesList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesVotesList
 */
export class TLMessagesVotesList extends Message$1<TLMessagesVotesList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesVotesList data2 = 1;
   */
  data2: MessagesVotesList[] = [];

  constructor(data?: PartialMessage<TLMessagesVotesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesVotesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesVotesList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesVotesList {
    return new TLMessagesVotesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesVotesList {
    return new TLMessagesVotesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesVotesList {
    return new TLMessagesVotesList().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesVotesList | PlainMessage<TLMessagesVotesList> | undefined, b: TLMessagesVotesList | PlainMessage<TLMessagesVotesList> | undefined): boolean {
    return proto3.util.equals(TLMessagesVotesList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.MessagesWebPage
 */
export class MessagesWebPage extends Message$1<MessagesWebPage> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebPage webpage = 3;
   */
  webpage: WebPage[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<MessagesWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.MessagesWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "webpage", kind: "message", T: WebPage, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesWebPage {
    return new MessagesWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesWebPage {
    return new MessagesWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesWebPage {
    return new MessagesWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesWebPage | PlainMessage<MessagesWebPage> | undefined, b: MessagesWebPage | PlainMessage<MessagesWebPage> | undefined): boolean {
    return proto3.util.equals(MessagesWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLMessagesWebPage
 */
export class TLMessagesWebPage extends Message$1<TLMessagesWebPage> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessagesWebPage data2 = 1;
   */
  data2: MessagesWebPage[] = [];

  constructor(data?: PartialMessage<TLMessagesWebPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLMessagesWebPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: MessagesWebPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLMessagesWebPage {
    return new TLMessagesWebPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLMessagesWebPage {
    return new TLMessagesWebPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLMessagesWebPage {
    return new TLMessagesWebPage().fromJsonString(jsonString, options);
  }

  static equals(a: TLMessagesWebPage | PlainMessage<TLMessagesWebPage> | undefined, b: TLMessagesWebPage | PlainMessage<TLMessagesWebPage> | undefined): boolean {
    return proto3.util.equals(TLMessagesWebPage, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsBankCardData
 */
export class PaymentsBankCardData extends Message$1<PaymentsBankCardData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.BankCardOpenUrl open_urls = 4;
   */
  openUrls: BankCardOpenUrl[] = [];

  constructor(data?: PartialMessage<PaymentsBankCardData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsBankCardData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "open_urls", kind: "message", T: BankCardOpenUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsBankCardData {
    return new PaymentsBankCardData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsBankCardData {
    return new PaymentsBankCardData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsBankCardData {
    return new PaymentsBankCardData().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsBankCardData | PlainMessage<PaymentsBankCardData> | undefined, b: PaymentsBankCardData | PlainMessage<PaymentsBankCardData> | undefined): boolean {
    return proto3.util.equals(PaymentsBankCardData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsBankCardData
 */
export class TLPaymentsBankCardData extends Message$1<TLPaymentsBankCardData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsBankCardData data2 = 1;
   */
  data2: PaymentsBankCardData[] = [];

  constructor(data?: PartialMessage<TLPaymentsBankCardData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsBankCardData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsBankCardData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsBankCardData {
    return new TLPaymentsBankCardData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsBankCardData {
    return new TLPaymentsBankCardData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsBankCardData {
    return new TLPaymentsBankCardData().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsBankCardData | PlainMessage<TLPaymentsBankCardData> | undefined, b: TLPaymentsBankCardData | PlainMessage<TLPaymentsBankCardData> | undefined): boolean {
    return proto3.util.equals(TLPaymentsBankCardData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsExportedInvoice
 */
export class PaymentsExportedInvoice extends Message$1<PaymentsExportedInvoice> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<PaymentsExportedInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsExportedInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsExportedInvoice {
    return new PaymentsExportedInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsExportedInvoice {
    return new PaymentsExportedInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsExportedInvoice {
    return new PaymentsExportedInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsExportedInvoice | PlainMessage<PaymentsExportedInvoice> | undefined, b: PaymentsExportedInvoice | PlainMessage<PaymentsExportedInvoice> | undefined): boolean {
    return proto3.util.equals(PaymentsExportedInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsExportedInvoice
 */
export class TLPaymentsExportedInvoice extends Message$1<TLPaymentsExportedInvoice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsExportedInvoice data2 = 1;
   */
  data2: PaymentsExportedInvoice[] = [];

  constructor(data?: PartialMessage<TLPaymentsExportedInvoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsExportedInvoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsExportedInvoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsExportedInvoice {
    return new TLPaymentsExportedInvoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsExportedInvoice {
    return new TLPaymentsExportedInvoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsExportedInvoice {
    return new TLPaymentsExportedInvoice().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsExportedInvoice | PlainMessage<TLPaymentsExportedInvoice> | undefined, b: TLPaymentsExportedInvoice | PlainMessage<TLPaymentsExportedInvoice> | undefined): boolean {
    return proto3.util.equals(TLPaymentsExportedInvoice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentForm
 */
export class PaymentsPaymentForm extends Message$1<PaymentsPaymentForm> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool can_save_credentials = 3;
   */
  canSaveCredentials = false;

  /**
   * @generated from field: bool password_missing = 4;
   */
  passwordMissing = false;

  /**
   * @generated from field: int64 form_id = 5;
   */
  formId = protoInt64.zero;

  /**
   * @generated from field: int64 bot_id = 6;
   */
  botId = protoInt64.zero;

  /**
   * @generated from field: string title = 7;
   */
  title = "";

  /**
   * @generated from field: string description = 8;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument photo = 9;
   */
  photo: WebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Invoice invoice = 10;
   */
  invoice: Invoice[] = [];

  /**
   * @generated from field: int64 provider_id = 11;
   */
  providerId = protoInt64.zero;

  /**
   * @generated from field: string url = 12;
   */
  url = "";

  /**
   * @generated from field: repeated google.protobuf.StringValue native_provider = 13;
   */
  nativeProvider: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.DataJSON native_params = 14;
   */
  nativeParams: DataJSON[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentFormMethod additional_methods = 15;
   */
  additionalMethods: PaymentFormMethod[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo saved_info = 16;
   */
  savedInfo: PaymentRequestedInfo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentSavedCredentials saved_credentials_FLAGVECTORPAYMENTSAVEDCREDENTIALS = 17;
   */
  savedCredentialsFLAGVECTORPAYMENTSAVEDCREDENTIALS: PaymentSavedCredentials[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 18;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentSavedCredentials saved_credentials_FLAGPAYMENTSAVEDCREDENTIALS = 19;
   */
  savedCredentialsFLAGPAYMENTSAVEDCREDENTIALS: PaymentSavedCredentials[] = [];

  constructor(data?: PartialMessage<PaymentsPaymentForm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentForm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "can_save_credentials", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "password_missing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "form_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "photo", kind: "message", T: WebDocument, repeated: true },
    { no: 10, name: "invoice", kind: "message", T: Invoice, repeated: true },
    { no: 11, name: "provider_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "native_provider", kind: "message", T: StringValue, repeated: true },
    { no: 14, name: "native_params", kind: "message", T: DataJSON, repeated: true },
    { no: 15, name: "additional_methods", kind: "message", T: PaymentFormMethod, repeated: true },
    { no: 16, name: "saved_info", kind: "message", T: PaymentRequestedInfo, repeated: true },
    { no: 17, name: "saved_credentials_FLAGVECTORPAYMENTSAVEDCREDENTIALS", kind: "message", T: PaymentSavedCredentials, repeated: true },
    { no: 18, name: "users", kind: "message", T: User, repeated: true },
    { no: 19, name: "saved_credentials_FLAGPAYMENTSAVEDCREDENTIALS", kind: "message", T: PaymentSavedCredentials, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsPaymentForm {
    return new PaymentsPaymentForm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsPaymentForm {
    return new PaymentsPaymentForm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsPaymentForm {
    return new PaymentsPaymentForm().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsPaymentForm | PlainMessage<PaymentsPaymentForm> | undefined, b: PaymentsPaymentForm | PlainMessage<PaymentsPaymentForm> | undefined): boolean {
    return proto3.util.equals(PaymentsPaymentForm, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentForm
 */
export class TLPaymentsPaymentForm extends Message$1<TLPaymentsPaymentForm> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentForm data2 = 1;
   */
  data2: PaymentsPaymentForm[] = [];

  constructor(data?: PartialMessage<TLPaymentsPaymentForm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentForm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsPaymentForm, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsPaymentForm {
    return new TLPaymentsPaymentForm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsPaymentForm {
    return new TLPaymentsPaymentForm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsPaymentForm {
    return new TLPaymentsPaymentForm().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsPaymentForm | PlainMessage<TLPaymentsPaymentForm> | undefined, b: TLPaymentsPaymentForm | PlainMessage<TLPaymentsPaymentForm> | undefined): boolean {
    return proto3.util.equals(TLPaymentsPaymentForm, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentReceipt
 */
export class PaymentsPaymentReceipt extends Message$1<PaymentsPaymentReceipt> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 date = 3;
   */
  date = 0;

  /**
   * @generated from field: int64 bot_id = 4;
   */
  botId = protoInt64.zero;

  /**
   * @generated from field: int64 provider_id = 5;
   */
  providerId = protoInt64.zero;

  /**
   * @generated from field: string title = 6;
   */
  title = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.WebDocument photo = 8;
   */
  photo: WebDocument[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Invoice invoice = 9;
   */
  invoice: Invoice[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo info = 10;
   */
  info: PaymentRequestedInfo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ShippingOption shipping = 11;
   */
  shipping: ShippingOption[] = [];

  /**
   * @generated from field: repeated google.protobuf.Int64Value tip_amount = 12;
   */
  tipAmount: Int64Value[] = [];

  /**
   * @generated from field: string currency = 13;
   */
  currency = "";

  /**
   * @generated from field: int64 total_amount = 14;
   */
  totalAmount = protoInt64.zero;

  /**
   * @generated from field: string credentials_title = 15;
   */
  credentialsTitle = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 16;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PaymentsPaymentReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "bot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "provider_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "photo", kind: "message", T: WebDocument, repeated: true },
    { no: 9, name: "invoice", kind: "message", T: Invoice, repeated: true },
    { no: 10, name: "info", kind: "message", T: PaymentRequestedInfo, repeated: true },
    { no: 11, name: "shipping", kind: "message", T: ShippingOption, repeated: true },
    { no: 12, name: "tip_amount", kind: "message", T: Int64Value, repeated: true },
    { no: 13, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "total_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "credentials_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsPaymentReceipt {
    return new PaymentsPaymentReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsPaymentReceipt {
    return new PaymentsPaymentReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsPaymentReceipt {
    return new PaymentsPaymentReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsPaymentReceipt | PlainMessage<PaymentsPaymentReceipt> | undefined, b: PaymentsPaymentReceipt | PlainMessage<PaymentsPaymentReceipt> | undefined): boolean {
    return proto3.util.equals(PaymentsPaymentReceipt, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentReceipt
 */
export class TLPaymentsPaymentReceipt extends Message$1<TLPaymentsPaymentReceipt> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentReceipt data2 = 1;
   */
  data2: PaymentsPaymentReceipt[] = [];

  constructor(data?: PartialMessage<TLPaymentsPaymentReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsPaymentReceipt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsPaymentReceipt {
    return new TLPaymentsPaymentReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsPaymentReceipt {
    return new TLPaymentsPaymentReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsPaymentReceipt {
    return new TLPaymentsPaymentReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsPaymentReceipt | PlainMessage<TLPaymentsPaymentReceipt> | undefined, b: TLPaymentsPaymentReceipt | PlainMessage<TLPaymentsPaymentReceipt> | undefined): boolean {
    return proto3.util.equals(TLPaymentsPaymentReceipt, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentResult
 */
export class PaymentsPaymentResult extends Message$1<PaymentsPaymentResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Updates updates = 3;
   */
  updates: Updates[] = [];

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  constructor(data?: PartialMessage<PaymentsPaymentResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "updates", kind: "message", T: Updates, repeated: true },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsPaymentResult {
    return new PaymentsPaymentResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsPaymentResult {
    return new PaymentsPaymentResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsPaymentResult {
    return new PaymentsPaymentResult().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsPaymentResult | PlainMessage<PaymentsPaymentResult> | undefined, b: PaymentsPaymentResult | PlainMessage<PaymentsPaymentResult> | undefined): boolean {
    return proto3.util.equals(PaymentsPaymentResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentResult
 */
export class TLPaymentsPaymentResult extends Message$1<TLPaymentsPaymentResult> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentResult data2 = 1;
   */
  data2: PaymentsPaymentResult[] = [];

  constructor(data?: PartialMessage<TLPaymentsPaymentResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsPaymentResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsPaymentResult {
    return new TLPaymentsPaymentResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsPaymentResult {
    return new TLPaymentsPaymentResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsPaymentResult {
    return new TLPaymentsPaymentResult().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsPaymentResult | PlainMessage<TLPaymentsPaymentResult> | undefined, b: TLPaymentsPaymentResult | PlainMessage<TLPaymentsPaymentResult> | undefined): boolean {
    return proto3.util.equals(TLPaymentsPaymentResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentVerificationNeeded
 */
export class TLPaymentsPaymentVerificationNeeded extends Message$1<TLPaymentsPaymentVerificationNeeded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsPaymentResult data2 = 1;
   */
  data2: PaymentsPaymentResult[] = [];

  constructor(data?: PartialMessage<TLPaymentsPaymentVerificationNeeded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsPaymentVerificationNeeded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsPaymentResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsPaymentVerificationNeeded {
    return new TLPaymentsPaymentVerificationNeeded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsPaymentVerificationNeeded {
    return new TLPaymentsPaymentVerificationNeeded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsPaymentVerificationNeeded {
    return new TLPaymentsPaymentVerificationNeeded().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsPaymentVerificationNeeded | PlainMessage<TLPaymentsPaymentVerificationNeeded> | undefined, b: TLPaymentsPaymentVerificationNeeded | PlainMessage<TLPaymentsPaymentVerificationNeeded> | undefined): boolean {
    return proto3.util.equals(TLPaymentsPaymentVerificationNeeded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsSavedInfo
 */
export class PaymentsSavedInfo extends Message$1<PaymentsSavedInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool has_saved_credentials = 3;
   */
  hasSavedCredentials = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentRequestedInfo saved_info = 4;
   */
  savedInfo: PaymentRequestedInfo[] = [];

  constructor(data?: PartialMessage<PaymentsSavedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsSavedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "has_saved_credentials", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "saved_info", kind: "message", T: PaymentRequestedInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsSavedInfo {
    return new PaymentsSavedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsSavedInfo {
    return new PaymentsSavedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsSavedInfo {
    return new PaymentsSavedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsSavedInfo | PlainMessage<PaymentsSavedInfo> | undefined, b: PaymentsSavedInfo | PlainMessage<PaymentsSavedInfo> | undefined): boolean {
    return proto3.util.equals(PaymentsSavedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsSavedInfo
 */
export class TLPaymentsSavedInfo extends Message$1<TLPaymentsSavedInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsSavedInfo data2 = 1;
   */
  data2: PaymentsSavedInfo[] = [];

  constructor(data?: PartialMessage<TLPaymentsSavedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsSavedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsSavedInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsSavedInfo {
    return new TLPaymentsSavedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsSavedInfo {
    return new TLPaymentsSavedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsSavedInfo {
    return new TLPaymentsSavedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsSavedInfo | PlainMessage<TLPaymentsSavedInfo> | undefined, b: TLPaymentsSavedInfo | PlainMessage<TLPaymentsSavedInfo> | undefined): boolean {
    return proto3.util.equals(TLPaymentsSavedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PaymentsValidatedRequestedInfo
 */
export class PaymentsValidatedRequestedInfo extends Message$1<PaymentsValidatedRequestedInfo> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated google.protobuf.StringValue id = 3;
   */
  id: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.ShippingOption shipping_options = 4;
   */
  shippingOptions: ShippingOption[] = [];

  constructor(data?: PartialMessage<PaymentsValidatedRequestedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PaymentsValidatedRequestedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "id", kind: "message", T: StringValue, repeated: true },
    { no: 4, name: "shipping_options", kind: "message", T: ShippingOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentsValidatedRequestedInfo {
    return new PaymentsValidatedRequestedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentsValidatedRequestedInfo {
    return new PaymentsValidatedRequestedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentsValidatedRequestedInfo {
    return new PaymentsValidatedRequestedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentsValidatedRequestedInfo | PlainMessage<PaymentsValidatedRequestedInfo> | undefined, b: PaymentsValidatedRequestedInfo | PlainMessage<PaymentsValidatedRequestedInfo> | undefined): boolean {
    return proto3.util.equals(PaymentsValidatedRequestedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPaymentsValidatedRequestedInfo
 */
export class TLPaymentsValidatedRequestedInfo extends Message$1<TLPaymentsValidatedRequestedInfo> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PaymentsValidatedRequestedInfo data2 = 1;
   */
  data2: PaymentsValidatedRequestedInfo[] = [];

  constructor(data?: PartialMessage<TLPaymentsValidatedRequestedInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPaymentsValidatedRequestedInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PaymentsValidatedRequestedInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPaymentsValidatedRequestedInfo {
    return new TLPaymentsValidatedRequestedInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPaymentsValidatedRequestedInfo {
    return new TLPaymentsValidatedRequestedInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPaymentsValidatedRequestedInfo {
    return new TLPaymentsValidatedRequestedInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TLPaymentsValidatedRequestedInfo | PlainMessage<TLPaymentsValidatedRequestedInfo> | undefined, b: TLPaymentsValidatedRequestedInfo | PlainMessage<TLPaymentsValidatedRequestedInfo> | undefined): boolean {
    return proto3.util.equals(TLPaymentsValidatedRequestedInfo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneExportedGroupCallInvite
 */
export class PhoneExportedGroupCallInvite extends Message$1<PhoneExportedGroupCallInvite> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string link = 3;
   */
  link = "";

  constructor(data?: PartialMessage<PhoneExportedGroupCallInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneExportedGroupCallInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneExportedGroupCallInvite {
    return new PhoneExportedGroupCallInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneExportedGroupCallInvite {
    return new PhoneExportedGroupCallInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneExportedGroupCallInvite {
    return new PhoneExportedGroupCallInvite().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneExportedGroupCallInvite | PlainMessage<PhoneExportedGroupCallInvite> | undefined, b: PhoneExportedGroupCallInvite | PlainMessage<PhoneExportedGroupCallInvite> | undefined): boolean {
    return proto3.util.equals(PhoneExportedGroupCallInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneExportedGroupCallInvite
 */
export class TLPhoneExportedGroupCallInvite extends Message$1<TLPhoneExportedGroupCallInvite> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneExportedGroupCallInvite data2 = 1;
   */
  data2: PhoneExportedGroupCallInvite[] = [];

  constructor(data?: PartialMessage<TLPhoneExportedGroupCallInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneExportedGroupCallInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneExportedGroupCallInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneExportedGroupCallInvite {
    return new TLPhoneExportedGroupCallInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneExportedGroupCallInvite {
    return new TLPhoneExportedGroupCallInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneExportedGroupCallInvite {
    return new TLPhoneExportedGroupCallInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneExportedGroupCallInvite | PlainMessage<TLPhoneExportedGroupCallInvite> | undefined, b: TLPhoneExportedGroupCallInvite | PlainMessage<TLPhoneExportedGroupCallInvite> | undefined): boolean {
    return proto3.util.equals(TLPhoneExportedGroupCallInvite, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCall
 */
export class PhoneGroupCall extends Message$1<PhoneGroupCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCall call = 3;
   */
  call: GroupCall[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant participants = 4;
   */
  participants: GroupCallParticipant[] = [];

  /**
   * @generated from field: string participants_next_offset = 5;
   */
  participantsNextOffset = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 6;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 7;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PhoneGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "call", kind: "message", T: GroupCall, repeated: true },
    { no: 4, name: "participants", kind: "message", T: GroupCallParticipant, repeated: true },
    { no: 5, name: "participants_next_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 7, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneGroupCall {
    return new PhoneGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneGroupCall {
    return new PhoneGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneGroupCall {
    return new PhoneGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneGroupCall | PlainMessage<PhoneGroupCall> | undefined, b: PhoneGroupCall | PlainMessage<PhoneGroupCall> | undefined): boolean {
    return proto3.util.equals(PhoneGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCall
 */
export class TLPhoneGroupCall extends Message$1<TLPhoneGroupCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCall data2 = 1;
   */
  data2: PhoneGroupCall[] = [];

  constructor(data?: PartialMessage<TLPhoneGroupCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneGroupCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneGroupCall {
    return new TLPhoneGroupCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneGroupCall {
    return new TLPhoneGroupCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneGroupCall {
    return new TLPhoneGroupCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneGroupCall | PlainMessage<TLPhoneGroupCall> | undefined, b: TLPhoneGroupCall | PlainMessage<TLPhoneGroupCall> | undefined): boolean {
    return proto3.util.equals(TLPhoneGroupCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamChannels
 */
export class PhoneGroupCallStreamChannels extends Message$1<PhoneGroupCallStreamChannels> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallStreamChannel channels = 3;
   */
  channels: GroupCallStreamChannel[] = [];

  constructor(data?: PartialMessage<PhoneGroupCallStreamChannels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamChannels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "channels", kind: "message", T: GroupCallStreamChannel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneGroupCallStreamChannels {
    return new PhoneGroupCallStreamChannels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneGroupCallStreamChannels {
    return new PhoneGroupCallStreamChannels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneGroupCallStreamChannels {
    return new PhoneGroupCallStreamChannels().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneGroupCallStreamChannels | PlainMessage<PhoneGroupCallStreamChannels> | undefined, b: PhoneGroupCallStreamChannels | PlainMessage<PhoneGroupCallStreamChannels> | undefined): boolean {
    return proto3.util.equals(PhoneGroupCallStreamChannels, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCallStreamChannels
 */
export class TLPhoneGroupCallStreamChannels extends Message$1<TLPhoneGroupCallStreamChannels> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamChannels data2 = 1;
   */
  data2: PhoneGroupCallStreamChannels[] = [];

  constructor(data?: PartialMessage<TLPhoneGroupCallStreamChannels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCallStreamChannels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneGroupCallStreamChannels, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneGroupCallStreamChannels {
    return new TLPhoneGroupCallStreamChannels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneGroupCallStreamChannels {
    return new TLPhoneGroupCallStreamChannels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneGroupCallStreamChannels {
    return new TLPhoneGroupCallStreamChannels().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneGroupCallStreamChannels | PlainMessage<TLPhoneGroupCallStreamChannels> | undefined, b: TLPhoneGroupCallStreamChannels | PlainMessage<TLPhoneGroupCallStreamChannels> | undefined): boolean {
    return proto3.util.equals(TLPhoneGroupCallStreamChannels, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamRtmpUrl
 */
export class PhoneGroupCallStreamRtmpUrl extends Message$1<PhoneGroupCallStreamRtmpUrl> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string key = 4;
   */
  key = "";

  constructor(data?: PartialMessage<PhoneGroupCallStreamRtmpUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamRtmpUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneGroupCallStreamRtmpUrl {
    return new PhoneGroupCallStreamRtmpUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneGroupCallStreamRtmpUrl {
    return new PhoneGroupCallStreamRtmpUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneGroupCallStreamRtmpUrl {
    return new PhoneGroupCallStreamRtmpUrl().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneGroupCallStreamRtmpUrl | PlainMessage<PhoneGroupCallStreamRtmpUrl> | undefined, b: PhoneGroupCallStreamRtmpUrl | PlainMessage<PhoneGroupCallStreamRtmpUrl> | undefined): boolean {
    return proto3.util.equals(PhoneGroupCallStreamRtmpUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCallStreamRtmpUrl
 */
export class TLPhoneGroupCallStreamRtmpUrl extends Message$1<TLPhoneGroupCallStreamRtmpUrl> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneGroupCallStreamRtmpUrl data2 = 1;
   */
  data2: PhoneGroupCallStreamRtmpUrl[] = [];

  constructor(data?: PartialMessage<TLPhoneGroupCallStreamRtmpUrl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupCallStreamRtmpUrl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneGroupCallStreamRtmpUrl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneGroupCallStreamRtmpUrl {
    return new TLPhoneGroupCallStreamRtmpUrl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneGroupCallStreamRtmpUrl {
    return new TLPhoneGroupCallStreamRtmpUrl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneGroupCallStreamRtmpUrl {
    return new TLPhoneGroupCallStreamRtmpUrl().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneGroupCallStreamRtmpUrl | PlainMessage<TLPhoneGroupCallStreamRtmpUrl> | undefined, b: TLPhoneGroupCallStreamRtmpUrl | PlainMessage<TLPhoneGroupCallStreamRtmpUrl> | undefined): boolean {
    return proto3.util.equals(TLPhoneGroupCallStreamRtmpUrl, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneGroupParticipants
 */
export class PhoneGroupParticipants extends Message$1<PhoneGroupParticipants> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.GroupCallParticipant participants = 4;
   */
  participants: GroupCallParticipant[] = [];

  /**
   * @generated from field: string next_offset = 5;
   */
  nextOffset = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 6;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 7;
   */
  users: User[] = [];

  /**
   * @generated from field: int32 version = 8;
   */
  version = 0;

  constructor(data?: PartialMessage<PhoneGroupParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneGroupParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "participants", kind: "message", T: GroupCallParticipant, repeated: true },
    { no: 5, name: "next_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 7, name: "users", kind: "message", T: User, repeated: true },
    { no: 8, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneGroupParticipants {
    return new PhoneGroupParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneGroupParticipants {
    return new PhoneGroupParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneGroupParticipants {
    return new PhoneGroupParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneGroupParticipants | PlainMessage<PhoneGroupParticipants> | undefined, b: PhoneGroupParticipants | PlainMessage<PhoneGroupParticipants> | undefined): boolean {
    return proto3.util.equals(PhoneGroupParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupParticipants
 */
export class TLPhoneGroupParticipants extends Message$1<TLPhoneGroupParticipants> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneGroupParticipants data2 = 1;
   */
  data2: PhoneGroupParticipants[] = [];

  constructor(data?: PartialMessage<TLPhoneGroupParticipants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneGroupParticipants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneGroupParticipants, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneGroupParticipants {
    return new TLPhoneGroupParticipants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneGroupParticipants {
    return new TLPhoneGroupParticipants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneGroupParticipants {
    return new TLPhoneGroupParticipants().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneGroupParticipants | PlainMessage<TLPhoneGroupParticipants> | undefined, b: TLPhoneGroupParticipants | PlainMessage<TLPhoneGroupParticipants> | undefined): boolean {
    return proto3.util.equals(TLPhoneGroupParticipants, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhoneJoinAsPeers
 */
export class PhoneJoinAsPeers extends Message$1<PhoneJoinAsPeers> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer peers = 3;
   */
  peers: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PhoneJoinAsPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhoneJoinAsPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "peers", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneJoinAsPeers {
    return new PhoneJoinAsPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneJoinAsPeers {
    return new PhoneJoinAsPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneJoinAsPeers {
    return new PhoneJoinAsPeers().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneJoinAsPeers | PlainMessage<PhoneJoinAsPeers> | undefined, b: PhoneJoinAsPeers | PlainMessage<PhoneJoinAsPeers> | undefined): boolean {
    return proto3.util.equals(PhoneJoinAsPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhoneJoinAsPeers
 */
export class TLPhoneJoinAsPeers extends Message$1<TLPhoneJoinAsPeers> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneJoinAsPeers data2 = 1;
   */
  data2: PhoneJoinAsPeers[] = [];

  constructor(data?: PartialMessage<TLPhoneJoinAsPeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhoneJoinAsPeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhoneJoinAsPeers, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhoneJoinAsPeers {
    return new TLPhoneJoinAsPeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhoneJoinAsPeers {
    return new TLPhoneJoinAsPeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhoneJoinAsPeers {
    return new TLPhoneJoinAsPeers().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhoneJoinAsPeers | PlainMessage<TLPhoneJoinAsPeers> | undefined, b: TLPhoneJoinAsPeers | PlainMessage<TLPhoneJoinAsPeers> | undefined): boolean {
    return proto3.util.equals(TLPhoneJoinAsPeers, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhonePhoneCall
 */
export class PhonePhoneCall extends Message$1<PhonePhoneCall> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhoneCall phone_call = 3;
   */
  phoneCall: PhoneCall[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PhonePhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhonePhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "phone_call", kind: "message", T: PhoneCall, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhonePhoneCall {
    return new PhonePhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhonePhoneCall {
    return new PhonePhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhonePhoneCall {
    return new PhonePhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: PhonePhoneCall | PlainMessage<PhonePhoneCall> | undefined, b: PhonePhoneCall | PlainMessage<PhonePhoneCall> | undefined): boolean {
    return proto3.util.equals(PhonePhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhonePhoneCall
 */
export class TLPhonePhoneCall extends Message$1<TLPhonePhoneCall> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhonePhoneCall data2 = 1;
   */
  data2: PhonePhoneCall[] = [];

  constructor(data?: PartialMessage<TLPhonePhoneCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhonePhoneCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhonePhoneCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhonePhoneCall {
    return new TLPhonePhoneCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhonePhoneCall {
    return new TLPhonePhoneCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhonePhoneCall {
    return new TLPhonePhoneCall().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhonePhoneCall | PlainMessage<TLPhonePhoneCall> | undefined, b: TLPhonePhoneCall | PlainMessage<TLPhonePhoneCall> | undefined): boolean {
    return proto3.util.equals(TLPhonePhoneCall, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhotosPhoto
 */
export class PhotosPhoto extends Message$1<PhotosPhoto> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photo = 3;
   */
  photo: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PhotosPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhotosPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "photo", kind: "message", T: Photo, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotosPhoto {
    return new PhotosPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotosPhoto {
    return new PhotosPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotosPhoto {
    return new PhotosPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: PhotosPhoto | PlainMessage<PhotosPhoto> | undefined, b: PhotosPhoto | PlainMessage<PhotosPhoto> | undefined): boolean {
    return proto3.util.equals(PhotosPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhoto
 */
export class TLPhotosPhoto extends Message$1<TLPhotosPhoto> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotosPhoto data2 = 1;
   */
  data2: PhotosPhoto[] = [];

  constructor(data?: PartialMessage<TLPhotosPhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotosPhoto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotosPhoto {
    return new TLPhotosPhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotosPhoto {
    return new TLPhotosPhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotosPhoto {
    return new TLPhotosPhoto().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotosPhoto | PlainMessage<TLPhotosPhoto> | undefined, b: TLPhotosPhoto | PlainMessage<TLPhotosPhoto> | undefined): boolean {
    return proto3.util.equals(TLPhotosPhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.PhotosPhotos
 */
export class PhotosPhotos extends Message$1<PhotosPhotos> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Photo photos = 3;
   */
  photos: Photo[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<PhotosPhotos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.PhotosPhotos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "photos", kind: "message", T: Photo, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotosPhotos {
    return new PhotosPhotos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotosPhotos {
    return new PhotosPhotos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotosPhotos {
    return new PhotosPhotos().fromJsonString(jsonString, options);
  }

  static equals(a: PhotosPhotos | PlainMessage<PhotosPhotos> | undefined, b: PhotosPhotos | PlainMessage<PhotosPhotos> | undefined): boolean {
    return proto3.util.equals(PhotosPhotos, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhotos
 */
export class TLPhotosPhotos extends Message$1<TLPhotosPhotos> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotosPhotos data2 = 1;
   */
  data2: PhotosPhotos[] = [];

  constructor(data?: PartialMessage<TLPhotosPhotos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhotos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotosPhotos, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotosPhotos {
    return new TLPhotosPhotos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotosPhotos {
    return new TLPhotosPhotos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotosPhotos {
    return new TLPhotosPhotos().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotosPhotos | PlainMessage<TLPhotosPhotos> | undefined, b: TLPhotosPhotos | PlainMessage<TLPhotosPhotos> | undefined): boolean {
    return proto3.util.equals(TLPhotosPhotos, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhotosSlice
 */
export class TLPhotosPhotosSlice extends Message$1<TLPhotosPhotosSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PhotosPhotos data2 = 1;
   */
  data2: PhotosPhotos[] = [];

  constructor(data?: PartialMessage<TLPhotosPhotosSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLPhotosPhotosSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: PhotosPhotos, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLPhotosPhotosSlice {
    return new TLPhotosPhotosSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLPhotosPhotosSlice {
    return new TLPhotosPhotosSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLPhotosPhotosSlice {
    return new TLPhotosPhotosSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLPhotosPhotosSlice | PlainMessage<TLPhotosPhotosSlice> | undefined, b: TLPhotosPhotosSlice | PlainMessage<TLPhotosPhotosSlice> | undefined): boolean {
    return proto3.util.equals(TLPhotosPhotosSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsBroadcastStats
 */
export class StatsBroadcastStats extends Message$1<StatsBroadcastStats> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsDateRangeDays period = 3;
   */
  period: StatsDateRangeDays[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev followers = 4;
   */
  followers: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev views_per_post = 5;
   */
  viewsPerPost: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev shares_per_post = 6;
   */
  sharesPerPost: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsPercentValue enabled_notifications = 7;
   */
  enabledNotifications: StatsPercentValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph growth_graph = 8;
   */
  growthGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph followers_graph = 9;
   */
  followersGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph mute_graph = 10;
   */
  muteGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph top_hours_graph = 11;
   */
  topHoursGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph interactions_graph = 12;
   */
  interactionsGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph iv_interactions_graph = 13;
   */
  ivInteractionsGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph views_by_source_graph = 14;
   */
  viewsBySourceGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph new_followers_by_source_graph = 15;
   */
  newFollowersBySourceGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph languages_graph = 16;
   */
  languagesGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.MessageInteractionCounters recent_message_interactions = 17;
   */
  recentMessageInteractions: MessageInteractionCounters[] = [];

  constructor(data?: PartialMessage<StatsBroadcastStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsBroadcastStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "period", kind: "message", T: StatsDateRangeDays, repeated: true },
    { no: 4, name: "followers", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 5, name: "views_per_post", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 6, name: "shares_per_post", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 7, name: "enabled_notifications", kind: "message", T: StatsPercentValue, repeated: true },
    { no: 8, name: "growth_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 9, name: "followers_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 10, name: "mute_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 11, name: "top_hours_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 12, name: "interactions_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 13, name: "iv_interactions_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 14, name: "views_by_source_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 15, name: "new_followers_by_source_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 16, name: "languages_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 17, name: "recent_message_interactions", kind: "message", T: MessageInteractionCounters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsBroadcastStats {
    return new StatsBroadcastStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsBroadcastStats {
    return new StatsBroadcastStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsBroadcastStats {
    return new StatsBroadcastStats().fromJsonString(jsonString, options);
  }

  static equals(a: StatsBroadcastStats | PlainMessage<StatsBroadcastStats> | undefined, b: StatsBroadcastStats | PlainMessage<StatsBroadcastStats> | undefined): boolean {
    return proto3.util.equals(StatsBroadcastStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsBroadcastStats
 */
export class TLStatsBroadcastStats extends Message$1<TLStatsBroadcastStats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsBroadcastStats data2 = 1;
   */
  data2: StatsBroadcastStats[] = [];

  constructor(data?: PartialMessage<TLStatsBroadcastStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsBroadcastStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsBroadcastStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsBroadcastStats {
    return new TLStatsBroadcastStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsBroadcastStats {
    return new TLStatsBroadcastStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsBroadcastStats {
    return new TLStatsBroadcastStats().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsBroadcastStats | PlainMessage<TLStatsBroadcastStats> | undefined, b: TLStatsBroadcastStats | PlainMessage<TLStatsBroadcastStats> | undefined): boolean {
    return proto3.util.equals(TLStatsBroadcastStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsMegagroupStats
 */
export class StatsMegagroupStats extends Message$1<StatsMegagroupStats> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsDateRangeDays period = 3;
   */
  period: StatsDateRangeDays[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev members = 4;
   */
  members: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev messages = 5;
   */
  messages: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev viewers = 6;
   */
  viewers: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsAbsValueAndPrev posters = 7;
   */
  posters: StatsAbsValueAndPrev[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph growth_graph = 8;
   */
  growthGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph members_graph = 9;
   */
  membersGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph new_members_by_source_graph = 10;
   */
  newMembersBySourceGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph languages_graph = 11;
   */
  languagesGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph messages_graph = 12;
   */
  messagesGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph actions_graph = 13;
   */
  actionsGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph top_hours_graph = 14;
   */
  topHoursGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph weekdays_graph = 15;
   */
  weekdaysGraph: StatsGraph[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopPoster top_posters = 16;
   */
  topPosters: StatsGroupTopPoster[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopAdmin top_admins = 17;
   */
  topAdmins: StatsGroupTopAdmin[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGroupTopInviter top_inviters = 18;
   */
  topInviters: StatsGroupTopInviter[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 19;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StatsMegagroupStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsMegagroupStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "period", kind: "message", T: StatsDateRangeDays, repeated: true },
    { no: 4, name: "members", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 5, name: "messages", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 6, name: "viewers", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 7, name: "posters", kind: "message", T: StatsAbsValueAndPrev, repeated: true },
    { no: 8, name: "growth_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 9, name: "members_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 10, name: "new_members_by_source_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 11, name: "languages_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 12, name: "messages_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 13, name: "actions_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 14, name: "top_hours_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 15, name: "weekdays_graph", kind: "message", T: StatsGraph, repeated: true },
    { no: 16, name: "top_posters", kind: "message", T: StatsGroupTopPoster, repeated: true },
    { no: 17, name: "top_admins", kind: "message", T: StatsGroupTopAdmin, repeated: true },
    { no: 18, name: "top_inviters", kind: "message", T: StatsGroupTopInviter, repeated: true },
    { no: 19, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsMegagroupStats {
    return new StatsMegagroupStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsMegagroupStats {
    return new StatsMegagroupStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsMegagroupStats {
    return new StatsMegagroupStats().fromJsonString(jsonString, options);
  }

  static equals(a: StatsMegagroupStats | PlainMessage<StatsMegagroupStats> | undefined, b: StatsMegagroupStats | PlainMessage<StatsMegagroupStats> | undefined): boolean {
    return proto3.util.equals(StatsMegagroupStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsMegagroupStats
 */
export class TLStatsMegagroupStats extends Message$1<TLStatsMegagroupStats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsMegagroupStats data2 = 1;
   */
  data2: StatsMegagroupStats[] = [];

  constructor(data?: PartialMessage<TLStatsMegagroupStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsMegagroupStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsMegagroupStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsMegagroupStats {
    return new TLStatsMegagroupStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsMegagroupStats {
    return new TLStatsMegagroupStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsMegagroupStats {
    return new TLStatsMegagroupStats().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsMegagroupStats | PlainMessage<TLStatsMegagroupStats> | undefined, b: TLStatsMegagroupStats | PlainMessage<TLStatsMegagroupStats> | undefined): boolean {
    return proto3.util.equals(TLStatsMegagroupStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StatsMessageStats
 */
export class StatsMessageStats extends Message$1<StatsMessageStats> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsGraph views_graph = 3;
   */
  viewsGraph: StatsGraph[] = [];

  constructor(data?: PartialMessage<StatsMessageStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StatsMessageStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "views_graph", kind: "message", T: StatsGraph, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsMessageStats {
    return new StatsMessageStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsMessageStats {
    return new StatsMessageStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsMessageStats {
    return new StatsMessageStats().fromJsonString(jsonString, options);
  }

  static equals(a: StatsMessageStats | PlainMessage<StatsMessageStats> | undefined, b: StatsMessageStats | PlainMessage<StatsMessageStats> | undefined): boolean {
    return proto3.util.equals(StatsMessageStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStatsMessageStats
 */
export class TLStatsMessageStats extends Message$1<TLStatsMessageStats> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsMessageStats data2 = 1;
   */
  data2: StatsMessageStats[] = [];

  constructor(data?: PartialMessage<TLStatsMessageStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStatsMessageStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StatsMessageStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStatsMessageStats {
    return new TLStatsMessageStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStatsMessageStats {
    return new TLStatsMessageStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStatsMessageStats {
    return new TLStatsMessageStats().fromJsonString(jsonString, options);
  }

  static equals(a: TLStatsMessageStats | PlainMessage<TLStatsMessageStats> | undefined, b: TLStatsMessageStats | PlainMessage<TLStatsMessageStats> | undefined): boolean {
    return proto3.util.equals(TLStatsMessageStats, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StickersSuggestedShortName
 */
export class StickersSuggestedShortName extends Message$1<StickersSuggestedShortName> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string short_name = 3;
   */
  shortName = "";

  constructor(data?: PartialMessage<StickersSuggestedShortName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StickersSuggestedShortName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StickersSuggestedShortName {
    return new StickersSuggestedShortName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StickersSuggestedShortName {
    return new StickersSuggestedShortName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StickersSuggestedShortName {
    return new StickersSuggestedShortName().fromJsonString(jsonString, options);
  }

  static equals(a: StickersSuggestedShortName | PlainMessage<StickersSuggestedShortName> | undefined, b: StickersSuggestedShortName | PlainMessage<StickersSuggestedShortName> | undefined): boolean {
    return proto3.util.equals(StickersSuggestedShortName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStickersSuggestedShortName
 */
export class TLStickersSuggestedShortName extends Message$1<TLStickersSuggestedShortName> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StickersSuggestedShortName data2 = 1;
   */
  data2: StickersSuggestedShortName[] = [];

  constructor(data?: PartialMessage<TLStickersSuggestedShortName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStickersSuggestedShortName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StickersSuggestedShortName, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStickersSuggestedShortName {
    return new TLStickersSuggestedShortName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStickersSuggestedShortName {
    return new TLStickersSuggestedShortName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStickersSuggestedShortName {
    return new TLStickersSuggestedShortName().fromJsonString(jsonString, options);
  }

  static equals(a: TLStickersSuggestedShortName | PlainMessage<TLStickersSuggestedShortName> | undefined, b: TLStickersSuggestedShortName | PlainMessage<TLStickersSuggestedShortName> | undefined): boolean {
    return proto3.util.equals(TLStickersSuggestedShortName, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StorageFileType
 */
export class StorageFileType extends Message$1<StorageFileType> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  constructor(data?: PartialMessage<StorageFileType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StorageFileType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageFileType {
    return new StorageFileType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageFileType {
    return new StorageFileType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageFileType {
    return new StorageFileType().fromJsonString(jsonString, options);
  }

  static equals(a: StorageFileType | PlainMessage<StorageFileType> | undefined, b: StorageFileType | PlainMessage<StorageFileType> | undefined): boolean {
    return proto3.util.equals(StorageFileType, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileUnknown
 */
export class TLStorageFileUnknown extends Message$1<TLStorageFileUnknown> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileUnknown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileUnknown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileUnknown {
    return new TLStorageFileUnknown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileUnknown {
    return new TLStorageFileUnknown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileUnknown {
    return new TLStorageFileUnknown().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileUnknown | PlainMessage<TLStorageFileUnknown> | undefined, b: TLStorageFileUnknown | PlainMessage<TLStorageFileUnknown> | undefined): boolean {
    return proto3.util.equals(TLStorageFileUnknown, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePartial
 */
export class TLStorageFilePartial extends Message$1<TLStorageFilePartial> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFilePartial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePartial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFilePartial {
    return new TLStorageFilePartial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFilePartial {
    return new TLStorageFilePartial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFilePartial {
    return new TLStorageFilePartial().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFilePartial | PlainMessage<TLStorageFilePartial> | undefined, b: TLStorageFilePartial | PlainMessage<TLStorageFilePartial> | undefined): boolean {
    return proto3.util.equals(TLStorageFilePartial, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileJpeg
 */
export class TLStorageFileJpeg extends Message$1<TLStorageFileJpeg> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileJpeg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileJpeg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileJpeg {
    return new TLStorageFileJpeg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileJpeg {
    return new TLStorageFileJpeg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileJpeg {
    return new TLStorageFileJpeg().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileJpeg | PlainMessage<TLStorageFileJpeg> | undefined, b: TLStorageFileJpeg | PlainMessage<TLStorageFileJpeg> | undefined): boolean {
    return proto3.util.equals(TLStorageFileJpeg, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileGif
 */
export class TLStorageFileGif extends Message$1<TLStorageFileGif> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileGif>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileGif";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileGif {
    return new TLStorageFileGif().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileGif {
    return new TLStorageFileGif().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileGif {
    return new TLStorageFileGif().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileGif | PlainMessage<TLStorageFileGif> | undefined, b: TLStorageFileGif | PlainMessage<TLStorageFileGif> | undefined): boolean {
    return proto3.util.equals(TLStorageFileGif, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePng
 */
export class TLStorageFilePng extends Message$1<TLStorageFilePng> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFilePng>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePng";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFilePng {
    return new TLStorageFilePng().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFilePng {
    return new TLStorageFilePng().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFilePng {
    return new TLStorageFilePng().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFilePng | PlainMessage<TLStorageFilePng> | undefined, b: TLStorageFilePng | PlainMessage<TLStorageFilePng> | undefined): boolean {
    return proto3.util.equals(TLStorageFilePng, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePdf
 */
export class TLStorageFilePdf extends Message$1<TLStorageFilePdf> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFilePdf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFilePdf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFilePdf {
    return new TLStorageFilePdf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFilePdf {
    return new TLStorageFilePdf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFilePdf {
    return new TLStorageFilePdf().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFilePdf | PlainMessage<TLStorageFilePdf> | undefined, b: TLStorageFilePdf | PlainMessage<TLStorageFilePdf> | undefined): boolean {
    return proto3.util.equals(TLStorageFilePdf, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMp3
 */
export class TLStorageFileMp3 extends Message$1<TLStorageFileMp3> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileMp3>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMp3";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileMp3 {
    return new TLStorageFileMp3().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileMp3 {
    return new TLStorageFileMp3().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileMp3 {
    return new TLStorageFileMp3().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileMp3 | PlainMessage<TLStorageFileMp3> | undefined, b: TLStorageFileMp3 | PlainMessage<TLStorageFileMp3> | undefined): boolean {
    return proto3.util.equals(TLStorageFileMp3, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMov
 */
export class TLStorageFileMov extends Message$1<TLStorageFileMov> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileMov>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMov";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileMov {
    return new TLStorageFileMov().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileMov {
    return new TLStorageFileMov().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileMov {
    return new TLStorageFileMov().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileMov | PlainMessage<TLStorageFileMov> | undefined, b: TLStorageFileMov | PlainMessage<TLStorageFileMov> | undefined): boolean {
    return proto3.util.equals(TLStorageFileMov, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMp4
 */
export class TLStorageFileMp4 extends Message$1<TLStorageFileMp4> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileMp4>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileMp4";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileMp4 {
    return new TLStorageFileMp4().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileMp4 {
    return new TLStorageFileMp4().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileMp4 {
    return new TLStorageFileMp4().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileMp4 | PlainMessage<TLStorageFileMp4> | undefined, b: TLStorageFileMp4 | PlainMessage<TLStorageFileMp4> | undefined): boolean {
    return proto3.util.equals(TLStorageFileMp4, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStorageFileWebp
 */
export class TLStorageFileWebp extends Message$1<TLStorageFileWebp> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType data2 = 1;
   */
  data2: StorageFileType[] = [];

  constructor(data?: PartialMessage<TLStorageFileWebp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStorageFileWebp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StorageFileType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStorageFileWebp {
    return new TLStorageFileWebp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStorageFileWebp {
    return new TLStorageFileWebp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStorageFileWebp {
    return new TLStorageFileWebp().fromJsonString(jsonString, options);
  }

  static equals(a: TLStorageFileWebp | PlainMessage<TLStorageFileWebp> | undefined, b: TLStorageFileWebp | PlainMessage<TLStorageFileWebp> | undefined): boolean {
    return proto3.util.equals(TLStorageFileWebp, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesAllStories
 */
export class StoriesAllStories extends Message$1<StoriesAllStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStealthMode stealth_mode = 4;
   */
  stealthMode: StoriesStealthMode[] = [];

  /**
   * @generated from field: bool has_more = 5;
   */
  hasMore = false;

  /**
   * @generated from field: int32 count = 6;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerStories peer_stories = 7;
   */
  peerStories: PeerStories[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 8;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 9;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStories user_stories = 10;
   */
  userStories: UserStories[] = [];

  constructor(data?: PartialMessage<StoriesAllStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesAllStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "stealth_mode", kind: "message", T: StoriesStealthMode, repeated: true },
    { no: 5, name: "has_more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "peer_stories", kind: "message", T: PeerStories, repeated: true },
    { no: 8, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 9, name: "users", kind: "message", T: User, repeated: true },
    { no: 10, name: "user_stories", kind: "message", T: UserStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesAllStories {
    return new StoriesAllStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesAllStories {
    return new StoriesAllStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesAllStories {
    return new StoriesAllStories().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesAllStories | PlainMessage<StoriesAllStories> | undefined, b: StoriesAllStories | PlainMessage<StoriesAllStories> | undefined): boolean {
    return proto3.util.equals(StoriesAllStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesAllStoriesNotModified
 */
export class TLStoriesAllStoriesNotModified extends Message$1<TLStoriesAllStoriesNotModified> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesAllStories data2 = 1;
   */
  data2: StoriesAllStories[] = [];

  constructor(data?: PartialMessage<TLStoriesAllStoriesNotModified>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesAllStoriesNotModified";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesAllStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesAllStoriesNotModified {
    return new TLStoriesAllStoriesNotModified().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesAllStoriesNotModified {
    return new TLStoriesAllStoriesNotModified().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesAllStoriesNotModified {
    return new TLStoriesAllStoriesNotModified().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesAllStoriesNotModified | PlainMessage<TLStoriesAllStoriesNotModified> | undefined, b: TLStoriesAllStoriesNotModified | PlainMessage<TLStoriesAllStoriesNotModified> | undefined): boolean {
    return proto3.util.equals(TLStoriesAllStoriesNotModified, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesAllStories
 */
export class TLStoriesAllStories extends Message$1<TLStoriesAllStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesAllStories data2 = 1;
   */
  data2: StoriesAllStories[] = [];

  constructor(data?: PartialMessage<TLStoriesAllStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesAllStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesAllStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesAllStories {
    return new TLStoriesAllStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesAllStories {
    return new TLStoriesAllStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesAllStories {
    return new TLStoriesAllStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesAllStories | PlainMessage<TLStoriesAllStories> | undefined, b: TLStoriesAllStories | PlainMessage<TLStoriesAllStories> | undefined): boolean {
    return proto3.util.equals(TLStoriesAllStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesBoostersList
 */
export class StoriesBoostersList extends Message$1<StoriesBoostersList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Booster boosters = 4;
   */
  boosters: Booster[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue next_offset = 5;
   */
  nextOffset: StringValue[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StoriesBoostersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesBoostersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "boosters", kind: "message", T: Booster, repeated: true },
    { no: 5, name: "next_offset", kind: "message", T: StringValue, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesBoostersList {
    return new StoriesBoostersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesBoostersList {
    return new StoriesBoostersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesBoostersList {
    return new StoriesBoostersList().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesBoostersList | PlainMessage<StoriesBoostersList> | undefined, b: StoriesBoostersList | PlainMessage<StoriesBoostersList> | undefined): boolean {
    return proto3.util.equals(StoriesBoostersList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesBoostersList
 */
export class TLStoriesBoostersList extends Message$1<TLStoriesBoostersList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesBoostersList data2 = 1;
   */
  data2: StoriesBoostersList[] = [];

  constructor(data?: PartialMessage<TLStoriesBoostersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesBoostersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesBoostersList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesBoostersList {
    return new TLStoriesBoostersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesBoostersList {
    return new TLStoriesBoostersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesBoostersList {
    return new TLStoriesBoostersList().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesBoostersList | PlainMessage<TLStoriesBoostersList> | undefined, b: TLStoriesBoostersList | PlainMessage<TLStoriesBoostersList> | undefined): boolean {
    return proto3.util.equals(TLStoriesBoostersList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesBoostsStatus
 */
export class StoriesBoostsStatus extends Message$1<StoriesBoostsStatus> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool my_boost = 3;
   */
  myBoost = false;

  /**
   * @generated from field: int32 level = 4;
   */
  level = 0;

  /**
   * @generated from field: int32 current_level_boosts = 5;
   */
  currentLevelBoosts = 0;

  /**
   * @generated from field: int32 boosts = 6;
   */
  boosts = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value next_level_boosts = 7;
   */
  nextLevelBoosts: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StatsPercentValue premium_audience = 8;
   */
  premiumAudience: StatsPercentValue[] = [];

  /**
   * @generated from field: string boost_url = 9;
   */
  boostUrl = "";

  constructor(data?: PartialMessage<StoriesBoostsStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesBoostsStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "my_boost", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "current_level_boosts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "boosts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "next_level_boosts", kind: "message", T: Int32Value, repeated: true },
    { no: 8, name: "premium_audience", kind: "message", T: StatsPercentValue, repeated: true },
    { no: 9, name: "boost_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesBoostsStatus {
    return new StoriesBoostsStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesBoostsStatus {
    return new StoriesBoostsStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesBoostsStatus {
    return new StoriesBoostsStatus().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesBoostsStatus | PlainMessage<StoriesBoostsStatus> | undefined, b: StoriesBoostsStatus | PlainMessage<StoriesBoostsStatus> | undefined): boolean {
    return proto3.util.equals(StoriesBoostsStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesBoostsStatus
 */
export class TLStoriesBoostsStatus extends Message$1<TLStoriesBoostsStatus> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesBoostsStatus data2 = 1;
   */
  data2: StoriesBoostsStatus[] = [];

  constructor(data?: PartialMessage<TLStoriesBoostsStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesBoostsStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesBoostsStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesBoostsStatus {
    return new TLStoriesBoostsStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesBoostsStatus {
    return new TLStoriesBoostsStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesBoostsStatus {
    return new TLStoriesBoostsStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesBoostsStatus | PlainMessage<TLStoriesBoostsStatus> | undefined, b: TLStoriesBoostsStatus | PlainMessage<TLStoriesBoostsStatus> | undefined): boolean {
    return proto3.util.equals(TLStoriesBoostsStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesCanApplyBoostResult
 */
export class StoriesCanApplyBoostResult extends Message$1<StoriesCanApplyBoostResult> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Peer current_boost = 3;
   */
  currentBoost: Peer[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  constructor(data?: PartialMessage<StoriesCanApplyBoostResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesCanApplyBoostResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "current_boost", kind: "message", T: Peer, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesCanApplyBoostResult {
    return new StoriesCanApplyBoostResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesCanApplyBoostResult {
    return new StoriesCanApplyBoostResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesCanApplyBoostResult {
    return new StoriesCanApplyBoostResult().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesCanApplyBoostResult | PlainMessage<StoriesCanApplyBoostResult> | undefined, b: StoriesCanApplyBoostResult | PlainMessage<StoriesCanApplyBoostResult> | undefined): boolean {
    return proto3.util.equals(StoriesCanApplyBoostResult, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesCanApplyBoostOk
 */
export class TLStoriesCanApplyBoostOk extends Message$1<TLStoriesCanApplyBoostOk> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesCanApplyBoostResult data2 = 1;
   */
  data2: StoriesCanApplyBoostResult[] = [];

  constructor(data?: PartialMessage<TLStoriesCanApplyBoostOk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesCanApplyBoostOk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesCanApplyBoostResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesCanApplyBoostOk {
    return new TLStoriesCanApplyBoostOk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesCanApplyBoostOk {
    return new TLStoriesCanApplyBoostOk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesCanApplyBoostOk {
    return new TLStoriesCanApplyBoostOk().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesCanApplyBoostOk | PlainMessage<TLStoriesCanApplyBoostOk> | undefined, b: TLStoriesCanApplyBoostOk | PlainMessage<TLStoriesCanApplyBoostOk> | undefined): boolean {
    return proto3.util.equals(TLStoriesCanApplyBoostOk, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesCanApplyBoostReplace
 */
export class TLStoriesCanApplyBoostReplace extends Message$1<TLStoriesCanApplyBoostReplace> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesCanApplyBoostResult data2 = 1;
   */
  data2: StoriesCanApplyBoostResult[] = [];

  constructor(data?: PartialMessage<TLStoriesCanApplyBoostReplace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesCanApplyBoostReplace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesCanApplyBoostResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesCanApplyBoostReplace {
    return new TLStoriesCanApplyBoostReplace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesCanApplyBoostReplace {
    return new TLStoriesCanApplyBoostReplace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesCanApplyBoostReplace {
    return new TLStoriesCanApplyBoostReplace().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesCanApplyBoostReplace | PlainMessage<TLStoriesCanApplyBoostReplace> | undefined, b: TLStoriesCanApplyBoostReplace | PlainMessage<TLStoriesCanApplyBoostReplace> | undefined): boolean {
    return proto3.util.equals(TLStoriesCanApplyBoostReplace, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesPeerStories
 */
export class StoriesPeerStories extends Message$1<StoriesPeerStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.PeerStories stories = 3;
   */
  stories: PeerStories[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StoriesPeerStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesPeerStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "stories", kind: "message", T: PeerStories, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesPeerStories {
    return new StoriesPeerStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesPeerStories {
    return new StoriesPeerStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesPeerStories {
    return new StoriesPeerStories().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesPeerStories | PlainMessage<StoriesPeerStories> | undefined, b: StoriesPeerStories | PlainMessage<StoriesPeerStories> | undefined): boolean {
    return proto3.util.equals(StoriesPeerStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesPeerStories
 */
export class TLStoriesPeerStories extends Message$1<TLStoriesPeerStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesPeerStories data2 = 1;
   */
  data2: StoriesPeerStories[] = [];

  constructor(data?: PartialMessage<TLStoriesPeerStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesPeerStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesPeerStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesPeerStories {
    return new TLStoriesPeerStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesPeerStories {
    return new TLStoriesPeerStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesPeerStories {
    return new TLStoriesPeerStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesPeerStories | PlainMessage<TLStoriesPeerStories> | undefined, b: TLStoriesPeerStories | PlainMessage<TLStoriesPeerStories> | undefined): boolean {
    return proto3.util.equals(TLStoriesPeerStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesStories
 */
export class StoriesStories extends Message$1<StoriesStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryItem stories = 4;
   */
  stories: StoryItem[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 5;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StoriesStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "stories", kind: "message", T: StoryItem, repeated: true },
    { no: 5, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesStories {
    return new StoriesStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesStories {
    return new StoriesStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesStories {
    return new StoriesStories().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesStories | PlainMessage<StoriesStories> | undefined, b: StoriesStories | PlainMessage<StoriesStories> | undefined): boolean {
    return proto3.util.equals(StoriesStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesStories
 */
export class TLStoriesStories extends Message$1<TLStoriesStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStories data2 = 1;
   */
  data2: StoriesStories[] = [];

  constructor(data?: PartialMessage<TLStoriesStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesStories {
    return new TLStoriesStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesStories {
    return new TLStoriesStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesStories {
    return new TLStoriesStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesStories | PlainMessage<TLStoriesStories> | undefined, b: TLStoriesStories | PlainMessage<TLStoriesStories> | undefined): boolean {
    return proto3.util.equals(TLStoriesStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViews
 */
export class StoriesStoryViews extends Message$1<StoriesStoryViews> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryViews views = 3;
   */
  views: StoryViews[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StoriesStoryViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "views", kind: "message", T: StoryViews, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesStoryViews {
    return new StoriesStoryViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesStoryViews {
    return new StoriesStoryViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesStoryViews {
    return new StoriesStoryViews().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesStoryViews | PlainMessage<StoriesStoryViews> | undefined, b: StoriesStoryViews | PlainMessage<StoriesStoryViews> | undefined): boolean {
    return proto3.util.equals(StoriesStoryViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesStoryViews
 */
export class TLStoriesStoryViews extends Message$1<TLStoriesStoryViews> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViews data2 = 1;
   */
  data2: StoriesStoryViews[] = [];

  constructor(data?: PartialMessage<TLStoriesStoryViews>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesStoryViews";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesStoryViews, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesStoryViews {
    return new TLStoriesStoryViews().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesStoryViews {
    return new TLStoriesStoryViews().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesStoryViews {
    return new TLStoriesStoryViews().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesStoryViews | PlainMessage<TLStoriesStoryViews> | undefined, b: TLStoriesStoryViews | PlainMessage<TLStoriesStoryViews> | undefined): boolean {
    return proto3.util.equals(TLStoriesStoryViews, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViewsList
 */
export class StoriesStoryViewsList extends Message$1<StoriesStoryViewsList> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 count = 3;
   */
  count = 0;

  /**
   * @generated from field: int32 reactions_count = 4;
   */
  reactionsCount = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoryView views = 5;
   */
  views: StoryView[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 6;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue next_offset = 7;
   */
  nextOffset: StringValue[] = [];

  constructor(data?: PartialMessage<StoriesStoryViewsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViewsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "reactions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "views", kind: "message", T: StoryView, repeated: true },
    { no: 6, name: "users", kind: "message", T: User, repeated: true },
    { no: 7, name: "next_offset", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesStoryViewsList {
    return new StoriesStoryViewsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesStoryViewsList {
    return new StoriesStoryViewsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesStoryViewsList {
    return new StoriesStoryViewsList().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesStoryViewsList | PlainMessage<StoriesStoryViewsList> | undefined, b: StoriesStoryViewsList | PlainMessage<StoriesStoryViewsList> | undefined): boolean {
    return proto3.util.equals(StoriesStoryViewsList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesStoryViewsList
 */
export class TLStoriesStoryViewsList extends Message$1<TLStoriesStoryViewsList> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesStoryViewsList data2 = 1;
   */
  data2: StoriesStoryViewsList[] = [];

  constructor(data?: PartialMessage<TLStoriesStoryViewsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesStoryViewsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesStoryViewsList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesStoryViewsList {
    return new TLStoriesStoryViewsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesStoryViewsList {
    return new TLStoriesStoryViewsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesStoryViewsList {
    return new TLStoriesStoryViewsList().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesStoryViewsList | PlainMessage<TLStoriesStoryViewsList> | undefined, b: TLStoriesStoryViewsList | PlainMessage<TLStoriesStoryViewsList> | undefined): boolean {
    return proto3.util.equals(TLStoriesStoryViewsList, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.StoriesUserStories
 */
export class StoriesUserStories extends Message$1<StoriesUserStories> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserStories stories = 3;
   */
  stories: UserStories[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 4;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<StoriesUserStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.StoriesUserStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "stories", kind: "message", T: UserStories, repeated: true },
    { no: 4, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoriesUserStories {
    return new StoriesUserStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoriesUserStories {
    return new StoriesUserStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoriesUserStories {
    return new StoriesUserStories().fromJsonString(jsonString, options);
  }

  static equals(a: StoriesUserStories | PlainMessage<StoriesUserStories> | undefined, b: StoriesUserStories | PlainMessage<StoriesUserStories> | undefined): boolean {
    return proto3.util.equals(StoriesUserStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLStoriesUserStories
 */
export class TLStoriesUserStories extends Message$1<TLStoriesUserStories> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StoriesUserStories data2 = 1;
   */
  data2: StoriesUserStories[] = [];

  constructor(data?: PartialMessage<TLStoriesUserStories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLStoriesUserStories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: StoriesUserStories, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLStoriesUserStories {
    return new TLStoriesUserStories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLStoriesUserStories {
    return new TLStoriesUserStories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLStoriesUserStories {
    return new TLStoriesUserStories().fromJsonString(jsonString, options);
  }

  static equals(a: TLStoriesUserStories | PlainMessage<TLStoriesUserStories> | undefined, b: TLStoriesUserStories | PlainMessage<TLStoriesUserStories> | undefined): boolean {
    return proto3.util.equals(TLStoriesUserStories, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UpdatesChannelDifference
 */
export class UpdatesChannelDifference extends Message$1<UpdatesChannelDifference> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bool final = 3;
   */
  final = false;

  /**
   * @generated from field: int32 pts = 4;
   */
  pts = 0;

  /**
   * @generated from field: repeated google.protobuf.Int32Value timeout = 5;
   */
  timeout: Int32Value[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Dialog dialog = 6;
   */
  dialog: Dialog[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message messages = 7;
   */
  messages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 8;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 9;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message new_messages = 10;
   */
  newMessages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update other_updates = 11;
   */
  otherUpdates: Update[] = [];

  constructor(data?: PartialMessage<UpdatesChannelDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UpdatesChannelDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "final", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "timeout", kind: "message", T: Int32Value, repeated: true },
    { no: 6, name: "dialog", kind: "message", T: Dialog, repeated: true },
    { no: 7, name: "messages", kind: "message", T: Message, repeated: true },
    { no: 8, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 9, name: "users", kind: "message", T: User, repeated: true },
    { no: 10, name: "new_messages", kind: "message", T: Message, repeated: true },
    { no: 11, name: "other_updates", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatesChannelDifference {
    return new UpdatesChannelDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatesChannelDifference {
    return new UpdatesChannelDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatesChannelDifference {
    return new UpdatesChannelDifference().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatesChannelDifference | PlainMessage<UpdatesChannelDifference> | undefined, b: UpdatesChannelDifference | PlainMessage<UpdatesChannelDifference> | undefined): boolean {
    return proto3.util.equals(UpdatesChannelDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifferenceEmpty
 */
export class TLUpdatesChannelDifferenceEmpty extends Message$1<TLUpdatesChannelDifferenceEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesChannelDifference data2 = 1;
   */
  data2: UpdatesChannelDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesChannelDifferenceEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifferenceEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesChannelDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesChannelDifferenceEmpty {
    return new TLUpdatesChannelDifferenceEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifferenceEmpty {
    return new TLUpdatesChannelDifferenceEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifferenceEmpty {
    return new TLUpdatesChannelDifferenceEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesChannelDifferenceEmpty | PlainMessage<TLUpdatesChannelDifferenceEmpty> | undefined, b: TLUpdatesChannelDifferenceEmpty | PlainMessage<TLUpdatesChannelDifferenceEmpty> | undefined): boolean {
    return proto3.util.equals(TLUpdatesChannelDifferenceEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifferenceTooLong
 */
export class TLUpdatesChannelDifferenceTooLong extends Message$1<TLUpdatesChannelDifferenceTooLong> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesChannelDifference data2 = 1;
   */
  data2: UpdatesChannelDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesChannelDifferenceTooLong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifferenceTooLong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesChannelDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesChannelDifferenceTooLong {
    return new TLUpdatesChannelDifferenceTooLong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifferenceTooLong {
    return new TLUpdatesChannelDifferenceTooLong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifferenceTooLong {
    return new TLUpdatesChannelDifferenceTooLong().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesChannelDifferenceTooLong | PlainMessage<TLUpdatesChannelDifferenceTooLong> | undefined, b: TLUpdatesChannelDifferenceTooLong | PlainMessage<TLUpdatesChannelDifferenceTooLong> | undefined): boolean {
    return proto3.util.equals(TLUpdatesChannelDifferenceTooLong, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifference
 */
export class TLUpdatesChannelDifference extends Message$1<TLUpdatesChannelDifference> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesChannelDifference data2 = 1;
   */
  data2: UpdatesChannelDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesChannelDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesChannelDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesChannelDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesChannelDifference {
    return new TLUpdatesChannelDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifference {
    return new TLUpdatesChannelDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesChannelDifference {
    return new TLUpdatesChannelDifference().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesChannelDifference | PlainMessage<TLUpdatesChannelDifference> | undefined, b: TLUpdatesChannelDifference | PlainMessage<TLUpdatesChannelDifference> | undefined): boolean {
    return proto3.util.equals(TLUpdatesChannelDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference
 */
export class UpdatesDifference extends Message$1<UpdatesDifference> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 date = 3;
   */
  date = 0;

  /**
   * @generated from field: int32 seq = 4;
   */
  seq = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Message new_messages = 5;
   */
  newMessages: Message[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.EncryptedMessage new_encrypted_messages = 6;
   */
  newEncryptedMessages: EncryptedMessage[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Update other_updates = 7;
   */
  otherUpdates: Update[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 8;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 9;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesState state = 10;
   */
  state: UpdatesState[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesState intermediate_state = 11;
   */
  intermediateState: UpdatesState[] = [];

  /**
   * @generated from field: int32 pts = 12;
   */
  pts = 0;

  constructor(data?: PartialMessage<UpdatesDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "seq", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "new_messages", kind: "message", T: Message, repeated: true },
    { no: 6, name: "new_encrypted_messages", kind: "message", T: EncryptedMessage, repeated: true },
    { no: 7, name: "other_updates", kind: "message", T: Update, repeated: true },
    { no: 8, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 9, name: "users", kind: "message", T: User, repeated: true },
    { no: 10, name: "state", kind: "message", T: UpdatesState, repeated: true },
    { no: 11, name: "intermediate_state", kind: "message", T: UpdatesState, repeated: true },
    { no: 12, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatesDifference {
    return new UpdatesDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatesDifference {
    return new UpdatesDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatesDifference {
    return new UpdatesDifference().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatesDifference | PlainMessage<UpdatesDifference> | undefined, b: UpdatesDifference | PlainMessage<UpdatesDifference> | undefined): boolean {
    return proto3.util.equals(UpdatesDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceEmpty
 */
export class TLUpdatesDifferenceEmpty extends Message$1<TLUpdatesDifferenceEmpty> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference data2 = 1;
   */
  data2: UpdatesDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesDifferenceEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesDifferenceEmpty {
    return new TLUpdatesDifferenceEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceEmpty {
    return new TLUpdatesDifferenceEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceEmpty {
    return new TLUpdatesDifferenceEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesDifferenceEmpty | PlainMessage<TLUpdatesDifferenceEmpty> | undefined, b: TLUpdatesDifferenceEmpty | PlainMessage<TLUpdatesDifferenceEmpty> | undefined): boolean {
    return proto3.util.equals(TLUpdatesDifferenceEmpty, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifference
 */
export class TLUpdatesDifference extends Message$1<TLUpdatesDifference> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference data2 = 1;
   */
  data2: UpdatesDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesDifference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesDifference {
    return new TLUpdatesDifference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesDifference {
    return new TLUpdatesDifference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesDifference {
    return new TLUpdatesDifference().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesDifference | PlainMessage<TLUpdatesDifference> | undefined, b: TLUpdatesDifference | PlainMessage<TLUpdatesDifference> | undefined): boolean {
    return proto3.util.equals(TLUpdatesDifference, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceSlice
 */
export class TLUpdatesDifferenceSlice extends Message$1<TLUpdatesDifferenceSlice> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference data2 = 1;
   */
  data2: UpdatesDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesDifferenceSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesDifferenceSlice {
    return new TLUpdatesDifferenceSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceSlice {
    return new TLUpdatesDifferenceSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceSlice {
    return new TLUpdatesDifferenceSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesDifferenceSlice | PlainMessage<TLUpdatesDifferenceSlice> | undefined, b: TLUpdatesDifferenceSlice | PlainMessage<TLUpdatesDifferenceSlice> | undefined): boolean {
    return proto3.util.equals(TLUpdatesDifferenceSlice, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceTooLong
 */
export class TLUpdatesDifferenceTooLong extends Message$1<TLUpdatesDifferenceTooLong> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesDifference data2 = 1;
   */
  data2: UpdatesDifference[] = [];

  constructor(data?: PartialMessage<TLUpdatesDifferenceTooLong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesDifferenceTooLong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesDifference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesDifferenceTooLong {
    return new TLUpdatesDifferenceTooLong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceTooLong {
    return new TLUpdatesDifferenceTooLong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesDifferenceTooLong {
    return new TLUpdatesDifferenceTooLong().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesDifferenceTooLong | PlainMessage<TLUpdatesDifferenceTooLong> | undefined, b: TLUpdatesDifferenceTooLong | PlainMessage<TLUpdatesDifferenceTooLong> | undefined): boolean {
    return proto3.util.equals(TLUpdatesDifferenceTooLong, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UpdatesState
 */
export class UpdatesState extends Message$1<UpdatesState> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 pts = 3;
   */
  pts = 0;

  /**
   * @generated from field: int32 qts = 4;
   */
  qts = 0;

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: int32 seq = 6;
   */
  seq = 0;

  /**
   * @generated from field: int32 unread_count = 7;
   */
  unreadCount = 0;

  constructor(data?: PartialMessage<UpdatesState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UpdatesState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "qts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "seq", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatesState {
    return new UpdatesState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatesState {
    return new UpdatesState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatesState {
    return new UpdatesState().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatesState | PlainMessage<UpdatesState> | undefined, b: UpdatesState | PlainMessage<UpdatesState> | undefined): boolean {
    return proto3.util.equals(UpdatesState, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUpdatesState
 */
export class TLUpdatesState extends Message$1<TLUpdatesState> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UpdatesState data2 = 1;
   */
  data2: UpdatesState[] = [];

  constructor(data?: PartialMessage<TLUpdatesState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUpdatesState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UpdatesState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUpdatesState {
    return new TLUpdatesState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUpdatesState {
    return new TLUpdatesState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUpdatesState {
    return new TLUpdatesState().fromJsonString(jsonString, options);
  }

  static equals(a: TLUpdatesState | PlainMessage<TLUpdatesState> | undefined, b: TLUpdatesState | PlainMessage<TLUpdatesState> | undefined): boolean {
    return proto3.util.equals(TLUpdatesState, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UploadCdnFile
 */
export class UploadCdnFile extends Message$1<UploadCdnFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: bytes request_token = 3;
   */
  requestToken = new Uint8Array(0);

  /**
   * @generated from field: bytes bytes = 4;
   */
  bytes = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadCdnFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UploadCdnFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "request_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadCdnFile {
    return new UploadCdnFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadCdnFile {
    return new UploadCdnFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadCdnFile {
    return new UploadCdnFile().fromJsonString(jsonString, options);
  }

  static equals(a: UploadCdnFile | PlainMessage<UploadCdnFile> | undefined, b: UploadCdnFile | PlainMessage<UploadCdnFile> | undefined): boolean {
    return proto3.util.equals(UploadCdnFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUploadCdnFileReuploadNeeded
 */
export class TLUploadCdnFileReuploadNeeded extends Message$1<TLUploadCdnFileReuploadNeeded> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UploadCdnFile data2 = 1;
   */
  data2: UploadCdnFile[] = [];

  constructor(data?: PartialMessage<TLUploadCdnFileReuploadNeeded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUploadCdnFileReuploadNeeded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UploadCdnFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUploadCdnFileReuploadNeeded {
    return new TLUploadCdnFileReuploadNeeded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUploadCdnFileReuploadNeeded {
    return new TLUploadCdnFileReuploadNeeded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUploadCdnFileReuploadNeeded {
    return new TLUploadCdnFileReuploadNeeded().fromJsonString(jsonString, options);
  }

  static equals(a: TLUploadCdnFileReuploadNeeded | PlainMessage<TLUploadCdnFileReuploadNeeded> | undefined, b: TLUploadCdnFileReuploadNeeded | PlainMessage<TLUploadCdnFileReuploadNeeded> | undefined): boolean {
    return proto3.util.equals(TLUploadCdnFileReuploadNeeded, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUploadCdnFile
 */
export class TLUploadCdnFile extends Message$1<TLUploadCdnFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UploadCdnFile data2 = 1;
   */
  data2: UploadCdnFile[] = [];

  constructor(data?: PartialMessage<TLUploadCdnFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUploadCdnFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UploadCdnFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUploadCdnFile {
    return new TLUploadCdnFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUploadCdnFile {
    return new TLUploadCdnFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUploadCdnFile {
    return new TLUploadCdnFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLUploadCdnFile | PlainMessage<TLUploadCdnFile> | undefined, b: TLUploadCdnFile | PlainMessage<TLUploadCdnFile> | undefined): boolean {
    return proto3.util.equals(TLUploadCdnFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UploadFile
 */
export class UploadFile extends Message$1<UploadFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType type = 3;
   */
  type: StorageFileType[] = [];

  /**
   * @generated from field: int32 mtime = 4;
   */
  mtime = 0;

  /**
   * @generated from field: bytes bytes = 5;
   */
  bytes = new Uint8Array(0);

  /**
   * @generated from field: int32 dc_id = 6;
   */
  dcId = 0;

  /**
   * @generated from field: bytes file_token = 7;
   */
  fileToken = new Uint8Array(0);

  /**
   * @generated from field: bytes encryption_key = 8;
   */
  encryptionKey = new Uint8Array(0);

  /**
   * @generated from field: bytes encryption_iv = 9;
   */
  encryptionIv = new Uint8Array(0);

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.FileHash file_hashes = 10;
   */
  fileHashes: FileHash[] = [];

  constructor(data?: PartialMessage<UploadFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UploadFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "type", kind: "message", T: StorageFileType, repeated: true },
    { no: 4, name: "mtime", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "file_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "encryption_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "encryption_iv", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "file_hashes", kind: "message", T: FileHash, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFile {
    return new UploadFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFile {
    return new UploadFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFile {
    return new UploadFile().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFile | PlainMessage<UploadFile> | undefined, b: UploadFile | PlainMessage<UploadFile> | undefined): boolean {
    return proto3.util.equals(UploadFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUploadFile
 */
export class TLUploadFile extends Message$1<TLUploadFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UploadFile data2 = 1;
   */
  data2: UploadFile[] = [];

  constructor(data?: PartialMessage<TLUploadFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUploadFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UploadFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUploadFile {
    return new TLUploadFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUploadFile {
    return new TLUploadFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUploadFile {
    return new TLUploadFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLUploadFile | PlainMessage<TLUploadFile> | undefined, b: TLUploadFile | PlainMessage<TLUploadFile> | undefined): boolean {
    return proto3.util.equals(TLUploadFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUploadFileCdnRedirect
 */
export class TLUploadFileCdnRedirect extends Message$1<TLUploadFileCdnRedirect> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UploadFile data2 = 1;
   */
  data2: UploadFile[] = [];

  constructor(data?: PartialMessage<TLUploadFileCdnRedirect>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUploadFileCdnRedirect";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UploadFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUploadFileCdnRedirect {
    return new TLUploadFileCdnRedirect().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUploadFileCdnRedirect {
    return new TLUploadFileCdnRedirect().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUploadFileCdnRedirect {
    return new TLUploadFileCdnRedirect().fromJsonString(jsonString, options);
  }

  static equals(a: TLUploadFileCdnRedirect | PlainMessage<TLUploadFileCdnRedirect> | undefined, b: TLUploadFileCdnRedirect | PlainMessage<TLUploadFileCdnRedirect> | undefined): boolean {
    return proto3.util.equals(TLUploadFileCdnRedirect, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UploadWebFile
 */
export class UploadWebFile extends Message$1<UploadWebFile> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: int32 size2 = 3;
   */
  size2 = 0;

  /**
   * @generated from field: string mime_type = 4;
   */
  mimeType = "";

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.StorageFileType file_type = 5;
   */
  fileType: StorageFileType[] = [];

  /**
   * @generated from field: int32 mtime = 6;
   */
  mtime = 0;

  /**
   * @generated from field: bytes bytes = 7;
   */
  bytes = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadWebFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UploadWebFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "file_type", kind: "message", T: StorageFileType, repeated: true },
    { no: 6, name: "mtime", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadWebFile {
    return new UploadWebFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadWebFile {
    return new UploadWebFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadWebFile {
    return new UploadWebFile().fromJsonString(jsonString, options);
  }

  static equals(a: UploadWebFile | PlainMessage<UploadWebFile> | undefined, b: UploadWebFile | PlainMessage<UploadWebFile> | undefined): boolean {
    return proto3.util.equals(UploadWebFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUploadWebFile
 */
export class TLUploadWebFile extends Message$1<TLUploadWebFile> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UploadWebFile data2 = 1;
   */
  data2: UploadWebFile[] = [];

  constructor(data?: PartialMessage<TLUploadWebFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUploadWebFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UploadWebFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUploadWebFile {
    return new TLUploadWebFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUploadWebFile {
    return new TLUploadWebFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUploadWebFile {
    return new TLUploadWebFile().fromJsonString(jsonString, options);
  }

  static equals(a: TLUploadWebFile | PlainMessage<TLUploadWebFile> | undefined, b: TLUploadWebFile | PlainMessage<TLUploadWebFile> | undefined): boolean {
    return proto3.util.equals(TLUploadWebFile, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.UsersUserFull
 */
export class UsersUserFull extends Message$1<UsersUserFull> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = "";

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UserFull full_user = 3;
   */
  fullUser: UserFull[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.Chat chats = 4;
   */
  chats: Chat[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.User users = 5;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<UsersUserFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.UsersUserFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "predicate_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constructor", kind: "enum", T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: "full_user", kind: "message", T: UserFull, repeated: true },
    { no: 4, name: "chats", kind: "message", T: Chat, repeated: true },
    { no: 5, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersUserFull {
    return new UsersUserFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersUserFull {
    return new UsersUserFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersUserFull {
    return new UsersUserFull().fromJsonString(jsonString, options);
  }

  static equals(a: UsersUserFull | PlainMessage<UsersUserFull> | undefined, b: UsersUserFull | PlainMessage<UsersUserFull> | undefined): boolean {
    return proto3.util.equals(UsersUserFull, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.TLUsersUserFull
 */
export class TLUsersUserFull extends Message$1<TLUsersUserFull> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.UsersUserFull data2 = 1;
   */
  data2: UsersUserFull[] = [];

  constructor(data?: PartialMessage<TLUsersUserFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.TLUsersUserFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data2", kind: "message", T: UsersUserFull, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLUsersUserFull {
    return new TLUsersUserFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLUsersUserFull {
    return new TLUsersUserFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLUsersUserFull {
    return new TLUsersUserFull().fromJsonString(jsonString, options);
  }

  static equals(a: TLUsersUserFull | PlainMessage<TLUsersUserFull> | undefined, b: TLUsersUserFull | PlainMessage<TLUsersUserFull> | undefined): boolean {
    return proto3.util.equals(TLUsersUserFull, a, b);
  }
}

