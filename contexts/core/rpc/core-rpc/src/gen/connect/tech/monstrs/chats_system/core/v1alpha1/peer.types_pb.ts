// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/core/v1alpha1/peer.types.proto (package tech.monstrs.chats_system.core.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum tech.monstrs.chats_system.core.v1alpha1.PeerType
 */
export enum PeerType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: EMPTY = 1;
   */
  EMPTY = 1,

  /**
   * @generated from enum value: SELF = 2;
   */
  SELF = 2,

  /**
   * @generated from enum value: USER = 3;
   */
  USER = 3,

  /**
   * @generated from enum value: CHAT = 4;
   */
  CHAT = 4,

  /**
   * @generated from enum value: CHANNEL = 5;
   */
  CHANNEL = 5,

  /**
   * @generated from enum value: USERS = 6;
   */
  USERS = 6,

  /**
   * @generated from enum value: CHATS = 7;
   */
  CHATS = 7,

  /**
   * @generated from enum value: ENCRYPTED_CHAT = 8;
   */
  ENCRYPTED_CHAT = 8,

  /**
   * @generated from enum value: BROADCASTS = 9;
   */
  BROADCASTS = 9,

  /**
   * @generated from enum value: USER_MESSAGE = 10;
   */
  USER_MESSAGE = 10,

  /**
   * @generated from enum value: CHANNEL_MESSAGE = 12;
   */
  CHANNEL_MESSAGE = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(PeerType)
proto3.util.setEnumType(PeerType, "tech.monstrs.chats_system.core.v1alpha1.PeerType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "EMPTY" },
  { no: 2, name: "SELF" },
  { no: 3, name: "USER" },
  { no: 4, name: "CHAT" },
  { no: 5, name: "CHANNEL" },
  { no: 6, name: "USERS" },
  { no: 7, name: "CHATS" },
  { no: 8, name: "ENCRYPTED_CHAT" },
  { no: 9, name: "BROADCASTS" },
  { no: 10, name: "USER_MESSAGE" },
  { no: 12, name: "CHANNEL_MESSAGE" },
]);

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.Peer
 */
export class Peer extends Message<Peer> {
  /**
   * @generated from field: int64 self_id = 1;
   */
  selfId = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.core.v1alpha1.PeerType peer_type = 2;
   */
  peerType = PeerType.UNKNOWN;

  /**
   * @generated from field: int64 peer_id = 3;
   */
  peerId = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 5;
   */
  accessHash = protoInt64.zero;

  constructor(data?: PartialMessage<Peer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.core.v1alpha1.Peer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "self_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "peer_type", kind: "enum", T: proto3.getEnumType(PeerType) },
    { no: 3, name: "peer_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Peer {
    return new Peer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJsonString(jsonString, options);
  }

  static equals(a: Peer | PlainMessage<Peer> | undefined, b: Peer | PlainMessage<Peer> | undefined): boolean {
    return proto3.util.equals(Peer, a, b);
  }
}

