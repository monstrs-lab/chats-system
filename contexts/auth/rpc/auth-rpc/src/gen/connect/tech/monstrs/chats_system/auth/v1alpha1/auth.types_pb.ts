// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/auth/v1alpha1/auth.types.proto (package tech.monstrs.chats_system.auth.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { User }                   from '../../user/v1alpha1/user.types_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.SentCode
 */
export class SentCode extends Message<SentCode> {
  /**
   * @generated from field: string phone_code_hash = 1;
   */
  phoneCodeHash = ''

  /**
   * @generated from field: optional int32 timeout = 2;
   */
  timeout?: number

  constructor(data?: PartialMessage<SentCode>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.SentCode'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'phone_code_hash', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'timeout', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SentCode {
    return new SentCode().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SentCode {
    return new SentCode().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SentCode {
    return new SentCode().fromJsonString(jsonString, options)
  }

  static equals(
    a: SentCode | PlainMessage<SentCode> | undefined,
    b: SentCode | PlainMessage<SentCode> | undefined
  ): boolean {
    return proto3.util.equals(SentCode, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.Authorization
 */
export class Authorization extends Message<Authorization> {
  /**
   * @generated from field: optional tech.monstrs.chats_system.user.v1alpha1.User user = 1;
   */
  user?: User

  constructor(data?: PartialMessage<Authorization>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.Authorization'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authorization {
    return new Authorization().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJsonString(jsonString, options)
  }

  static equals(
    a: Authorization | PlainMessage<Authorization> | undefined,
    b: Authorization | PlainMessage<Authorization> | undefined
  ): boolean {
    return proto3.util.equals(Authorization, a, b)
  }
}
