// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/auth/v1alpha1/auth.service.proto (package tech.monstrs.chats_system.auth.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions }                                                                      from '@bufbuild/protobuf'

import type { FieldList }                                                           from '@bufbuild/protobuf'

import type { JsonReadOptions }                                          from '@bufbuild/protobuf'

import type { JsonValue }                               from '@bufbuild/protobuf'

import type { PartialMessage }               from '@bufbuild/protobuf'

import type { PlainMessage } from '@bufbuild/protobuf'

import { Message }                                                                                     from '@bufbuild/protobuf'

import { proto3 }                                                                             from '@bufbuild/protobuf'

import { protoInt64 }                                                                 from '@bufbuild/protobuf'

import { AuthKeyInfo }                                                                                 from '../../core/v1alpha1/schema.tl.sync_pb.js'
import { FutureSalt }                                                                                  from '../../core/v1alpha1/schema.tl.transport_pb.js'

/**
 * @generated from enum tech.monstrs.chats_system.auth.v1alpha1.TLConstructor
 */
export enum TLConstructor {
  /**
   * @generated from enum value: CRC32_UNKNOWN = 0;
   */
  CRC32_UNKNOWN = 0,

  /**
   * @generated from enum value: CRC32_clientSession = -1701940816;
   */
  CRC32_clientSession = -1701940816,

  /**
   * @generated from enum value: CRC32_authKeyStateData = -646863312;
   */
  CRC32_authKeyStateData = -646863312,

  /**
   * @generated from enum value: CRC32_authsession_getAuthorizations = 820122180;
   */
  CRC32_authsession_getAuthorizations = 820122180,

  /**
   * @generated from enum value: CRC32_authsession_resetAuthorization = -1923126106;
   */
  CRC32_authsession_resetAuthorization = -1923126106,

  /**
   * @generated from enum value: CRC32_authsession_getLayer = -1473309015;
   */
  CRC32_authsession_getLayer = -1473309015,

  /**
   * @generated from enum value: CRC32_authsession_getLangPack = 700170598;
   */
  CRC32_authsession_getLangPack = 700170598,

  /**
   * @generated from enum value: CRC32_authsession_getClient = 1616401854;
   */
  CRC32_authsession_getClient = 1616401854,

  /**
   * @generated from enum value: CRC32_authsession_getLangCode = 1486468441;
   */
  CRC32_authsession_getLangCode = 1486468441,

  /**
   * @generated from enum value: CRC32_authsession_getUserId = 1464409260;
   */
  CRC32_authsession_getUserId = 1464409260,

  /**
   * @generated from enum value: CRC32_authsession_getPushSessionId = -1279119039;
   */
  CRC32_authsession_getPushSessionId = -1279119039,

  /**
   * @generated from enum value: CRC32_authsession_getFutureSalts = -1194371051;
   */
  CRC32_authsession_getFutureSalts = -1194371051,

  /**
   * @generated from enum value: CRC32_authsession_queryAuthKey = 1421293608;
   */
  CRC32_authsession_queryAuthKey = 1421293608,

  /**
   * @generated from enum value: CRC32_authsession_setAuthKey = 1049889937;
   */
  CRC32_authsession_setAuthKey = 1049889937,

  /**
   * @generated from enum value: CRC32_authsession_bindAuthKeyUser = 198050851;
   */
  CRC32_authsession_bindAuthKeyUser = 198050851,

  /**
   * @generated from enum value: CRC32_authsession_unbindAuthKeyUser = 123258440;
   */
  CRC32_authsession_unbindAuthKeyUser = 123258440,

  /**
   * @generated from enum value: CRC32_authsession_getPermAuthKeyId = -1871420202;
   */
  CRC32_authsession_getPermAuthKeyId = -1871420202,

  /**
   * @generated from enum value: CRC32_authsession_bindTempAuthKey = 1620004742;
   */
  CRC32_authsession_bindTempAuthKey = 1620004742,

  /**
   * @generated from enum value: CRC32_authsession_setClientSessionInfo = 47841172;
   */
  CRC32_authsession_setClientSessionInfo = 47841172,

  /**
   * @generated from enum value: CRC32_authsession_getAuthorization = 1851660579;
   */
  CRC32_authsession_getAuthorization = 1851660579,

  /**
   * @generated from enum value: CRC32_authsession_getAuthStateData = 1331573041;
   */
  CRC32_authsession_getAuthStateData = 1331573041,

  /**
   * @generated from enum value: CRC32_authsession_setLayer = 1147475077;
   */
  CRC32_authsession_setLayer = 1147475077,

  /**
   * @generated from enum value: CRC32_authsession_setInitConnection = 2095024780;
   */
  CRC32_authsession_setInitConnection = 2095024780,
}
// Retrieve enum metadata with: proto3.getEnumType(TLConstructor)
proto3.util.setEnumType(TLConstructor, 'tech.monstrs.chats_system.auth.v1alpha1.TLConstructor', [
  { no: 0, name: 'CRC32_UNKNOWN' },
  { no: -1701940816, name: 'CRC32_clientSession' },
  { no: -646863312, name: 'CRC32_authKeyStateData' },
  { no: 820122180, name: 'CRC32_authsession_getAuthorizations' },
  { no: -1923126106, name: 'CRC32_authsession_resetAuthorization' },
  { no: -1473309015, name: 'CRC32_authsession_getLayer' },
  { no: 700170598, name: 'CRC32_authsession_getLangPack' },
  { no: 1616401854, name: 'CRC32_authsession_getClient' },
  { no: 1486468441, name: 'CRC32_authsession_getLangCode' },
  { no: 1464409260, name: 'CRC32_authsession_getUserId' },
  { no: -1279119039, name: 'CRC32_authsession_getPushSessionId' },
  { no: -1194371051, name: 'CRC32_authsession_getFutureSalts' },
  { no: 1421293608, name: 'CRC32_authsession_queryAuthKey' },
  { no: 1049889937, name: 'CRC32_authsession_setAuthKey' },
  { no: 198050851, name: 'CRC32_authsession_bindAuthKeyUser' },
  { no: 123258440, name: 'CRC32_authsession_unbindAuthKeyUser' },
  { no: -1871420202, name: 'CRC32_authsession_getPermAuthKeyId' },
  { no: 1620004742, name: 'CRC32_authsession_bindTempAuthKey' },
  { no: 47841172, name: 'CRC32_authsession_setClientSessionInfo' },
  { no: 1851660579, name: 'CRC32_authsession_getAuthorization' },
  { no: 1331573041, name: 'CRC32_authsession_getAuthStateData' },
  { no: 1147475077, name: 'CRC32_authsession_setLayer' },
  { no: 2095024780, name: 'CRC32_authsession_setInitConnection' },
])

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.AuthKeyStateData
 */
export class AuthKeyStateData extends Message<AuthKeyStateData> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = ''

  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int32 key_state = 5;
   */
  keyState = 0

  /**
   * @generated from field: int32 layer = 6;
   */
  layer = 0

  /**
   * @generated from field: int32 client_type = 7;
   */
  clientType = 0

  /**
   * @generated from field: int64 android_push_session_id = 8;
   */
  androidPushSessionId = protoInt64.zero

  constructor(data?: PartialMessage<AuthKeyStateData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.AuthKeyStateData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'predicate_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'key_state', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'client_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: 'android_push_session_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuthKeyStateData | PlainMessage<AuthKeyStateData> | undefined,
    b: AuthKeyStateData | PlainMessage<AuthKeyStateData> | undefined
  ): boolean {
    return proto3.util.equals(AuthKeyStateData, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthKeyStateData
 */
export class TLAuthKeyStateData extends Message<TLAuthKeyStateData> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.auth.v1alpha1.AuthKeyStateData data2 = 1;
   */
  data2: AuthKeyStateData[] = []

  constructor(data?: PartialMessage<TLAuthKeyStateData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthKeyStateData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data2', kind: 'message', T: AuthKeyStateData, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLAuthKeyStateData {
    return new TLAuthKeyStateData().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthKeyStateData {
    return new TLAuthKeyStateData().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthKeyStateData {
    return new TLAuthKeyStateData().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthKeyStateData | PlainMessage<TLAuthKeyStateData> | undefined,
    b: TLAuthKeyStateData | PlainMessage<TLAuthKeyStateData> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthKeyStateData, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.ClientSession
 */
export class ClientSession extends Message<ClientSession> {
  /**
   * @generated from field: string predicate_name = 1;
   */
  predicateName = ''

  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 2;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 4;
   */
  ip = ''

  /**
   * @generated from field: int32 layer = 5;
   */
  layer = 0

  /**
   * @generated from field: int32 api_id = 6;
   */
  apiId = 0

  /**
   * @generated from field: string device_model = 7;
   */
  deviceModel = ''

  /**
   * @generated from field: string system_version = 8;
   */
  systemVersion = ''

  /**
   * @generated from field: string app_version = 9;
   */
  appVersion = ''

  /**
   * @generated from field: string system_lang_code = 10;
   */
  systemLangCode = ''

  /**
   * @generated from field: string lang_pack = 11;
   */
  langPack = ''

  /**
   * @generated from field: string lang_code = 12;
   */
  langCode = ''

  /**
   * @generated from field: string proxy = 13;
   */
  proxy = ''

  /**
   * @generated from field: string params = 14;
   */
  params = ''

  constructor(data?: PartialMessage<ClientSession>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.ClientSession'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'predicate_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: 'api_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'device_model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'system_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'app_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'system_lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 11, name: 'lang_pack', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 12, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 13, name: 'proxy', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 14, name: 'params', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientSession {
    return new ClientSession().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientSession {
    return new ClientSession().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientSession {
    return new ClientSession().fromJsonString(jsonString, options)
  }

  static equals(
    a: ClientSession | PlainMessage<ClientSession> | undefined,
    b: ClientSession | PlainMessage<ClientSession> | undefined
  ): boolean {
    return proto3.util.equals(ClientSession, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLClientSession
 */
export class TLClientSession extends Message<TLClientSession> {
  /**
   * @generated from field: repeated tech.monstrs.chats_system.auth.v1alpha1.ClientSession data2 = 1;
   */
  data2: ClientSession[] = []

  constructor(data?: PartialMessage<TLClientSession>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLClientSession'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data2', kind: 'message', T: ClientSession, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLClientSession {
    return new TLClientSession().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLClientSession {
    return new TLClientSession().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLClientSession {
    return new TLClientSession().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLClientSession | PlainMessage<TLClientSession> | undefined,
    b: TLClientSession | PlainMessage<TLClientSession> | undefined
  ): boolean {
    return proto3.util.equals(TLClientSession, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthorizations
 */
export class TLAuthsessionGetAuthorizations extends Message<TLAuthsessionGetAuthorizations> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int64 exclude_auth_keyId = 4;
   */
  excludeAuthKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetAuthorizations>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthorizations'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'exclude_auth_keyId', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetAuthorizations {
    return new TLAuthsessionGetAuthorizations().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthorizations {
    return new TLAuthsessionGetAuthorizations().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthorizations {
    return new TLAuthsessionGetAuthorizations().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetAuthorizations | PlainMessage<TLAuthsessionGetAuthorizations> | undefined,
    b: TLAuthsessionGetAuthorizations | PlainMessage<TLAuthsessionGetAuthorizations> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetAuthorizations, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionResetAuthorization
 */
export class TLAuthsessionResetAuthorization extends Message<TLAuthsessionResetAuthorization> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int64 auth_key_id = 4;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 hash = 5;
   */
  hash = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionResetAuthorization>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionResetAuthorization'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'hash', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionResetAuthorization {
    return new TLAuthsessionResetAuthorization().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionResetAuthorization {
    return new TLAuthsessionResetAuthorization().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionResetAuthorization {
    return new TLAuthsessionResetAuthorization().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionResetAuthorization | PlainMessage<TLAuthsessionResetAuthorization> | undefined,
    b: TLAuthsessionResetAuthorization | PlainMessage<TLAuthsessionResetAuthorization> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionResetAuthorization, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLayer
 */
export class TLAuthsessionGetLayer extends Message<TLAuthsessionGetLayer> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetLayer>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLayer'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetLayer {
    return new TLAuthsessionGetLayer().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthsessionGetLayer {
    return new TLAuthsessionGetLayer().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetLayer {
    return new TLAuthsessionGetLayer().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetLayer | PlainMessage<TLAuthsessionGetLayer> | undefined,
    b: TLAuthsessionGetLayer | PlainMessage<TLAuthsessionGetLayer> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetLayer, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLangPack
 */
export class TLAuthsessionGetLangPack extends Message<TLAuthsessionGetLangPack> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetLangPack>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLangPack'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetLangPack {
    return new TLAuthsessionGetLangPack().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetLangPack {
    return new TLAuthsessionGetLangPack().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetLangPack {
    return new TLAuthsessionGetLangPack().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetLangPack | PlainMessage<TLAuthsessionGetLangPack> | undefined,
    b: TLAuthsessionGetLangPack | PlainMessage<TLAuthsessionGetLangPack> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetLangPack, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetClient
 */
export class TLAuthsessionGetClient extends Message<TLAuthsessionGetClient> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetClient>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetClient'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetClient {
    return new TLAuthsessionGetClient().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetClient {
    return new TLAuthsessionGetClient().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetClient {
    return new TLAuthsessionGetClient().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetClient | PlainMessage<TLAuthsessionGetClient> | undefined,
    b: TLAuthsessionGetClient | PlainMessage<TLAuthsessionGetClient> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetClient, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLangCode
 */
export class TLAuthsessionGetLangCode extends Message<TLAuthsessionGetLangCode> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetLangCode>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetLangCode'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetLangCode {
    return new TLAuthsessionGetLangCode().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetLangCode {
    return new TLAuthsessionGetLangCode().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetLangCode {
    return new TLAuthsessionGetLangCode().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetLangCode | PlainMessage<TLAuthsessionGetLangCode> | undefined,
    b: TLAuthsessionGetLangCode | PlainMessage<TLAuthsessionGetLangCode> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetLangCode, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetUserId
 */
export class TLAuthsessionGetUserId extends Message<TLAuthsessionGetUserId> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetUserId>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetUserId'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetUserId {
    return new TLAuthsessionGetUserId().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetUserId {
    return new TLAuthsessionGetUserId().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetUserId {
    return new TLAuthsessionGetUserId().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetUserId | PlainMessage<TLAuthsessionGetUserId> | undefined,
    b: TLAuthsessionGetUserId | PlainMessage<TLAuthsessionGetUserId> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetUserId, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetPushSessionId
 */
export class TLAuthsessionGetPushSessionId extends Message<TLAuthsessionGetPushSessionId> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 user_id = 3;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int64 auth_key_id = 4;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int32 token_type = 5;
   */
  tokenType = 0

  constructor(data?: PartialMessage<TLAuthsessionGetPushSessionId>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetPushSessionId'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'token_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetPushSessionId {
    return new TLAuthsessionGetPushSessionId().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetPushSessionId {
    return new TLAuthsessionGetPushSessionId().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetPushSessionId {
    return new TLAuthsessionGetPushSessionId().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetPushSessionId | PlainMessage<TLAuthsessionGetPushSessionId> | undefined,
    b: TLAuthsessionGetPushSessionId | PlainMessage<TLAuthsessionGetPushSessionId> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetPushSessionId, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetFutureSalts
 */
export class TLAuthsessionGetFutureSalts extends Message<TLAuthsessionGetFutureSalts> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int32 num = 4;
   */
  num = 0

  constructor(data?: PartialMessage<TLAuthsessionGetFutureSalts>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetFutureSalts'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'num', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetFutureSalts {
    return new TLAuthsessionGetFutureSalts().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetFutureSalts {
    return new TLAuthsessionGetFutureSalts().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetFutureSalts {
    return new TLAuthsessionGetFutureSalts().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetFutureSalts | PlainMessage<TLAuthsessionGetFutureSalts> | undefined,
    b: TLAuthsessionGetFutureSalts | PlainMessage<TLAuthsessionGetFutureSalts> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetFutureSalts, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionQueryAuthKey
 */
export class TLAuthsessionQueryAuthKey extends Message<TLAuthsessionQueryAuthKey> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionQueryAuthKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionQueryAuthKey'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionQueryAuthKey {
    return new TLAuthsessionQueryAuthKey().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionQueryAuthKey {
    return new TLAuthsessionQueryAuthKey().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionQueryAuthKey {
    return new TLAuthsessionQueryAuthKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionQueryAuthKey | PlainMessage<TLAuthsessionQueryAuthKey> | undefined,
    b: TLAuthsessionQueryAuthKey | PlainMessage<TLAuthsessionQueryAuthKey> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionQueryAuthKey, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetAuthKey
 */
export class TLAuthsessionSetAuthKey extends Message<TLAuthsessionSetAuthKey> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.AuthKeyInfo auth_key = 3;
   */
  authKey: AuthKeyInfo[] = []

  /**
   * @generated from field: repeated tech.monstrs.chats_system.core.v1alpha1.FutureSalt future_salt = 4;
   */
  futureSalt: FutureSalt[] = []

  /**
   * @generated from field: int32 expires_in = 5;
   */
  expiresIn = 0

  constructor(data?: PartialMessage<TLAuthsessionSetAuthKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetAuthKey'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key', kind: 'message', T: AuthKeyInfo, repeated: true },
    { no: 4, name: 'future_salt', kind: 'message', T: FutureSalt, repeated: true },
    { no: 5, name: 'expires_in', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionSetAuthKey {
    return new TLAuthsessionSetAuthKey().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetAuthKey {
    return new TLAuthsessionSetAuthKey().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetAuthKey {
    return new TLAuthsessionSetAuthKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionSetAuthKey | PlainMessage<TLAuthsessionSetAuthKey> | undefined,
    b: TLAuthsessionSetAuthKey | PlainMessage<TLAuthsessionSetAuthKey> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionSetAuthKey, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionBindAuthKeyUser
 */
export class TLAuthsessionBindAuthKeyUser extends Message<TLAuthsessionBindAuthKeyUser> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionBindAuthKeyUser>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionBindAuthKeyUser'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionBindAuthKeyUser {
    return new TLAuthsessionBindAuthKeyUser().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionBindAuthKeyUser {
    return new TLAuthsessionBindAuthKeyUser().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionBindAuthKeyUser {
    return new TLAuthsessionBindAuthKeyUser().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionBindAuthKeyUser | PlainMessage<TLAuthsessionBindAuthKeyUser> | undefined,
    b: TLAuthsessionBindAuthKeyUser | PlainMessage<TLAuthsessionBindAuthKeyUser> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionBindAuthKeyUser, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionUnbindAuthKeyUser
 */
export class TLAuthsessionUnbindAuthKeyUser extends Message<TLAuthsessionUnbindAuthKeyUser> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 4;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionUnbindAuthKeyUser>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionUnbindAuthKeyUser'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionUnbindAuthKeyUser {
    return new TLAuthsessionUnbindAuthKeyUser().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionUnbindAuthKeyUser {
    return new TLAuthsessionUnbindAuthKeyUser().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionUnbindAuthKeyUser {
    return new TLAuthsessionUnbindAuthKeyUser().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionUnbindAuthKeyUser | PlainMessage<TLAuthsessionUnbindAuthKeyUser> | undefined,
    b: TLAuthsessionUnbindAuthKeyUser | PlainMessage<TLAuthsessionUnbindAuthKeyUser> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionUnbindAuthKeyUser, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetPermAuthKeyId
 */
export class TLAuthsessionGetPermAuthKeyId extends Message<TLAuthsessionGetPermAuthKeyId> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetPermAuthKeyId>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetPermAuthKeyId'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetPermAuthKeyId {
    return new TLAuthsessionGetPermAuthKeyId().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetPermAuthKeyId {
    return new TLAuthsessionGetPermAuthKeyId().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetPermAuthKeyId {
    return new TLAuthsessionGetPermAuthKeyId().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetPermAuthKeyId | PlainMessage<TLAuthsessionGetPermAuthKeyId> | undefined,
    b: TLAuthsessionGetPermAuthKeyId | PlainMessage<TLAuthsessionGetPermAuthKeyId> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetPermAuthKeyId, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionBindTempAuthKey
 */
export class TLAuthsessionBindTempAuthKey extends Message<TLAuthsessionBindTempAuthKey> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 perm_auth_key_id = 3;
   */
  permAuthKeyId = protoInt64.zero

  /**
   * @generated from field: int64 nonce = 4;
   */
  nonce = protoInt64.zero

  /**
   * @generated from field: int32 expires_at = 5;
   */
  expiresAt = 0

  /**
   * @generated from field: bytes encrypted_message = 6;
   */
  encryptedMessage = new Uint8Array(0)

  constructor(data?: PartialMessage<TLAuthsessionBindTempAuthKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionBindTempAuthKey'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'perm_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'nonce', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'expires_at', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: 'encrypted_message', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionBindTempAuthKey {
    return new TLAuthsessionBindTempAuthKey().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionBindTempAuthKey {
    return new TLAuthsessionBindTempAuthKey().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionBindTempAuthKey {
    return new TLAuthsessionBindTempAuthKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionBindTempAuthKey | PlainMessage<TLAuthsessionBindTempAuthKey> | undefined,
    b: TLAuthsessionBindTempAuthKey | PlainMessage<TLAuthsessionBindTempAuthKey> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionBindTempAuthKey, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetClientSessionInfo
 */
export class TLAuthsessionSetClientSessionInfo extends Message<TLAuthsessionSetClientSessionInfo> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: repeated tech.monstrs.chats_system.auth.v1alpha1.ClientSession data = 3;
   */
  data: ClientSession[] = []

  constructor(data?: PartialMessage<TLAuthsessionSetClientSessionInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetClientSessionInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'data', kind: 'message', T: ClientSession, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionSetClientSessionInfo {
    return new TLAuthsessionSetClientSessionInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetClientSessionInfo {
    return new TLAuthsessionSetClientSessionInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetClientSessionInfo {
    return new TLAuthsessionSetClientSessionInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | TLAuthsessionSetClientSessionInfo
      | PlainMessage<TLAuthsessionSetClientSessionInfo>
      | undefined,
    b:
      | TLAuthsessionSetClientSessionInfo
      | PlainMessage<TLAuthsessionSetClientSessionInfo>
      | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionSetClientSessionInfo, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthorization
 */
export class TLAuthsessionGetAuthorization extends Message<TLAuthsessionGetAuthorization> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetAuthorization>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthorization'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetAuthorization {
    return new TLAuthsessionGetAuthorization().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthorization {
    return new TLAuthsessionGetAuthorization().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthorization {
    return new TLAuthsessionGetAuthorization().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetAuthorization | PlainMessage<TLAuthsessionGetAuthorization> | undefined,
    b: TLAuthsessionGetAuthorization | PlainMessage<TLAuthsessionGetAuthorization> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetAuthorization, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthStateData
 */
export class TLAuthsessionGetAuthStateData extends Message<TLAuthsessionGetAuthStateData> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<TLAuthsessionGetAuthStateData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionGetAuthStateData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionGetAuthStateData {
    return new TLAuthsessionGetAuthStateData().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthStateData {
    return new TLAuthsessionGetAuthStateData().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionGetAuthStateData {
    return new TLAuthsessionGetAuthStateData().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionGetAuthStateData | PlainMessage<TLAuthsessionGetAuthStateData> | undefined,
    b: TLAuthsessionGetAuthStateData | PlainMessage<TLAuthsessionGetAuthStateData> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionGetAuthStateData, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetLayer
 */
export class TLAuthsessionSetLayer extends Message<TLAuthsessionSetLayer> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 4;
   */
  ip = ''

  /**
   * @generated from field: int32 layer = 5;
   */
  layer = 0

  constructor(data?: PartialMessage<TLAuthsessionSetLayer>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetLayer'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionSetLayer {
    return new TLAuthsessionSetLayer().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLAuthsessionSetLayer {
    return new TLAuthsessionSetLayer().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetLayer {
    return new TLAuthsessionSetLayer().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionSetLayer | PlainMessage<TLAuthsessionSetLayer> | undefined,
    b: TLAuthsessionSetLayer | PlainMessage<TLAuthsessionSetLayer> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionSetLayer, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetInitConnection
 */
export class TLAuthsessionSetInitConnection extends Message<TLAuthsessionSetInitConnection> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.TLConstructor constructor = 1;
   */
  constructor$ = TLConstructor.CRC32_UNKNOWN

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 4;
   */
  ip = ''

  /**
   * @generated from field: int32 api_id = 5;
   */
  apiId = 0

  /**
   * @generated from field: string device_model = 6;
   */
  deviceModel = ''

  /**
   * @generated from field: string system_version = 7;
   */
  systemVersion = ''

  /**
   * @generated from field: string app_version = 8;
   */
  appVersion = ''

  /**
   * @generated from field: string system_lang_code = 9;
   */
  systemLangCode = ''

  /**
   * @generated from field: string lang_pack = 10;
   */
  langPack = ''

  /**
   * @generated from field: string lang_code = 11;
   */
  langCode = ''

  /**
   * @generated from field: string proxy = 12;
   */
  proxy = ''

  /**
   * @generated from field: string params = 13;
   */
  params = ''

  constructor(data?: PartialMessage<TLAuthsessionSetInitConnection>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth.v1alpha1.TLAuthsessionSetInitConnection'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'constructor', kind: 'enum', T: proto3.getEnumType(TLConstructor) },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'api_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: 'device_model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'system_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'app_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'system_lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'lang_pack', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 11, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 12, name: 'proxy', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 13, name: 'params', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TLAuthsessionSetInitConnection {
    return new TLAuthsessionSetInitConnection().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetInitConnection {
    return new TLAuthsessionSetInitConnection().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TLAuthsessionSetInitConnection {
    return new TLAuthsessionSetInitConnection().fromJsonString(jsonString, options)
  }

  static equals(
    a: TLAuthsessionSetInitConnection | PlainMessage<TLAuthsessionSetInitConnection> | undefined,
    b: TLAuthsessionSetInitConnection | PlainMessage<TLAuthsessionSetInitConnection> | undefined
  ): boolean {
    return proto3.util.equals(TLAuthsessionSetInitConnection, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.VectorLong
 */
export class VectorLong extends Message<VectorLong> {
  /**
   * @generated from field: int64 datas = 1;
   */
  datas = protoInt64.zero

  constructor(data?: PartialMessage<VectorLong>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.VectorLong'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'datas', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VectorLong {
    return new VectorLong().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VectorLong {
    return new VectorLong().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VectorLong {
    return new VectorLong().fromJsonString(jsonString, options)
  }

  static equals(
    a: VectorLong | PlainMessage<VectorLong> | undefined,
    b: VectorLong | PlainMessage<VectorLong> | undefined
  ): boolean {
    return proto3.util.equals(VectorLong, a, b)
  }
}
