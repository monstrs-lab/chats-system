// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/auth/v1alpha1/auth.service.proto (package tech.monstrs.chats_system.auth.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { CodeSettings }           from './auth.types_pb.js'
import { SentCode }               from './auth.types_pb.js'

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.SendCodeRequest
 */
export class SendCodeRequest extends Message<SendCodeRequest> {
  /**
   * @generated from field: string phone = 1;
   */
  phone = ''

  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.CodeSettings settings = 2;
   */
  settings?: CodeSettings

  constructor(data?: PartialMessage<SendCodeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.SendCodeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'phone', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'settings', kind: 'message', T: CodeSettings },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendCodeRequest {
    return new SendCodeRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendCodeRequest {
    return new SendCodeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendCodeRequest {
    return new SendCodeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendCodeRequest | PlainMessage<SendCodeRequest> | undefined,
    b: SendCodeRequest | PlainMessage<SendCodeRequest> | undefined
  ): boolean {
    return proto3.util.equals(SendCodeRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth.v1alpha1.SendCodeResponse
 */
export class SendCodeResponse extends Message<SendCodeResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth.v1alpha1.SentCode sent_code = 1;
   */
  sentCode?: SentCode

  constructor(data?: PartialMessage<SendCodeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth.v1alpha1.SendCodeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sent_code', kind: 'message', T: SentCode },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendCodeResponse {
    return new SendCodeResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendCodeResponse {
    return new SendCodeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendCodeResponse {
    return new SendCodeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendCodeResponse | PlainMessage<SendCodeResponse> | undefined,
    b: SendCodeResponse | PlainMessage<SendCodeResponse> | undefined
  ): boolean {
    return proto3.util.equals(SendCodeResponse, a, b)
  }
}
