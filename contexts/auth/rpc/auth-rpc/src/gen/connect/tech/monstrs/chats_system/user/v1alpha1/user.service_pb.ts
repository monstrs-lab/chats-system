// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/user/v1alpha1/user.service.proto (package tech.monstrs.chats_system.user.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { EmojiStatus, RestrictionReason } from "./user.types_pb.js";

/**
 * @generated from enum tech.monstrs.chats_system.user.v1alpha1.UserType
 */
export enum UserType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DELETED = 1;
   */
  DELETED = 1,

  /**
   * @generated from enum value: REGULAR = 2;
   */
  REGULAR = 2,

  /**
   * @generated from enum value: BOT = 3;
   */
  BOT = 3,

  /**
   * @generated from enum value: SERVICE = 4;
   */
  SERVICE = 4,

  /**
   * @generated from enum value: TEST = 5;
   */
  TEST = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(UserType)
proto3.util.setEnumType(UserType, "tech.monstrs.chats_system.user.v1alpha1.UserType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "DELETED" },
  { no: 2, name: "REGULAR" },
  { no: 3, name: "BOT" },
  { no: 4, name: "SERVICE" },
  { no: 5, name: "TEST" },
]);

/**
 * @generated from enum tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyType
 */
export enum PrivacyKeyType {
  /**
   * @generated from enum value: KEY_TYPE_INVALID = 0;
   */
  KEY_TYPE_INVALID = 0,

  /**
   * @generated from enum value: STATUS_TIMESTAMP = 1;
   */
  STATUS_TIMESTAMP = 1,

  /**
   * @generated from enum value: CHAT_INVITE = 2;
   */
  CHAT_INVITE = 2,

  /**
   * @generated from enum value: PHONE_CALL = 3;
   */
  PHONE_CALL = 3,

  /**
   * @generated from enum value: PHONE_P2P = 4;
   */
  PHONE_P2P = 4,

  /**
   * @generated from enum value: FORWARDS = 5;
   */
  FORWARDS = 5,

  /**
   * @generated from enum value: PROFILE_PHOTO = 6;
   */
  PROFILE_PHOTO = 6,

  /**
   * @generated from enum value: PHONE_NUMBER = 7;
   */
  PHONE_NUMBER = 7,

  /**
   * @generated from enum value: ADDED_BY_PHONE = 8;
   */
  ADDED_BY_PHONE = 8,

  /**
   * @generated from enum value: VOICE_MESSAGES = 9;
   */
  VOICE_MESSAGES = 9,

  /**
   * @generated from enum value: ABOUT = 10;
   */
  ABOUT = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(PrivacyKeyType)
proto3.util.setEnumType(PrivacyKeyType, "tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyType", [
  { no: 0, name: "KEY_TYPE_INVALID" },
  { no: 1, name: "STATUS_TIMESTAMP" },
  { no: 2, name: "CHAT_INVITE" },
  { no: 3, name: "PHONE_CALL" },
  { no: 4, name: "PHONE_P2P" },
  { no: 5, name: "FORWARDS" },
  { no: 6, name: "PROFILE_PHOTO" },
  { no: 7, name: "PHONE_NUMBER" },
  { no: 8, name: "ADDED_BY_PHONE" },
  { no: 9, name: "VOICE_MESSAGES" },
  { no: 10, name: "ABOUT" },
]);

/**
 * @generated from enum tech.monstrs.chats_system.user.v1alpha1.PrivacyRuleType
 */
export enum PrivacyRuleType {
  /**
   * @generated from enum value: ALLOW_CONTACTS = 0;
   */
  ALLOW_CONTACTS = 0,

  /**
   * @generated from enum value: ALLOW_ALL = 1;
   */
  ALLOW_ALL = 1,

  /**
   * @generated from enum value: ALLOW_USERS = 2;
   */
  ALLOW_USERS = 2,

  /**
   * @generated from enum value: DISALLOW_CONTACTS = 3;
   */
  DISALLOW_CONTACTS = 3,

  /**
   * @generated from enum value: DISALLOW_ALL = 4;
   */
  DISALLOW_ALL = 4,

  /**
   * @generated from enum value: DISALLOW_USERS = 5;
   */
  DISALLOW_USERS = 5,

  /**
   * @generated from enum value: ALLOW_CHAT_PARTICIPANTS = 6;
   */
  ALLOW_CHAT_PARTICIPANTS = 6,

  /**
   * @generated from enum value: DISALLOW_CHAT_PARTICIPANTS = 7;
   */
  DISALLOW_CHAT_PARTICIPANTS = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(PrivacyRuleType)
proto3.util.setEnumType(PrivacyRuleType, "tech.monstrs.chats_system.user.v1alpha1.PrivacyRuleType", [
  { no: 0, name: "ALLOW_CONTACTS" },
  { no: 1, name: "ALLOW_ALL" },
  { no: 2, name: "ALLOW_USERS" },
  { no: 3, name: "DISALLOW_CONTACTS" },
  { no: 4, name: "DISALLOW_ALL" },
  { no: 5, name: "DISALLOW_USERS" },
  { no: 6, name: "ALLOW_CHAT_PARTICIPANTS" },
  { no: 7, name: "DISALLOW_CHAT_PARTICIPANTS" },
]);

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.InputStickerSet
 */
export class InputStickerSet extends Message<InputStickerSet> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 2;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string short_name = 3;
   */
  shortName = "";

  /**
   * @generated from field: string emoticon = 4;
   */
  emoticon = "";

  constructor(data?: PartialMessage<InputStickerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.InputStickerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "short_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "emoticon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputStickerSet {
    return new InputStickerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputStickerSet {
    return new InputStickerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputStickerSet {
    return new InputStickerSet().fromJsonString(jsonString, options);
  }

  static equals(a: InputStickerSet | PlainMessage<InputStickerSet> | undefined, b: InputStickerSet | PlainMessage<InputStickerSet> | undefined): boolean {
    return proto3.util.equals(InputStickerSet, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.VideoSize
 */
export class VideoSize extends Message<VideoSize> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: int32 w = 2;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 3;
   */
  h = 0;

  /**
   * @generated from field: int32 size2 = 4;
   */
  size2 = 0;

  /**
   * @generated from field: bool video_start_ts = 5;
   */
  videoStartTs = false;

  /**
   * @generated from field: int64 emoji_id = 6;
   */
  emojiId = protoInt64.zero;

  /**
   * @generated from field: repeated int32 background_colors = 7;
   */
  backgroundColors: number[] = [];

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.InputStickerSet stickerset = 8;
   */
  stickerset?: InputStickerSet;

  /**
   * @generated from field: int64 sticker_id = 9;
   */
  stickerId = protoInt64.zero;

  constructor(data?: PartialMessage<VideoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.VideoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "video_start_ts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "emoji_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "background_colors", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 8, name: "stickerset", kind: "message", T: InputStickerSet },
    { no: 9, name: "sticker_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSize {
    return new VideoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSize {
    return new VideoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSize {
    return new VideoSize().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSize | PlainMessage<VideoSize> | undefined, b: VideoSize | PlainMessage<VideoSize> | undefined): boolean {
    return proto3.util.equals(VideoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.PhotoSize
 */
export class PhotoSize extends Message<PhotoSize> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: int32 w = 2;
   */
  w = 0;

  /**
   * @generated from field: int32 h = 3;
   */
  h = 0;

  /**
   * @generated from field: int32 size2 = 4;
   */
  size2 = 0;

  /**
   * @generated from field: bytes bytes = 5;
   */
  bytes = new Uint8Array(0);

  /**
   * @generated from field: repeated int32 sizes = 6;
   */
  sizes: number[] = [];

  constructor(data?: PartialMessage<PhotoSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.PhotoSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "w", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "h", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "size2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "sizes", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotoSize {
    return new PhotoSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotoSize {
    return new PhotoSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotoSize {
    return new PhotoSize().fromJsonString(jsonString, options);
  }

  static equals(a: PhotoSize | PlainMessage<PhotoSize> | undefined, b: PhotoSize | PlainMessage<PhotoSize> | undefined): boolean {
    return proto3.util.equals(PhotoSize, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.Photo
 */
export class Photo extends Message<Photo> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool has_stickers = 2;
   */
  hasStickers = false;

  /**
   * @generated from field: int64 access_hash = 3;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: bytes file_reference = 4;
   */
  fileReference = new Uint8Array(0);

  /**
   * @generated from field: int32 date = 5;
   */
  date = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.PhotoSize sizes = 6;
   */
  sizes: PhotoSize[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.VideoSize video_sizes = 7;
   */
  videoSizes: VideoSize[] = [];

  /**
   * @generated from field: int32 dc_id = 8;
   */
  dcId = 0;

  constructor(data?: PartialMessage<Photo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.Photo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "has_stickers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "file_reference", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "date", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sizes", kind: "message", T: PhotoSize, repeated: true },
    { no: 7, name: "video_sizes", kind: "message", T: VideoSize, repeated: true },
    { no: 8, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Photo {
    return new Photo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJsonString(jsonString, options);
  }

  static equals(a: Photo | PlainMessage<Photo> | undefined, b: Photo | PlainMessage<Photo> | undefined): boolean {
    return proto3.util.equals(Photo, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.BotData
 */
export class BotData extends Message<BotData> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int32 bot_type = 2;
   */
  botType = 0;

  /**
   * @generated from field: int64 creator = 3;
   */
  creator = protoInt64.zero;

  /**
   * @generated from field: string token = 4;
   */
  token = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: bool bot_chat_history = 6;
   */
  botChatHistory = false;

  /**
   * @generated from field: bool bot_nochats = 7;
   */
  botNochats = false;

  /**
   * @generated from field: bool bot_inline_geo = 8;
   */
  botInlineGeo = false;

  /**
   * @generated from field: int32 bot_info_version = 9;
   */
  botInfoVersion = 0;

  /**
   * @generated from field: string bot_inline_placeholder = 10;
   */
  botInlinePlaceholder = "";

  constructor(data?: PartialMessage<BotData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.BotData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "bot_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "creator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "bot_chat_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "bot_nochats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "bot_inline_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "bot_info_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "bot_inline_placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BotData {
    return new BotData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BotData {
    return new BotData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BotData {
    return new BotData().fromJsonString(jsonString, options);
  }

  static equals(a: BotData | PlainMessage<BotData> | undefined, b: BotData | PlainMessage<BotData> | undefined): boolean {
    return proto3.util.equals(BotData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.UserData
 */
export class UserData extends Message<UserData> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 access_hash = 2;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.UserType user_type = 3;
   */
  userType = UserType.UNKNOWN;

  /**
   * @generated from field: int64 sceret_key_id = 4;
   */
  sceretKeyId = protoInt64.zero;

  /**
   * @generated from field: string first_name = 5;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 6;
   */
  lastName = "";

  /**
   * @generated from field: string username = 7;
   */
  username = "";

  /**
   * @generated from field: string phone = 8;
   */
  phone = "";

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.Photo profile_photo = 9;
   */
  profilePhoto?: Photo;

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.BotData bot = 10;
   */
  bot?: BotData;

  /**
   * @generated from field: string country_code = 11;
   */
  countryCode = "";

  /**
   * @generated from field: bool verified = 12;
   */
  verified = false;

  /**
   * @generated from field: bool support = 13;
   */
  support = false;

  /**
   * @generated from field: bool scam = 14;
   */
  scam = false;

  /**
   * @generated from field: bool fake = 15;
   */
  fake = false;

  /**
   * @generated from field: string about = 16;
   */
  about = "";

  /**
   * @generated from field: bool restricted = 17;
   */
  restricted = false;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.RestrictionReason restriction_reason = 18;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: int32 contacts_version = 19;
   */
  contactsVersion = 0;

  /**
   * @generated from field: int32 privacies_version = 20;
   */
  privaciesVersion = 0;

  /**
   * @generated from field: bool deleted = 21;
   */
  deleted = false;

  /**
   * @generated from field: bool bot_attach_menu = 22;
   */
  botAttachMenu = false;

  /**
   * @generated from field: bool premium = 23;
   */
  premium = false;

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.EmojiStatus emoji_status = 24;
   */
  emojiStatus?: EmojiStatus;

  constructor(data?: PartialMessage<UserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.UserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "user_type", kind: "enum", T: proto3.getEnumType(UserType) },
    { no: 4, name: "sceret_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "profile_photo", kind: "message", T: Photo },
    { no: 10, name: "bot", kind: "message", T: BotData },
    { no: 11, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "support", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "about", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "restricted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 19, name: "contacts_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "privacies_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "bot_attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "emoji_status", kind: "message", T: EmojiStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserData {
    return new UserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJsonString(jsonString, options);
  }

  static equals(a: UserData | PlainMessage<UserData> | undefined, b: UserData | PlainMessage<UserData> | undefined): boolean {
    return proto3.util.equals(UserData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.ContactData
 */
export class ContactData extends Message<ContactData> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero;

  /**
   * @generated from field: int64 contact_user_id = 2;
   */
  contactUserId = protoInt64.zero;

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: bool mutual_contact = 5;
   */
  mutualContact = false;

  /**
   * @generated from field: string phone = 6;
   */
  phone = "";

  constructor(data?: PartialMessage<ContactData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.ContactData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "contact_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "mutual_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactData {
    return new ContactData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactData {
    return new ContactData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactData {
    return new ContactData().fromJsonString(jsonString, options);
  }

  static equals(a: ContactData | PlainMessage<ContactData> | undefined, b: ContactData | PlainMessage<ContactData> | undefined): boolean {
    return proto3.util.equals(ContactData, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.PrivacyRule
 */
export class PrivacyRule extends Message<PrivacyRule> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.PrivacyRuleType type = 1;
   */
  type = PrivacyRuleType.ALLOW_CONTACTS;

  /**
   * @generated from field: repeated int64 users = 2;
   */
  users: bigint[] = [];

  /**
   * @generated from field: repeated int64 chats = 3;
   */
  chats: bigint[] = [];

  constructor(data?: PartialMessage<PrivacyRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.PrivacyRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PrivacyRuleType) },
    { no: 2, name: "users", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 3, name: "chats", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyRule {
    return new PrivacyRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyRule {
    return new PrivacyRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyRule {
    return new PrivacyRule().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyRule | PlainMessage<PrivacyRule> | undefined, b: PrivacyRule | PlainMessage<PrivacyRule> | undefined): boolean {
    return proto3.util.equals(PrivacyRule, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyRules
 */
export class PrivacyKeyRules extends Message<PrivacyKeyRules> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyType key = 1;
   */
  key = PrivacyKeyType.KEY_TYPE_INVALID;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.PrivacyRule rules = 2;
   */
  rules: PrivacyRule[] = [];

  constructor(data?: PartialMessage<PrivacyKeyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "enum", T: proto3.getEnumType(PrivacyKeyType) },
    { no: 2, name: "rules", kind: "message", T: PrivacyRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivacyKeyRules {
    return new PrivacyKeyRules().fromJsonString(jsonString, options);
  }

  static equals(a: PrivacyKeyRules | PlainMessage<PrivacyKeyRules> | undefined, b: PrivacyKeyRules | PlainMessage<PrivacyKeyRules> | undefined): boolean {
    return proto3.util.equals(PrivacyKeyRules, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.ImmutableUser
 */
export class ImmutableUser extends Message<ImmutableUser> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.UserData user = 1;
   */
  user?: UserData;

  /**
   * @generated from field: optional int64 last_seen_at = 2;
   */
  lastSeenAt?: bigint;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.ContactData contacts = 3;
   */
  contacts: ContactData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.ContactData reverse_contacts = 4;
   */
  reverseContacts: ContactData[] = [];

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.PrivacyKeyRules keys_privacy_rules = 5;
   */
  keysPrivacyRules: PrivacyKeyRules[] = [];

  constructor(data?: PartialMessage<ImmutableUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.ImmutableUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserData },
    { no: 2, name: "last_seen_at", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "contacts", kind: "message", T: ContactData, repeated: true },
    { no: 4, name: "reverse_contacts", kind: "message", T: ContactData, repeated: true },
    { no: 5, name: "keys_privacy_rules", kind: "message", T: PrivacyKeyRules, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImmutableUser {
    return new ImmutableUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImmutableUser {
    return new ImmutableUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImmutableUser {
    return new ImmutableUser().fromJsonString(jsonString, options);
  }

  static equals(a: ImmutableUser | PlainMessage<ImmutableUser> | undefined, b: ImmutableUser | PlainMessage<ImmutableUser> | undefined): boolean {
    return proto3.util.equals(ImmutableUser, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetImmutableUserByPhoneRequest
 */
export class GetImmutableUserByPhoneRequest extends Message<GetImmutableUserByPhoneRequest> {
  /**
   * @generated from field: string phone_number = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<GetImmutableUserByPhoneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.GetImmutableUserByPhoneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImmutableUserByPhoneRequest {
    return new GetImmutableUserByPhoneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImmutableUserByPhoneRequest {
    return new GetImmutableUserByPhoneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImmutableUserByPhoneRequest {
    return new GetImmutableUserByPhoneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetImmutableUserByPhoneRequest | PlainMessage<GetImmutableUserByPhoneRequest> | undefined, b: GetImmutableUserByPhoneRequest | PlainMessage<GetImmutableUserByPhoneRequest> | undefined): boolean {
    return proto3.util.equals(GetImmutableUserByPhoneRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.GetImmutableUserByPhoneResponse
 */
export class GetImmutableUserByPhoneResponse extends Message<GetImmutableUserByPhoneResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.ImmutableUser immutable_user = 1;
   */
  immutableUser?: ImmutableUser;

  constructor(data?: PartialMessage<GetImmutableUserByPhoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.GetImmutableUserByPhoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "immutable_user", kind: "message", T: ImmutableUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImmutableUserByPhoneResponse {
    return new GetImmutableUserByPhoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImmutableUserByPhoneResponse {
    return new GetImmutableUserByPhoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImmutableUserByPhoneResponse {
    return new GetImmutableUserByPhoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetImmutableUserByPhoneResponse | PlainMessage<GetImmutableUserByPhoneResponse> | undefined, b: GetImmutableUserByPhoneResponse | PlainMessage<GetImmutableUserByPhoneResponse> | undefined): boolean {
    return proto3.util.equals(GetImmutableUserByPhoneResponse, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: int64 secret_key_id = 1;
   */
  secretKeyId = protoInt64.zero;

  /**
   * @generated from field: string phone = 2;
   */
  phone = "";

  /**
   * @generated from field: string country_code = 3;
   */
  countryCode = "";

  /**
   * @generated from field: string first_name = 4;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 5;
   */
  lastName = "";

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret_key_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.ImmutableUser immutable_user = 1;
   */
  immutableUser?: ImmutableUser;

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "immutable_user", kind: "message", T: ImmutableUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

