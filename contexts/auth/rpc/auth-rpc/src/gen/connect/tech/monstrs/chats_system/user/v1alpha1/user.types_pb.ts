// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/user/v1alpha1/user.types.proto (package tech.monstrs.chats_system.user.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.UserProfilePhoto
 */
export class UserProfilePhoto extends Message<UserProfilePhoto> {
  /**
   * @generated from field: bool has_video = 1;
   */
  hasVideo = false;

  /**
   * @generated from field: bool personal = 2;
   */
  personal = false;

  /**
   * @generated from field: int64 photo_id = 3;
   */
  photoId = protoInt64.zero;

  /**
   * @generated from field: bytes stripped_thumb = 4;
   */
  strippedThumb = new Uint8Array(0);

  /**
   * @generated from field: int32 dc_id = 5;
   */
  dcId = 0;

  constructor(data?: PartialMessage<UserProfilePhoto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.UserProfilePhoto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_video", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "personal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "photo_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "stripped_thumb", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "dc_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfilePhoto {
    return new UserProfilePhoto().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfilePhoto | PlainMessage<UserProfilePhoto> | undefined, b: UserProfilePhoto | PlainMessage<UserProfilePhoto> | undefined): boolean {
    return proto3.util.equals(UserProfilePhoto, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.UserStatus
 */
export class UserStatus extends Message<UserStatus> {
  /**
   * @generated from field: int32 expires = 1;
   */
  expires = 0;

  /**
   * @generated from field: int32 was_online = 2;
   */
  wasOnline = 0;

  constructor(data?: PartialMessage<UserStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.UserStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expires", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "was_online", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserStatus {
    return new UserStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserStatus {
    return new UserStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserStatus {
    return new UserStatus().fromJsonString(jsonString, options);
  }

  static equals(a: UserStatus | PlainMessage<UserStatus> | undefined, b: UserStatus | PlainMessage<UserStatus> | undefined): boolean {
    return proto3.util.equals(UserStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.RestrictionReason
 */
export class RestrictionReason extends Message<RestrictionReason> {
  /**
   * @generated from field: string platform = 1;
   */
  platform = "";

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  constructor(data?: PartialMessage<RestrictionReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.RestrictionReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestrictionReason {
    return new RestrictionReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestrictionReason {
    return new RestrictionReason().fromJsonString(jsonString, options);
  }

  static equals(a: RestrictionReason | PlainMessage<RestrictionReason> | undefined, b: RestrictionReason | PlainMessage<RestrictionReason> | undefined): boolean {
    return proto3.util.equals(RestrictionReason, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.Username
 */
export class Username extends Message<Username> {
  /**
   * @generated from field: bool editable = 1;
   */
  editable = false;

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  /**
   * @generated from field: string username = 3;
   */
  username = "";

  constructor(data?: PartialMessage<Username>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.Username";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Username {
    return new Username().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Username {
    return new Username().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Username {
    return new Username().fromJsonString(jsonString, options);
  }

  static equals(a: Username | PlainMessage<Username> | undefined, b: Username | PlainMessage<Username> | undefined): boolean {
    return proto3.util.equals(Username, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.EmojiStatus
 */
export class EmojiStatus extends Message<EmojiStatus> {
  /**
   * @generated from field: int64 document_id = 1;
   */
  documentId = protoInt64.zero;

  /**
   * @generated from field: int32 until = 2;
   */
  until = 0;

  constructor(data?: PartialMessage<EmojiStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.EmojiStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "until", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmojiStatus {
    return new EmojiStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmojiStatus {
    return new EmojiStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmojiStatus {
    return new EmojiStatus().fromJsonString(jsonString, options);
  }

  static equals(a: EmojiStatus | PlainMessage<EmojiStatus> | undefined, b: EmojiStatus | PlainMessage<EmojiStatus> | undefined): boolean {
    return proto3.util.equals(EmojiStatus, a, b);
  }
}

/**
 * @generated from message tech.monstrs.chats_system.user.v1alpha1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bool self = 2;
   */
  self = false;

  /**
   * @generated from field: bool contact = 3;
   */
  contact = false;

  /**
   * @generated from field: bool mutual_contact = 4;
   */
  mutualContact = false;

  /**
   * @generated from field: bool deleted = 5;
   */
  deleted = false;

  /**
   * @generated from field: bool bot = 6;
   */
  bot = false;

  /**
   * @generated from field: bool bot_chat_history = 7;
   */
  botChatHistory = false;

  /**
   * @generated from field: bool bot_nochats = 8;
   */
  botNochats = false;

  /**
   * @generated from field: bool verified = 9;
   */
  verified = false;

  /**
   * @generated from field: bool restricted = 10;
   */
  restricted = false;

  /**
   * @generated from field: bool min = 11;
   */
  min = false;

  /**
   * @generated from field: bool bot_inline_geo = 12;
   */
  botInlineGeo = false;

  /**
   * @generated from field: bool support = 13;
   */
  support = false;

  /**
   * @generated from field: bool scam = 14;
   */
  scam = false;

  /**
   * @generated from field: bool apply_min_photo = 15;
   */
  applyMinPhoto = false;

  /**
   * @generated from field: bool fake = 16;
   */
  fake = false;

  /**
   * @generated from field: bool bot_attach_menu = 17;
   */
  botAttachMenu = false;

  /**
   * @generated from field: bool premium = 18;
   */
  premium = false;

  /**
   * @generated from field: bool attach_menu_enabled = 19;
   */
  attachMenuEnabled = false;

  /**
   * @generated from field: bool bot_can_edit = 20;
   */
  botCanEdit = false;

  /**
   * @generated from field: bool close_friend = 21;
   */
  closeFriend = false;

  /**
   * @generated from field: bool stories_hidden = 22;
   */
  storiesHidden = false;

  /**
   * @generated from field: bool stories_unavailable = 23;
   */
  storiesUnavailable = false;

  /**
   * @generated from field: int64 access_hash = 24;
   */
  accessHash = protoInt64.zero;

  /**
   * @generated from field: string first_name = 25;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 26;
   */
  lastName = "";

  /**
   * @generated from field: string username = 27;
   */
  username = "";

  /**
   * @generated from field: string phone = 28;
   */
  phone = "";

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.UserProfilePhoto photo = 29;
   */
  photo?: UserProfilePhoto;

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.UserStatus status = 30;
   */
  status?: UserStatus;

  /**
   * @generated from field: int32 bot_info_version = 31;
   */
  botInfoVersion = 0;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.RestrictionReason restriction_reason = 32;
   */
  restrictionReason: RestrictionReason[] = [];

  /**
   * @generated from field: string bot_inline_placeholder = 33;
   */
  botInlinePlaceholder = "";

  /**
   * @generated from field: string lang_code = 34;
   */
  langCode = "";

  /**
   * @generated from field: tech.monstrs.chats_system.user.v1alpha1.EmojiStatus emoji_status = 35;
   */
  emojiStatus?: EmojiStatus;

  /**
   * @generated from field: repeated tech.monstrs.chats_system.user.v1alpha1.Username usernames = 36;
   */
  usernames: Username[] = [];

  /**
   * @generated from field: int32 stories_max_id = 37;
   */
  storiesMaxId = 0;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tech.monstrs.chats_system.user.v1alpha1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "self", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "mutual_contact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "bot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "bot_chat_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "bot_nochats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "restricted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "min", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "bot_inline_geo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "support", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "scam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "apply_min_photo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "fake", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "bot_attach_menu", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "premium", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "attach_menu_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "bot_can_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "close_friend", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "stories_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "stories_unavailable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "access_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "photo", kind: "message", T: UserProfilePhoto },
    { no: 30, name: "status", kind: "message", T: UserStatus },
    { no: 31, name: "bot_info_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 32, name: "restriction_reason", kind: "message", T: RestrictionReason, repeated: true },
    { no: 33, name: "bot_inline_placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "lang_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "emoji_status", kind: "message", T: EmojiStatus },
    { no: 36, name: "usernames", kind: "message", T: Username, repeated: true },
    { no: 37, name: "stories_max_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

