// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/auth_session/v1alpha1/auth-session.service.proto (package tech.monstrs.chats_system.auth_session.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalt
 */
export class FutureSalt extends Message<FutureSalt> {
  /**
   * @generated from field: int32 valid_since = 1;
   */
  validSince = 0

  /**
   * @generated from field: int32 valid_until = 2;
   */
  validUntil = 0

  /**
   * @generated from field: int64 salt = 3;
   */
  salt = protoInt64.zero

  constructor(data?: PartialMessage<FutureSalt>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalt'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'valid_since', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'valid_until', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'salt', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FutureSalt {
    return new FutureSalt().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FutureSalt {
    return new FutureSalt().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FutureSalt {
    return new FutureSalt().fromJsonString(jsonString, options)
  }

  static equals(
    a: FutureSalt | PlainMessage<FutureSalt> | undefined,
    b: FutureSalt | PlainMessage<FutureSalt> | undefined
  ): boolean {
    return proto3.util.equals(FutureSalt, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalts
 */
export class FutureSalts extends Message<FutureSalts> {
  /**
   * @generated from field: int64 req_msg_id = 1;
   */
  reqMsgId = protoInt64.zero

  /**
   * @generated from field: int32 now = 2;
   */
  now = 0

  /**
   * @generated from field: repeated tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalt salts = 3;
   */
  salts: FutureSalt[] = []

  constructor(data?: PartialMessage<FutureSalts>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalts'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'req_msg_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'now', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'salts', kind: 'message', T: FutureSalt, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FutureSalts {
    return new FutureSalts().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FutureSalts {
    return new FutureSalts().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FutureSalts {
    return new FutureSalts().fromJsonString(jsonString, options)
  }

  static equals(
    a: FutureSalts | PlainMessage<FutureSalts> | undefined,
    b: FutureSalts | PlainMessage<FutureSalts> | undefined
  ): boolean {
    return proto3.util.equals(FutureSalts, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyInfo
 */
export class AuthKeyInfo extends Message<AuthKeyInfo> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: bytes auth_key = 2;
   */
  authKey = new Uint8Array(0)

  /**
   * @generated from field: int32 auth_key_type = 3;
   */
  authKeyType = 0

  /**
   * @generated from field: int64 perm_auth_key_id = 4;
   */
  permAuthKeyId = protoInt64.zero

  /**
   * @generated from field: int64 temp_auth_key_id = 5;
   */
  tempAuthKeyId = protoInt64.zero

  /**
   * @generated from field: int64 media_temp_auth_key_id = 6;
   */
  mediaTempAuthKeyId = protoInt64.zero

  constructor(data?: PartialMessage<AuthKeyInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'auth_key', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: 'auth_key_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'perm_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'temp_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: 'media_temp_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthKeyInfo {
    return new AuthKeyInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuthKeyInfo | PlainMessage<AuthKeyInfo> | undefined,
    b: AuthKeyInfo | PlainMessage<AuthKeyInfo> | undefined
  ): boolean {
    return proto3.util.equals(AuthKeyInfo, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyStateData
 */
export class AuthKeyStateData extends Message<AuthKeyStateData> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 2;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int32 key_state = 3;
   */
  keyState = 0

  /**
   * @generated from field: int32 layer = 4;
   */
  layer = 0

  /**
   * @generated from field: int32 client_type = 5;
   */
  clientType = 0

  constructor(data?: PartialMessage<AuthKeyStateData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyStateData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'key_state', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: 'client_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthKeyStateData {
    return new AuthKeyStateData().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuthKeyStateData | PlainMessage<AuthKeyStateData> | undefined,
    b: AuthKeyStateData | PlainMessage<AuthKeyStateData> | undefined
  ): boolean {
    return proto3.util.equals(AuthKeyStateData, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.Authorization
 */
export class Authorization extends Message<Authorization> {
  /**
   * @generated from field: bool current = 1;
   */
  current = false

  /**
   * @generated from field: bool official_app = 2;
   */
  officialApp = false

  /**
   * @generated from field: bool password_pending = 3;
   */
  passwordPending = false

  /**
   * @generated from field: int64 hash = 4;
   */
  hash = protoInt64.zero

  /**
   * @generated from field: string device_model = 5;
   */
  deviceModel = ''

  /**
   * @generated from field: string platform = 6;
   */
  platform = ''

  /**
   * @generated from field: string system_version = 7;
   */
  systemVersion = ''

  /**
   * @generated from field: int32 api_id = 8;
   */
  apiId = 0

  /**
   * @generated from field: string app_name = 9;
   */
  appName = ''

  /**
   * @generated from field: string app_version = 10;
   */
  appVersion = ''

  /**
   * @generated from field: int32 date_created = 11;
   */
  dateCreated = 0

  /**
   * @generated from field: int32 date_active = 12;
   */
  dateActive = 0

  /**
   * @generated from field: string ip = 13;
   */
  ip = ''

  /**
   * @generated from field: string country = 14;
   */
  country = ''

  /**
   * @generated from field: string region = 15;
   */
  region = ''

  /**
   * @generated from field: optional bool encrypted_requests_disabled = 16;
   */
  encryptedRequestsDisabled?: boolean

  /**
   * @generated from field: optional bool call_requests_disabled = 17;
   */
  callRequestsDisabled?: boolean

  /**
   * @generated from field: optional bool unconfirmed = 18;
   */
  unconfirmed?: boolean

  constructor(data?: PartialMessage<Authorization>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.Authorization'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'current', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'official_app', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'password_pending', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'hash', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'device_model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'platform', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'system_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'api_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: 'app_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'app_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 11, name: 'date_created', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: 'date_active', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 14, name: 'country', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 15, name: 'region', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 16,
      name: 'encrypted_requests_disabled',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      opt: true,
    },
    {
      no: 17,
      name: 'call_requests_disabled',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      opt: true,
    },
    { no: 18, name: 'unconfirmed', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authorization {
    return new Authorization().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJsonString(jsonString, options)
  }

  static equals(
    a: Authorization | PlainMessage<Authorization> | undefined,
    b: Authorization | PlainMessage<Authorization> | undefined
  ): boolean {
    return proto3.util.equals(Authorization, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.ClientSession
 */
export class ClientSession extends Message<ClientSession> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 2;
   */
  ip = ''

  /**
   * @generated from field: int32 layer = 3;
   */
  layer = 0

  /**
   * @generated from field: int32 api_id = 4;
   */
  apiId = 0

  /**
   * @generated from field: string device_model = 5;
   */
  deviceModel = ''

  /**
   * @generated from field: string system_version = 6;
   */
  systemVersion = ''

  /**
   * @generated from field: string app_version = 7;
   */
  appVersion = ''

  /**
   * @generated from field: string system_lang_code = 8;
   */
  systemLangCode = ''

  /**
   * @generated from field: string lang_pack = 9;
   */
  langPack = ''

  /**
   * @generated from field: string lang_code = 10;
   */
  langCode = ''

  constructor(data?: PartialMessage<ClientSession>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.ClientSession'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'api_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: 'device_model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'system_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'app_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'system_lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'lang_pack', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientSession {
    return new ClientSession().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientSession {
    return new ClientSession().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientSession {
    return new ClientSession().fromJsonString(jsonString, options)
  }

  static equals(
    a: ClientSession | PlainMessage<ClientSession> | undefined,
    b: ClientSession | PlainMessage<ClientSession> | undefined
  ): boolean {
    return proto3.util.equals(ClientSession, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetLayerRequest
 */
export class GetLayerRequest extends Message<GetLayerRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetLayerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetLayerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLayerRequest {
    return new GetLayerRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLayerRequest {
    return new GetLayerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLayerRequest {
    return new GetLayerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLayerRequest | PlainMessage<GetLayerRequest> | undefined,
    b: GetLayerRequest | PlainMessage<GetLayerRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetLayerRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GeLayerResponse
 */
export class GeLayerResponse extends Message<GeLayerResponse> {
  /**
   * @generated from field: int32 layer = 1;
   */
  layer = 0

  constructor(data?: PartialMessage<GeLayerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GeLayerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeLayerResponse {
    return new GeLayerResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeLayerResponse {
    return new GeLayerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeLayerResponse {
    return new GeLayerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GeLayerResponse | PlainMessage<GeLayerResponse> | undefined,
    b: GeLayerResponse | PlainMessage<GeLayerResponse> | undefined
  ): boolean {
    return proto3.util.equals(GeLayerResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetClientRequest
 */
export class GetClientRequest extends Message<GetClientRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetClientRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetClientRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClientRequest {
    return new GetClientRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClientRequest {
    return new GetClientRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClientRequest {
    return new GetClientRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetClientRequest | PlainMessage<GetClientRequest> | undefined,
    b: GetClientRequest | PlainMessage<GetClientRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetClientRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetClientResponse
 */
export class GetClientResponse extends Message<GetClientResponse> {
  /**
   * @generated from field: string client = 1;
   */
  client = ''

  constructor(data?: PartialMessage<GetClientResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetClientResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'client', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClientResponse {
    return new GetClientResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClientResponse {
    return new GetClientResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClientResponse {
    return new GetClientResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetClientResponse | PlainMessage<GetClientResponse> | undefined,
    b: GetClientResponse | PlainMessage<GetClientResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetClientResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetUserIdRequest
 */
export class GetUserIdRequest extends Message<GetUserIdRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetUserIdRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetUserIdRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserIdRequest {
    return new GetUserIdRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserIdRequest {
    return new GetUserIdRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserIdRequest {
    return new GetUserIdRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserIdRequest | PlainMessage<GetUserIdRequest> | undefined,
    b: GetUserIdRequest | PlainMessage<GetUserIdRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetUserIdRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetUserIdResponse
 */
export class GetUserIdResponse extends Message<GetUserIdResponse> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<GetUserIdResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetUserIdResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserIdResponse {
    return new GetUserIdResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserIdResponse {
    return new GetUserIdResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserIdResponse {
    return new GetUserIdResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetUserIdResponse | PlainMessage<GetUserIdResponse> | undefined,
    b: GetUserIdResponse | PlainMessage<GetUserIdResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetUserIdResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetLangPackRequest
 */
export class GetLangPackRequest extends Message<GetLangPackRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetLangPackRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetLangPackRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLangPackRequest {
    return new GetLangPackRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLangPackRequest {
    return new GetLangPackRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLangPackRequest {
    return new GetLangPackRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLangPackRequest | PlainMessage<GetLangPackRequest> | undefined,
    b: GetLangPackRequest | PlainMessage<GetLangPackRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetLangPackRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetLangPackResponse
 */
export class GetLangPackResponse extends Message<GetLangPackResponse> {
  /**
   * @generated from field: string lang_pack = 1;
   */
  langPack = ''

  constructor(data?: PartialMessage<GetLangPackResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetLangPackResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lang_pack', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLangPackResponse {
    return new GetLangPackResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLangPackResponse {
    return new GetLangPackResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLangPackResponse {
    return new GetLangPackResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLangPackResponse | PlainMessage<GetLangPackResponse> | undefined,
    b: GetLangPackResponse | PlainMessage<GetLangPackResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetLangPackResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetLangCodeRequest
 */
export class GetLangCodeRequest extends Message<GetLangCodeRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetLangCodeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetLangCodeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLangCodeRequest {
    return new GetLangCodeRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLangCodeRequest {
    return new GetLangCodeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLangCodeRequest {
    return new GetLangCodeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLangCodeRequest | PlainMessage<GetLangCodeRequest> | undefined,
    b: GetLangCodeRequest | PlainMessage<GetLangCodeRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetLangCodeRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetLangCodeResponse
 */
export class GetLangCodeResponse extends Message<GetLangCodeResponse> {
  /**
   * @generated from field: string lang_code = 1;
   */
  langCode = ''

  constructor(data?: PartialMessage<GetLangCodeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetLangCodeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLangCodeResponse {
    return new GetLangCodeResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLangCodeResponse {
    return new GetLangCodeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLangCodeResponse {
    return new GetLangCodeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetLangCodeResponse | PlainMessage<GetLangCodeResponse> | undefined,
    b: GetLangCodeResponse | PlainMessage<GetLangCodeResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetLangCodeResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetFutureSaltsRequest
 */
export class GetFutureSaltsRequest extends Message<GetFutureSaltsRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int32 num = 2;
   */
  num = 0

  constructor(data?: PartialMessage<GetFutureSaltsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.GetFutureSaltsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'num', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetFutureSaltsRequest {
    return new GetFutureSaltsRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFutureSaltsRequest {
    return new GetFutureSaltsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetFutureSaltsRequest {
    return new GetFutureSaltsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFutureSaltsRequest | PlainMessage<GetFutureSaltsRequest> | undefined,
    b: GetFutureSaltsRequest | PlainMessage<GetFutureSaltsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetFutureSaltsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetFutureSaltsResponse
 */
export class GetFutureSaltsResponse extends Message<GetFutureSaltsResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalts future_salts = 1;
   */
  futureSalts?: FutureSalts

  constructor(data?: PartialMessage<GetFutureSaltsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetFutureSaltsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'future_salts', kind: 'message', T: FutureSalts },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetFutureSaltsResponse {
    return new GetFutureSaltsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetFutureSaltsResponse {
    return new GetFutureSaltsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetFutureSaltsResponse {
    return new GetFutureSaltsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFutureSaltsResponse | PlainMessage<GetFutureSaltsResponse> | undefined,
    b: GetFutureSaltsResponse | PlainMessage<GetFutureSaltsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetFutureSaltsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetPermAuthKeyIdRequest
 */
export class GetPermAuthKeyIdRequest extends Message<GetPermAuthKeyIdRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetPermAuthKeyIdRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetPermAuthKeyIdRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetPermAuthKeyIdRequest {
    return new GetPermAuthKeyIdRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetPermAuthKeyIdRequest {
    return new GetPermAuthKeyIdRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetPermAuthKeyIdRequest {
    return new GetPermAuthKeyIdRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetPermAuthKeyIdRequest | PlainMessage<GetPermAuthKeyIdRequest> | undefined,
    b: GetPermAuthKeyIdRequest | PlainMessage<GetPermAuthKeyIdRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetPermAuthKeyIdRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetPermAuthKeyIdResponse
 */
export class GetPermAuthKeyIdResponse extends Message<GetPermAuthKeyIdResponse> {
  /**
   * @generated from field: int64 perm_auth_key_id = 1;
   */
  permAuthKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetPermAuthKeyIdResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetPermAuthKeyIdResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'perm_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetPermAuthKeyIdResponse {
    return new GetPermAuthKeyIdResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetPermAuthKeyIdResponse {
    return new GetPermAuthKeyIdResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetPermAuthKeyIdResponse {
    return new GetPermAuthKeyIdResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetPermAuthKeyIdResponse | PlainMessage<GetPermAuthKeyIdResponse> | undefined,
    b: GetPermAuthKeyIdResponse | PlainMessage<GetPermAuthKeyIdResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetPermAuthKeyIdResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthStateDataRequest
 */
export class GetAuthStateDataRequest extends Message<GetAuthStateDataRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetAuthStateDataRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthStateDataRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthStateDataRequest {
    return new GetAuthStateDataRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthStateDataRequest {
    return new GetAuthStateDataRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthStateDataRequest {
    return new GetAuthStateDataRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthStateDataRequest | PlainMessage<GetAuthStateDataRequest> | undefined,
    b: GetAuthStateDataRequest | PlainMessage<GetAuthStateDataRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthStateDataRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthStateDataResponse
 */
export class GetAuthStateDataResponse extends Message<GetAuthStateDataResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyStateData auth_key_state_data = 1;
   */
  authKeyStateData?: AuthKeyStateData

  constructor(data?: PartialMessage<GetAuthStateDataResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthStateDataResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_state_data', kind: 'message', T: AuthKeyStateData },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthStateDataResponse {
    return new GetAuthStateDataResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthStateDataResponse {
    return new GetAuthStateDataResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthStateDataResponse {
    return new GetAuthStateDataResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthStateDataResponse | PlainMessage<GetAuthStateDataResponse> | undefined,
    b: GetAuthStateDataResponse | PlainMessage<GetAuthStateDataResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthStateDataResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationRequest
 */
export class GetAuthorizationRequest extends Message<GetAuthorizationRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<GetAuthorizationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthorizationRequest {
    return new GetAuthorizationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationRequest {
    return new GetAuthorizationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationRequest {
    return new GetAuthorizationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorizationRequest | PlainMessage<GetAuthorizationRequest> | undefined,
    b: GetAuthorizationRequest | PlainMessage<GetAuthorizationRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthorizationRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationResponse
 */
export class GetAuthorizationResponse extends Message<GetAuthorizationResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.Authorization authorization = 1;
   */
  authorization?: Authorization

  constructor(data?: PartialMessage<GetAuthorizationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'authorization', kind: 'message', T: Authorization },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthorizationResponse {
    return new GetAuthorizationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationResponse {
    return new GetAuthorizationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationResponse {
    return new GetAuthorizationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorizationResponse | PlainMessage<GetAuthorizationResponse> | undefined,
    b: GetAuthorizationResponse | PlainMessage<GetAuthorizationResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthorizationResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationsRequest
 */
export class GetAuthorizationsRequest extends Message<GetAuthorizationsRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: repeated int64 exclude_auth_key_id = 2;
   */
  excludeAuthKeyId: bigint[] = []

  constructor(data?: PartialMessage<GetAuthorizationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    {
      no: 2,
      name: 'exclude_auth_key_id',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthorizationsRequest {
    return new GetAuthorizationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationsRequest {
    return new GetAuthorizationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationsRequest {
    return new GetAuthorizationsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorizationsRequest | PlainMessage<GetAuthorizationsRequest> | undefined,
    b: GetAuthorizationsRequest | PlainMessage<GetAuthorizationsRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthorizationsRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationsResponse
 */
export class GetAuthorizationsResponse extends Message<GetAuthorizationsResponse> {
  /**
   * @generated from field: int32 authorization_ttl_days = 1;
   */
  authorizationTtlDays = 0

  /**
   * @generated from field: repeated tech.monstrs.chats_system.auth_session.v1alpha1.Authorization authorizations = 2;
   */
  authorizations: Authorization[] = []

  constructor(data?: PartialMessage<GetAuthorizationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.GetAuthorizationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'authorization_ttl_days', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'authorizations', kind: 'message', T: Authorization, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAuthorizationsResponse {
    return new GetAuthorizationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationsResponse {
    return new GetAuthorizationsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAuthorizationsResponse {
    return new GetAuthorizationsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetAuthorizationsResponse | PlainMessage<GetAuthorizationsResponse> | undefined,
    b: GetAuthorizationsResponse | PlainMessage<GetAuthorizationsResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetAuthorizationsResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetLayerRequest
 */
export class SetLayerRequest extends Message<SetLayerRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 2;
   */
  ip = ''

  /**
   * @generated from field: int32 layer = 3;
   */
  layer = 0

  constructor(data?: PartialMessage<SetLayerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.SetLayerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'layer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLayerRequest {
    return new SetLayerRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLayerRequest {
    return new SetLayerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLayerRequest {
    return new SetLayerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetLayerRequest | PlainMessage<SetLayerRequest> | undefined,
    b: SetLayerRequest | PlainMessage<SetLayerRequest> | undefined
  ): boolean {
    return proto3.util.equals(SetLayerRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetLayerResponse
 */
export class SetLayerResponse extends Message<SetLayerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SetLayerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.SetLayerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLayerResponse {
    return new SetLayerResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLayerResponse {
    return new SetLayerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLayerResponse {
    return new SetLayerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetLayerResponse | PlainMessage<SetLayerResponse> | undefined,
    b: SetLayerResponse | PlainMessage<SetLayerResponse> | undefined
  ): boolean {
    return proto3.util.equals(SetLayerResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyRequest
 */
export class SetAuthKeyRequest extends Message<SetAuthKeyRequest> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyInfo auth_key = 1;
   */
  authKey?: AuthKeyInfo

  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.FutureSalt future_salt = 2;
   */
  futureSalt?: FutureSalt

  /**
   * @generated from field: int32 expires_in = 3;
   */
  expiresIn = 0

  constructor(data?: PartialMessage<SetAuthKeyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key', kind: 'message', T: AuthKeyInfo },
    { no: 2, name: 'future_salt', kind: 'message', T: FutureSalt },
    { no: 3, name: 'expires_in', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAuthKeyRequest {
    return new SetAuthKeyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAuthKeyRequest {
    return new SetAuthKeyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAuthKeyRequest {
    return new SetAuthKeyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetAuthKeyRequest | PlainMessage<SetAuthKeyRequest> | undefined,
    b: SetAuthKeyRequest | PlainMessage<SetAuthKeyRequest> | undefined
  ): boolean {
    return proto3.util.equals(SetAuthKeyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyResponse
 */
export class SetAuthKeyResponse extends Message<SetAuthKeyResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SetAuthKeyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAuthKeyResponse {
    return new SetAuthKeyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAuthKeyResponse {
    return new SetAuthKeyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetAuthKeyResponse {
    return new SetAuthKeyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetAuthKeyResponse | PlainMessage<SetAuthKeyResponse> | undefined,
    b: SetAuthKeyResponse | PlainMessage<SetAuthKeyResponse> | undefined
  ): boolean {
    return proto3.util.equals(SetAuthKeyResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetClientSessionInfoRequest
 */
export class SetClientSessionInfoRequest extends Message<SetClientSessionInfoRequest> {
  /**
   * @generated from field: optional tech.monstrs.chats_system.auth_session.v1alpha1.ClientSession data = 1;
   */
  data?: ClientSession

  constructor(data?: PartialMessage<SetClientSessionInfoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.SetClientSessionInfoRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'message', T: ClientSession, opt: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetClientSessionInfoRequest {
    return new SetClientSessionInfoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetClientSessionInfoRequest {
    return new SetClientSessionInfoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetClientSessionInfoRequest {
    return new SetClientSessionInfoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetClientSessionInfoRequest | PlainMessage<SetClientSessionInfoRequest> | undefined,
    b: SetClientSessionInfoRequest | PlainMessage<SetClientSessionInfoRequest> | undefined
  ): boolean {
    return proto3.util.equals(SetClientSessionInfoRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetClientSessionInfoResponse
 */
export class SetClientSessionInfoResponse extends Message<SetClientSessionInfoResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SetClientSessionInfoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.SetClientSessionInfoResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetClientSessionInfoResponse {
    return new SetClientSessionInfoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetClientSessionInfoResponse {
    return new SetClientSessionInfoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetClientSessionInfoResponse {
    return new SetClientSessionInfoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetClientSessionInfoResponse | PlainMessage<SetClientSessionInfoResponse> | undefined,
    b: SetClientSessionInfoResponse | PlainMessage<SetClientSessionInfoResponse> | undefined
  ): boolean {
    return proto3.util.equals(SetClientSessionInfoResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetInitConnectionRequest
 */
export class SetInitConnectionRequest extends Message<SetInitConnectionRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: string ip = 2;
   */
  ip = ''

  /**
   * @generated from field: int32 api_id = 3;
   */
  apiId = 0

  /**
   * @generated from field: string device_model = 4;
   */
  deviceModel = ''

  /**
   * @generated from field: string system_version = 5;
   */
  systemVersion = ''

  /**
   * @generated from field: string app_version = 6;
   */
  appVersion = ''

  /**
   * @generated from field: string system_lang_code = 7;
   */
  systemLangCode = ''

  /**
   * @generated from field: string lang_pack = 8;
   */
  langPack = ''

  /**
   * @generated from field: string lang_code = 9;
   */
  langCode = ''

  constructor(data?: PartialMessage<SetInitConnectionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.SetInitConnectionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'api_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'device_model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'system_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'app_version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'system_lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'lang_pack', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'lang_code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetInitConnectionRequest {
    return new SetInitConnectionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetInitConnectionRequest {
    return new SetInitConnectionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetInitConnectionRequest {
    return new SetInitConnectionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetInitConnectionRequest | PlainMessage<SetInitConnectionRequest> | undefined,
    b: SetInitConnectionRequest | PlainMessage<SetInitConnectionRequest> | undefined
  ): boolean {
    return proto3.util.equals(SetInitConnectionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.SetInitConnectionResponse
 */
export class SetInitConnectionResponse extends Message<SetInitConnectionResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SetInitConnectionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.SetInitConnectionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SetInitConnectionResponse {
    return new SetInitConnectionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SetInitConnectionResponse {
    return new SetInitConnectionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SetInitConnectionResponse {
    return new SetInitConnectionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SetInitConnectionResponse | PlainMessage<SetInitConnectionResponse> | undefined,
    b: SetInitConnectionResponse | PlainMessage<SetInitConnectionResponse> | undefined
  ): boolean {
    return proto3.util.equals(SetInitConnectionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.ResetAuthorizationRequest
 */
export class ResetAuthorizationRequest extends Message<ResetAuthorizationRequest> {
  /**
   * @generated from field: int64 user_id = 1;
   */
  userId = protoInt64.zero

  /**
   * @generated from field: int64 auth_key_id = 2;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 hash = 3;
   */
  hash = protoInt64.zero

  constructor(data?: PartialMessage<ResetAuthorizationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.ResetAuthorizationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'hash', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ResetAuthorizationRequest {
    return new ResetAuthorizationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ResetAuthorizationRequest {
    return new ResetAuthorizationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ResetAuthorizationRequest {
    return new ResetAuthorizationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ResetAuthorizationRequest | PlainMessage<ResetAuthorizationRequest> | undefined,
    b: ResetAuthorizationRequest | PlainMessage<ResetAuthorizationRequest> | undefined
  ): boolean {
    return proto3.util.equals(ResetAuthorizationRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.ResetAuthorizationResponse
 */
export class ResetAuthorizationResponse extends Message<ResetAuthorizationResponse> {
  /**
   * @generated from field: repeated int64 key_id = 1;
   */
  keyId: bigint[] = []

  constructor(data?: PartialMessage<ResetAuthorizationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.ResetAuthorizationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ResetAuthorizationResponse {
    return new ResetAuthorizationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ResetAuthorizationResponse {
    return new ResetAuthorizationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ResetAuthorizationResponse {
    return new ResetAuthorizationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ResetAuthorizationResponse | PlainMessage<ResetAuthorizationResponse> | undefined,
    b: ResetAuthorizationResponse | PlainMessage<ResetAuthorizationResponse> | undefined
  ): boolean {
    return proto3.util.equals(ResetAuthorizationResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.BindAuthKeyUserRequest
 */
export class BindAuthKeyUserRequest extends Message<BindAuthKeyUserRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 2;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<BindAuthKeyUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.BindAuthKeyUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BindAuthKeyUserRequest {
    return new BindAuthKeyUserRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BindAuthKeyUserRequest {
    return new BindAuthKeyUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BindAuthKeyUserRequest {
    return new BindAuthKeyUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BindAuthKeyUserRequest | PlainMessage<BindAuthKeyUserRequest> | undefined,
    b: BindAuthKeyUserRequest | PlainMessage<BindAuthKeyUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(BindAuthKeyUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.BindAuthKeyUserResponse
 */
export class BindAuthKeyUserResponse extends Message<BindAuthKeyUserResponse> {
  /**
   * @generated from field: int64 hash = 1;
   */
  hash = protoInt64.zero

  constructor(data?: PartialMessage<BindAuthKeyUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.BindAuthKeyUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'hash', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BindAuthKeyUserResponse {
    return new BindAuthKeyUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BindAuthKeyUserResponse {
    return new BindAuthKeyUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BindAuthKeyUserResponse {
    return new BindAuthKeyUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BindAuthKeyUserResponse | PlainMessage<BindAuthKeyUserResponse> | undefined,
    b: BindAuthKeyUserResponse | PlainMessage<BindAuthKeyUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(BindAuthKeyUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.UnbindAuthKeyUserRequest
 */
export class UnbindAuthKeyUserRequest extends Message<UnbindAuthKeyUserRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 user_id = 2;
   */
  userId = protoInt64.zero

  constructor(data?: PartialMessage<UnbindAuthKeyUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.UnbindAuthKeyUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'user_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UnbindAuthKeyUserRequest {
    return new UnbindAuthKeyUserRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UnbindAuthKeyUserRequest {
    return new UnbindAuthKeyUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UnbindAuthKeyUserRequest {
    return new UnbindAuthKeyUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UnbindAuthKeyUserRequest | PlainMessage<UnbindAuthKeyUserRequest> | undefined,
    b: UnbindAuthKeyUserRequest | PlainMessage<UnbindAuthKeyUserRequest> | undefined
  ): boolean {
    return proto3.util.equals(UnbindAuthKeyUserRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.UnbindAuthKeyUserResponse
 */
export class UnbindAuthKeyUserResponse extends Message<UnbindAuthKeyUserResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<UnbindAuthKeyUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.UnbindAuthKeyUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UnbindAuthKeyUserResponse {
    return new UnbindAuthKeyUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UnbindAuthKeyUserResponse {
    return new UnbindAuthKeyUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UnbindAuthKeyUserResponse {
    return new UnbindAuthKeyUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UnbindAuthKeyUserResponse | PlainMessage<UnbindAuthKeyUserResponse> | undefined,
    b: UnbindAuthKeyUserResponse | PlainMessage<UnbindAuthKeyUserResponse> | undefined
  ): boolean {
    return proto3.util.equals(UnbindAuthKeyUserResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.BindTempAuthKeyRequest
 */
export class BindTempAuthKeyRequest extends Message<BindTempAuthKeyRequest> {
  /**
   * @generated from field: int64 perm_auth_key_id = 1;
   */
  permAuthKeyId = protoInt64.zero

  /**
   * @generated from field: int64 nonce = 2;
   */
  nonce = protoInt64.zero

  /**
   * @generated from field: int32 expires_at = 3;
   */
  expiresAt = 0

  /**
   * @generated from field: bytes encrypted_message = 4;
   */
  encryptedMessage = new Uint8Array(0)

  constructor(data?: PartialMessage<BindTempAuthKeyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.BindTempAuthKeyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'perm_auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'nonce', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'expires_at', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'encrypted_message', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BindTempAuthKeyRequest {
    return new BindTempAuthKeyRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BindTempAuthKeyRequest {
    return new BindTempAuthKeyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BindTempAuthKeyRequest {
    return new BindTempAuthKeyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BindTempAuthKeyRequest | PlainMessage<BindTempAuthKeyRequest> | undefined,
    b: BindTempAuthKeyRequest | PlainMessage<BindTempAuthKeyRequest> | undefined
  ): boolean {
    return proto3.util.equals(BindTempAuthKeyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.BindTempAuthKeyResponse
 */
export class BindTempAuthKeyResponse extends Message<BindTempAuthKeyResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<BindTempAuthKeyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.chats_system.auth_session.v1alpha1.BindTempAuthKeyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BindTempAuthKeyResponse {
    return new BindTempAuthKeyResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BindTempAuthKeyResponse {
    return new BindTempAuthKeyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BindTempAuthKeyResponse {
    return new BindTempAuthKeyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BindTempAuthKeyResponse | PlainMessage<BindTempAuthKeyResponse> | undefined,
    b: BindTempAuthKeyResponse | PlainMessage<BindTempAuthKeyResponse> | undefined
  ): boolean {
    return proto3.util.equals(BindTempAuthKeyResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyRequest
 */
export class QueryAuthKeyRequest extends Message<QueryAuthKeyRequest> {
  /**
   * @generated from field: int64 auth_key_id = 1;
   */
  authKeyId = protoInt64.zero

  constructor(data?: PartialMessage<QueryAuthKeyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuthKeyRequest {
    return new QueryAuthKeyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuthKeyRequest {
    return new QueryAuthKeyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAuthKeyRequest {
    return new QueryAuthKeyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryAuthKeyRequest | PlainMessage<QueryAuthKeyRequest> | undefined,
    b: QueryAuthKeyRequest | PlainMessage<QueryAuthKeyRequest> | undefined
  ): boolean {
    return proto3.util.equals(QueryAuthKeyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyResponse
 */
export class QueryAuthKeyResponse extends Message<QueryAuthKeyResponse> {
  /**
   * @generated from field: tech.monstrs.chats_system.auth_session.v1alpha1.AuthKeyInfo auth_key = 1;
   */
  authKey?: AuthKeyInfo

  constructor(data?: PartialMessage<QueryAuthKeyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'auth_key', kind: 'message', T: AuthKeyInfo },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuthKeyResponse {
    return new QueryAuthKeyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuthKeyResponse {
    return new QueryAuthKeyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAuthKeyResponse {
    return new QueryAuthKeyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryAuthKeyResponse | PlainMessage<QueryAuthKeyResponse> | undefined,
    b: QueryAuthKeyResponse | PlainMessage<QueryAuthKeyResponse> | undefined
  ): boolean {
    return proto3.util.equals(QueryAuthKeyResponse, a, b)
  }
}
