// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/session/v1alpha1/session.service.proto (package tech.monstrs.chats_system.session.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'
import { protoInt64 }             from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.SessionClientEvent
 */
export class SessionClientEvent extends Message<SessionClientEvent> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = ''

  /**
   * @generated from field: int32 conn_type = 2;
   */
  connType = 0

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 session_id = 4;
   */
  sessionId = protoInt64.zero

  /**
   * @generated from field: string client_ip = 5;
   */
  clientIp = ''

  constructor(data?: PartialMessage<SessionClientEvent>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.SessionClientEvent'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'server_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'conn_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'session_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'client_ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionClientEvent {
    return new SessionClientEvent().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionClientEvent {
    return new SessionClientEvent().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SessionClientEvent {
    return new SessionClientEvent().fromJsonString(jsonString, options)
  }

  static equals(
    a: SessionClientEvent | PlainMessage<SessionClientEvent> | undefined,
    b: SessionClientEvent | PlainMessage<SessionClientEvent> | undefined
  ): boolean {
    return proto3.util.equals(SessionClientEvent, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.SessionClientData
 */
export class SessionClientData extends Message<SessionClientData> {
  /**
   * @generated from field: string server_id = 1;
   */
  serverId = ''

  /**
   * @generated from field: int32 conn_type = 2;
   */
  connType = 0

  /**
   * @generated from field: int64 auth_key_id = 3;
   */
  authKeyId = protoInt64.zero

  /**
   * @generated from field: int64 session_id = 4;
   */
  sessionId = protoInt64.zero

  /**
   * @generated from field: string client_ip = 5;
   */
  clientIp = ''

  /**
   * @generated from field: int32 quick_ack = 6;
   */
  quickAck = 0

  /**
   * @generated from field: int64 salt = 7;
   */
  salt = protoInt64.zero

  /**
   * @generated from field: bytes payload = 8;
   */
  payload = new Uint8Array(0)

  constructor(data?: PartialMessage<SessionClientData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.SessionClientData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'server_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'conn_type', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'auth_key_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: 'session_id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: 'client_ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'quick_ack', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: 'salt', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: 'payload', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionClientData {
    return new SessionClientData().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionClientData {
    return new SessionClientData().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionClientData {
    return new SessionClientData().fromJsonString(jsonString, options)
  }

  static equals(
    a: SessionClientData | PlainMessage<SessionClientData> | undefined,
    b: SessionClientData | PlainMessage<SessionClientData> | undefined
  ): boolean {
    return proto3.util.equals(SessionClientData, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.CreateSessionRequest
 */
export class CreateSessionRequest extends Message<CreateSessionRequest> {
  /**
   * @generated from field: tech.monstrs.chats_system.session.v1alpha1.SessionClientEvent client = 1;
   */
  client?: SessionClientEvent

  constructor(data?: PartialMessage<CreateSessionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.CreateSessionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'client', kind: 'message', T: SessionClientEvent },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSessionRequest {
    return new CreateSessionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined,
    b: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateSessionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.CreateSessionResponse
 */
export class CreateSessionResponse extends Message<CreateSessionResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<CreateSessionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.CreateSessionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSessionResponse {
    return new CreateSessionResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSessionResponse {
    return new CreateSessionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined,
    b: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateSessionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.CloseSessionRequest
 */
export class CloseSessionRequest extends Message<CloseSessionRequest> {
  /**
   * @generated from field: tech.monstrs.chats_system.session.v1alpha1.SessionClientEvent client = 1;
   */
  client?: SessionClientEvent

  constructor(data?: PartialMessage<CloseSessionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.CloseSessionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'client', kind: 'message', T: SessionClientEvent },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseSessionRequest {
    return new CloseSessionRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseSessionRequest {
    return new CloseSessionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CloseSessionRequest {
    return new CloseSessionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CloseSessionRequest | PlainMessage<CloseSessionRequest> | undefined,
    b: CloseSessionRequest | PlainMessage<CloseSessionRequest> | undefined
  ): boolean {
    return proto3.util.equals(CloseSessionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.CloseSessionResponse
 */
export class CloseSessionResponse extends Message<CloseSessionResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<CloseSessionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.CloseSessionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseSessionResponse {
    return new CloseSessionResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseSessionResponse {
    return new CloseSessionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CloseSessionResponse {
    return new CloseSessionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CloseSessionResponse | PlainMessage<CloseSessionResponse> | undefined,
    b: CloseSessionResponse | PlainMessage<CloseSessionResponse> | undefined
  ): boolean {
    return proto3.util.equals(CloseSessionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.SendDataToSessionRequest
 */
export class SendDataToSessionRequest extends Message<SendDataToSessionRequest> {
  /**
   * @generated from field: tech.monstrs.chats_system.session.v1alpha1.SessionClientData data = 1;
   */
  data?: SessionClientData

  constructor(data?: PartialMessage<SendDataToSessionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.SendDataToSessionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'message', T: SessionClientData },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SendDataToSessionRequest {
    return new SendDataToSessionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SendDataToSessionRequest {
    return new SendDataToSessionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SendDataToSessionRequest {
    return new SendDataToSessionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendDataToSessionRequest | PlainMessage<SendDataToSessionRequest> | undefined,
    b: SendDataToSessionRequest | PlainMessage<SendDataToSessionRequest> | undefined
  ): boolean {
    return proto3.util.equals(SendDataToSessionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.chats_system.session.v1alpha1.SendDataToSessionResponse
 */
export class SendDataToSessionResponse extends Message<SendDataToSessionResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<SendDataToSessionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.session.v1alpha1.SendDataToSessionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SendDataToSessionResponse {
    return new SendDataToSessionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SendDataToSessionResponse {
    return new SendDataToSessionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SendDataToSessionResponse {
    return new SendDataToSessionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SendDataToSessionResponse | PlainMessage<SendDataToSessionResponse> | undefined,
    b: SendDataToSessionResponse | PlainMessage<SendDataToSessionResponse> | undefined
  ): boolean {
    return proto3.util.equals(SendDataToSessionResponse, a, b)
  }
}
