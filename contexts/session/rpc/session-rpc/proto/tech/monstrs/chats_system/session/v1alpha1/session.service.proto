syntax = "proto3";

package tech.monstrs.chats_system.session.v1alpha1;

import "tech/monstrs/chats_system/auth_session/v1alpha1/auth-session.service.proto";

service SessionService {
  rpc queryAuthKey (tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyRequest) returns (tech.monstrs.chats_system.auth_session.v1alpha1.QueryAuthKeyResponse) {}
  rpc setAuthKey (tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyRequest) returns (tech.monstrs.chats_system.auth_session.v1alpha1.SetAuthKeyResponse) {}
  rpc createSession (CreateSessionRequest) returns (CreateSessionResponse) {}
  rpc closeSession (CloseSessionRequest) returns (CloseSessionResponse) {}
  rpc sendDataToSession (SendDataToSessionRequest) returns (SendDataToSessionResponse) {}
}

message SessionClientEvent {
  string server_id = 1;
  int32 conn_type = 2;
  int64 auth_key_id = 3;
  int64 session_id = 4;
  string client_ip = 5;
}

message SessionClientData {
  string server_id = 1;
  int32 conn_type = 2;
  int64 auth_key_id = 3;
  int64 session_id = 4;
  string client_ip = 5;
  int32 quick_ack = 6;
  int64 salt = 7;
  bytes payload = 8;
}

message CreateSessionRequest {
  SessionClientEvent client = 1;
}

message CreateSessionResponse {
  bool success = 1;
}

message CloseSessionRequest {
  SessionClientEvent client = 1;
}

message CloseSessionResponse {
  bool success = 1;
}

message SendDataToSessionRequest {
  SessionClientData data = 1;
}

message SendDataToSessionResponse {
  bool success = 1;
}
