// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file tech/monstrs/chats_system/core/v1alpha1/rpc-error.types.proto (package tech.monstrs.chats_system.core.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

/**
 * @generated from message tech.monstrs.chats_system.core.v1alpha1.RpcError
 */
export class RpcError extends Message<RpcError> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: int32 code = 2;
   */
  code = 0

  /**
   * @generated from field: string message = 3;
   */
  message = ''

  /**
   * @generated from field: string name = 4;
   */
  name = ''

  constructor(data?: PartialMessage<RpcError>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.chats_system.core.v1alpha1.RpcError'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'code', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcError {
    return new RpcError().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJsonString(jsonString, options)
  }

  static equals(
    a: RpcError | PlainMessage<RpcError> | undefined,
    b: RpcError | PlainMessage<RpcError> | undefined
  ): boolean {
    return proto3.util.equals(RpcError, a, b)
  }
}
